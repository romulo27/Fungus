-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\world.dm. ----------------------
//This file is just for the necessary /world definition
//Try looking in game/world.dm
/**
 * # World
 *
 * Two possibilities exist: either we are alone in the Universe or we are not. Both are equally terrifying. ~ Arthur C. Clarke
 *
 * The byond world object stores some basic byond level config, and has a few hub specific procs for managing hub visiblity
 *
 * The world /New() is the root of where a round itself begins
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_compile_options.dm. ----------------------
//#define TESTING //By using the testing("message") proc you can create debug-feedback for people with this
//#define DATUMVAR_DEBUGGING_MODE //Enables the ability to cache datum vars and retrieve later for debugging which vars changed.
// Comment this out if you are debugging problems that might be obscured by custom error handling in world/Error
///Used to find the sources of harddels, quite laggy, don't be surpised if it freezes your client for a good while
//#define REFERENCE_TRACKING
///alternate to reftracking, extool variant
//#define EXTOOLS_REFERENCE_TRACKING
///Should we be logging our findings or not
///Used for doing dry runs of the reference finder, to test for feature completeness
//#define REFERENCE_TRACKING_DEBUG
///Run a lookup on things hard deleting by default.
//#define GC_FAILURE_HARD_LOOKUP
/*
* Enables debug messages for every single reaction step. This is 1 message per 0.5s for a SINGLE reaction. Useful for tracking down bugs/asking me for help in the main reaction handiler (equilibrium.dm).
*
* * Requires TESTING to be defined to work.
*/
//#define REAGENTS_TESTING
// #define VISUALIZE_ACTIVE_TURFS //Highlights atmos active turfs in green
// #define TRACK_MAX_SHARE //Allows max share tracking, for use in the atmos debugging ui
//#define REFERENCE_DOING_IT_LIVE
// compile the backend
// actually look for refs
//#define UNIT_TESTS //If this is uncommented, we do a single run though of the game setup and tear down process with unit tests in between
//Update this whenever you need to take advantage of more recent byond features
//Don't forget to update this part
//Additional code for the above flags.
//Hard del testing defines
// #define GC_FAILURE_HARD_LOOKUP // Uncomment this to have harddel reftracking in unit tests (takes 3-5min to run per single harddel)
// TGS performs its own build of dm.exe, but includes a prepended TGS define.
// A reasonable number of maximum overlays an object needs
// If you think you need more, rethink it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__byond_version_compat.dm. ----------------------
// So we want to have compile time guarantees these methods exist on local type, unfortunately 515 killed the .proc/procname and .verb/verbname syntax so we have to use nameof()
// For the record: GLOBAL_VERB_REF would be useless as verbs can't be global.
/// Call by name proc references, checks if the proc exists on either this type or as a global proc.
/// Call by name verb references, checks if the verb exists on either this type or as a global verb.
/// Call by name proc reference, checks if the proc exists on either the given type or as a global proc
/// Call by name verb reference, checks if the verb exists on either the given type or as a global verb
/// Call by name proc reference, checks if the proc is an existing global proc
/// Call by name proc references, checks if the proc exists on either this type or as a global proc.
/// Call by name verb references, checks if the verb exists on either this type or as a global verb.
/// Call by name proc reference, checks if the proc exists on either the given type or as a global proc
/// Call by name verb reference, checks if the verb exists on either the given type or as a global verb
/// Call by name proc reference, checks if the proc is an existing global proc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\admin.dm. ----------------------
// Clickable stat() button.
// Debug verbs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration_citadel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\controller.dm. ----------------------
//cleanup actions
//when we enter dmm_suite.load_map
//when we exit dmm_suite.load_map
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\failsafe.dm. ----------------------
/**
 * Failsafe
 *
 * Pretty much pokes the MC to make sure it's still alive.
 **/
//Emergency loop used when Master got deleted or the main loop exited while Defcon == 0
//Loop is driven externally so runtimes only cancel the current recovery attempt
///Recreate all SSs which will still cause data survive due to Recover(), the new Master will then find and take them from global.vars
///Delete all existing SS to basically start over
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\globals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\hooks.dm. ----------------------
/**
 * @file hooks.dm
 * Implements hooks, a simple way to run code on pre-defined events.
 */
/** @page hooks Code hooks
 * @section hooks Hooks
 * A hook is defined under /hook in the type tree.
 *
 * To add some code to be called by the hook, define a proc under the type, as so:
 * @code
/hook/foo/proc/bar()
	if(1)
		return 1 //Sucessful
	else
		return 0 //Error, or runtime.
 * @endcode
 * All hooks must return nonzero on success, as runtimes will force return null.
 */
/**
 * Calls a hook, executing every piece of code that's attached to it.
 * @param hook	Identifier of the hook to call.
 * @returns		1 if all hooked code runs successfully, 0 otherwise.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\master.dm. ----------------------
/**
 * StonedMC
 *
 * Designed to properly split up a given tick among subsystems
 * Note: if you read parts of this code and think "why is it doing it that way"
 * Odds are, there is a reason
 *
 **/
//This is the ABSOLUTE ONLY THING that should init globally like this
//2019 update: the failsafe,config and Global controllers also do it
//THIS IS THE INIT ORDER
//Master -> SSPreInit -> GLOB -> world -> config -> SSInit -> Failsafe
//GOT IT MEMORIZED?
// Returns 1 if we created a new mc, 0 if we couldn't due to a recent restart,
// -1 if we encountered a runtime trying to recreate it
// Please don't stuff random bullshit here,
// Make a subsystem, give it the SS_NO_FIRE flag, and do your work in it's Initialize()
// Starts the mc, and sticks around to restart it if the loop ever ends.
// Main loop.
// This is what decides if something should run.
// Run thru the queue of subsystems to run, running them while balancing out their allocated tick precentage
//resets the queue, and all subsystems, while filtering out the subsystem lists
// called if any mc's queue procs runtime or exit improperly.
/// Warns us that the end of tick byond map_update will be laggier then normal, so that we can just skip running subsystems this tick.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem.dm. ----------------------
/**
	* # Subsystem base class
	*
	* Defines a subsystem to be managed by the [Master Controller][/datum/controller/master]
	*
	* Simply define a child of this subsystem, using the [SUBSYSTEM_DEF] macro, and the MC will handle registration.
	* Changing the name is required
**/
//Do not override
///datum/controller/subsystem/New()
// Used to initialize the subsystem BEFORE the map has loaded
// Called AFTER Recover if that is called
// Prefer to use Initialize if possible
//This is used so the mc knows when the subsystem sleeps. do not override.
//previously, this would have been named 'process()' but that name is used everywhere for different things!
//fire() seems more suitable. This is the procedure that gets called every 'wait' deciseconds.
//Sleeping in here prevents future fires until returned.
/** Update next_fire for the next run.
 *  reset_time (bool) - Ignore things that would normally alter the next fire, like tick_overrun, and last_fire. (also resets postpone)
 */
//Queue it to run.
// (we loop thru a linked list until we get to the end or find the right point)
// (this lets us sort our run order correctly without having to re-sort the entire already sorted list)
/// Called after the config has been loaded or reloaded.
//used to initialize the subsystem AFTER the map has loaded
/// Causes the next "cycle" fires to be missed. Effect is accumulative but can reset by calling update_nextfire(reset_time = TRUE)
//usually called via datum/controller/subsystem/New() when replacing a subsystem (i.e. due to a recurring crash)
//should attempt to salvage what it can from the old instance of subsystem
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\configuration.dm. ----------------------
/// Your typical GET but returns a config.
/*
Policy file should be a json file with a single object.
Value is raw html.

Possible keywords :
Job titles / Assigned roles (ghost spawners for example) : Assistant , Captain , Ash Walker
Mob types : /mob/living/simple_animal/hostile/carp
Antagonist types : /datum/antagonist/highlander
Species types : /datum/species/lizard
special keywords defined in _DEFINES/admin.dm

Example config:
{
    "Assistant" : "Don't kill everyone",
    "/datum/antagonist/highlander" : "<b>Kill everyone</b>",
    "Ash Walker" : "Kill all spacemans"
}

*/
//Message admins when you can.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\config_entry.dm. ----------------------
//snowflake for donator things being on one line smh
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\admin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\alert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\antag_rep.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\bot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\comms.dm. ----------------------
/// cit config
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\connections.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\dbconfig.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\debris.dm. ----------------------
/// Amount of dirtyness tiles need to spawn dirt.
/// Alpha dirt starts at
/// Dirtyness multiplier for making turfs dirty
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\donator.dm. ----------------------
//If we're in the middle of a config load, only do the regeneration afterwards to prevent this from wasting a massive amount of CPU for list regenerations.
//This is kinda weird in that the config entries are defined here but all the handling/calculations are in __HELPERS/donator_groupings.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\dynamic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\fetish_content.dm. ----------------------
//Body size configs, the feature will be disabled if both min and max have the same value.
//Penalties given to characters with a body size smaller than this value,
//to compensate for their smaller hitbox.
//To disable, just make sure the value is lower than 'body_size_min'
//multiplicative slowdown multiplier. See 'dna.update_body_size' for the operation.
//doesn't apply to floating or crawling mobs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\gamemodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\general.dm. ----------------------
//Allows players to set a hexadecimal color of their choice as skin tone, on top of the standard ones.
///Initial loadout points
/**
  * Enables the FoV component, which hides objects and mobs behind the parent from their sight, unless they turn around, duh.
  * Camera mobs, AIs, ghosts and some other are of course exempt from this. This also doesn't influence simplemob AI, for the best.
  */
//Shuttle size limiter
//wound config stuff (increases the max injury roll, making injuries more likely)
//adds a set amount to any injury rolls on a limb using get_damage() multiplied by this number
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\jexp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\logging.dm. ----------------------
/// log OOC channel
/// log login/logout
/// Config entry which special logging of failed logins under suspicious circumstances.
/// log client say
/// log admin actions
/// log prayers
/// log lawchanges
/// log game events
/// log mech data
/// log virology data
/// log voting
/// log crafting
/// log client whisper
/// log attack messages
/// log attack messages
/// log emotes
/// log admin chat messages
/// log shuttle related actions, ie shuttle computers, shuttle manipulator, emergency console
/// log pda messages
/// log telecomms messages
/// log economy
/// log certain expliotable parrots and other such fun things in a JSON file of twitter valid phrases.
/// log all world.Topic() calls
/// log crew manifest to seperate file
/// log roundstart divide occupations debug information to a file
/// log photos taken by players with a camera
/// This is... shitcode, literally same as above, if one of them is inactive, won't log at all, PLEASE FUCKING REMOVE THIS.
/// forces log_href for tgui
/// The "cooldown" time for each occurrence of a unique error
/// How many occurrences before the next will silence them
/// How long a unique error will be silenced for
/// How long to wait between messaging admins about occurrences of a unique error
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\movespeed.dm. ----------------------
/////////////////////////////////////////////////Outdated move delay
/////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\persistence.dm. ----------------------
/// Whether or not to use the persistence system for cleanable objects
/// Whether or not to nuke all roundstart debris that isn't due to persistence if the above is true
/// Max amount of objects to store, total
/// Max amount of objects to store per type
/// Wipe dirty stuff on nuke
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\plushies.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\policy.dm. ----------------------
/// Seconds for CMD on defib-with-memory-loss policy config to display instead of defib-intact config
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\resources.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\respawns.dm. ----------------------
/// Allows usage of respawn system
/// Minutes before allowing respawns.
/// Minutes before allowing respawn, if user cryo'd.
/// Allows respawning as non-assistant. Overrides all others of this type.
/// Allows respawning as a combat role, defined as security/head.
/// Allows respawning as the same character as a previous life
/// Observing penalizes for respawns, not just joining.
/// Minutes from roundstart before someone can respawn
/// Gamemode config tags that are banned from respawning
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\server.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\stamina_combat.dm. ----------------------
/// Maximum stamina buffer
/// Seconds until percent_regeneration_out_of_combat kicks in
/// Base regeneration per second
/// After out_of_combat_timer elapses, additionally regenerate this percent of total stamina per second. Unaffected by combat mode.
/// Seconds after an action for which your regeneration is penalized
/// Factor to multiply by for penalizing post-action-stamina-regen
/// Factor to multiply by for stamina usage past buffer into health
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\threat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\urls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\configuration\entries\vote.dm. ----------------------
/// Length of time before the first autotransfer vote is called (deciseconds, default 2 hours)
/// Set to 0 to disable the subsystem altogether.
///length of time to wait before subsequent autotransfer votes (deciseconds, default 30 minutes)
/// maximum extensions until the round autoends.
/// Set to 0 to force automatic crew transfer after the 'vote_autotransfer_initial' elapsed.
/// Set to -1 to disable the maximum extensions cap.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\achievements.dm. ----------------------
//Update the metadata if any are behind
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\activity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\air.dm. ----------------------
//this can't be done with setup_atmos_machinery() because
//	all atmos machinery has to initalize before the first
//	pipenet can be built.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\air_turfs.dm. ----------------------
//WHAT IF WE TAKE THE ACTIVE TURF PROCESSING AND PUSH IT SOMEWHERE ELSE!!!
/*
SUBSYSTEM_DEF(air_turfs)
	name = "Atmospherics - Turfs"
	init_order = INIT_ORDER_AIR_TURFS
	priority = FIRE_PRIORITY_AIR_TURFS
	wait = 2
	flags = SS_BACKGROUND
	runlevels = RUNLEVEL_GAME | RUNLEVEL_POSTGAME
	var/list/currentrun = list()

/datum/controller/subsystem/air_turfs/fire(resumed = 0)
	var/fire_count = times_fired
	if (!resumed)
		src.currentrun = SSair.active_turfs.Copy()
	//cache for sanic speed (lists are references anyways)
	var/list/currentrun = src.currentrun
	while(currentrun.len)
		var/turf/open/T = currentrun[currentrun.len]
		currentrun.len--
		if (T)
			T.process_cell(fire_count)
		if (MC_TICK_CHECK)
			return
	resumed = 0
	return
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\assets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\atoms.dm. ----------------------
/// Init this specific atom
/// Prepares an atom to be deleted once the atoms SS is initialized.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\augury.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\autotransfer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\blackbox.dm. ----------------------
//poll population
//no touchie
//Recorded on subsystem shutdown
/*
feedback data can be recorded in 5 formats:
"text"
	used for simple single-string records i.e. the current map
	further calls to the same key will append saved data unless the overwrite argument is true or it already exists
	when encoded calls made with overwrite will lack square brackets
	calls: SSblackbox.record_feedback("text", "example", 1, "sample text")
			SSblackbox.record_feedback("text", "example", 1, "other text")
	json: {"data":["sample text","other text"]}
"amount"
	used to record simple counts of data i.e. the number of ahelps received
	further calls to the same key will add or subtract (if increment argument is a negative) from the saved amount
	calls: SSblackbox.record_feedback("amount", "example", 8)
			SSblackbox.record_feedback("amount", "example", 2)
	json: {"data":10}
"tally"
	used to track the number of occurances of multiple related values i.e. how many times each type of gun is fired
	further calls to the same key will:
		add or subtract from the saved value of the data key if it already exists
		append the key and it's value if it doesn't exist
	calls: SSblackbox.record_feedback("tally", "example", 1, "sample data")
			SSblackbox.record_feedback("tally", "example", 4, "sample data")
			SSblackbox.record_feedback("tally", "example", 2, "other data")
	json: {"data":{"sample data":5,"other data":2}}
"nested tally"
	used to track the number of occurances of structured semi-relational values i.e. the results of arcade machines
	similar to running total, but related values are nested in a multi-dimensional array built
	the final element in the data list is used as the tracking key, all prior elements are used for nesting
	all data list elements must be strings
	further calls to the same key will:
		add or subtract from the saved value of the data key if it already exists in the same multi-dimensional position
		append the key and it's value if it doesn't exist
	calls: SSblackbox.record_feedback("nested tally", "example", 1, list("fruit", "orange", "apricot"))
			SSblackbox.record_feedback("nested tally", "example", 2, list("fruit", "orange", "orange"))
			SSblackbox.record_feedback("nested tally", "example", 3, list("fruit", "orange", "apricot"))
			SSblackbox.record_feedback("nested tally", "example", 10, list("fruit", "red", "apple"))
			SSblackbox.record_feedback("nested tally", "example", 1, list("vegetable", "orange", "carrot"))
	json: {"data":{"fruit":{"orange":{"apricot":4,"orange":2},"red":{"apple":10}},"vegetable":{"orange":{"carrot":1}}}}
	tracking values associated with a number can't merge with a nesting value, trying to do so will append the list
	call: SSblackbox.record_feedback("nested tally", "example", 3, list("fruit", "orange"))
	json: {"data":{"fruit":{"orange":{"apricot":4,"orange":2},"red":{"apple":10},"orange":3},"vegetable":{"orange":{"carrot":1}}}}
"associative"
	used to record text that's associated with a value i.e. coordinates
	further calls to the same key will append a new list to existing data
	calls: SSblackbox.record_feedback("associative", "example", 1, list("text" = "example", "path" = /obj/item, "number" = 4))
			SSblackbox.record_feedback("associative", "example", 1, list("number" = 7, "text" = "example", "other text" = "sample"))
	json: {"data":{"1":{"text":"example","path":"/obj/item","number":"4"},"2":{"number":"7","text":"example","other text":"sample"}}}

Versioning
	If the format of a feedback variable is ever changed, i.e. how many levels of nesting are used or a new type of data is added to it, add it to the versions list
	When feedback is being saved if a key is in the versions list the value specified there will be used, otherwise all keys are assumed to be version = 1
	versions is an associative list, remember to use the same string in it as defined on a feedback variable, example:
	list/versions = list("round_end_stats" = 4,
						"admin_toggle" = 2,
						"gun_fired" = 2)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\blackmarket.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\callback.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\chat.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\communications.dm. ----------------------
/**
 * Check if a mob can call an emergency meeting
 *
 * Should only really happen during april fools.
 * Checks to see that it's been at least 5 minutes since the last emergency meeting call.
 * Arguments:
 * * user - Mob who called the meeting
 */
/**
 * Call an emergency meeting
 *
 * Communications subsystem wrapper for the call_emergency_meeting world proc.
 * Checks to make sure the proc can be called, and handles
 * relevant logging and timing. See that proc definition for more detail.
 * Arguments:
 * * user - Mob who called the meeting
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\dbcore.dm. ----------------------
//nu
/*
Takes a list of rows (each row being an associated list of column => value) and inserts them via a single mass query.
Rows missing columns present in other rows will resolve to SQL NULL
You are expected to do your own escaping of the data, and expected to provide your own quotes for strings.
The duplicate_key arg can be true to automatically generate this part of the query
	or set to a string that is appended to the end of the query
Ignore_errors instructes mysql to continue inserting rows if some of them have errors.
	the erroneous row(s) aren't inserted and there isn't really any way to know why or why errored
Delayed insert mode was removed in mysql 7 and only works with MyISAM type tables,
	It was included because it is still supported in mariadb.
	It does not work with duplicate_key and the mysql server ignores it in those cases
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\dcs.dm. ----------------------
/****
	* Generates an id for bespoke elements when given the argument list
	* Generating the id here is a bit complex because we need to support named arguments
	* Named arguments can appear in any order and we need them to appear after ordered arguments
	* We assume that no one will pass in a named argument with a value of null
	**/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\disease.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\economy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\events.dm. ----------------------
//checks if we should select a random event yet, and reschedules if necessary
//decides which world.time we should select another random event at.
//selects a random event based on whether it can occur and it's 'weight'(probability)
/*
//////////////
// HOLIDAYS //
//////////////
//Uncommenting ALLOW_HOLIDAYS in config.txt will enable holidays

//It's easy to add stuff. Just add a holiday datum in code/modules/holiday/holidays.dm
//You can then check if it's a special day in any code in the game by doing if(SSevents.holidays["Groundhog Day"])

//You can also make holiday random events easily thanks to Pete/Gia's system.
//simply make a random event normally, then assign it a holidayID string which matches the holiday's name.
//Anything with a holidayID, which isn't in the holidays list, will never occur.

//Please, Don't spam stuff up with stupid stuff (key example being april-fools Pooh/ERP/etc),
//And don't forget: CHECK YOUR CODE!!!! We don't want any zero-day bugs which happen only on holidays and never get found/fixed!

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//ALSO, MOST IMPORTANTLY: Don't add stupid stuff! Discuss bonus content with Project-Heads first please!//
//////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
//sets up the holidays and holidays list
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\explosions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\fail2topic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\fire_burning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\fluid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\garbage.dm. ----------------------
/*!
## Debugging GC issues

In order to debug `qdel()` failures, there are several tools available.
To enable these tools, define `TESTING` in [_compile_options.dm](https://github.com/tgstation/-tg-station/blob/master/code/_compile_options.dm).

First is a verb called "Find References", which lists **every** refererence to an object in the world. This allows you to track down any indirect or obfuscated references that you might have missed.

Complementing this is another verb, "qdel() then Find References".
This does exactly what you'd expect; it calls `qdel()` on the object and then it finds all references remaining.
This is great, because it means that `Destroy()` will have been called before it starts to find references,
so the only references you'll find will be the ones preventing the object from `qdel()`ing gracefully.

If you have a datum or something you are not destroying directly (say via the singulo),
the next tool is `QDEL_HINT_FINDREFERENCE`. You can return this in `Destroy()` (where you would normally `return ..()`),
to print a list of references once it enters the GC queue.

Finally is a verb, "Show qdel() Log", which shows the deletion log that the garbage subsystem keeps. This is helpful if you are having race conditions or need to review the order of deletions.

Note that for any of these tools to work `TESTING` must be defined.
By using these methods of finding references, you can make your life far, far easier when dealing with `qdel()` failures.
*/
//this is mainly to separate things profile wise.
/// Qdel Item: Holds statistics on each type that passes thru qdel
/// Should be treated as a replacement for the 'del' keyword.
///
/// Datums passed to this will be given a chance to clean up references to allow the GC to collect them.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\holodeck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\icon_smooth.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\idlenpcpool.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\input.dm. ----------------------
/// Sets up the key list for classic mode for when badmins screw up vv's.
// Badmins just wanna have fun ♪
/// *sigh
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\ipintel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\job.dm. ----------------------
//This proc is called before the level loop of DivideOccupations() and will try to select a head, ignoring ALL non-head preferences for every level until
//it locates a head or runs out of levels to check
//This is basically to ensure that there's atleast a few heads in the round
//This proc is called at the start of the level loop of DivideOccupations() and will cause head jobs to be checked before any other jobs of the same level
//This is also to ensure we get as many heads as possible
/** Proc DivideOccupations
 *  fills var "assigned_role" for all ready players.
 *  This proc must not have any side effect besides of modifying "assigned_role".
 **/
//We couldn't find a job from prefs for this guy.
//Gives the player the stuff he should have with his rank
///////////////////////////////////
//Keeps track of all living heads//
///////////////////////////////////
////////////////////////////
//Keeps track of all heads//
////////////////////////////
//////////////////////////////////////////////
//Keeps track of all living security members//
//////////////////////////////////////////////
////////////////////////////////////////
//Keeps track of all  security members//
////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\jukeboxes.dm. ----------------------
//As a brief warning to all those who dare tread upon these grounds:
//The bulk of this code here was written years ago, back in the days of 512.
//We were incredibly drunk back then. And nowadays, we've found that being drunk is a hard requirement for working with this code.
//So if you're here to make changes? Brandish a glass. There are many sins here, but it's exactly as engineered as it needs to be.
//We physically won't be able to tell you what half of this code does. The only thing that'll help you here is the ballmer peak.
//Bottoms up, friend. And be sure to drink responsibly. Be sure to fetch some water, too; it eases the hangover. - Bhijn & Myr
// Jukelist indices
//Updates jukebox by transferring to different object or modifying falloff.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\language.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\lighting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\machines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\mapping.dm. ----------------------
//dlete dis once #39770 is resolved
/* Nuke threats, for making the blue tiles on the station go RED
   Used by the AI doomsday and the self destruct nuke.
*/
//Manual loading of away missions.
//This is not for wiping reserved levels, use wipe_reservations() for that.
//DO NOT CALL THIS PROC DIRECTLY, CALL wipe_reservations().
///Initialize all biomes, assoc as type || instance
/**
  * Generates an obfuscated but constant id for an original id for cases where you don't want players codediving for an id.
  * WARNING: MAKE SURE PLAYERS ARE NOT ABLE TO ACCESS THIS. To save performance, it's just secret + an incrementing number. Very guessable if you know what the secret is.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\materials.dm. ----------------------
/*! How material datums work
Materials are now instanced datums, with an associative list of them being kept in SSmaterials. We only instance the materials once and then re-use these instances for everything.

These materials call on_applied() on whatever item they are applied to, common effects are adding components, changing color and changing description. This allows us to differentiate items based on the material they are made out of.area

*/
///Ran on initialize, populated the materials and materials_by_category dictionaries with their appropiate vars (See these variables for more info)
///Returns a list to be used as an object's custom_materials. Lists will be cached and re-used based on the parameters.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\minimaps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\minimum_spawns.dm. ----------------------
// step 1: check for which list(s) to use - done
// step 2: check for caves - done
// step 3: check for mobs - done
// step 4: start throwing shit down - done
// step 5: snaxi support - done?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\minor_mapping.dm. ----------------------
// /datum/controller/subsystem/minor_mapping/proc/place_satchels(amount=10)
// 	var/list/turfs = find_satchel_suitable_turfs()
// 	while(turfs.len && amount > 0)
// 		var/turf/T = pick_n_take(turfs)
// 		var/obj/item/storage/backpack/satchel/flat/F = new(T)
// 		SEND_SIGNAL(F, COMSIG_OBJ_HIDE, T.intact)
// 		amount--
// /proc/find_satchel_suitable_turfs()
// 	var/list/suitable = list()
// 	for(var/z in SSmapping.levels_by_trait(ZTRAIT_STATION))
// 		for(var/t in block(locate(1,1,z), locate(world.maxx,world.maxy,z)))
// 			if(isfloorturf(t) && !isplatingturf(t))
// 				suitable += t
// 	return shuffle(suitable)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\mobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\nightshift.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\npcpool.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\overlays.dm. ----------------------
//TODO: Better solution for these?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\pai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\parallax.dm. ----------------------
/**
 * Gets parallax type for zlevel.
 */
/**
 * Gets parallax for zlevel.
 */
/**
 * Gets parallax added vis contents for zlevel
 */
/**
 * Gets parallax motion for a zlevel
 *
 * Returns null or list(speed, dir deg clockwise from north, windup, turnrate)
 * THE RETURNED LIST MUST BE A 4-TUPLE, OR PARALLAX WILL CRASH.
 * DO NOT SCREW WITH THIS UNLESS YOU KNOW WHAT YOU ARE DOING.
 *
 * This will override area motion
 */
/**
 * updates all parallax for clients on a z
 */
/**
 * resets all parallax for clients on a z
 */
/**
 * updates motion of all clients on z
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\pathfinder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\profiler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\radiation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\research.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\runechat.dm. ----------------------
/// Controls how many buckets should be kept, each representing a tick. (30 seconds worth)
/// Helper for getting the correct bucket for a given chatmessage
/// Gets the maximum time at which messages will be handled in buckets, used for deferring to secondary queue
/**
 * # Runechat Subsystem
 *
 * Maintains a timer-like system to handle destruction of runechat messages. Much of this code is modeled
 * after or adapted from the timer subsystem.
 *
 * Note that this has the same structure for storing and queueing messages as the timer subsystem does
 * for handling timers: the bucket_list is a list of chatmessage datums, each of which are the head
 * of a circularly linked list. Any given index in bucket_list could be null, representing an empty bucket.
 */
/**
 * Enters the runechat subsystem with this chatmessage, inserting it into the end-of-life queue
 *
 * This will also account for a chatmessage already being registered, and in which case
 * the position will be updated to remove it from the previous location if necessary
 *
 * Arguments:
 * * new_sched_destruction Optional, when provided is used to update an existing message with the new specified time
 */
/**
 * Removes this chatmessage datum from the runechat subsystem
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\security_level.dm. ----------------------
// NOT THE SAME AS TG! THIS IS BAREMETAL JUST TO MAKE COMSIGS WORK!
/**
 * Sets a new security level as our current level
 *
 * This is how everything should change the security level.
 *
 * Arguments:
 * * new_level - The new security level that will become our current level
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\server_maint.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\shuttle.dm. ----------------------
/// Check if we can call the evac shuttle.
/// Returns TRUE if we can. Otherwise, returns a string detailing the problem.
// Called when an emergency shuttle mobile docking port is
// destroyed, which will only happen with admin intervention
//try to move/request to dockHome if possible, otherwise dockAway. Mainly used for admin buttons
/*
	to_chat(world, "The attempted transit dock will be [transit_width] width, and \)
		[transit_height] in height. The travel dir is [travel_dir]."
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\sounds.dm. ----------------------
/// Removes a channel from using list.
/// Frees all the channels a datum is using.
/// Frees all datumless channels
/// NO AUTOMATIC CLEANUP - If you use this, you better manually free it later! Returns an integer for channel.
/// Reserves a channel for a datum. Automatic cleanup only when the datum is deleted. Returns an integer for channel.
/**
 * Reserves a channel and updates the datastructure. Private proc.
 */
/**
 * Frees a channel and updates the datastructure. Private proc.
 */
/// Random available channel, returns text.
/// Random available channel, returns number
/// How many channels we have left.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\sound_loops.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\spacedrift.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\statpanel.dm. ----------------------
/// verbs that send information from the browser UI
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\stickyban.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\sun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\tgui.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui subsystem
 *
 * Contains all tgui state and subsystem code.
 *
 */
/**
 * public
 *
 * Requests a usable tgui window from the pool.
 * Returns null if pool was exhausted.
 *
 * required user mob
 * return datum/tgui
 */
/**
 * public
 *
 * Force closes all tgui windows.
 *
 * required user mob
 */
/**
 * public
 *
 * Force closes the tgui window by window_id.
 *
 * required user mob
 * required window_id string
 */
/**
 * public
 *
 * Try to find an instance of a UI, and push an update to it.
 *
 * required user mob The mob who opened/is using the UI.
 * required src_object datum The object/datum which owns the UI.
 * optional ui datum/tgui The UI to be updated, if it exists.
 * optional force_open bool If the UI should be re-opened instead of updated.
 *
 * return datum/tgui The found UI.
 */
/**
 * public
 *
 * Get a open UI given a user and src_object.
 *
 * required user mob The mob who opened/is using the UI.
 * required src_object datum The object/datum which owns the UI.
 *
 * return datum/tgui The found UI.
 */
/**
 * public
 *
 * Update all UIs attached to src_object.
 *
 * required src_object datum The object/datum which owns the UIs.
 *
 * return int The number of UIs updated.
 */
/**
 * public
 *
 * Close all UIs attached to src_object.
 *
 * required src_object datum The object/datum which owns the UIs.
 *
 * return int The number of UIs closed.
 */
/**
 * public
 *
 * Close all UIs regardless of their attachment to src_object.
 *
 * return int The number of UIs closed.
 */
/**
 * public
 *
 * Update all UIs belonging to a user.
 *
 * required user mob The mob who opened/is using the UI.
 * optional src_object datum If provided, only update UIs belonging this src_object.
 *
 * return int The number of UIs updated.
 */
/**
 * public
 *
 * Close all UIs belonging to a user.
 *
 * required user mob The mob who opened/is using the UI.
 * optional src_object datum If provided, only close UIs belonging this src_object.
 *
 * return int The number of UIs closed.
 */
/**
 * private
 *
 * Add a UI to the list of open UIs.
 *
 * required ui datum/tgui The UI to be added.
 */
/**
 * private
 *
 * Remove a UI from the list of open UIs.
 *
 * required ui datum/tgui The UI to be removed.
 *
 * return bool If the UI was removed or not.
 */
/**
 * private
 *
 * Handle client logout, by closing all their UIs.
 *
 * required user mob The mob which logged out.
 *
 * return int The number of UIs closed.
 */
/**
 * private
 *
 * Handle clients switching mobs, by transferring their UIs.
 *
 * required user source The client's original mob.
 * required user target The client's new mob.
 *
 * return bool If the UIs were transferred.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\throwing.dm. ----------------------
///Defines the datum behavior on the thrownthing's qdeletion event.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\ticker.dm. ----------------------
//These callbacks will fire after roundstart key transfer
//These callbacks will fire before roundend report
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\timer.dm. ----------------------
/// Controls how many buckets should be kept, each representing a tick. (1 minutes worth)
/// Helper for getting the correct bucket for a given timer
/// Gets the maximum time at which timers will be invoked from buckets, used for deferring to secondary queue
/// Max float with integer precision
/**
 * # Timer Subsystem
 *
 * Handles creation, callbacks, and destruction of timed events.
 *
 * It is important to understand the buckets used in the timer subsystem are just a series of circular doubly-linked
 * lists. The object at a given index in bucket_list is a /datum/timedevent, the head of a circular list, which has prev
 * and next references for the respective elements in that bucket's circular list.
 */
/**
 * Generates a string with details about the timed event for debugging purposes
 */
/**
 * Destroys the existing buckets and creates new buckets from the existing timed events
 */
/**
 * # Timed Event
 *
 * This is the actual timer, it contains the callback and necessary data to maintain
 * the timer.
 *
 * See the documentation for the timer subsystem for an explanation of the buckets referenced
 * below in next and prev
 */
/**
 * Removes this timed event from any relevant buckets, or the secondary queue
 */
/**
 * Attempts to add this timed event to a bucket, will enter the secondary queue
 * if there are no appropriate buckets at this time.
 *
 * Secondary queueing of timed events will occur when the timespan covered by the existing
 * buckets is exceeded by the time at which this timed event is scheduled to be invoked.
 * If the timed event is tracking client time, it will be added to a special bucket.
 */
/**
 * Returns a string of the type of the callback for this timer
 */
/**
 * Create a new timer and insert it in the queue.
 * You should not call this directly, and should instead use the addtimer macro, which includes source information.
 *
 * Arguments:
 * * callback the callback to call on timer finish
 * * wait deciseconds to run the timer for
 * * flags flags for this timer, see: code\__DEFINES\subsystems.dm
 */
/**
 * Delete a timer
 *
 * Arguments:
 * * id a timerid or a /datum/timedevent
 */
/**
 * Get the remaining deciseconds on a timer
 *
 * Arguments:
 * * id a timerid or a /datum/timedevent
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\time_track.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\title.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\traumas.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\vis_overlays.dm. ----------------------
//the "thing" var can be anything with vis_contents which includes images - in the future someone should totally allow vis overlays to be passed in as an arg instead of all this bullshit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\vore.dm. ----------------------
//
// Bellies subsystem - Process vore bellies
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\vote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\cleanable_debris.dm. ----------------------
/**
 * Persistence for cleanable debris.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\panic_bunker.dm. ----------------------
/**
 * Persists panic bunker whitelisting for a configured period of time
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\polly_parrot.dm. ----------------------
/**
 * Persists polly messages across rounds
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\recent_votes_etc.dm. ----------------------
/**
 * Stores recently played gamemodes, maps, etc.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\secret_satchels.dm. ----------------------
/**
 * Secret satchel persistence - allows storing of items in underfloor satchels that's loaded later.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\trophies.dm. ----------------------
/**
 * Stores trophies in curator display cases
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\persistence\_persistence.dm. ----------------------
/**
 * Gets the persistence path of the current map.
 */
/**
 * Loads persistent data relevant to the server: Configurations, past gamemodes, votes, antag rep, etc
 */
/**
 * Saves persistent data relevant to the server: Configurations, past gamemodes, votes, antag rep, etc
 */
/**
 * Loads persistent data relevant to the game in general: Photos, etc
 *
 * Legacy map persistence systems also use this.
 */
/**
 * Saves persistent data relevant to the game in general: Photos, etc
 *
 * Legacy map persistence systems also use this.
 */
/**
 * Loads persistent data relevant to the current map: Objects, etc.
 */
/**
 * Saves persistent data relevant to the current map: Objects, etc.
 */
//		var/start = antag_rep[p_ckey]
//		WARNING("AR_DEBUG: [p_ckey]: Committed [antag_rep_change[p_ckey]] reputation, going from [start] to [antag_rep[p_ckey]]")
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\chemistry.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\circuit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\fastprocess.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\fields.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\huds.dm. ----------------------
// Smooth HUD updates, but low priority
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\instruments.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\nanites.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\networks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\obj.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\processing.dm. ----------------------
//Used to process objects.
/**
 * This proc is called on a datum on every "cycle" if it is being processed by a subsystem. The time between each cycle is determined by the subsystem's "wait" setting.
 * You can start and stop processing a datum using the START_PROCESSING and STOP_PROCESSING defines.
 *
 * Since the wait setting of a subsystem can be changed at any time, it is important that any rate-of-change that you implement in this proc is multiplied by the delta_time that is sent as a parameter,
 * Additionally, any "prob" you use in this proc should instead use the DT_PROB define to make sure that the final probability per second stays the same even if the subsystem's wait is altered.
 * Examples where this must be considered:
 * - Implementing a cooldown timer, use `mytimer -= delta_time`, not `mytimer -= 1`. This way, `mytimer` will always have the unit of seconds
 * - Damaging a mob, do `L.adjustFireLoss(20 * delta_time)`, not `L.adjustFireLoss(20)`. This way, the damage per second stays constant even if the wait of the subsystem is changed
 * - Probability of something happening, do `if(DT_PROB(25, delta_time))`, not `if(prob(25))`. This way, if the subsystem wait is e.g. lowered, there won't be a higher chance of this event happening per second
 *
 * If you override this do not call parent, as it will return PROCESS_KILL. This is done to prevent objects that dont override process() from staying in the processing list
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\projectiles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\quirks.dm. ----------------------
//Used to process and handle roundstart quirks
// - Quirk strings are used for faster checking in code
// - Quirk datums are stored and hold different effects, as well as being a vector for applying trait string
// Sort by Positive, Negative, Neutral; and then by name
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\station.dm. ----------------------
///Rolls for the amount of traits and adds them to the traits list
///Picks traits of a specific category (e.g. bad or good) and a specified amount, then initializes them and adds them to the list of traits.
///Creates a given trait of a specific type, while also removing any blacklisted ones from the future pool.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\status_effects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\weather.dm. ----------------------
//Used for all kinds of weather, ex. lavaland ash storms.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\controllers\subsystem\processing\wet_floors.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\accents.dm. ----------------------
//bone tongues either have the sans accent or the papyrus accent
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\action.dm. ----------------------
//Presets for item actions
//MGS Box
//Handles open and closing the box
//Preset for spells
//Preset for general and toggled actions
//Preset for an action with a cooldown
//surf_ss13
//Small sprites
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ai_laws.dm. ----------------------
/* Initializers */
/* General ai_law functions */
/**
  * Generates a list of all laws on this datum, including rendered HTML tags if required
  *
  * Arguments:
  * * include_zeroth - Operator that controls if law 0 or law 666 is returned in the set
  * * show_numbers - Operator that controls if law numbers are prepended to the returned laws
  * * render_html - Operator controlling if HTML tags are rendered on the returned laws
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\armor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\bark.dm. ----------------------
//Datums for barks and bark accessories
// So the basic jist of the sound design here: We make use primarily of shorter instrument samples for barks. We would've went with animalese instead, but doing so would've involved quite a bit of overhead to saycode.
// Short instrument samples tend to sound surprisingly nice for barks, being able to be played in rapid succession without being outright obnoxious.
// It isn't just instruments that work well here, however. Anything that works well as a stab? Short attack, no sustain, a decent amount of release? Also works extremely well for barks.
// Genetics-only/admin-only sounds. These either clash hard with the audio design of the above sounds, or have some other form of audio design issue, but aren't *too* awful as a sometimes thing.
// Rule of fun very much applies to this section. Audio design is extremely important for the above section, but down here? No gods, no masters, pure anarchy.
// The min/max variables simply don't apply to these, as only chargen cares about them. As such, there's no need to define those.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\beam.dm. ----------------------
//Beam Datum and effect
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\beepsky_fashion.dm. ----------------------
//similar to dog_fashion, but for beepsky, who has far more refined fashion tastes
//actual fashions from here on out
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\browser.dm. ----------------------
//" This is here because else the rest of the file looks like a string in notepad++.
/**
 * **DEPRECATED: USE tgui_alert(...) INSTEAD**
 *
 * Designed as a drop in replacement for alert(); functions the same. (outside of needing User specified)
 * Arguments:
 * * User - The user to show the alert to.
 * * Message - The textual body of the alert.
 * * Title - The title of the alert's window.
 * * Button1 - The first button option.
 * * Button2 - The second button option.
 * * Button3 - The third button option.
 * * StealFocus - Boolean operator controlling if the alert will steal the user's window focus.
 * * Timeout - The timeout of the window, after which no responses will be valid.
 */
//Same shit, but it returns the button number, could at some point support unlimited button amounts.
// Registers the on-close verb for a browse window (client/verb/.windowclose)
// this will be called when the close-button of a window is pressed.
//
// This is usually only needed for devices that regularly update the browse window,
// e.g. canisters, timers, etc.
//
// windowid should be the specified window name
// e.g. code is : user << browse(text, "window=fred")
// then use : onclose(user, "fred")
//
// Optionally, specify the "ref" parameter as the controlled atom (usually src)
// to pass a "close=1" parameter to the atom's Topic() proc for special handling.
// Otherwise, the user mob's machine var will be reset directly.
//
// the on-close client verb
// called when a browser popup window is closed after registering with proc/onclose()
// if a valid atom reference is supplied, call the atom's Topic() with "close=1"
// otherwise, just reset the client mob's machine var.
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\callback.dm. ----------------------
/**
 *# Callback Datums
 *A datum that holds a proc to be called on another object, used to track proccalls to other objects
 *
 * ## USAGE
 *
 * ```
 * var/datum/callback/C = new(object|null, /proc/type/path|"procstring", arg1, arg2, ... argn)
 * var/timerid = addtimer(C, time, timertype)
 * you can also use the compiler define shorthand
 * var/timerid = addtimer(CALLBACK(object|null, /proc/type/path|procstring, arg1, arg2, ... argn), time, timertype)
 * ```
 *
 * Note: proc strings can only be given for datum proc calls, global procs must be proc paths
 *
 * Also proc strings are strongly advised against because they don't compile error if the proc stops existing
 *
 * In some cases you can provide a shortform of the procname, see the proc typepath shortcuts documentation below
 *
 * ## INVOKING THE CALLBACK
 *`var/result = C.Invoke(args, to, add)` additional args are added after the ones given when the callback was created
 *
 * `var/result = C.InvokeAsync(args, to, add)` Asyncronous - returns . on the first sleep then continues on in the background
 * after the sleep/block ends, otherwise operates normally.
 *
 * ## PROC TYPEPATH SHORTCUTS
 * (these operate on paths, not types, so to these shortcuts, datum is NOT a parent of atom, etc...)
 *
 * ### global proc while in another global proc:
 * .procname
 *
 * `CALLBACK(GLOBAL_PROC, .some_proc_here)`
 *
 * ### proc defined on current(src) object (when in a /proc/ and not an override) OR overridden at src or any of it's parents:
 * .procname
 *
 * `CALLBACK(src, .some_proc_here)`
 *
 * ### when the above doesn't apply:
 *.proc/procname
 *
 * `CALLBACK(src, .proc/some_proc_here)`
 *
 *
 * proc defined on a parent of a some type
 *
 * `/some/type/.proc/some_proc_here`
 *
 * Otherwise you must always provide the full typepath of the proc (/type/of/thing/proc/procname)
 */
/**
 * Create a new callback datum
 *
 * Arguments
 * * thingtocall the object to call the proc on
 * * proctocall the proc to call on the target object
 * * ... an optional list of extra arguments to pass to the proc
 */
/**
 * Immediately Invoke proctocall on thingtocall, with waitfor set to false
 *
 * Arguments:
 * * thingtocall Object to call on
 * * proctocall Proc to call on that object
 * * ... optional list of arguments to pass as arguments to the proc being called
 */
/**
 * Invoke this callback
 *
 * Calls the registered proc on the registered object, if the user ref
 * can be resolved it also inclues that as an arg
 *
 * If the datum being called on is varedited, the call is wrapped via [WrapAdminProcCall][/proc/WrapAdminProcCall]
 */
/**
 * Invoke this callback async (waitfor=false)
 *
 * Calls the registered proc on the registered object, if the user ref
 * can be resolved it also inclues that as an arg
 *
 * If the datum being called on is varedited, the call is wrapped via WrapAdminProcCall
 */
/**
	Helper datum for the select callbacks proc
 */
/**
 * Runs a list of callbacks asyncronously, returning only when all have finished
 *
 * Callbacks can be repeated, to call it multiple times
 *
 * Arguments:
 * * list/callbacks the list of callbacks to be called
 * * list/callback_args the list of lists of arguments to pass into each callback
 * * savereturns Optionally save and return the list of returned values from each of the callbacks
 * * resolution The number of byond ticks between each time you check if all callbacks are complete
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\chatmessage.dm. ----------------------
/// How long the chat message's spawn-in animation will occur for
/// How long the chat message will exist prior to any exponential decay
/// How long the chat message's end of life fading animation will occur for
/// Factor of how much the message index (number of messages) will account to exponential decay
/// Factor of how much height will account to exponential decay
/// Approximate height in pixels of an 'average' line, used for height decay
/// Max width of chat message in pixels
/// Max length of chat message in characters
/// The dimensions of the chat message icons
/// Maximum precision of float before rounding errors occur (in this context)
/// The number of z-layer 'slices' usable by the chat message layering
/**
  * # Chat Message Overlay
  *
  * Datum for generating a message overlay on the map
  */
/**
  * Constructs a chat message overlay
  *
  * Arguments:
  * * text - The text content of the overlay
  * * target - The target atom to display the overlay at
  * * owner - The mob that owns this overlay, only this mob will be able to view it
  * * language - The language this message was spoken in
  * * extra_classes - Extra classes to apply to the span that holds the text
  * * lifespan - The lifespan of the message in deciseconds
  */
/**
  * Calls qdel on the chatmessage when its parent is deleted, used to register qdel signal
  */
/**
  * Generates a chat message image representation
  *
  * Arguments:
  * * text - The text content of the overlay
  * * target - The target atom to display the overlay at
  * * owner - The mob that owns this overlay, only this mob will be able to view it
  * * language - The language this message was spoken in
  * * extra_classes - Extra classes to apply to the span that holds the text
  * * lifespan - The lifespan of the message in deciseconds
  */
/**
  * Applies final animations to overlay CHAT_MESSAGE_EOL_FADE deciseconds prior to message deletion
  * Arguments:
  * * fadetime - The amount of time to animate the message's fadeout for
  */
/**
  * Creates a message overlay at a defined location for a given speaker
  *
  * Arguments:
  * * speaker - The atom who is saying this message
  * * message_language - The language that the message is said in
  * * raw_message - The text content of the message
  * * spans - Additional classes to be added to the message
  * * message_mode - Bitflags relating to the mode of the message
  */
// Tweak these defines to change the available color ranges
/**
  * Gets a color for a name, will return the same color for a given string consistently within a round.atom
  *
  * Note that this proc aims to produce pastel-ish colors using the HSL colorspace. These seem to be favorable for displaying on the map.
  *
  * Arguments:
  * * name - The name to generate a color for
  * * sat_shift - A value between 0 and 1 that will be multiplied against the saturation
  * * lum_shift - A value between 0 and 1 that will be multiplied against the luminescence
  */
//Skyrat changes begin
//End of skyrat changes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\cinematic.dm. ----------------------
// Use to play cinematics.
// Watcher can be world,mob, or a list of mobs
// Blocks until sequence is done.
//Sound helper
//Fire up special callback for actual effects synchronized with animation (eg real nuke explosion happens midway)
//Actual cinematic goes in here
//Also used for blob
// /datum/cinematic/cult_fail
// 	id = CINEMATIC_CULT_FAIL
// /datum/cinematic/cult_fail/content()
// 	screen.icon_state = "station_intact"
// 	sleep(20)
// 	cinematic_sound(sound('sound/creatures/narsie_rises.ogg'))
// 	sleep(60)
// 	cinematic_sound(sound('sound/effects/explosion_distant.ogg'))
// 	sleep(10)
// 	cinematic_sound(sound('sound/magic/demon_dies.ogg'))
// 	sleep(30)
// 	special()
/* Intended usage.
Nuke.Explosion()
	-> Cinematic(NUKE_BOOM,world)
	-> ActualExplosion()
	-> Mode.OnExplosion()


Narsie()
	-> Cinematic(CULT,world)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\dash_weapon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\datacore.dm. ----------------------
//TODO: someone please get rid of this shit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\datum.dm. ----------------------
/**
  * The absolute base class for everything
  *
  * A datum instantiated has no physical world prescence, use an atom if you want something
  * that actually lives in the world
  *
  * Be very mindful about adding variables to this class, they are inherited by every single
  * thing in the entire game, and so you can easily cause memory usage to rise a lot with careless
  * use of variables at this level
  */
/**
  * Called when a href for this datum is clicked
  *
  * Sends a [COMSIG_TOPIC] signal
  */
/**
 * Default implementation of clean-up code.
 *
 * This should be overridden to remove all references pointing to the object being destroyed, if
 * you do override it, make sure to call the parent and return it's return value by default
 *
 * Return an appropriate [QDEL_HINT][QDEL_HINT_QUEUE] to modify handling of your deletion;
 * in most cases this is [QDEL_HINT_QUEUE].
 *
 * The base case is responsible for doing the following
 * * Erasing timers pointing to this datum
 * * Erasing compenents on this datum
 * * Notifying datums listening to signals from this datum that we are going away
 *
 * Returns [QDEL_HINT_QUEUE]
 */
///Return a LIST for serialize_datum to encode! Not the actual json!
///Accepts a LIST from deserialize_datum. Should return src or another datum.
///Serializes into JSON. Does not encode type.
///Deserializes from JSON. Does not parse type.
///Convert a datum into a json blob
/// Convert a list of json to datum
/**
  * Callback called by a timer to end an associative-list-indexed cooldown.
  *
  * Arguments:
  * * source - datum storing the cooldown
  * * index - string index storing the cooldown on the cooldowns associative list
  *
  * This sends a signal reporting the cooldown end.
  */
/**
  * Proc used by stoppable timers to end a cooldown before the time has ran out.
  *
  * Arguments:
  * * source - datum storing the cooldown
  * * index - string index storing the cooldown on the cooldowns associative list
  *
  * This sends a signal reporting the cooldown end, passing the time left as an argument.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\datumvars.dm. ----------------------
//please call . = ..() first and append to the result, that way parent items are always at the top and child items are further down
//add separaters by doing . += "---"
//This proc is only called if everything topic-wise is verified. The only verifications that should happen here is things like permission checks!
//href_list is a reference, modifying it in these procs WILL change the rest of the proc in topic.dm of admin/view_variables!
//This proc is for "high level" actions like admin heal/set species/etc/etc. The low level debugging things should go in admin/view_variables/topic_basic.dm incase this runtimes.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\dna.dm. ----------------------
/////////////////////////// DNA DATUM
//See mutation.dm for what 'class' does. 'time' is time till it removes itself in decimals. 0 for no timer
//Used to generate original gene sequences for every mutation
//Used to create a chipped gene sequence
//Please use add_mutation or activate_mutation instead
//Use remove_mutation instead
//used to update dna UI, UE, and dna.real_name.
/////////////////////////// DNA MOB-PROCS //////////////////////
//proc used to update the mob's appearance after its dna UI has been changed
//Return the active mutation of a type if there is one
/////////////////////////// DNA HELPER-PROCS //////////////////////////////
//value in range 1 to values. values must be greater than 0
//all arguments assumed to be positive integers
//value is hex
/////////////////////////// DNA HELPER-PROCS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\dog_fashion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ductnet.dm. ----------------------
///We handle the unity part of plumbing. We track who is connected to who.
///Add a duct to our network
///Remove a duct from our network and commit suicide, because this is probably easier than to check who that duct was connected to and what part of us was lost
///add a plumbing object to either demanders or suppliers
///remove a plumber. we dont delete ourselves because ductnets dont persist through plumbing objects
///we combine ductnets. this occurs when someone connects to seperate sets of fluid ducts
///destroy the network and tell all our ducts and plumbers we are gone
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\emotes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\explosion.dm. ----------------------
//Against my better judgement, I will return the explosion datum
//If I see any GC errors for it I will find you
//and I will gib you
//This datum creates 3 async tasks
//1 GatherSpiralTurfsProc runs spiral_range_turfs(tick_checked = TRUE) to populate the affected_turfs list
//2 CaculateExplosionBlock adds the blockings to the cached_exp_block list
//3 The main thread explodes the prepared turfs
//asyncly populate the affected_turfs list
// Using default dyn_ex scale:
// 100 explosion power is a (5, 10, 20) explosion.
// 75 explosion power is a (4, 8, 17) explosion.
// 50 explosion power is a (3, 7, 14) explosion.
// 25 explosion power is a (2, 5, 10) explosion.
// 10 explosion power is a (1, 3, 6) explosion.
// 5 explosion power is a (0, 1, 3) explosion.
// 1 explosion power is a (0, 0, 1) explosion.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\explosion2.dm. ----------------------
/// Creates a wave explosion at a certain place
/**
  * New force-blastwave explosion system
  */
/**
  * Called by SSexplosions to propagate this.
  * Return TRUE if postponed
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\forced_movement.dm. ----------------------
//Just new and forget
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\holocall.dm. ----------------------
//this datum manages it's own references
//creates a holocall made by `caller` from `calling_pad` to `callees`
//cleans up ALL references :)
//Gracefully disconnects a holopad `H` from a call. Pads not in the call are ignored. Notifies participants of the disconnection
//Forcefully disconnects a holopad `H` from a call. Pads not in the call are ignored.
//Answers a call made to a holopad `H` which cannot be the calling holopad. Pads not in the call are ignored
//Checks the validity of a holocall and qdels itself if it's not. Returns TRUE if valid, FALSE otherwise
//RECORDS
//These build caller image from outfit and some additional data, for use by mappers for ruin holorecords
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\http.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mind.dm. ----------------------
/*	Note from Carnie:
		The way datum/mind stuff works has been changed a lot.
		Minds now represent IC characters rather than following a client around constantly.

	Guidelines for using minds properly:

	-	Never mind.transfer_to(ghost). The var/current and var/original of a mind must always be of type mob/living!
		ghost.mind is however used as a reference to the ghost's corpse

	-	When creating a new mob for an existing IC character (e.g. cloning a dead guy or borging a brain of a human)
		the existing mind of the old mob should be transfered to the new mob like so:

			mind.transfer_to(new_mob)

	-	You must not assign key= or ckey= after transfer_to() since the transfer_to transfers the client for you.
		By setting key or ckey explicitly after transferring the mind with transfer_to you will cause bugs like DCing
		the player.

	-	IMPORTANT NOTE 2, if you want a player to become a ghost, use mob.ghostize() It does all the hard work for you.

	-	When creating a new mob which will be a new IC character (e.g. putting a shade in a construct or randomly selecting
		a ghost to become a xeno during an event), use this mob proc.

			mob.transfer_ckey(new_mob)

		The Login proc will handle making a new mind for that mobtype (including setting up stuff like mind.name). Simple!
		However if you want that mind to have any special properties like being a traitor etc you will have to do that
		yourself.

*/
//ambition start
//ambition end
//ambition start
//ambition end
//CIT CHANGE - makes arousal update when transfering bodies
//splurt change
//end change
// Datum antag mind procs
//ambition start
//ambition end
//ambition start
//ambition end
//ambition start
//ambition end
/*
	Removes antag type's references from a mind.
	objectives, uplinks, powers etc are all handled.
*/
//Todo make this reset signal
/**
 * ## give_uplink
 *
 * A mind proc for giving anyone an uplink.
 * arguments:
 * * silent: if this should send a message to the mind getting the uplink. traitors do not use this silence, but the silence var on their antag datum.
 * * antag_datum: the antag datum of the uplink owner, for storing it in antag memory. optional!
 */
//Link a new mobs mind to the creator of said mob. They will join any team they are currently on, and will only switch teams when their creator does.
//ambition start
//ambition end
//ambition port start
//ambition port end
//ambition start
//ambition end
//ambition start
//ambition start
//ambition end
//ambition start
//ambition end
//To remove a specific spell from a mind
/// Sets our can_hijack to the fastest speed our antag datums allow.
//Initialisation procs
//HUMAN
//AI
//BORG
//PAI
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutable_appearance.dm. ----------------------
// Mutable appearances are an inbuilt byond datastructure. Read the documentation on them by hitting F1 in DM.
// Basically use them instead of images for overlays/underlays and when changing an object's appearance if you're doing so with any regularity.
// Unless you need the overlay/underlay to have a different direction than the base object. Then you have to use an image due to a bug.
// Mutable appearances are children of images, just so you know.
// Helper similar to image()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\numbered_display.dm. ----------------------
//Used in storage.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\outfit.dm. ----------------------
/**
 * # Outfit datums
 *
 * This is a clean system of applying outfits to mobs, if you need to equip someone in a uniform
 * this is the way to do it cleanly and properly.
 *
 * You can also specify an outfit datum on a job to have it auto equipped to the mob on join
 *
 * /mob/living/carbon/human/proc/equipOutfit(outfit) is the mob level proc to equip an outfit
 * and you pass it the relevant datum outfit
 *
 * outfits can also be saved as json blobs downloadable by a client and then can be uploaded
 * by that user to recreate the outfit, this is used by admins to allow for custom event outfits
 * that can be restored at a later date
 */
/**
 * Called at the start of the equip proc
 *
 * Override to change the value of the slots depending on client prefs, species and
 * other such sources of change
 *
 * Extra Arguments
 * * visualsOnly true if this is only for display (in the character setup screen)
 *
 * If visualsOnly is true, you can omit any work that doesn't visually appear on the character sprite
 */
/**
 * Called after the equip proc has finished
 *
 * All items are on the mob at this point, use this proc to toggle internals
 * fiddle with id bindings and accesses etc
 *
 * Extra Arguments
 * * visualsOnly true if this is only for display (in the character setup screen)
 *
 * If visualsOnly is true, you can omit any work that doesn't visually appear on the character sprite
 */
/**
 * Equips all defined types and paths to the mob passed in
 *
 * Extra Arguments
 * * visualsOnly true if this is only for display (in the character setup screen)
 *
 * If visualsOnly is true, you can omit any work that doesn't visually appear on the character sprite
 */
/**
 * Apply a fingerprint from the passed in human to all items in the outfit
 *
 * Used for forensics setup when the mob is first equipped at roundstart
 * essentially calls add_fingerprint to every defined item on the human
 *
 */
/// Return a list of all the types that are required to disguise as this outfit type
/// Return a json list of this outfit
/// Copy most vars from another outfit to this one
/// Prompt the passed in mob client to download this outfit as a json blob
/// Create an outfit datum from a list of json data
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\position_point_vector.dm. ----------------------
//Designed for things that need precision trajectories like projectiles.
//Don't use this for anything that you don't absolutely have to use this with (like projectiles!) because it isn't worth using a datum unless you need accuracy down to decimal places in pixels.
//You might see places where it does - 16 - 1. This is intentionally 17 instead of 16, because of how byond's tiles work and how not doing it will result in rounding errors like things getting put on the wrong turf.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\profiling.dm. ----------------------
//these are real globals so you can use profiling to profile early world init stuff.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\progressbar.dm. ----------------------
///Called right before the user's Destroy()
///Removes the progress bar image from the user_client and nulls the variable, if it exists.
///Called by user's Login(), it transfers the progress bar image to the new client.
///Adds a smoothly-appearing progress bar image to the player's screen.
///Updates the progress bar image visually.
///Called on progress end, be it successful or a failure. Wraps up things to delete the datum and bar.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\radiation_wave.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\recipe.dm. ----------------------
/* * * * * * * * * * * * * * * * * * * * * * * * * *
 * /datum/recipe by rastaf0            13 apr 2011 *
 * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This is powerful and flexible recipe system.
 * It exists not only for food.
 * supports both reagents and objects as prerequisites.
 * In order to use this system you have to define a deriative from /datum/recipe
 * * reagents are reagents. Acid, milc, booze, etc.
 * * items are objects. Fruits, tools, circuit boards.
 * * result is type to create as new object
 * * time is optional parameter, you shall use in in your machine,
     default /datum/recipe/ procs does not rely on this parameter.
 *
 *  Functions you need:
 *  /datum/recipe/proc/make(var/obj/container as obj)
 *    Creates result inside container,
 *    deletes prerequisite reagents,
 *    transfers reagents from prerequisite objects,
 *    deletes all prerequisite objects (even not needed for recipe at the moment).
 *
 *  /proc/select_recipe(list/datum/recipe/avaiable_recipes, obj/obj as obj, exact = 1)
 *    Wonderful function that select suitable recipe for you.
 *    obj is a machine (or magik hat) with prerequisites,
 *    exact = 0 forces algorithm to ignore superfluous stuff.
 *
 *
 *  Functions you do not need to call directly but could:
 *  /datum/recipe/proc/check_reagents(var/datum/reagents/avail_reagents)
 *    //1=precisely,  0=insufficiently, -1=superfluous
 *
 *  /datum/recipe/proc/check_items(var/obj/container as obj)
 *    //1=precisely, 0=insufficiently, -1=superfluous
 *
 * */
//general version
// food-related
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ruins.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\saymode.dm. ----------------------
//Return FALSE if you have handled the message. Otherwise, return TRUE and saycode will continue doing saycode things.
//user = whoever said the message
//message = the message
//language = the language.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\shuttles.dm. ----------------------
//Whatever special stuff you want
// Shuttles start here:
// /datum/map_template/shuttle/emergency/pod
// 	suffix = "pod"
// 	name = "Emergency Pods"
// 	description = "We did not expect an evacuation this quickly. All we have available is two escape pods."
// 	admin_notes = "For player punishment."
// 	can_be_bought = FALSE
// /datum/map_template/shuttle/emergency/arena
// 	suffix = "arena"
// 	name = "The Arena"
// 	description = "The crew must pass through an otherworldy arena to board this shuttle. Expect massive casualties. The source of the Bloody Signal must be tracked down and eliminated to unlock this shuttle."
// 	admin_notes = "RIP AND TEAR."
// 	credit_cost = 10000
// 	/// Whether the arena z-level has been created
// 	var/arena_loaded = FALSE
// /datum/map_template/shuttle/emergency/arena/prerequisites_met()
// 	return SSshuttle.shuttle_purchase_requirements_met["bubblegum"]
// /datum/map_template/shuttle/emergency/arena/post_load(obj/docking_port/mobile/M)
// 	. = ..()
// 	if(!arena_loaded)
// 		arena_loaded = TRUE
// 		var/datum/map_template/arena/arena_template = new()
// 		arena_template.load_new_z()
// /datum/map_template/arena
// 	name = "The Arena"
// 	mappath = "_maps/templates/the_arena.dmm"
// /datum/map_template/shuttle/emergency/donut
// 	suffix = "donut"
// 	name = "Donutstation Emergency Shuttle"
// 	description = "The perfect spearhead for any crude joke involving the station's shape, this shuttle supports a separate containment cell for prisoners and a compact medical wing."
// 	admin_notes = "Has airlocks on both sides of the shuttle and will probably intersect near the front on some stations that build past departures."
// 	credit_cost = 2500
// CIT SPECIFIC
// /datum/map_template/shuttle/emergency/rollerdome
// 	suffix = "rollerdome"
// 	name = "Uncle Pete's Rollerdome"
// 	description = "Developed by a member of Nanotrasen's R&D crew that claims to have travelled from the year 2028.
// 	He says this shuttle is based off an old entertainment complex from the 1990s, though our database has no records on anything pertaining to that decade."
// 	admin_notes = "ONLY NINETIES KIDS REMEMBER. Uses the fun balloon and drone from the Emergency Bar."
// 	credit_cost = 500 * 5
// CIT SPECIFIC
// /datum/map_template/shuttle/emergency/cruise
// 	suffix = "cruise"
// 	name = "The NTSS Independence"
// 	description = "Ordinarily reserved for special functions and events, the Cruise Shuttle Independence can bring a summery cheer to your next station evacuation for a 'modest' fee!"
// 	admin_notes = "This motherfucker is BIG. You might need to force dock it."
// 	credit_cost = 8000
// /datum/map_template/shuttle/whiteship/kilo
// 	suffix = "kilo"
// 	name = "NT Mining Shuttle"
// /datum/map_template/shuttle/whiteship/donut
// 	suffix = "donut"
// 	name = "NT Long-Distance Bluespace Jumper"
// /datum/map_template/shuttle/cargo/donut
// 	suffix = "donut"
// 	name = "supply shuttle (Donut)"
// /datum/map_template/shuttle/cargo/pubby
// 	suffix = "pubby"
// 	name = "supply shuttle (Pubby)"
// /datum/map_template/shuttle/emergency/zeta
// 	suffix = "zeta"
// 	name = "Tr%nPo2r& Z3TA"
// 	description = "A glitch appears on your monitor, flickering in and out of the options laid before you.
// 	It seems strange and alien, you may need a special technology to access the signal.."
// 	admin_notes = "Has alien surgery tools, and a void core that provides unlimited power."
// 	credit_cost = CARGO_CRATE_VALUE * 16
// /datum/map_template/shuttle/emergency/zeta/prerequisites_met()
// 	return SSshuttle.shuttle_purchase_requirements_met[SHUTTLE_UNLOCK_ALIENTECH]
// /datum/map_template/shuttle/arrival/donut
// 	suffix = "donut"
// 	name = "arrival shuttle (Donut)"
// /datum/map_template/shuttle/infiltrator/advanced
// 	suffix = "advanced"
// 	name = "advanced syndicate infiltrator"
// /datum/map_template/shuttle/mining/large
// 	suffix = "large"
// 	name = "mining shuttle (Large)"
// /datum/map_template/shuttle/mining_common/kilo
// 	suffix = "kilo"
// 	name = "lavaland shuttle (Kilo)"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\soullink.dm. ----------------------
//Keeps track of a Mob->Mob (potentially Player->Player) connection
//Can be used to trigger actions on one party when events happen to another
//Eg: shared deaths
//Can be used to form a linked list of mob-hopping
//Does NOT transfer with minds
//Used to assign variables, called primarily by soullink()
//Override this to create more unique soullinks (Eg: 1->Many relationships)
//Return TRUE/FALSE to return the soullink/null in soullink()
//Runs after /living death()
//Override this for content
//Runs after /living death()
//Override this for content
//Quick-use helper
/////////////////
// MULTISHARER //
/////////////////
//Abstract soullink for use with 1 Owner -> Many Sharer setups
/////////////////
// SHARED FATE //
/////////////////
//When the soulowner dies, the soulsharer dies, and vice versa
//This is intended for two players(or AI) and two mobs
/////////////////
// Demon Bind  //
/////////////////
//When the soulowner dies, the soulsharer dies, but NOT vice versa
//This is intended for two players(or AI) and two mobs
/////////////////
// SHARED BODY //
/////////////////
//When the soulsharer dies, they're placed in the soulowner, who remains alive
//If the soulowner dies, the soulsharer is killed and placed into the soulowner (who is still dying)
//This one is intended for one player moving between many mobs
//////////////////////
// REPLACEMENT POOL //
//////////////////////
//When the owner dies, one of the sharers is placed in the owner's body, fully healed
//Sort of a "winner-stays-on" soullink
//Gibbing ends it immediately
//Lose your claim to the throne!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\spawners_menu.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\tgs_event_handler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\verbs.dm. ----------------------
//returns the master list for verbs of a type
//do things for each entry in Generate_list
//return value sets Generate_list[verbpath]
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\view.dm. ----------------------
//This is intended to be a full wrapper. DO NOT directly modify its values
///Container for client viewsize
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weakrefs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\world_topic.dm. ----------------------
// SETUP
// DATUM
// TOPICS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\boss_achievements.dm. ----------------------
//should be removed soon
// /datum/award/achievement/boss/king_goat_kill
// 	name = "King Goat Killer"
// 	desc = "The king is dead, long live the king!"
// 	database_id = BOSS_MEDAL_KINGGOAT
// 	icon = "goatboss"
// /datum/award/achievement/boss/king_goat_crusher
// 	name = "King Goat Crusher"
// 	desc = "The king is dead, long live the king!"
// 	database_id = BOSS_MEDAL_KINGGOAT_CRUSHER
// 	icon = "goatboss"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\boss_scores.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\job_achievements.dm. ----------------------
//chemistry
//all of service! hip hip!
//civilian achievies! while not recognized by the code, it is recognized by our hearts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\job_scores.dm. ----------------------
//chef
//bartender
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\mafia_achievements.dm. ----------------------
///ALL THE ACHIEVEMENTS FOR WINNING A ROUND AS A ROLE///
///ALL THE ACHIEVEMENTS FOR MISC MAFIA ODDITIES///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\misc_achievements.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\misc_scores.dm. ----------------------
///How many times did we survive being a cripple?
///How many maintenance pills did you eat?
///How high of a score on the Intento did we get?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\skill_achievements.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\_achievement_data.dm. ----------------------
///Datum that handles
///Gets list of changed rows in MassInsert format
///Updates local cache with db data for the given achievement type if it wasn't loaded yet.
///Unlocks an achievement of a specific type. achievement type is a typepath to the award, user is the mob getting the award, and value is an optional value to be used for defining a score to add to the leaderboard
///Getter for the status/score of an achievement
///Resets an achievement to default values.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\achievements\_awards.dm. ----------------------
///This proc loads the achievement data from the hub.
///This saves the changed data to the hub.
///Get raw numerical achievement value from the database
//Should return sanitized value for achievement cache
///Can be overriden for achievement specific events
///Achievements are one-off awards for usually doing cool things.
///Scores are for leaderboarded things, such as killcount of a specific boss
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\actions\beam_rifle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\actions\flightsuit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\announcers\default_announcer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\announcers\intern_announcer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\announcers\medbot_announcer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\announcers\_announcer.dm. ----------------------
///Data holder for the announcers that can be used in a game, this can be used to have alternative announcements outside of the default e.g.the intern
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\atmosphere\planetary.dm. ----------------------
// Atmos types used for planetary airs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\atmosphere\_atmosphere.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\brain_trauma.dm. ----------------------
//Brain Traumas are the new actual brain damage. Brain damage itself acts as a way to acquire traumas: every time brain damage is dealt, there's a chance of receiving a trauma.
//This chance gets higher the higher the mob's brainloss is. Removing traumas is a separate thing from removing brain damage: you can get restored to full brain operativity,
// but keep the quirks, until repaired by neurine, surgery, lobotomy or magic; depending on the resilience
// of the trauma.
//Called on life ticks
//Called on death
//Called when given to a mob
//Called when removed from a mob
//Called when hearing a spoken message
//Called when speaking
//Called when hugging. expand into generally interacting, where future coders could switch the intent?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\hypnosis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\imaginary_friend.dm. ----------------------
//If the friend goes afk, make a brand new friend. Plenty of fish in the sea of imagination.
//down here is the trapped mind
//like imaginary friend but a lot less imagination and more like mind prison//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\magic.dm. ----------------------
//Magical traumas, caused by spells and curses.
//Blurs the line between the victim's imagination and reality
//Unlike regular traumas this can affect the victim's body and surroundings
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\mild.dm. ----------------------
//Mild traumas are the most common; they are generally minor annoyances.
//They can be cured with mannitol and patience, although brain surgery still works.
//Most of the old brain damage effects have been transferred to the dumbness trauma.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\phobia.dm. ----------------------
// Defined phobia types for badminry, not included in the RNG trauma pool to avoid diluting.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\severe.dm. ----------------------
//Severe traumas, when your brain gets abused way too much.
//These range from very annoying to completely debilitating.
//They cannot be cured with chemicals, and require brain surgery to solve.
//SANDSTORM EDIT
//SANDSTORM EDIT END
//ported from TG
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\special.dm. ----------------------
//Brain traumas that are rare and/or somewhat beneficial;
//they are the easiest to cure, which means that if you want
//to keep them, you can't cure your other traumas
//base sync holder is in desynchronizer.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\brain_damage\split_personality.dm. ----------------------
///////////////BRAINWASHING////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\changelog\changelog.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\acid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\activity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\anti_magic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\area_sound_manager.dm. ----------------------
///Allows you to set a theme for a set of areas without tying them to looping sounds explicitly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\armor_plate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\bane.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\bouncy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\butchering.dm. ----------------------
///Special snowflake component only used for the recycler.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\caltrop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\chasm.dm. ----------------------
// Used by /turf/open/chasm and subtypes to implement the "dropping" mechanic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\combat_mode.dm. ----------------------
/**
  * Combat mode component. It makes the user face whichever atom the mouse pointer is hovering,
  * amongst other things designed outside of this file, namely PvP and PvE stuff, hence the name.
  * Can be toggled on and off by clicking the screen hud object or by pressing the assigned hotkey (default 'C')
  */
/// Creates the hud screen object.
/// Combat mode can be locked out, forcibly disabled by a status trait.
/// Enables combat mode. Please use 'safe_enable_combat_mode' instead, if you wish to also enable the toggle flag.
/// Disables combat mode. Please use 'safe_disable_combat_mode' instead, if you wish to also disable the toggle flag.
///Changes the user direction to (try) keep match the pointer.
///Changes the user direction to (try) match the pointer.
/// Toggles whether the user is intentionally in combat mode. THIS should be the proc you generally use! Has built in visual/to other player feedback, as well as an audible cue to ourselves.
/// Enables intentionally being in combat mode. Please try to use the COMSIG_COMBAT_MODE_CHECK signal for feedback when possible.
/// Disables intentionally being in combat mode. Please try to use the COMSIG_COMBAT_MODE_CHECK signal for feedback when possible.
/// Returns a field of flags that are contained in both the second arg and our bitfield variable.
/// Disables combat mode upon death.
/// Disables combat mode upon logout
/// The screen button.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\construction.dm. ----------------------
// Unordered construction.
// Takes a list of part types, to be added in any order, as steps.
// Calls spawn_result() when every type has been added.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\dejavu.dm. ----------------------
/**
  * A component to reset the parent to its previous state after some time passes
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\dullahan.dm. ----------------------
// update head sprite
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\earprotection.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\edible.dm. ----------------------
/*!
This component makes it possible to make things edible. What this means is that you can take a bite or force someone to take a bite (in the case of items).
These items take a specific time to eat, and can do most of the things our original food items could.
Behavior that's still missing from this component that original food items had that should either be put into seperate components or somewhere else:
	Components:
	Drying component (jerky etc)
	Customizable component (custom pizzas etc)
	Processable component (Slicing and cooking behavior essentialy, making it go from item A to B when conditions are met.)
	Dunkable component (Dunking things into reagent containers to absorb a specific amount of reagents)
	Misc:
	Something for cakes (You can store things inside)
*/
///All the checks for the act of eating itself and
///This function lets the eater take a bite and transfers the reagents to the eater.
///Checks whether or not the eater can actually consume the food
///Check foodtypes to see if we should send a moodlet
///Delete the item when it is fully eaten
///Ability to feed food to puppers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\edit_complainer.dm. ----------------------
// This is just a bit of fun while making an example for global signal
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\embedded.dm. ----------------------
/*
	This component is responsible for handling individual instances of embedded objects. The embeddable element is what allows an item to be embeddable and stores its embedding stats,
	and when it impacts and meets the requirements to stick into something, it instantiates an embedded component. Once the item falls out, the component is destroyed, while the
	element survives to embed another day.

	There are 2 different things that can be embedded presently: carbons, and closed turfs (see: walls)

		- Carbon embedding has all the classical embedding behavior, and tracks more events and signals. The main behaviors and hooks to look for are:
			-- Every process tick, there is a chance to randomly proc pain, controlled by pain_chance. There may also be a chance for the object to fall out randomly, per fall_chance
			-- Every time the mob moves, there is a chance to proc jostling pain, controlled by jostle_chance (and only 50% as likely if the mob is walking or crawling)
			-- Various signals hooking into carbon topic() and the embed removal surgery in order to handle removals.

		- Turf embedding is much simpler. All we do here is draw an overlay of the item's inhand on the turf, hide the item, and create an HTML link in the turf's inspect
		that allows you to rip the item out. There's nothing dynamic about this, so far less checks.


	In addition, there are 2 cases of embedding: embedding, and sticking

		- Embedding involves harmful and dangerous embeds, whether they cause brute damage, stamina damage, or a mix. This is the default behavior for embeddings, for when something is "pointy"

		- Sticking occurs when an item should not cause any harm while embedding (imagine throwing a sticky ball of tape at someone, rather than a shuriken). An item is considered "sticky"
			when it has 0 for both pain multiplier and jostle pain multiplier. It's a bit arbitrary, but fairly straightforward.

		Stickables differ from embeds in the following ways:
			-- Text descriptors use phrasing like "X is stuck to Y" rather than "X is embedded in Y"
			-- There is no slicing sound on impact
			-- All damage checks and bloodloss are skipped for carbons
			-- Pointy objects create sparks when embedding into a turf

*/
////////////////////////////////////////
/////////////HUMAN PROCS////////////////
////////////////////////////////////////
/// Set up an instance of embedding for a carbon. This is basically an extension of Initialize() so not much to say
/// Called every time a carbon with a harmful embed moves, rolling a chance for the item to cause pain. The chance is halved if the carbon is crawling or walking.
/// Called when then item randomly falls out of a carbon. This handles the damage and descriptors, then calls safe_remove()
/// Called when a carbon with an object embedded/stuck to them inspects themselves and clicks the appropriate link to begin ripping the item out. This handles the ripping attempt, descriptors, and dealing damage, then calls safe_remove()
/// This proc handles the final step and actual removal of an embedded/stuck item from a carbon, whether or not it was actually removed safely.
/// Pass TRUE for to_hands if we want it to go to the victim's hands when they pull it out
/// Something deleted or moved our weapon while it was embedded, how rude!
/// Items embedded/stuck to carbons both check whether they randomly fall out (if applicable), as well as if the target mob and limb still exists.
/// Items harmfully embedded in carbons have an additional check for random pain (if applicable)
////////////////////////////////////////
//////////////TURF PROCS////////////////
////////////////////////////////////////
/// Turfs are much lower maintenance, since we don't care if they're in pain, but since they don't bleed or scream, we draw an overlay to show their status.
/// The only difference pointy/sticky items make here is text descriptors and pointy objects making a spark shower on impact.
/// Someone is ripping out the item from the turf by hand
/// This proc handles if something knocked the invisible item loose from the turf somehow (probably an explosion). Just make it visible and say it fell loose, then get outta here.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\explodable.dm. ----------------------
///Component specifically for explosion sensetive things, currently only applies to heat based explosions but can later perhaps be used for things that are dangerous to handle carelessly like nitroglycerin.
///Called when you use this object to attack sopmething
///Called when you attack a specific body part of the thing this is equipped on. Useful for exploding pants.
/// Checks if we're hitting the zone this component is covering
/// Expldoe and remove the object
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\field_of_vision.dm. ----------------------
/**
  * Field of Vision component. Does totally what you probably think it does,
  * ergo preventing players from seeing what's behind them.
  */
/**
  * That special invisible, almost neigh indestructible movable
  * that holds both shadow cone mask and image and follows the player around.
  */
/**
  * An image whose render_source is kept up to date to prevent the mob (or the topmost movable holding it) from being hidden by the mask.
  * Will make it use vis_contents instead once a few byonds bugs with images and vis contents are fixed.
  */
/**
  * A circle image used to somewhat uncover the adjacent portion of the shadow cone, making mobs and objects behind us somewhat visible.
  * The owner mask is still required for those mob going over the default 32x32 px size btw.
  */
/**
  * A static list of offsets based on icon width and height, because render sources are centered unlike most other visuals,
  * and that gives us some problems when the icon is larger or smaller than world.icon_size
  */
/**
  * Generates the holder and images (if not generated yet) and adds them to client.images.
  * Run when the component is registered to a player mob, or upon login.
  */
///Rotates the shadow cone to a certain degree. Backend shenanigans.
/**
  * Resizes the shadow to match the current screen size.
  * Run when the client view size is changed, or if the player has a viewsize different than "15x15" on login/comp registration.
  */
///Hides the shadow, other visibility comsig procs will take it into account. Called when the mob dies.
/// Shows the shadow. Called when the mob is revived.
/// Hides the shadow when looking through other items, shows it otherwise.
/// Called when the client view size is changed.
/**
  * Called when the owner mob moves around. Used to keep shadow located right behind us,
  * As well as modify the owner mask to match the topmost item.
  */
/// Pretty much like the above, but meant for other movables the mob is stored in (bodybags, boxes, mechs etc).
/// A hacky comsig proc for things that somehow decide to change icon on the go. may make a change_icon_file() proc later but...
/**
  * Byond doc is not entirely correct on the integrated arctan() proc.
  * When both x and y are negative, the output is also negative, cycling clockwise instead of counter-clockwise.
  * That's also why I am extensively using the SIMPLIFY_DEGREES macro here.
  *
  * Overall this is the main macro that calculates wheter a target is within the shadow cone angle or not.
  */
/**
  * The shadow cone's mask and visual images holder which can't locate inside the mob,
  * lest they inherit the mob opacity and cause a lot of hindrance
  */
/// Prevents people from moving these after creation, because they shouldn't be.
/// Last but not least, these shouldn't be deleted by anything but the component itself
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\footstep.dm. ----------------------
///Footstep component. Plays footsteps at parents location when it is appropriate.
///Prepares a footstep. Determines if it should get played. Returns the turf it should get played on. Note that it is always a /turf/open
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fried.dm. ----------------------
/*!
	This component essentially encapsulates frying and utilizes the edible component
	This means fried items can work like regular ones, and generally the code is far less messy
*/
//some stuff to do with the contents of fried junk
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fullauto.dm. ----------------------
// There is a gun and there is a user wielding it. The component now waits for the mouse click.
//Dakka-dakka
// Gun procs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\gps.dm. ----------------------
///Global GPS_list. All  GPS components get saved in here for easy reference.
///GPS component. Atoms that have this show up on gps. Pretty simple stuff.
///GPS component subtype. Only gps/item's can be used to open the UI.
///Called on COMSIG_ITEM_ATTACK_SELF
///Called on COMSIG_PARENT_EXAMINE
///Called on COMSIG_ATOM_EMP_ACT
///Restarts the GPS after getting turned off by an EMP.
///Calls toggletracking
///Toggles the tracking for the gps
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\honkspam.dm. ----------------------
// This used to be in paper.dm, it was some snowflake code that was
// used ONLY on april's fool.  I moved it to a component so it could be
// used in other places
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\identification.dm. ----------------------
/**
  * Identification components
  */
/**
  * Identification component subtype - Syndicate
  *
  * Checks if the user is a traitor.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\igniter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\infective.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\jousting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\killerqueen.dm. ----------------------
/**
  * KILLER QUEEN
  *
  * Simple contact bomb component
  * Blows up the first person to touch it.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\knockback.dm. ----------------------
/// triggered after an item attacks something
/// triggered after a hostile simplemob attacks something
/// triggered after a projectile hits something
/**
  * Throw a target in a direction
  *
  * Arguments:
  * * target - Target atom to throw
  * * thrower - Thing that caused this atom to be thrown
  * * throw_dir - Direction to throw the atom
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\knockoff.dm. ----------------------
//Items with these will have a chance to get knocked off when disarming
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\label.dm. ----------------------
/**
	The label component.

	This component is used to manage labels applied by the hand labeler.

	Atoms can only have one instance of this component, and therefore only one label at a time.
	This is to avoid having names like "Backpack (label1) (label2) (label3)". This is annoying and abnoxious to read.

	When a player clicks the atom with a hand labeler to apply a label, this component gets applied to it.
	If the labeler is off, the component will be removed from it, and the label will be removed from its name.
 */
/**
	This proc will fire after the parent is hit by a hand labeler which is trying to apply another label.
	Since the parent already has a label, it will remove the old one from the parent's name, and apply the new one.
*/
/**
	This proc will trigger when any object is used to attack the parent.

	If the attacking object is not a hand labeler, it will return.
	If the attacking object is a hand labeler it will restore the name of the parent to what it was before this component was added to it, and the component will be deleted.

	Arguments:
	* source: The parent.
	* attacker: The object that is hitting the parent.
	* user: The mob who is wielding the attacking object.
*/
/**
	This proc will trigger when someone examines the parent.
	It will attach the text found in the body of the proc to the `examine_list` and display it to the player examining the parent.

	Arguments:
	* source: The parent.
	* user: The mob exmaining the parent.
	* examine_list: The current list of text getting passed from the parent's normal examine() proc.
*/
/// Applies a label to the name of the parent in the format of: "parent_name (label)"
/// Removes the label from the parent's name
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\lifesteal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\lockon_aiming.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\magnetic_catch.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\material_container.dm. ----------------------
/*!
	This datum should be used for handling mineral contents of machines and whatever else is supposed to hold minerals and make use of them.

	Variables:
		amount - raw amount of the mineral this container is holding, calculated by the defined value MINERAL_MATERIAL_AMOUNT=2000.
		max_amount - max raw amount of mineral this container can hold.
		sheet_type - type of the mineral sheet the container handles, used for output.
		parent - object that this container is being used by, used for output.
		MAX_STACK_SIZE - size of a stack of mineral sheets. Constant.
*/
/// Sets up the proper signals and fills the list of materials with the appropriate references.
/// Proc that allows players to fill the parent with mats
/// Proc used for when player inserts materials
//Inserts a number of sheets from a stack, returns the amount of sheets used.
/// Proc specifically for inserting items, returns the amount of materials entered.
/**
 * Inserts the relevant materials from an item into this material container.
 *
 * Arguments:
 * - [source][/obj/item]: The source of the materials we are inserting.
 * - multiplier: The multiplier for the materials being inserted.
 * - breakdown_flags: The breakdown bitflags that will be used to retrieve the materials from the source
 */
/**
 * The default check for whether we can add materials to this material container.
 *
 * Arguments:
 * - [mat][/atom/material]: The material we are checking for insertability.
 */
/// For inserting an amount of material
/// Uses an amount of a specific material, effectively removing it.
/// Proc for transfering materials to another container.
/// Proc for checking if there is room in the component, returning the amount or else the amount lacking.
/// For consuming a dictionary of materials. mats is the map of materials to use and the corresponding amounts, example: list(M/datum/material/glass =100, datum/material/iron=200)
/// For spawning mineral sheets at a specific location. Used by machines to output sheets.
/// Proc to get all the materials and dump them as sheets
/// Proc that returns TRUE if the container has space
/// Checks if its possible to afford a certain amount of materials. Takes a dictionary of materials.
/// Returns all the categories in a recipe.
/// Returns TRUE if you have enough of the specified material.
/// Returns TRUE if you have enough of a specified material category (Which could be multiple materials)
/// Turns a material amount into the amount of sheets it should output
/// Turns an amount of sheets into the amount of material amount it should output
///returns the amount of material relevant to this container; if this container does not support glass, any glass in 'I' will not be taken into account
/// Returns the amount of a specific material in this container.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\mirage_border.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\mirv.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\mood.dm. ----------------------
///Called after moodevent/s have been added/removed.
///Called when parent is revived.
///Causes direct drain of someone's sanity, call it with a numerical value corresponding how badly you want to hurt their sanity
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\multiple_lives.dm. ----------------------
/**
 * A simple component that spawns a mob of the same type and transfers itself to it when parent dies.
 * For more complex behaviors, use the COMSIG_ON_MULTIPLE_LIVES_RESPAWN comsig.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\nanites.dm. ----------------------
/**
  * Called when nanites are depleted.
  * Deletes ourselves by default.
  */
/**
  * Used to rid ourselves
  */
///Deletes nanites!
/**
  * Adds permanent programs
  *
  * WARNING: Has no sanity checks. Make sure you know what you are doing! (make sure programs do not conflict)
  */
/**
  * Checks if we can block out console modification
  */
/**
  * Checks if we can lock out host internal conscious modification
  */
/**
  * Checks if we can block out viral replica
  */
///Syncs the nanite component to another, making it so programs are the same with the same programming (except activation status)
///Syncs the nanites to their assigned cloud copy, if it is available. If it is not, there is a small chance of a software error instead.
///Adds a nanite program, replacing existing unique programs of the same type. A source program can be specified to copy its programming onto the new one.
///Modifies the current nanite volume, then checks if the nanites are depleted or exceeding the maximum amount
/**
  *	Handles how nanites leave the host's body if they find out that they're currently exceeding the maximum supported amount
  *
  * IC explanation:
  * Normally nanites simply discard excess volume by slowing replication or 'sweating' it out in imperceptible amounts,
  * but if there is a large excess volume, likely due to a programming change that leaves them unable to support their current volume,
  * the nanites attempt to leave the host as fast as necessary to prevent nanite poisoning. This can range from minor oozing to nanites
  * rapidly bursting out from every possible pathway, causing temporary inconvenience to the host.
  */
///Updates the nanite volume bar visible in diagnostic HUDs
/**
  * Subtype that doesn't erase itself from running out
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\ntnet_interface.dm. ----------------------
//Thing meant for allowing datums and objects to access an NTnet network datum.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\omen.dm. ----------------------
/**
  * omen.dm: For when you want someone to have a really bad day
  *
  * When you attach an omen component to someone, they start running the risk of all sorts of bad environmental injuries, like nearby vending machines randomly falling on you,
  * or hitting your head really hard when you slip and fall, or... well, for now those two are all I have. More will come.
  *
  * Omens are removed once the victim is either maimed by one of the possible injuries, or if they receive a blessing (read: bashing with a bible) from the chaplain.
  */
/**
  * check_accident() is called each step we take
  *
  * While we're walking around, roll to see if there's any environmental hazards (currently only vending machines) on one of the adjacent tiles we can trigger.
  * We do the prob() at the beginning to A. add some tension for /when/ it will strike, and B. (more importantly) ameliorate the fact that we're checking up to 5 turfs's contents each time
  */
/// If we get knocked down, see if we have a really bad slip and bash our head hard
/// Hijack the mood system to see if we get the blessing mood event to cancel the omen
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\orbiter.dm. ----------------------
//radius: range to orbit at, radius of the circle formed by orbiting (in pixels)
//clockwise: whether you orbit clockwise or anti clockwise
//rotation_speed: how fast to rotate (how many ds should it take for a rotation to complete)
//rotation_segments: the resolution of the orbit circle, less = a more block circle, this can be used to produce hexagons (6 segments) triangles (3 segments), and so on, 36 is the best default.
//pre_rotation: Chooses to rotate src 90 degress towards the orbit dir (clockwise/anticlockwise), useful for things to go "head first" like ghosts
// This proc can receive signals by either the thing being directly orbited or anything holding it
/////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\paintable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\pellet_cloud.dm. ----------------------
// the following defines are used for [/datum/component/pellet_cloud/var/list/wound_info_by_part] to store the damage, wound_bonus, and bw_bonus for each bodypart hit
/*
	* This component is used when you want to create a bunch of shrapnel or projectiles (say, shrapnel from a fragmentation grenade, or buckshot from a shotgun) from a central point,
	* without necessarily printing a separate message for every single impact. This component should be instantiated right when you need it (like the moment of firing), then activated
	* by signal.
	*
	* Pellet cloud currently works on two classes of sources: directed (ammo casings), and circular (grenades, landmines).
	*	-Directed: This means you're shooting multiple pellets, like buckshot. If an ammo casing is defined as having multiple pellets, it will automatically create a pellet cloud
	*		and call COMSIG_PELLET_CLOUD_INIT (see [/obj/item/ammo_casing/proc/fire_casing]). Thus, the only projectiles fired will be the ones fired here.
	*		The magnitude var controls how many pellets are created.
	*	-Circular: This results in a big spray of shrapnel flying all around the detonation point when the grenade fires COMSIG_GRENADE_PRIME or landmine triggers COMSIG_MINE_TRIGGERED.
	*		The magnitude var controls how big the detonation radius is (the bigger the magnitude, the more shrapnel is created). Grenades can be covered with bodies to reduce shrapnel output.
	*
	* Once all of the fired projectiles either hit a target or disappear due to ranging out/whatever else, we resolve the list of all the things we hit and print aggregate messages so we get
	* one "You're hit by 6 buckshot pellets" vs 6x "You're hit by the buckshot blah blah" messages.
	*
	* Note that this is how all guns handle shooting ammo casings with multiple pellets, in case such a thing comes up.
*/
/**
  * create_casing_pellets() is for directed pellet clouds for ammo casings that have multiple pellets (buckshot and scatter lasers for instance)
  *
  * Honestly this is mostly just a rehash of [/obj/item/ammo_casing/proc/fire_casing()] for pellet counts > 1, except this lets us tamper with the pellets and hook onto them for tracking purposes.
  * The arguments really don't matter, this proc is triggered by COMSIG_PELLET_CLOUD_INIT which is only for this really, it's just a big mess of the state vars we need for doing the stuff over here.
  */
/**
  * create_blast_pellets() is for when we have a central point we want to shred the surroundings of with a ring of shrapnel, namely frag grenades and landmines.
  *
  * Note that grenades have extra handling for someone throwing themselves/being thrown on top of it, while landmines do not (obviously, it's a landmine!). See [/datum/component/pellet_cloud/proc/handle_martyrs()]
  */
/**
  * handle_martyrs() is used for grenades that shoot shrapnel to check if anyone threw themselves/were thrown on top of the grenade, thus absorbing a good chunk of the shrapnel
  *
  * Between the time the grenade is armed and the actual detonation, we set var/list/bodies to the list of mobs currently on the new tile, as if the grenade landed on top of them, tracking if any of them move off the tile and removing them from the "under" list
  * Once the grenade detonates, handle_martyrs() is called and gets all the new mobs on the tile, and add the ones not in var/list/bodies to var/list/martyrs
  * We then iterate through the martyrs and reduce the shrapnel magnitude for each mob on top of it, shredding each of them with some of the shrapnel they helped absorb. This can snuff out all of the shrapnel if there's enough bodies
  *
  * Note we track anyone who's alive and client'd when they get shredded in var/list/purple_hearts, for achievement checking later
  */
///One of our pellets hit something, record what it was and check if we're done (terminated == num_pellets)
///One of our pellets disappeared due to hitting their max range (or just somehow got qdel'd), remove it from our list and check if we're done (terminated == num_pellets)
/// Minor convenience function for creating each shrapnel piece with circle explosions, mostly stolen from the MIRV component
///All of our pellets are accounted for, time to go target by target and tell them how many things they got hit by.
/// Look alive, we're armed! Now we start watching to see if anyone's covering us
/// Someone dropped the grenade, so set them to the shooter in case they're on top of it when it goes off
/// Our grenade has moved, reset var/list/bodies so we're "on top" of any mobs currently on the tile
/// Someone who was originally "under" the grenade has moved off the tile and is now eligible for being a martyr and "covering" it
/// Our grenade or landmine or caseless shell or whatever tried deleting itself, so we intervene and nullspace it until we're done here
/// Someone who was originally "under" the grenade has moved off the tile and is now eligible for being a martyr and "covering" it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\phantomthief.dm. ----------------------
//This component applies a customizable drop_shadow filter to its wearer when they toggle combat mode on or off. This can stack.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\pricetag.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\radioactive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\rad_insulation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\remote_materials.dm. ----------------------
/*
This component allows machines to connect remotely to a material container
(namely an /obj/machinery/ore_silo) elsewhere. It offers optional graceful
fallback to a local material storage in case remote storage is unavailable, and
handles linking back and forth.
*/
// called if disconnected by ore silo UI or destruction
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\riding.dm. ----------------------
//Override this to set your vehicle's various pixel offsets
//Override this to set the passengers/riders dir based on which passenger they are.
//ie: rider facing the vehicle's dir, but passenger 2 facing backwards, etc.
//KEYS
//BUCKLE HOOKS
//MOVEMENT
///////Yes, I said humans. No, this won't end well...//////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\rotation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\shielded.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\shrink.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\sizzle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\slippery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\spawner.dm. ----------------------
// Stopping clientless simple mobs' from indiscriminately bashing their own spawners due DestroySurroundings() et similars.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\spooky.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\squeak.dm. ----------------------
// Disposal pipes related shit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\stationloving.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\summoning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\swarming.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\tackle.dm. ----------------------
/**
  *#tackle.dm
  *
  * For when you want to throw a person at something and have fun stuff happen
  *
  * This component is made for carbon mobs (really, humans), and allows its parent to throw themselves and perform tackles. This is done by enabling throw mode, then clicking on your
  *	  intended target with an empty hand. You will then launch toward your target. If you hit a carbon, you'll roll to see how hard you hit them. If you hit a solid non-mob, you'll
  *	  roll to see how badly you just messed yourself up. If, along your journey, you hit a table, you'll slam onto it and send up to MAX_TABLE_MESSES (8) /obj/items on the table flying,
  *	  and take a bit of extra damage and stun for each thing launched.
  *
  * There are 2 """skill rolls""" involved here, which are handled and explained in sack() and rollTackle() (for roll 1, carbons), and splat() (for roll 2, walls and solid objects)
*/
///Store the thrownthing datum for later use
///See if we can tackle or not. If we can, leap!
/**
 * sack()
 *
 * sack() is called when you actually smack into something, assuming we're mid-tackle. First it deals with smacking into non-carbons, in two cases:
 * * If it's a non-carbon mob, we don't care, get out of here and do normal thrown-into-mob stuff
 * * Else, if it's something dense (walls, machinery, structures, most things other than the floor), go to splat() and get ready for some high grade shit
 *
 * If it's a carbon we hit, we'll call rollTackle() which rolls a die and calculates modifiers for both the tackler and target, then gives us a number. Negatives favor the target, while positives favor the tackler.
 * Check [rollTackle()][/datum/component/tackler/proc/rollTackle] for a more thorough explanation on the modifiers at play.
 *
 * Then, we figure out what effect we want, and we get to work! Note that with standard gripper gloves and no modifiers, the range of rolls is (-3, 3). The results are as follows, based on what we rolled:
 * * -inf to -5: Seriously botched tackle, tackler suffers a concussion, brute damage, and a 3 second paralyze, target suffers nothing
 * * -4 to -2: weak tackle, tackler gets 3 second knockdown, target gets shove slowdown but is otherwise fine
 * * -1 to 0: decent tackle, tackler gets up a bit quicker than the target
 * * 1: solid tackle, tackler has more of an advantage getting up quicker
 * * 2 to 4: expert tackle, tackler has sizeable advantage and lands on their feet with a free passive grab
 * * 5 to inf: MONSTER tackle, tackler gets up immediately and gets a free aggressive grab, target takes sizeable stamina damage from the hit and is paralyzed for one and a half seconds and knocked down for three seconds
 *
 * Finally, we return a bitflag to [COMSIG_MOVABLE_IMPACT] that forces the hitpush to false so that we don't knock them away.
*/
/**
  * rollTackle()
  *
  * This handles all of the modifiers for the actual carbon-on-carbon tackling, and gets its own proc because of how many there are (with plenty more in mind!)
  *
  * The base roll is between (-3, 3), with negative numbers favoring the target, and positive numbers favoring the tackler. The target and the tackler are both assessed for
  *	how easy they are to knock over, with clumsiness and dwarfiness being strong maluses for each, and gigantism giving a bonus for each. These numbers and ideas
  *	are absolutely subject to change.

  * In addition, after subtracting the defender's mod and adding the attacker's mod to the roll, the component's base (skill) mod is added as well. Some sources of tackles
  *	are better at taking people down, like the bruiser and rocket gloves, while the dolphin gloves have a malus in exchange for better mobility.
*/
/**
  * splat()
  *
  * This is where we handle diving into dense atoms, generally with effects ranging from bad to REALLY bad. This works as a percentile roll that is modified in two steps as detailed below. The higher
  *	the roll, the more severe the result.
  *
  * Mod 1: Speed
  *	* Base tackle speed is 1, which is what normal gripper gloves use. For other sources with higher speed tackles, like dolphin and ESPECIALLY rocket gloves, we obey Newton's laws and hit things harder.
  *	* For every unit of speed above 1, move the lower bound of the roll up by 15. Unlike Mod 2, this only serves to raise the lower bound, so it can't be directly counteracted by anything you can control.
  *
  * Mod 2: Misc
  *	-Flat modifiers, these take whatever you rolled and add/subtract to it, with the end result capped between the minimum from Mod 1 and 100. Note that since we can't roll higher than 100 to start with,
  *		wearing a helmet should be enough to remove any chance of permanently paralyzing yourself and dramatically lessen knocking yourself unconscious, even with rocket gloves. Will expand on maybe
  *	* Wearing a helmet: -6
  *	* Wearing armor: -6
  *	* Clumsy: +6
  *
  * Effects: Below are the outcomes based off your roll, in order of increasing severity
  *	* 1-63: Knocked down for a few seconds and a bit of brute and stamina damage
  *	* 64-83: Knocked silly, gain some confusion as well as the above
  *	* 84-93: Cranial trauma, get a concussion and more confusion, plus more damage
  *	* 94-98: Knocked unconscious, significant chance to get a random mild brain trauma, as well as a fair amount of damage
  *	* 99-100: Break your spinal cord, get paralyzed, take a bunch of damage too. Very unlucky!
*/
///A special case for splatting for handling windows
///Check to see if we hit a table, and if so, make a big mess!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\thermite.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\twitch_plays.dm. ----------------------
/**
 * Observers voting on things through orbiting
 */
/// Simple movement one
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\twohanded.dm. ----------------------
/**
 * Two Handed Component
 *
 * When applied to an item it will make it two handed
 *
 */
/**
 * Two Handed component
 *
 * vars:
 * * require_twohands (optional) Does the item need both hands to be carried
 * * wieldsound (optional) The sound to play when wielded
 * * unwieldsound (optional) The sound to play when unwielded
 * * attacksound (optional) The sound to play when wielded and attacking
 * * force_multiplier (optional) The force multiplier when wielded, do not use with force_wielded, and force_unwielded
 * * force_wielded (optional) The force setting when the item is wielded, do not use with force_multiplier
 * * force_unwielded (optional) The force setting when the item is unwielded, do not use with force_multiplier
 * * icon_wielded (optional) The icon to be used when wielded
 */
// Inherit the new values passed to the component
// register signals withthe parent item
// Remove all siginals registered to the parent item
/// Triggered on equip of the item containing the component
/// Triggered on drop of item containing the component
/// Triggered on attack self of the item containing the component
/**
 * Wield the two handed item in both hands
 *
 * vars:
 * * user The mob/living/carbon that is wielding the item
 */
/**
 * Unwield the two handed item
 *
 * vars:
 * * user The mob/living/carbon that is unwielding the item
 * * show_message (option) show a message to chat on unwield
 */
/**
 * on_attack triggers on attack with the parent item
 */
/**
 * on_update_icon triggers on call to update parent items icon
 *
 * Updates the icon using icon_wielded if set
 */
/**
 * on_moved Triggers on item moved
 */
/**
 * on_swap_hands Triggers on swapping hands, blocks swap if the other hand is busy
 */
/**
 * on_sharpen Triggers on usage of a sharpening stone on the item
 */
/**
 * The offhand dummy item for two handed items
 *
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\uplink.dm. ----------------------
/**
 * Uplinks
 *
 * All /obj/item(s) have a hidden_uplink var. By default it's null. Give the item one with 'new(src') (it must be in it's contents). Then add 'uses.'
 * Use whatever conditionals you want to check that the user has an uplink, and then call interact() on their uplink.
 * You might also want the uplink menu to open if active. Check if the uplink is 'active' and then interact() with it.
**/
// Implant signal responses
// PDA signal responses
// Radio signal responses
// Pen signal responses
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\virtual_reality.dm. ----------------------
/**
  * The virtual reality turned component.
  * Originally created to overcome issues of mob polymorphing locking the player inside virtual reality
  * and allow for a more "immersive" virtual reality in a virtual reality experience.
  * It relies on comically complex order of logic, expect things to break if procs such as mind/transfer_to() are revamped.
  * In short, a barebone not so hardcoded VR framework.
  * If you plan to add more devices that make use of this component, remember to isolate their code outta here where possible.
  */
/**
  * Called when attempting to connect a mob to a virtual reality mob.
  * This will return FALSE if the mob is without player or dead. TRUE otherwise
  */
/**
  * emag_act() hook. Makes the game deadlier, killing the mastermind mob too should the parent die.
  */
/**
  * Called when the mastermind mind is transferred to another mob.
  * This is pretty much just going to simply quit the session until machineries support polymorphed occupants etcetera.
  */
/**
  * Called to stop the player mind from being transferred should the new mob happen to be one of our masterminds'.
  * Since the target's mind.current is going to be null'd in the mind transfer process,
  * This has to be done in a different signal proc than on_player_transfer(), by then the mastermind.current will be null.
  */
/**
  * Called when someone or something else is somewhat about to replace the mastermind's mob key somehow.
  * And potentially lock the player in a broken virtual reality plot. Not really something to be proud of.
  */
/**
  * Takes care of moving the component from a mob to another when their mind or ckey is transferred.
  * The very reason this component even exists (else one would be stuck playing as a monky if monkyified)
  */
/**
  * Required for the component to be transferable from mob to mob.
  */
/**
  *The following procs simply acts as hooks for quit(), since components do not use callbacks anymore
  */
/**
  * Takes care of deleting itself, moving the player back to the mastermind's current and queueing the parent for deletion.
  * It supports nested virtual realities by recursively calling vr_in_a_vr(), which in turns calls quit(),
  * up to the deepest level, where the ckey will be transferred back to our mastermind's mob instead.
  * The above operation is skipped when session_paused is TRUE (ergo no player in control of the current mob).
  * vars:
  * * deathcheck is used to kill the master, you want this FALSE unless for stuff that doesn't involve emagging.
  * * cleanup is used to queue the parent for the next vr_clean_master's run, where they'll be deleted should they be dead.
  * * mob/override is used for the recursive virtual reality explained above and shouldn't be used outside of vr_in_a_vr().
  */
/**
  * Used for recursive virtual realities shenanigeans and should be called by the above proc.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\waddling.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\wearertargeting.dm. ----------------------
// A dummy parent type used for easily making components that target an item's wearer rather than the item itself.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\wet_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\_component.dm. ----------------------
/**
  * # Component
  *
  * The component datum
  *
  * A component should be a single standalone unit
  * of functionality, that works by receiving signals from it's parent
  * object to provide some single functionality (i.e a slippery component)
  * that makes the object it's attached to cause people to slip over.
  * Useful when you want shared behaviour independent of type inheritance
  */
/**
  * Create a new component.
  * Additional arguments are passed to `Initialize()`
  *
  * Arguments:
  * * datum/P the parent datum this component reacts to signals from
  */
/**
  * Called during component creation with the same arguments as in new excluding parent.
  * Do not call `qdel(src)` from this function, `return COMPONENT_INCOMPATIBLE` instead
  */
/**
 * Properly removes the component from `parent` and cleans up references
 *
 * Arguments:
 * * force - makes it not check for and remove the component from the parent
 * * silent - deletes the component without sending a [COMSIG_COMPONENT_REMOVING] signal
 */
/**
  * Internal proc to handle behaviour of components when joining a parent
  */
/**
  * Internal proc to handle behaviour when being removed from a parent
  */
/**
  * Register the component with the parent object
  *
  * Use this proc to register with your parent object
  * Overridable proc that's called when added to a new parent
  */
/**
  * Unregister from our parent object
  *
  * Use this proc to unregister from your parent object
  * Overridable proc that's called when removed from a parent
  * *
  */
/**
  * Register to listen for a signal from the passed in target
  *
  * This sets up a listening relationship such that when the target object emits a signal
  * the source datum this proc is called upon, will recieve a callback to the given proctype
  * Return values from procs registered must be a bitfield
  *
  * Arguments:
  * * datum/target The target to listen for signals from
  * * sig_type_or_types Either a string signal name, or a list of signal names (strings)
  * * proctype The proc to call back when the signal is emitted
  * * override If a previous registration exists you must explicitly set this
  */
/**
  * Stop listening to a given signal from target
  *
  * Breaks the relationship between target and source datum, removing the callback when the signal fires
  * Doesn't care if a registration exists or not
  *
  * Arguments:
  * * datum/target Datum to stop listening to signals from
  * * sig_typeor_types Signal string key or list of signal keys to stop listening to specifically
  */
/**
  * Called on a component when a component of the same type was added to the same parent
  * See `/datum/component/var/dupe_mode`
  * `C`'s type will always be the same of the called component
  */
/**
  * Called on a component when a component of the same type was added to the same parent with COMPONENT_DUPE_SELECTIVE
  * See `/datum/component/var/dupe_mode`
  * `C`'s type will always be the same of the called component
  * return TRUE if you are absorbing the component, otherwise FALSE if you are fine having it exist as a duplicate component
  */
/**
  * Callback Just before this component is transferred
  *
  * Use this to do any special cleanup you might need to do before being deregged from an object
  *
  */
/**
  * Callback Just after a component is transferred
  *
  * Use this to do any special setup you need to do after being moved to a new object
  * Do not call `qdel(src)` from this function, `return COMPONENT_INCOMPATIBLE` instead
  *
  */
/**
  * Internal proc to create a list of our type and all parent types
  */
/**
  * Internal proc to handle most all of the signaling procedure
  * Will runtime if used on datums with an empty component list
  * Use the `SEND_SIGNAL` define instead
  */
// The type arg is casted so initial works, you shouldn't be passing a real instance into this
/**
  * Return any component assigned to this datum of the given type
  * This will throw an error if it's possible to have more than one component of that type on the parent
  *
  * Arguments:
  * * datum/component/c_type The typepath of the component you want to get a reference to
  */
// The type arg is casted so initial works, you shouldn't be passing a real instance into this
/**
  * Return any component assigned to this datum of the exact given type
  * This will throw an error if it's possible to have more than one component of that type on the parent
  *
  * Arguments:
  * * datum/component/c_type The typepath of the component you want to get a reference to
  */
/**
  * Get all components of a given type that are attached to this datum
  *
  * Arguments:
  * * c_type The component type path
  */
/**
  * Creates an instance of `new_type` in the datum and attaches to it as parent
  * Sends the `COMSIG_COMPONENT_ADDED` signal to the datum
  * Returns the component that was created. Or the old component in a dupe situation where `COMPONENT_DUPE_UNIQUE` was set
  * If this tries to add an component to an incompatible type, the component will be deleted and the result will be `null`. This is very unperformant, try not to do it
  * Properly handles duplicate situations based on the `dupe_mode` var
  */
/**
  * Get existing component of type, or create it and return a reference to it
  *
  * Use this if the item needs to exist at the time of this call, but may not have been created before now
  *
  * Arguments:
  * * component_type The typepath of the component to create or return
  * * ... additional arguments to be passed when creating the component if it does not exist
  */
/**
  * Removes the component from parent, ends up with a null parent
  */
/**
  * Transfer this component to another parent
  *
  * Component is taken from source datum
  *
  * Arguments:
  * * datum/component/target Target datum to transfer to
  */
/**
  * Transfer all components to target
  *
  * All components from source datum are taken
  *
  * Arguments:
  * * /datum/target the target to move the components to
  */
/**
  * Return the object that is the host of any UI's that this component has
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\crafting.dm. ----------------------
/*	This is what procs do:
	get_environment - gets a list of things accessable for crafting by user
	get_surroundings - takes a list of things and makes a list of key-types to values-amounts of said type in the list
	check_contents - takes a recipe and a key-type list and checks if said recipe can be done with available stuff
	check_tools - takes recipe, a key-type list, and a user and checks if there are enough tools to do the stuff, checks bugs one level deep
	construct_item - takes a recipe and a user, call all the checking procs, calls do_after, checks all the things again, calls del_reqs, creates result, calls CheckParts of said result with argument being list returned by deel_reqs
	del_reqs - takes recipe and a user, loops over the recipes reqs var and tries to find everything in the list make by get_environment and delete it/add to parts list, then returns the said list
*/
/**
  * Check that the contents of the recipe meet the requirements.
  *
  * user: The /mob that initated the crafting.
  * R: The /datum/crafting_recipe being attempted.
  * contents: List of items to search for R's reqs.
  */
/*Del reqs works like this:

	Loop over reqs var of the recipe
	Set var amt to the value current cycle req is pointing to, its amount of type we need to delete
	Get var/surroundings list of things accessable to crafting by get_environment()
	Check the type of the current cycle req
		If its reagent then do a while loop, inside it try to locate() reagent containers, inside such containers try to locate needed reagent, if there isn't remove thing from surroundings
			If there is enough reagent in the search result then delete the needed amount, create the same type of reagent with the same data var and put it into deletion list
			If there isn't enough take all of that reagent from the container, put into deletion list, substract the amt var by the volume of reagent, remove the container from surroundings list and keep searching
			While doing above stuff check deletion list if it already has such reagnet, if yes merge instead of adding second one
		If its stack check if it has enough amount
			If yes create new stack with the needed amount and put in into deletion list, substract taken amount from the stack
			If no put all of the stack in the deletion list, substract its amount from amt and keep searching
			While doing above stuff check deletion list if it already has such stack type, if yes try to merge them instead of adding new one
		If its anything else just locate() in in the list in a while loop, each find --s the amt var and puts the found stuff in deletion loop

	Then do a loop over parts var of the recipe
		Do similar stuff to what we have done above, but now in deletion list, until the parts conditions are satisfied keep taking from the deletion list and putting it into parts list for return

	After its done loop over deletion list and delete all the shit that wasn't taken by parts loop

	del_reqs return the list of parts resulting object will receive as argument of CheckParts proc, on the atom level it will add them all to the contents, on all other levels it calls ..() and does whatever is needed afterwards but from contents list already
*/
//For the UI related things we're going to assume the user is a mob rather than typesetting it to an atom as the UI isn't generated if the parent is an atom
//Mind helpers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\guncrafting.dm. ----------------------
// PARTS //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes.dm. ----------------------
/**
  * Run custom pre-craft checks for this recipe
  *
  * user: The /mob that initiated the crafting
  * collected_requirements: A list of lists of /obj/item instances that satisfy reqs. Top level list is keyed by requirement path.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\glassware\glassware.dm. ----------------------
//This file is for glass working types of things!
//////////////////////Chem Disk/////////////////////
//Two Steps                                       //
//Sells for 300 cr, takes 10 glass shets          //
//Useful for chem spliting                        //
////////////////////////////////////////////////////
//////////////////////Lens//////////////////////////
//Six Steps                                       //
//Sells for 1600 cr, takes 15 glass shets         //
//Useful for selling and later crafting           //
////////////////////////////////////////////////////
//////////////////////Spouty Flask//////////////////
//Four Steps                                      //
//Sells for 1200 cr, takes 20 glass shets         //
//Useful for selling and chemical things          //
////////////////////////////////////////////////////
//////////////////////Small Bulb Flask//////////////
//Two Steps                                       //
//Sells for 600 cr, takes 5 glass shets           //
//Useful for selling and chemical things          //
////////////////////////////////////////////////////
//////////////////////Large Bulb Flask//////////////
//Two Steps                                       //
//Sells for 1000 cr, takes 15 glass shets         //
//Useful for selling and chemical things          //
////////////////////////////////////////////////////
//////////////////////Tea Plates////////////////////
//Three Steps                                     //
//Sells for 1000 cr, takes 5 glass shets          //
//Useful for selling and chemical things          //
////////////////////////////////////////////////////
//////////////////////Tea Cup///////////////////////
//Four Steps                                      //
//Sells for 1600 cr, takes 6 glass shets          //
//Useful for selling and chemical things          //
////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\glassware\lens_crafting.dm. ----------------------
//This file is for crafting using a lens!
//Laser pointers - 2600
//NERD SHIT - 5000
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes\recipes_clothing.dm. ----------------------
////////
//Huds//
////////
/* //Kevinz doesn't want it as a recipe for now, leaving it in if anything ever changes to let it in
/datum/crafting_recipe/stunglasses
	name = "Stunglasses"
	result = /obj/item/clothing/glasses/sunglasses/stunglasses
	time = 60
	tools = list(TOOL_SCREWDRIVER, TOOL_WIRECUTTER)
	reqs = list(/obj/item/assembly/flash = 1,
				  /obj/item/clothing/glasses/sunglasses = 1,
				  /obj/item/stack/cable_coil = 5)
	category = CAT_CLOTHING
*/
// Eyepatch Glasses
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes\recipes_misc.dm. ----------------------
/////////////////
//Large Objects//
/////////////////
// Blood Sucker stuff //
///////////////////
//Tools & Storage//
///////////////////
////////////
//Vehicles//
////////////
/////////
//Toys///
/////////
////////////
//Unsorted//
////////////
//////////////
//Banners/////
//////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes\recipes_primal.dm. ----------------------
/*/datum/crafting_recipe/bow_tablet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes\recipes_robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\crafting\recipes\recipes_weapon_and_ammo.dm. ----------------------
//////////////////
///BOMB CRAFTING//
//////////////////
//////////////////
///GUNS CRAFTING//
//////////////////
//the Improvised Rifle will not be missed. Rest in Pieces 2019-2021
//////////////////
///AMMO CRAFTING//
//////////////////
////////////////////
// PARTS CRAFTING //
////////////////////
// BOKKEN CRAFTING
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fantasy\affix.dm. ----------------------
// For those occasional affixes which only make sense in certain circumstances
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fantasy\prefixes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fantasy\suffixes.dm. ----------------------
//////////// Good suffixes
//											  /obj/item/projectile/magic/fetch = 15,
//											  /obj/item/projectile/magic/flying = 15,
//////////// Bad suffixes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\fantasy\_fantasy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\plumbing\chemical_acclimator.dm. ----------------------
///We're overriding process and not send_request, because all process does is do the requests, so we might aswell cut out the middle man and save some code from running
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\plumbing\filter.dm. ----------------------
///The magical plumbing component used by the chemical filters. The different supply connects behave differently depending on the filters set on the chemical filter
///We check if the direction and reagent are valid to give. Needed for filters since different outputs have different behaviours
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\plumbing\reaction_chamber.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\plumbing\splitter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\plumbing\_plumbing.dm. ----------------------
///Can we be added to the ductnet?
///called from in process(). only calls process_request(), but can be overwritten for children with special behaviour
///check who can give us what we want, and how many each of them will give us
///returns TRUE when they can give the specified amount and reagent. called by process request
///this is where the reagent is actually transferred and is thus the finish point of our process()
///We create our luxurious piping overlays/underlays, to indicate where we do what. only called once if use_overlays = TRUE in Initialize()
///we stop acting like a plumbing thing and disconnect if we are, so we can safely be moved and stuff
///settle wherever we are, and start behaving like a piece of plumbing
/// Toggle our machinery on or off. This is called by a hook from default_unfasten_wrench with anchored as only param, so we dont have to copypaste this on every object that can move
/** We update our connects only when we settle down by taking our current and original direction to find our new connects
* If someone wants it to fucking spin while connected to something go actually knock yourself out
*/
///Give the direction of a pipe, and it'll return wich direction it originally was when it's object pointed SOUTH
//special case in-case we want to connect directly with another machine without a duct
///has one pipe input that only takes, example is manual output pipe
///has one pipe output that only supplies. example is liquid pump and manual input pipe
///input and output, like a holding tank
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\storage.dm. ----------------------
// External storage-related logic:
// /mob/proc/ClickOn() in /_onclick/click.dm - clicking items in storages
// /mob/living/Move() in /modules/mob/living/living.dm - hiding storage boxes on mob movement
//What players can access
//this proc can probably eat a refactor at some point.
//Resets something that is being removed from storage.
//Call this proc to handle the removal of an item from the storage item. The item will be moved to the new_location target, if that is null it's being deleted
//Tries to dump content
//This proc is called when you want to place an item into the storage item.
//Abuses the fact that lists are just references, or something like that.
/**
 * Check if we should trigger on_found()
 * If this returns TRUE, it means an on_found() returned TRUE and immediately broke the chain.
 * In most contexts, this should mean to stop.
 */
//This proc return 1 if the item can be picked up and 0 if it can't.
//Set the stop_messages to stop it from printing messages
//This proc handles items being inserted. It does not perform any checks of whether an item can or can't be inserted. That's done by can_be_inserted()
//The stop_warning parameter will stop the insertion message from being displayed. It is intended for cases where you are inserting multiple items at once,
//such as when picking up all the items on a tile with one click.
/**
  * Gets our max volume
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\ui.dm. ----------------------
/**
  * Generates a list of numbered_display datums for the numerical display system.
  */
/**
  * Orients all objects in legacy mode, and returns the objects to show to the user.
  */
/**
  * Orients all objects in .. volumetric mode. Does not support numerical display!
  */
/**
  * Shows our UI to a mob.
  */
/**
  * VV hooked to ensure no lingering screen objects.
  */
/**
  * Proc triggered by signal to ensure logging out clients don't linger.
  */
/**
  * Hides our UI from a mob
  */
/**
  * Returns TRUE if we are using volumetric UI instead of box UI
  */
/**
  * Gets our ui_boxes, making it if it doesn't exist.
  */
/**
  * Gets our ui_left, making it if it doesn't exist.
  */
/**
  * Gets our ui_close, making it if it doesn't exist.
  */
/**
  * Gets our ui_continuous, making it if it doesn't exist.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\bag_of_holding.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\bluespace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\emergency.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\implant.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\pockets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\rped.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\stack.dm. ----------------------
//Stack-only storage.
//emptying procs do not need modification as stacks automatically merge.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\tcg.dm. ----------------------
/**
 *A storage component to be used on card piles, for use as hands/decks/discard piles. Don't use on something that's not a card pile!
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\components\storage\concrete\_concrete.dm. ----------------------
// External storage-related logic:
// /mob/proc/ClickOn() in /_onclick/click.dm - clicking items in storages
// /mob/living/Move() in /modules/mob/living/living.dm - hiding storage boxes on mob movement
//Resets screen loc and other vars of something being removed from storage.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\anxiety.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\appendicitis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\beesease.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\brainrot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\cold.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\cold9.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\crabcancer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\dna_spread.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\fake_gbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\flu.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\fluspanish.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\gbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\heart_failure.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\magnitis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\parrotpossession.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\pierrot_throat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\retrovirus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\rhumba_beat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\transformation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\tuberculosis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\wizarditis.dm. ----------------------
/*
BIRUZ BENNAR
SCYAR NILA - teleport
NEC CANTIO - dis techno
EI NATH - shocking grasp
AULIE OXIN FIERA - knock
TARCOL MINTI ZHERI - forcewall
STI KALY - blind
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\_disease.dm. ----------------------
//add this disease if the host does not already have too many
//add the disease with no checks
//Return a string for admin logging uses, should describe the disease in detail
//Airborne spreading
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\_MobProcs.dm. ----------------------
//Proc to use when you 100% want to try to infect someone (ignoreing protective clothing and such), as long as they aren't immune
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\advance.dm. ----------------------
/*

	Advance Disease is a system for Virologist to Engineer their own disease with symptoms that have effects and properties
	which add onto the overall disease.

	If you need help with creating new symptoms or expanding the advance disease, ask for Giacom on #coderbus.

*/
/*

	PROPERTIES

 */
/*

	OLD PROCS

 */
// Randomly pick a symptom to activate.
// Tell symptoms stage changed
// Compares type then ID.
// Returns the advance disease with a different reference memory.
//Describe this disease to an admin in detail (for logging)
/*

	NEW PROCS

 */
// Mix the symptoms of two diseases (the src and the argument)
// Will generate new unique symptoms, use this if there are none. Returns a list of symptoms that were generated.
//Generate disease properties based on the effects. Returns an associated list.
// Assign the properties that are in the list.
// Assign the spread type and give it the correct description.
// Will generate a random cure, the less resistance the symptoms have, the harder the cure.
// Randomly generate a symptom, has a chance to lose or gain a symptom.
// Randomly remove a symptom.
// Randomly neuter a symptom.
// Name the disease.
// Return a unique ID of the disease.
// Add a symptom, if it is over the limit we take a random symptom away and add the new one.
// Simply removes the symptom.
// Neuter a symptom, so it will only affect stats
/*

	Static Procs

*/
// Mix a list of advance diseases and return the mixed result.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\presets.dm. ----------------------
// Cold
// Flu
//Randomly generated Disease, for virus crates and events
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\beard.dm. ----------------------
/*
//////////////////////////////////////
Facial Hypertrichosis

	No change to stealth.
	Increases resistance.
	Increases speed.
	Slighlty increases transmittability
	Intense Level.

BONUS
	Makes the mob grow a massive beard, regardless of gender.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\choking.dm. ----------------------
/*
//////////////////////////////////////

Choking

	Very very noticable.
	Lowers resistance.
	Decreases stage speed.
	Decreases transmittablity tremendously.
	Moderate Level.

Bonus
	Inflicts spikes of oxyloss

//////////////////////////////////////
*/
/*
//////////////////////////////////////

Asphyxiation

	Very very noticable.
	Decreases stage speed.
	Decreases transmittablity.

Bonus
	Inflicts large spikes of oxyloss
	Introduces Asphyxiating drugs to the system
	Causes cardiac arrest on dying victims.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\confusion.dm. ----------------------
/*
//////////////////////////////////////

Confusion

	Little bit hidden.
	Lowers resistance.
	Decreases stage speed.
	Not very transmissibile.
	Intense Level.

Bonus
	Makes the affected mob be confused for short periods of time.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\cough.dm. ----------------------
/*
//////////////////////////////////////

Coughing

	Noticable.
	Little Resistance.
	Doesn't increase stage speed much.
	Transmissibile.
	Low Level.

BONUS
	Will force the affected mob to drop small items!

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\deafness.dm. ----------------------
/*
//////////////////////////////////////

Deafness

	Slightly noticable.
	Lowers resistance.
	Decreases stage speed slightly.
	Decreases transmittablity.
	Intense Level.

Bonus
	Causes intermittent loss of hearing.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\disfiguration.dm. ----------------------
/*
//////////////////////////////////////
Disfiguration

	Hidden.
	No change to resistance.
	Increases stage speed.
	Slightly increases transmittability.
	Critical Level.

BONUS
	Adds disfiguration trait making the mob appear as "Unknown" to others.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\dizzy.dm. ----------------------
/*
//////////////////////////////////////

Dizziness

	Hidden.
	Lowers resistance considerably.
	Decreases stage speed.
	Reduced transmittability
	Intense Level.

Bonus
	Shakes the affected mob's screen for short periods.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\fever.dm. ----------------------
/*
//////////////////////////////////////

Fever

	No change to hidden.
	Increases resistance.
	Increases stage speed.
	Little transmittable.
	Low level.

Bonus
	Heats up your body.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\fire.dm. ----------------------
/*
//////////////////////////////////////

Spontaneous Combustion

	Slightly hidden.
	Lowers resistance tremendously.
	Decreases stage tremendously.
	Decreases transmittablity tremendously.
	Fatal Level.

Bonus
	Ignites infected mob.

//////////////////////////////////////
*/
/*
//////////////////////////////////////

Alkali perspiration

	Hidden.
	Lowers resistance.
	Decreases stage speed.
	Decreases transmittablity.
	Fatal Level.

Bonus
	Ignites infected mob.
	Explodes mob on contact with water.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\flesh_eating.dm. ----------------------
/*
//////////////////////////////////////

Necrotizing Fasciitis (AKA Flesh-Eating Disease)

	Very very noticable.
	Lowers resistance tremendously.
	No changes to stage speed.
	Decreases transmittablity temrendously.
	Fatal Level.

Bonus
	Deals brute damage over time.

//////////////////////////////////////
*/
/*
//////////////////////////////////////

Autophagocytosis (AKA Programmed mass cell death)

	Very noticable.
	Lowers resistance.
	Fast stage speed.
	Decreases transmittablity.
	Fatal Level.

Bonus
	Deals brute damage over time.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\genetics.dm. ----------------------
/*
//////////////////////////////////////

DNA Saboteur

	Very noticable.
	Lowers resistance tremendously.
	No changes to stage speed.
	Decreases transmittablity tremendously.
	Fatal Level.

Bonus
	Cleans the DNA of a person and then randomly gives them a trait.

//////////////////////////////////////
*/
// Archive their DNA before they were infected.
// Give them back their old DNA when cured.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\hallucigen.dm. ----------------------
/*
//////////////////////////////////////

Hallucigen

	Very noticable.
	Lowers resistance considerably.
	Decreases stage speed.
	Reduced transmittable.
	Critical Level.

Bonus
	Makes the affected mob be hallucinated for short periods of time.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\headache.dm. ----------------------
/*
//////////////////////////////////////

Headache

	Noticable.
	Highly resistant.
	Increases stage speed.
	Not transmittable.
	Low Level.

BONUS
	Displays an annoying message!
	Should be used for buffing your disease.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\heal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\itching.dm. ----------------------
/*
//////////////////////////////////////

Itching

	Not noticable or unnoticable.
	Resistant.
	Increases stage speed.
	Little transmissibility.
	Low Level.

BONUS
	Displays an annoying message!
	Should be used for buffing your disease.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\nanites.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\narcolepsy.dm. ----------------------
/*
//////////////////////////////////////
Narcolepsy
	Noticeable.
	Lowers resistance
	Decreases stage speed tremendously.
	Decreases transmittablity tremendously.

Bonus
	Causes drowsiness and sleep.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\oxygen.dm. ----------------------
/*
//////////////////////////////////////

Self-Respiration

	Slightly hidden.
	Lowers resistance significantly.
	Decreases stage speed significantly.
	Decreases transmittablity tremendously.
	Fatal Level.

Bonus
	The body generates salbutamol.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\sensory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\shedding.dm. ----------------------
/*
//////////////////////////////////////
Alopecia

	Not Noticeable.
	Increases resistance slightly.
	Increases stage speed.
	Transmittable.
	Intense Level.

BONUS
	Makes the mob lose hair.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\shivering.dm. ----------------------
/*
//////////////////////////////////////

Shivering

	No change to hidden.
	Increases resistance.
	Increases stage speed.
	Little transmittable.
	Low level.

Bonus
	Cools down your body.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\skin.dm. ----------------------
/*
//////////////////////////////////////
Polyvitiligo

	Noticeable.
	Increases resistance.
	Increases stage speed slightly.
	Increases transmission.
	Critical Level.

BONUS
	Makes the mob gain a random crayon powder colorful reagent.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\sneeze.dm. ----------------------
/*
//////////////////////////////////////

Sneezing

	Very Noticable.
	Increases resistance.
	Doesn't increase stage speed.
	Very transmissible.
	Low Level.

Bonus
	Forces a spread type of AIRBORNE
	with extra range!

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\species.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\symptoms.dm. ----------------------
// Symptoms are the effects that engineered advanced diseases do.
// Called when processing of the advance disease, which holds this symptom, starts.
// Called when the advance disease is going to be deleted or when the advance disease stops processing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\viral.dm. ----------------------
/*
//////////////////////////////////////
Viral adaptation

	Moderate stealth boost.
	Major Increases to resistance.
	Reduces stage speed.
	No change to transmission
	Critical Level.

BONUS
	Extremely useful for buffing viruses

//////////////////////////////////////
*/
/*
//////////////////////////////////////
Viral evolution

	Moderate stealth reduction.
	Major decreases to resistance.
	increases stage speed.
	increase to transmission
	Critical Level.

BONUS
	Extremely useful for buffing viruses

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\vision.dm. ----------------------
/*
//////////////////////////////////////

Hyphema (Eye bleeding)

	Slightly noticable.
	Lowers resistance tremendously.
	Decreases stage speed tremendously.
	Decreases transmittablity.
	Critical Level.

Bonus
	Causes blindness.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\voice_change.dm. ----------------------
/*
//////////////////////////////////////

Voice Change

	Noticeable.
	Lowers resistance.
	Decreases stage speed.
	Increased transmittable.
	Fatal Level.

Bonus
	Changes the voice of the affected mob. Causing confusion in communication.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\vomit.dm. ----------------------
/*
//////////////////////////////////////

Vomiting

	Very Very Noticable.
	Decreases resistance.
	Doesn't increase stage speed.
	Little transmissibility.
	Medium Level.

Bonus
	Forces the affected mob to vomit!
	Meaning your disease can spread via
	people walking on vomit.
	Makes the affected mob lose nutrition and
	heal toxin damage.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\weight.dm. ----------------------
/*
//////////////////////////////////////

Weight Loss

	Very Very Noticable.
	Decreases resistance.
	Decreases stage speed.
	Reduced Transmittable.
	High level.

Bonus
	Decreases the weight of the mob,
	forcing it to be skinny.

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\diseases\advance\symptoms\youth.dm. ----------------------
/*
//////////////////////////////////////
Eternal Youth

	Moderate stealth boost.
	Increases resistance tremendously.
	Increases stage speed tremendously.
	Reduces transmission tremendously.
	Critical Level.

BONUS
	Gives you immortality and eternal youth!!!
	Can be used to buff your virus

//////////////////////////////////////
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\art.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\beauty.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\bed_tucking.dm. ----------------------
/// Tucking element, for things that can be tucked into bed.
/**
 * Tuck our object into bed.
 *
 * tucked - the object being tucked
 * target_bed - the bed we're tucking them into
 * tucker - the guy doing the tucking
 */
/**
 * If we rotate our object, then we need to un-rotate it when it's picked up
 *
 * tucked - the object that is tucked
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\bsa_blocker.dm. ----------------------
//blocks bluespace artillery beams that try to fly through
//look not all elements need to be fancy
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\cleaning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\connect_loc.dm. ----------------------
/// This element hooks a signal onto the loc the current object is on.
/// When the object moves, it will unhook the signal and rehook it to the new object.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\decal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\dusts_on_catatonia.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\dusts_on_leaving_area.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\dwarfism.dm. ----------------------
///Very similar to squish, but for dwarves and shorties
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\earhealing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\embed.dm. ----------------------
/*
	The presence of this element allows an item (or a projectile carrying an item) to embed itself in a human or turf when it is thrown into a target (whether by hand, gun, or explosive wave) with either
	at least 4 throwspeed (EMBED_THROWSPEED_THRESHOLD) or ignore_throwspeed_threshold set to TRUE. Items meant to be used as shrapnel for projectiles should have ignore_throwspeed_threshold set to true.

	Whether we're dealing with a direct /obj/item (throwing a knife at someone) or an /obj/item/projectile with a shrapnel_type, how we handle things plays out the same, with one extra step separating them.
	Items simply make their COMSIG_MOVABLE_IMPACT or COMSIG_MOVABLE_IMPACT_ZONE check (against a closed turf or a carbon, respectively), while projectiles check on COMSIG_PROJECTILE_SELF_ON_HIT.
	Upon a projectile hitting a valid target, it spawns whatever type of payload it has defined, then has that try to embed itself in the target on its own.

	Otherwise non-embeddable or stickable items can be made embeddable/stickable through wizard events/sticky tape/admin memes.
*/
/// Checking to see if we're gonna embed into a human
/// We need the hit_zone if we're embedding into a human, so this proc only handles if we're embedding into a turf
///A different embed element has been attached, so we'll detach and let them handle things
///If we don't want to be embeddable anymore (deactivating an e-dagger for instance)
///Someone inspected our embeddable item
/**
  * checkEmbedProjectile() is what we get when a projectile with a defined shrapnel_type impacts a target.
  *
  * If we hit a valid target (carbon or closed turf), we create the shrapnel_type object and immediately call tryEmbed() on it, targeting what we impacted. That will lead
  *	it to call tryForceEmbed() on its own embed element (it's out of our hands here, our projectile is done), where it will run through all the checks it needs to.
  */
/**
  * Arguments:
  * * I- the item we're trying to insert into the target
  * * target- what we're trying to shish-kabob, either a bodypart or a carbon
  * * hit_zone- if our target is a carbon, try to hit them in this zone, if we don't have one, pick a random one. If our target is a bodypart, we already know where we're hitting.
  * * forced- if we want this to succeed 100%
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\empprotection.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\firestacker.dm. ----------------------
/**
  * Can be applied to /atom/movable subtypes to make them apply fire stacks to things they hit
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\flavor_text.dm. ----------------------
//subtypes with additional hooks for DNA and preferences.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\forced_gravity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\ghost_role_eligibility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\mob_holder.dm. ----------------------
//The item itself,
// escape when found if applicable
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\object_reskinning.dm. ----------------------
/*
 * # Element: Object Reskinning
 *
 * Allows players to modify the appearance of their object (and other attributes if possible)
 * PLEASE DO NOT HAVE INVALID VALUES IN unique_reskin I DON'T EVEN WANT TO KNOW WHAT HAPPENS.
 * USAGE:
 * unique_reskins = list(
 * 	"skin 1" = list(
 * 		"desc" = "very cool description",
 * 		"icon" = 'very_cool_icon.dmi'
 *		),
 * 	"skin 2" = list(
 *		"desc" = "not as cool description",
 *		"icon" = 'the_boring_skin.dmi'
 * 		)
 * )
*/
/*
 * Reskins an object according to user's choice.
 * Will detach itself if there's no skins or if done successfully but not always reskinnable.
 *
 * Arguments:
 * * to_reskin The object we will be reskinning
 * * user The user who wants to choose a skin for the object
*/
/**
  * Checks if we are allowed to interact with a radial menu for reskins
  *
  * Arguments:
  * * user The mob interacting with the menu
  * * obj The obj to be checking against
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\photosynthesis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\polychromic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\scavenging.dm. ----------------------
/// This proc has to be asynced (cough cough, do_after) in order to return the comsig values in time to stop the attack chain.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\snail_crawl.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\spellcasting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\squish.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\strippable.dm. ----------------------
/// An element for atoms that, when dragged and dropped onto a mob, opens a strip panel.
/// A representation of an item that can be stripped down
/// Gets the item from the given source.
/// Tries to equip the item onto the given source.
/// Returns TRUE/FALSE depending on if it is allowed.
/// This should be used for checking if an item CAN be equipped.
/// It should not perform the equipping itself.
/// Start the equipping process. This is the proc you should yield in.
/// Returns TRUE/FALSE depending on if it is allowed.
/// The proc that places the item on the source. This should not yield.
/// Tries to unequip the item from the given source.
/// Returns TRUE/FALSE depending on if it is allowed.
/// This should be used for checking if it CAN be unequipped.
/// It should not perform the unequipping itself.
/// Start the unequipping process. This is the proc you should yield in.
/// Returns TRUE/FALSE depending on if it is allowed.
/// The proc that unequips the item from the source. This should not yield.
/// Returns a STRIPPABLE_OBSCURING_* define to report on whether or not this is obscured.
/// Returns the ID of this item's strippable action.
/// Return `null` if there is no alternate action.
/// Any return value of this must be in StripMenu.
/// Performs an alternative action on this strippable_item.
/// `has_alternate_action` needs to be TRUE.
/// Returns whether or not this item should show.
/// A preset for equipping items onto mob slots
/// Returns the delay of equipping this item to a mob
/// A utility function for `/datum/strippable_item`s to start unequipping an item from a mob.
/// A utility function for `/datum/strippable_item`s to finish unequipping an item from a mob.
/// A representation of the stripping UI
/// Creates an assoc list of keys to /datum/strippable_item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\swimming.dm. ----------------------
/// Just for marking when someone's swimming.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\sword_point.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\tactical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\trash.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\turf_transparency.dm. ----------------------
///This proc sets up the signals to handle updating viscontents when turfs above/below update. Handle plane and layer here too so that they don't cover other obs/turfs in Dream Maker
///Updates the viscontents or underlays below this tile.
///Called when there is no real turf below this turf
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\update_icon_blocker.dm. ----------------------
//Prevents calling anything in update_icon() like update_icon_state() or update_overlays()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\update_icon_updates_onmob.dm. ----------------------
//update_icon() may change the onmob icons
//Very good name, I know
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\ventcrawling.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\weather_listener.dm. ----------------------
///This element just handles creating and destroying an area sound manager that's hooked into weather stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\wuv.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\_element.dm. ----------------------
/**
 * A holder for simple behaviour that can be attached to many different types
 *
 * Only one element of each type is instanced during game init.
 * Otherwise acts basically like a lightweight component.
 */
/// Activates the functionality defined by the element on the given target datum
/// Deactivates the functionality defines by the element on the given datum
//DATUM PROCS
/// Finds the singleton for the element type given and attaches it to src
/**
 * Finds the singleton for the element type given and detaches it from src
 * You only need additional arguments beyond the type if you're using [ELEMENT_BESPOKE]
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\screentips\contextual_screentip_bare_hands.dm. ----------------------
/// Apply basic contextual screentips when the user hovers over this item with an empty hand.
/// A "Type B" interaction.
/// This stacks with other contextual screentip elements, though you may want to register the signal/flag manually at that point for performance.
// If you're curious about `use_named_parameters`, it's because you should use named parameters!
// AddElement(/datum/element/contextual_screentip_bare_hands, lmb_text = list(INTENT_HELP = "Do the thing"))
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\screentips\contextual_screentip_item_typechecks.dm. ----------------------
/// Apply basic contextual screentips when the user hovers over this item with a provided item.
/// A "Type B" interaction.
/// This stacks with other contextual screentip elements, though you may want to register the signal/flag manually at that point for performance.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\screentips\contextual_screentip_sharpness.dm. ----------------------
/// Apply basic contextual screentips when the user hovers over this item with an item of the given tool behavior.
/// A "Type B" interaction.
/// This stacks with other contextual screentip elements, though you may want to register the signal/flag manually at that point for performance.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\elements\screentips\contextual_screentip_tools.dm. ----------------------
/// Apply basic contextual screentips when the user hovers over this item with an item of the given tool behavior.
/// A "Type B" interaction.
/// This stacks with other contextual screentip elements, though you may want to register the signal/flag manually at that point for performance.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\helper_datums\events.dm. ----------------------
/*
 * WARRANTY VOID IF CODE USED
 */
//	Arguments: event_type as text, proc_holder as datum, proc_name as text
//	Returns: New event, null on error.
//  Arguments: event_type as text, any number of additional arguments to pass to event handler
//  Returns: null
// Arguments: event_type as text, E as /datum/event
// Returns: TRUE if event cleared, FALSE on error
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\helper_datums\getrev.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\helper_datums\icon_snapshot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\helper_datums\stack_end_detector.dm. ----------------------
/**
	Stack End Detector.
	Can detect if a given code stack has exited, used by the mc for stack overflow detection.

 **/
/** Prime the stack overflow detector.
	Store the return value of this proc call in a proc level var.
	Can only be called once.
**/
/// Returns true if the stack is still going. Calling before the canary has been primed also returns true
/// Stack canary. Will go away if the stack it was primed by is ended by byond for return or stack overflow reasons.
/// empty proc to avoid warnings about unused variables. Call this proc on your canary in the stack it's watching.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\helper_datums\teleport.dm. ----------------------
// teleatom: atom to teleport
// destination: destination to teleport to
// precision: teleport precision (0 is most precise, the default)
// effectin: effect to show right before teleportation
// effectout: effect to show right after teleportation
// asoundin: soundfile to play before teleportation
// asoundout: soundfile to play after teleportation
// forceMove: if false, teleport will use Move() proc (dense objects will prevent teleportation)
// no_effects: disable the default effectin/effectout of sparks
// forced: whether or not to ignore no_teleport
// Skyrat Change
// Safe location finder
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\looping_sounds\item_sounds.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\looping_sounds\machinery_sounds.dm. ----------------------
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /datum/looping_sound/hypertorus
// 	mid_sounds = list('sound/machines/hypertorus/loops/hypertorus_nominal.ogg' = 1)
// 	mid_length = 60
// 	volume = 55
// 	extra_range = 15
// 	vary = TRUE
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /datum/looping_sound/jackpot
// 	mid_length = 11
// 	mid_sounds = list('sound/machines/roulettejackpot.ogg')
// 	volume = 85
// 	vary = TRUE
/*
/datum/looping_sound/server
	mid_sounds = list('sound/machines/tcomms/tcomms_mid1.ogg'=1,'sound/machines/tcomms/tcomms_mid2.ogg'=1,'sound/machines/tcomms/tcomms_mid3.ogg'=1,'sound/machines/tcomms/tcomms_mid4.ogg'=1,\
										'sound/machines/tcomms/tcomms_mid5.ogg'=1,'sound/machines/tcomms/tcomms_mid6.ogg'=1,'sound/machines/tcomms/tcomms_mid7.ogg'=1)
	mid_length = 1.8 SECONDS
	extra_range = -11
	falloff_distance = 1
	falloff_exponent = 5
	volume = 50
*/
// /datum/looping_sound/gravgen
// 	mid_sounds = list('sound/machines/gravgen/gravgen_mid1.ogg'=1,'sound/machines/gravgen/gravgen_mid2.ogg'=1,'sound/machines/gravgen/gravgen_mid3.ogg'=1,'sound/machines/gravgen/gravgen_mid4.ogg'=1,)
// 	mid_length = 1.8 SECONDS
// 	extra_range = 10
// 	volume = 70
// 	falloff_distance = 5
// 	falloff_exponent = 20
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\looping_sounds\weather.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\looping_sounds\_looping_sound.dm. ----------------------
/*
	output_atoms (list of atoms) The destination(s) for the sounds

	mid_sounds (list or soundfile) Since this can be either a list or a single soundfile you can have random sounds. May contain further lists but must contain a soundfile at the end.
	mid_length (num) The length to wait between playing mid_sounds

	start_sound (soundfile) Played before starting the mid_sounds loop
	start_length (num) How long to wait before starting the main loop after playing start_sound

	end_sound (soundfile) The sound played after the main loop has concluded

	chance (num) Chance per loop to play a mid_sound
	volume (num) Sound output volume
	max_loops (num) The max amount of loops to run for.
	direct (bool) If true plays directly to provided atoms instead of from them
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\CaveGenerator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\JungleGenerator.dm. ----------------------
//the random offset applied to square coordinates, causes intermingling at biome borders
///Seeds the rust-g perlin noise with a random number.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\_MapGenerator.dm. ----------------------
///This type is responsible for any map generation behavior that is done in areas, override this to allow for area-specific map generation. This generation is ran by areas in initialize.
///This proc will be ran by areas on Initialize, and provides the areas turfs as argument to allow for generation.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\biomes\_biome.dm. ----------------------
///This datum handles the transitioning from a turf to a specific biome, and handles spawning decorative structures and mobs.
///This proc handles the creation of a turf of a specific biome type
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\Cavegens\IcemoonCaves.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mapgen\Cavegens\LavalandGenerator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\boxing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\cqc.dm. ----------------------
///Subtype of CQC. Only used for the chef.
///Prevents use if the cook is not in the kitchen.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\krav_maga.dm. ----------------------
//Krav Maga Gloves
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\mushpunch.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\plasma_fist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\psychotic_brawl.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\rising_bass.dm. ----------------------
//Repulse Punch - Slams the opponent far away from you.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\sleeping_carp.dm. ----------------------
///Gnashing Teeth: Harm Harm, high force punch on every second harm punch, has a chance to crit for near triple damage
///Crashing Wave Kick: Harm Disarm combo, throws people seven tiles backwards
///Keelhaul: Harm Grab combo, knocks people down, deals stamina damage while they're on the floor
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\wrestling.dm. ----------------------
//Subtype of wrestling, reserved for the wrestling belts found in the holodeck
//Make sure that moves can only be used on people wearing the holodeck belt
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\martial\_martial.dm. ----------------------
///Gets called when a projectile hits the owner. Returning anything other than BULLET_ACT_HIT will stop the projectile from hitting the mob.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\materials\basemats.dm. ----------------------
///Has no special properties.
///Breaks extremely easily but is transparent.
/*
Color matrices are like regular colors but unlike with normal colors, you can go over 255 on a channel.
Unless you know what you're doing, only use the first three numbers. They're in RGB order.
*/
///Has no special properties. Could be good against vampires in the future perhaps.
///Slight force decrease. It's gold, it's soft as fuck.
///Small force increase, for diamond swords
///Is slightly radioactive
///Adds firestacks on hit (Still needs support to turn into gas on destruction)
///Can cause bluespace effects on use. (Teleportation) (Not yet implemented)
///Honks and slips
///Mediocre force increase
///Force decrease
///Force decrease and mushy sound effect. (Not yet implemented)
///Stronk force increase
///RPG Magic. (Admin only)
//I don't like sand. It's coarse, and rough, and irritating, and it gets everywhere.
//And now for our lavaland dwelling friends, sand, but in stone form! Truly revolutionary.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\materials\meat.dm. ----------------------
///It's gross, gets the name of it's owner, and is all kinds of fucked up
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\materials\pizza.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\materials\_material.dm. ----------------------
/*! Material datum

Simple datum which is instanced once per type and is used for every object of said material. It has a variety of variables that define behavior. Subtyping from this makes it easier to create your own materials.

*/
/** Handles initializing the material.
 *
 * Arugments:
 * - _id: The ID the material should use. Overrides the existing ID.
 */
///This proc is called when the material is added to an object.
///This proc is called when a material updates an object's description
///This proc is called when the material is added to an object specifically.
///This proc is called when the material is removed from an object.
///This proc is called when the material is removed from an object specifically.
/**
 * This proc is called when the mat is found in an item that's consumed by accident. see /obj/item/proc/on_accidental_consumption.
 * Arguments
 * * M - person consuming the mat
 * * S - (optional) item the mat is contained in (NOT the item with the mat itself)
 */
/** Returns the composition of this material.
 *
 * Mostly used for alloys when breaking down materials.
 *
 * Arguments:
 * - amount: The amount of the material to break down.
 * - breakdown_flags: Some flags dictating how exactly this material is being broken down.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mocking\client.dm. ----------------------
/// This should match the interface of /client wherever necessary.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\beauty_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\drink_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\drug_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\generic_negative_events.dm. ----------------------
//These are unused so far but I want to remember them to use them later
//End unused
//Cursed stuff below
//Cursed stuff end.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\generic_positive_events.dm. ----------------------
//Power gamer stuff below
//Cursed stuff below.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\mood_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mood_events\needs_events.dm. ----------------------
//nutrition
//charge
//Disgust
//Generic needs events
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\actions.dm. ----------------------
//spider webs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\antenna.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\body.dm. ----------------------
//These mutations change your overall "form" somehow, like size
//Epilepsy gives a very small chance to have a seizure every life tick, knocking you unconscious.
//Unstable DNA induces random mutations!
//Cough gives you a chronic cough that causes you to drop items.
//Dwarfism shrinks your body and lets you pass tables.
//Clumsiness has a very large amount of small drawbacks depending on item.
//Tourettes causes you to randomly stand in place and shout.
//Deafness makes you deaf.
//Monified turns you into a monkey.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\chameleon.dm. ----------------------
//Chameleon causes the owner to slowly become transparent when not moving.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\cluwne.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\cold.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\combined.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\hulk.dm. ----------------------
//Hulk turns your skin green, and allows you to punch through walls.
/**
  *Checks damage of a hulk's arm and applies bone wounds as necessary.
  *
  *Called by specific atoms being attacked, such as walls. If an atom
  *does not call this proc, than punching that atom will not cause
  *arm breaking (even if the atom deals recoil damage to hulks).
  *Arguments:
  *arg1 is the arm to evaluate damage of and possibly break.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\radioactive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\sight.dm. ----------------------
//Nearsightedness restricts your vision by several tiles.
//Blind makes you blind. Who knew?
///Thermal Vision lets you see mobs through walls
///X-ray Vision lets you see through walls.
//Laser Eyes lets you shoot lasers from your eyes!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\space_adaptation.dm. ----------------------
//Cold Resistance gives your entire body an orange halo, and makes you immune to the effects of vacuum and cold.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\speech.dm. ----------------------
//These are all minor mutations that affect your speech somehow.
//Individual ones aren't commented since their functions should be evident at a glance
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\telekinesis.dm. ----------------------
//Telekinesis lets you interact with objects from range, and gives you a light blue halo around your head.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\mutations\_mutations.dm. ----------------------
// Runs through all the coefficients and uses this to determine which chromosomes the
// mutation can take. Stores these as text strings in a list.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ruins\icemoon.dm. ----------------------
// Hey! Listen! Update \config\iceruinblacklist.txt with your new ruins!
// above ground only
// above and below ground together
// below ground only
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ruins\lavaland.dm. ----------------------
// Hey! Listen! Update \config\lavaruinblacklist.txt with your new ruins!
/* we've our own
/datum/map_template/ruin/lavaland/ash_walker
	name = "Ash Walker Nest"
	id = "ash-walker"
	description = "A race of unbreathing lizards live here, that run faster than a human can, worship a broken dead city, and are capable of reproducing by something involving tentacles? \
	Probably best to stay clear."
	suffix = "lavaland_surface_ash_walker1.dmm"
	cost = 20
	allow_duplicates = FALSE
*/
/* Replaced with Alien Nest Ruins
/datum/map_template/ruin/lavaland/xeno_nest
	name = "Xenomorph Nest"
	id = "xeno-nest"
	description = "These xenomorphs got bored of horrifically slaughtering people on space stations, and have settled down on a nice lava filled hellscape to focus on what's really important in life. \
	Quality memes."
	suffix = "lavaland_surface_xeno_nest.dmm"
	cost = 20 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ruins\space.dm. ----------------------
// Hey! Listen! Update \config\spaceruinblacklist.txt with your new ruins!
//Space ruins for the station z
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\ruins\station.dm. ----------------------
// Boxstation
// Lavaland
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\screentips\atom_context.dm. ----------------------
/// Create a "Type-B" contextual screentip interaction, registering to `add_context()`.
/// This will run `add_context()` when the atom is hovered over by an item for context.
/// `add_context()` will *not* be called unless this is run.
/// This is not necessary for Type-B interactions, as you can just apply the flag and register to the signal yourself.
/// Creates a "Type-B" contextual screentip interaction.
/// When a user hovers over this, this proc will be called in order
/// to provide context for contextual screentips.
/// You must call `register_context()` in order for this to be registered.
/// A screentip context list is a list that has context keys (SCREENTIP_CONTEXT_*, from __DEFINES/screentips.dm)
/// that map to the action as text.
/// If you mutate the list in this signal, you must return CONTEXTUAL_SCREENTIP_SET.
/// `source` can, in all cases, be replaced with `src`, and only exists because this proc directly connects to a signal.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\screentips\item_context.dm. ----------------------
/// Create a "Type-A" contextual screentip interaction, registering to `add_item_context()`.
/// This will run `add_item_context()` when the item hovers over another object for context.
/// `add_item_context()` will *not* be called unless this is run.
/// This is not necessary for Type-A interactions, as you can just apply the flag and register to the signal yourself.
/// Creates a "Type-A" contextual screentip interaction.
/// When a user hovers over something with this item in hand, this proc will be called in order
/// to provide context for contextual screentips.
/// You must call `register_item_context()` in order for this to be registered.
/// A screentip context list is a list that has context keys (SCREENTIP_CONTEXT_*, from __DEFINES/screentips.dm)
/// that map to the action as text.
/// If you mutate the list in this signal, you must return CONTEXTUAL_SCREENTIP_SET.
/// `source` can, in all cases, be replaced with `src`, and only exists because this proc directly connects to a signal.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\screentips\screentips.dm. ----------------------
/// Stores the cursor hint icons for screentip context.
/*
 * # Builds context with each intent for this key
 * Args:
 * - context = list (REQUIRED)
 * 	- context[key] = list (REQUIRED)
 * - key = string (REQUIRED)
 * - allow_image = boolean (not required)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\blacksmithing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\_check_skills.dm. ----------------------
// yeah yeah verbs suck whatever I suck at this fix this someone please - kevinz000
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\_skill.dm. ----------------------
/**
  * Skill datums
  */
/**
  * Ensures what someone's setting as a value for this skill is valid.
  */
/**
  * Sets the new value of this skill in the holder skills list.
  * As well as possible feedback messages or secondary effects on value change, that's on you.
  */
/**
  * Checks if a value is greater
  */
/**
  * Get a list of data used in the skill panel menu.
  */
// Just saying, the choice to use different sub-parent-types is to force coders to resolve issues as I won't be implementing custom procs to grab skill levels in a certain context.
// Aka: So people don't forget to change checks if they change a skill's progression type.
/**
  * Classing r p g styled skills, tiered by lvl, and current/nextlvl experience.
  */
//Builds the levels list.
/**
  * Gets the base value required to reach a level specified by the 'num' arg.
  */
//quite the reference, no?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\_skill_holder.dm. ----------------------
/**
  * Skill holder datums
  * All procs are tied to the mind, since they are always expected to have a skill holder anyway.
  */
/**
  * Grabs the value of a skill.
  */
/**
  * Grabs the level of a skill. Only supported by skills with tiers or levels.
  */
/**
  * Grabs our affinity for a skill. !!This is a multiplier!!
  */
/**
  * Sets the value of a skill.
  */
/**
  * Boosts a skill to a value if not aobve
  */
/**
  * Automatic skill increase, multiplied by skill affinity if existing.
  * Only works if skill is numerical or levelled..
  */
/**
  * Generic value modifier proc that uses one skill.
  * Args:
  * * value : the value to modify, may be a delay, damage, probability.
  * * threshold : The difficulty of the action, in short. Refer to __DEFINES/skills/defines.dm for the defines.
  * * modifier_is_multiplier : wheter the modifier is a multiplier or a divisor.
  */
/**
  * Generic value modifier proc that uses several skills, intended for items.
  * Args:
  * * item/I : the item used in this action. its used_skills list variable contains the skills exercised with it.
  * * value : the value to modify, may be a delay, damage, probability.
  * * traits : the required traits each skill (either in I.used_skills or the skill datum skill_traits) must have to influence
  * * 			the value.
  * * bad_traits : the opposite of the above.
  * * modifier_is_multiplier : wheter the modifier is a multiplier or a divisor.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\_skill_modifier.dm. ----------------------
/**
  * Base skill modifier datum, used to modify a player skills without directly touching their values, levels and affinity
  * and cause lots of edge cases. These are fairly simple overall... make a subtype though, don't use this one.
  */
///Body bound modifier signal procs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\modifiers\job.dm. ----------------------
/// Jobbie skill modifiers.
/// Level skill modifiers below.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\modifiers\mood.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\skills\modifiers\organs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\station_traits\admin_panel.dm. ----------------------
/// Opens the station traits admin panel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\station_traits\negative_traits.dm. ----------------------
// Abstract station trait used for traits that modify a random event in some way (their weight or max occurrences).
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\station_traits\neutral_traits.dm. ----------------------
/// Moves the new dog somewhere safe, equips it with the old one's inventory and makes it deadchat_playable.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\station_traits\positive_traits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\station_traits\_station_trait.dm. ----------------------
///Base class of station traits. These are used to influence rounds in one way or the other by influencing the levers of the station.
/// Proc ran when round starts. Use this for roundstart effects.
///type of info the centcom report has on this trait, if any.
/// Will attempt to revert the station trait, used by admins.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\buffs.dm. ----------------------
//Largely beneficial effects go here, even if they have drawbacks. An example is provided in Shadow Mend.
//Used by changelings to rapidly heal
//Heals 10 brute and oxygen damage every second, and 5 fire
//Being on fire will suppress this healing
//Hippocratic Oath: Applied when the Rod of Asclepius is activated.
// Changeling's anatomic panacea now in buff form. Directly fixes issues instead of injecting chems
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\debuffs.dm. ----------------------
//Largely negative status effects go here, even if they have small benificial effects
//STUN EFFECTS
//STUN
//KNOCKDOWN
//IMMOBILIZED
//PARALYZED
//DAZED
//UNCONSCIOUS
//SLEEPING
//OTHER DEBUFFS
/**
  * What happens when this mark gets popped
  *
  * Adds actual functionality to each mark
  */
//Each mark has diffrent effects when it is destroyed that combine with the mansus grasp effect.
//Kindle: Used by servants of Ratvar. 10-second knockdown, reduced by 1 second per 5 damage taken while the effect is active. Does not take into account Oxy-damage
//Ichorial Stain: Applied to servants revived by a vitality matrix. Prevents them from being revived by one again until the effect fades.
//GOLEM GANG
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\gas.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\neutral.dm. ----------------------
//entirely neutral or internal status effects go here
// this status effect is used to negotiate the high-fiving capabilities of all concerned parties
/// Hook up the specified carbon mob to be offered the item in question, give them the alert and signals and all
/// Remove the alert and signals for the specified carbon mob. Automatically removes the status effect when we lost the last taker
/// One of our possible takers moved, see if they left us hanging
/// The offerer moved, see if anyone is out of range now
/// We lost the item, give it up
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\status_effect.dm. ----------------------
//Status effects are used to apply temporary or permanent effects to mobs. Mobs are aware of their status effects at all times.
//This file contains their code, plus code for applying and removing them.
//When making a new status effect, add a define to status_effects.dm in __DEFINES for ease of use!
/**
  * Multiplied to clickdelays
  */
////////////////
// ALERT HOOK //
////////////////
//////////////////
// HELPER PROCS //
//////////////////
//////////////////////
// STACKING EFFECTS //
//////////////////////
/// Status effect from multiple sources, when all sources are removed, so is the effect
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\status_effects\wound_effects.dm. ----------------------
// The shattered remnants of your broken limbs fill you with determination!
/////////////////////////
//////// WOUNDS /////////
/////////////////////////
// wound alert
// wound status effect base
/// check if the wound getting removed is the wound we're tied to
// bones
// cuts
// pierce
// burns
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\traits\good.dm. ----------------------
//predominantly positive traits
//this file is named weirdly so that positive traits are listed above negative ones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\traits\negative.dm. ----------------------
//predominantly negative traits
/// Called when the quirk holder moves. Updates the quirk holder's mood.
// small chance to make eye contact with inanimate objects/mindless mobs because of nerves
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\traits\neutral.dm. ----------------------
//traits with no real impact that can be taken freely
//MAKE SURE THESE DO NOT MAJORLY IMPACT GAMEPLAY. those should be positive or negative traits.
// Moved Colorist quirk to a loadout item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\traits\_quirk.dm. ----------------------
//every quirk in this folder should be coded around being applied on spawn
//these are NOT "mob quirks" like GOTTAGOFAST, but exist as a medium to apply them and other different effects
/*

Commented version of Nearsighted to help you add your own traits
Use this as a guideline

/datum/quirk/nearsighted
	name = "Nearsighted"
	///The trait's name

	desc = "You are nearsighted without prescription glasses, but spawn with a pair."
	///Short description, shows next to name in the trait panel

	value = -1
	///If this is above 0, it's a positive trait; if it's not, it's a negative one; if it's 0, it's a neutral

	mob_trait = TRAIT_NEARSIGHT
	///This define is in __DEFINES/traits.dm and is the actual "trait" that the game tracks
	///You'll need to use "HAS_TRAIT_FROM(src, X, sources)" checks around the code to check this; for instance, the Ageusia trait is checked in taste code
	///If you need help finding where to put it, the declaration finder on GitHub is the best way to locate it

	gain_text = "<span class='danger'>Things far away from you start looking blurry.</span>"
	lose_text = "<span class='notice'>You start seeing faraway things normally again.</span>"
	medical_record_text = "Subject has permanent nearsightedness."
	///These three are self-explanatory

/datum/quirk/nearsighted/on_spawn()
	var/mob/living/carbon/human/H = quirk_holder
	var/obj/item/clothing/glasses/regular/glasses = new(get_turf(H))
	H.put_in_hands(glasses)
	H.equip_to_slot(glasses, ITEM_SLOT_EYES)
	H.regenerate_icons()

//This whole proc is called automatically
//It spawns a set of prescription glasses on the user, then attempts to put it into their hands, then attempts to make them equip it.
//This means that if they fail to equip it, they glasses spawn in their hands, and if they fail to be put into the hands, they spawn on the ground
//Hooray for fallbacks!
//If you don't need any special effects like spawning glasses, then you don't need an add()

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather.dm. ----------------------
/**
  * Causes weather to occur on a z level in certain area types
  *
  * The effects of weather occur across an entire z-level. For instance, lavaland has periodic ash storms that scorch most unprotected creatures.
  * Weather always occurs on different z levels at different times, regardless of weather type.
  * Can have custom durations, targets, and can automatically protect indoor areas.
  *
  */
/**
  * Telegraphs the beginning of the weather on the impacted z levels
  *
  * Sends sounds and details to mobs in the area
  * Calculates duration and hit areas, and makes a callback for the actual weather to start
  *
  */
/**
  * Starts the actual weather and effects from it
  *
  * Updates area overlays and sends sounds and messages to mobs to notify them
  * Begins dealing effects from weather to mobs in the area
  *
  */
/**
  * Weather enters the winding down phase, stops effects
  *
  * Updates areas to be in the winding down phase
  * Sends sounds and messages to mobs to notify them
  *
  */
/**
  * Fully ends the weather
  *
  * Effects no longer occur and area overlays are removed
  * Removes weather from processing completely
  *
  */
/**
  * Returns TRUE if the living mob can be affected by the weather
  *
  */
/**
  * Affects the mob with whatever the weather does
  *
  */
/**
  * Updates the overlays on impacted areas
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\ash_storm.dm. ----------------------
//A reference to this list is passed into area sound managers, and it's modified in a manner that preserves that reference in ash_storm.dm
//Emberfalls are the result of an ash storm passing by close to the playable area of lavaland. They have a 10% chance to trigger in place of an ash storm.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\floor_is_lava.dm. ----------------------
//Causes fire damage to anyone not standing on a dense object.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\ice_storm.dm. ----------------------
//Same as snow_storm basically, but cools outside turf temps. StreetStation only
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\radiation_storm.dm. ----------------------
//Radiation storms occur when the station passes through an irradiated area, and irradiate anyone not standing in protected areas (maintenance, emergency storage, etc.)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\snow_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\weather\weather_types\void_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\airalarm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\airlock.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\apc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\autolathe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\emitter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\explosive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\microwave.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\mod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\mulebot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\particle_accelerator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\r_n_d.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\suit_storage_unit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\syndicatebomb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\tesla_coil.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\vending.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wires\_wires.dm. ----------------------
/// Called from [/atom/proc/emp_act]
// Overridable Procs
// End Overridable Procs
//gremlins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\bones.dm. ----------------------
/*
	Bones
*/
// TODO: well, a lot really, but i'd kill to get overlays and a bonebreaking effect like Blitz: The League, similar to electric shock skeletons
/*
	Base definition
*/
/*
	Overwriting of base procs
*/
/// If we're a human who's punching something with a broken arm, we might hurt ourselves doing so
/*
	New common procs for /datum/wound/blunt/
*/
/*
	Moderate (Joint Dislocation)
*/
/// If someone is snapping our dislocated joint back into place by hand with an aggro grab and help intent
/// If someone is snapping our dislocated joint into a fracture by hand with an aggro grab and harm or disarm intent
/*
	Severe (Hairline Fracture)
*/
// doesn't make much sense for "a" bone to stick out of your head
/// if someone is using bone gel on our wound
/// if someone is using surgical tape on our wound
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\burns.dm. ----------------------
// TODO: well, a lot really, but specifically I want to add potential fusing of clothing/equipment on the affected area, and limb infections, though those may go in body part code
/*
	new burn common procs
*/
/// if someone is using ointment on our burns
/// if someone is using mesh on our burns
/// Paramedic UV penlights
// people complained about burns not healing on stasis beds, so in addition to checking if it's cured, they also get the special ability to very slowly heal on stasis beds if they have the healing effects stored
// we don't even care about first degree burns, straight to second
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\loss.dm. ----------------------
/// Our special proc for our special dismembering, the wounding type only matters for what text we have
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\pierce.dm. ----------------------
/*
	Pierce
*/
/// If someone is using a suture to close this cut
/// If someone is using either a cautery tool or something with heat to cauterize this pierce
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\slash.dm. ----------------------
/*
	Cuts
*/
/* BEWARE, THE BELOW NONSENSE IS MADNESS. bones.dm looks more like what I have in mind and is sufficiently clean, don't pay attention to this messiness */
/// if a felinid is licking this cut to reduce bleeding
/// If someone's putting a laser gun up to our cut to cauterize it
/// If someone is using either a cautery tool or something with heat to cauterize this cut
/// If someone is using a suture to close this cut
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\_scars.dm. ----------------------
/**
  * scars are cosmetic datums that are assigned to bodyparts once they recover from wounds. Each wound type and severity have their own descriptions for what the scars
  * look like, and then each body part has a list of "specific locations" like your elbow or wrist or wherever the scar can appear, to make it more interesting than "right arm"
  *
  *
  * Arguments:
  * *
  */
/**
  * generate() is used to actually fill out the info for a scar, according to the limb and wound it is provided.
  *
  * After creating a scar, call this on it while targeting the scarred bodypart with a given wound to apply the scar.
  *
  * Arguments:
  * * BP- The bodypart being targeted
  * * W- The wound being used to generate the severity and description info
  * * add_to_scars- Should always be TRUE unless you're just storing a scar for later usage, like how cuts want to store a scar for the highest severity of cut, rather than the severity when the wound is fully healed (probably demoted to moderate)
  */
/// Used when we finalize a scar from a healing cut
/// Used to "load" a persistent scar
/// What will show up in examine_more() if this scar is visible
/// Whether a scar can currently be seen by the viewer
/// Used to format a scar to safe in preferences for persistent scars
/// Used to format a scar to safe in preferences for persistent scars
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\datums\wounds\_wounds.dm. ----------------------
/*
	Wounds are specific medical complications that can arise and be applied to (currently) carbons, with a focus on humans. All of the code for and related to this is heavily WIP,
	and the documentation will be slanted towards explaining what each part/piece is leading up to, until such a time as I finish the core implementations. The original design doc
	can be found at https://hackmd.io/@Ryll/r1lb4SOwU

	Wounds are datums that operate like a mix of diseases, brain traumas, and components, and are applied to a /obj/item/bodypart (preferably attached to a carbon) when they take large spikes of damage
	or under other certain conditions (thrown hard against a wall, sustained exposure to plasma fire, etc). Wounds are categorized by the three following criteria:
		1. Severity: Either MODERATE, SEVERE, or CRITICAL. See the hackmd for more details
		2. Viable zones: What body parts the wound is applicable to. Generic wounds like broken bones and severe burns can apply to every zone, but you may want to add special wounds for certain limbs
			like a twisted ankle for legs only, or open air exposure of the organs for particularly gruesome chest wounds. Wounds should be able to function for every zone they are marked viable for.
		3. Damage type: Currently either BRUTE or BURN. Again, see the hackmd for a breakdown of my plans for each type.

	When a body part suffers enough damage to get a wound, the severity (determined by a roll or something, worse damage leading to worse wounds), affected limb, and damage type sustained are factored into
	deciding what specific wound will be applied. I'd like to have a few different types of wounds for at least some of the choices, but I'm just doing rough generals for now. Expect polishing
*/
/**
  * apply_wound() is used once a wound type is instantiated to assign it to a bodypart, and actually come into play.
  *
  *
  * Arguments:
  * * L: The bodypart we're wounding, we don't care about the person, we can get them through the limb
  * * silent: Not actually necessary I don't think, was originally used for demoting wounds so they wouldn't make new messages, but I believe old_wound took over that, I may remove this shortly
  * * old_wound: If our new wound is a replacement for one of the same time (promotion or demotion), we can reference the old one just before it's removed to copy over necessary vars
  * * smited- If this is a smite, we don't care about this wound for stat tracking purposes (not yet implemented)
  */
/// Remove the wound from whatever it's afflicting, and cleans up whateverstatus effects it had or modifiers it had on interaction times. ignore_limb is used for detachments where we only want to forget the victim
/**
  * replace_wound() is used when you want to replace the current wound with a new wound, presumably of the same category, just of a different severity (either up or down counts)
  *
  * This proc actually instantiates the new wound based off the specific type path passed, then returns the new instantiated wound datum.
  *
  * Arguments:
  * * new_type- The TYPE PATH of the wound you want to replace this, like /datum/wound/slash/severe
  * * smited- If this is a smite, we don't care about this wound for stat tracking purposes (not yet implemented)
  */
/// The immediate negative effects faced as a result of the wound
/// Additional beneficial effects when the wound is gained, in case you want to give a temporary boost to allow the victim to try an escape or last stand
/**
  * try_treating() is an intercept run from [/mob/living/carbon/proc/attackby] right after surgeries but before anything else. Return TRUE here if the item is something that is relevant to treatment to take over the interaction.
  *
  * This proc leads into [/datum/wound/proc/treat] and probably shouldn't be added onto in children types. You can specify what items or tools you want to be intercepted
  * with var/list/treatable_by and var/treatable_tool, then if an item fulfills one of those requirements and our wound claims it first, it goes over to treat() and treat_self().
  *
  * Arguments:
  * * I: The item we're trying to use
  * * user: The mob trying to use it on us
  */
/// Return TRUE if we have an item that can only be used while aggro grabbed (unhanded aggro grab treatments go in [/datum/wound/proc/try_handling]). Treatment is still is handled in [/datum/wound/proc/treat]
/// Like try_treating() but for unhanded interactions from humans, used by joint dislocations for manual bodypart chiropractice for example.
/// Someone is using something that might be used for treating the wound on this limb
/// If var/processing is TRUE, this is run on each life tick
/// For use in do_after callback checks
/// When our parent bodypart is hurt
/// Called from cryoxadone and pyroxadone when they're proc'ing. Wounds will slowly be fixed separately from other methods when these are in effect. crappy name but eh
/// When synthflesh is applied to the victim, we call this. No sense in setting up an entire chem reaction system for wounds when we only care for a few chems. Probably will change in the future
/// Called when the patient is undergoing stasis, so that having fully treated a wound doesn't make you sit there helplessly until you think to unbuckle them
/// Called when we're crushed in an airlock or firedoor, for one of the improvised joint dislocation fixes
/// Used when we're being dragged while bleeding, the value we return is how much bloodloss this wound causes from being dragged. Since it's a proc, you can let bandages soak some of the blood
/**
  * get_examine_description() is used in carbon/examine and human/examine to show the status of this wound. Useful if you need to show some status like the wound being splinted or bandaged.
  *
  * Return the full string line you want to show, note that we're already dealing with the 'warning' span at this point, and that \n is already appended for you in the place this is called from
  *
  * Arguments:
  * * mob/user: The user examining the wound's owner, if that matters
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\atoms.dm. ----------------------
/**
 * The base type for nearly all physical objects in SS13

 * Lots and lots of functionality lives here, although in general we are striving to move
 * as much as possible to the components/elements system
 */
/**
 * Called when an atom is created in byond (built in engine proc)
 *
 * Not a lot happens here in SS13 code, as we offload most of the work to the
 * [Intialization][/atom/proc/Initialize] proc, mostly we run the preloader
 * if the preloader is being used and then call [InitAtom][/datum/controller/subsystem/atoms/proc/InitAtom] of which the ultimate
 * result is that the Intialize proc is called.
 *
 * We also generate a tag here if the DF_USE_TAG flag is set on the atom
 */
/**
 * The primary method that objects are setup in SS13 with
 *
 * we don't use New as we have better control over when this is called and we can choose
 * to delay calls or hook other logic in and so forth
 *
 * During roundstart map parsing, atoms are queued for intialization in the base atom/New(),
 * After the map has loaded, then Initalize is called on all atoms one by one. NB: this
 * is also true for loading map templates as well, so they don't Initalize until all objects
 * in the map file are parsed and present in the world
 *
 * If you're creating an object at any point after SSInit has run then this proc will be
 * immediately be called from New.
 *
 * mapload: This parameter is true if the atom being loaded is either being intialized during
 * the Atom subsystem intialization, or if the atom is being loaded from the map template.
 * If the item is being created at runtime any time after the Atom subsystem is intialized then
 * it's false.
 *
 * You must always call the parent of this proc, otherwise failures will occur as the item
 * will not be seen as initalized (this can lead to all sorts of strange behaviour, like
 * the item being completely unclickable)
 *
 * You must not sleep in this proc, or any subprocs
 *
 * Any parameters from new are passed through (excluding loc), naturally if you're loading from a map
 * there are no other arguments
 *
 * Must return an [initialization hint][INITIALIZE_HINT_NORMAL] or a runtime will occur.
 *
 * Note: the following functions don't call the base for optimization and must copypasta handling:
 * * [/turf/proc/Initialize]
 * * [/turf/open/space/proc/Initialize]
 */
/**
 * Late Intialization, for code that should run after all atoms have run Intialization
 *
 * To have your LateIntialize proc be called, your atoms [Initalization][/atom/proc/Initialize]
 *  proc must return the hint
 * [INITIALIZE_HINT_LATELOAD] otherwise you will never be called.
 *
 * useful for doing things like finding other machines on GLOB.machines because you can guarantee
 * that all atoms will actually exist in the "WORLD" at this time and that all their Intialization
 * code has been run
 */
/// Put your [AddComponent] calls here
/**
 * Top level of the destroy chain for most atoms
 *
 * Cleans up the following:
 * * Removes alternate apperances from huds that see them
 * * qdels the reagent holder from atoms if it exists
 * * clears the orbiters list
 * * clears overlays and priority overlays
 * * clears the light object
 */
/**
  * Checks if a projectile should ricochet off of us. Projectiles get final say.
  * [__DEFINES/projectiles.dm] for return values.
  */
/// Returns true or false to allow the mover to move through src
/**
 * Is this atom currently located on centcom
 *
 * Specifically, is it on the z level and within the centcom areas
 *
 * You can also be in a shuttleshuttle during endgame transit
 *
 * Used in gamemode to identify mobs who have escaped and for some other areas of the code
 * who don't want atoms where they shouldn't be
 */
/**
 * Is the atom in any of the centcom syndicate areas
 *
 * Either in the syndie base on centcom, or any of their shuttles
 *
 * Also used in gamemode code for win conditions
 */
/**
 * Is the atom in an away mission
 *
 * Must be in the away mission z-level to return TRUE
 *
 * Also used in gamemode code for win conditions
 */
//common name
// Convenience procs to see if a container is open for chemistry handling
/**
 * React to a hit by a projectile object
 *
 * Default behaviour is to send the [COMSIG_ATOM_BULLET_ACT] and then call [on_hit][/obj/item/projectile/proc/on_hit] on the projectile
 *
 * @params
 * P - projectile
 * def_zone - zone hit
 * piercing_hit - is this hit piercing or normal?
 */
//used on altdisarm() for special interactions between the shoved victim (target) and the src, with user being the one shoving the target on it.
// IMPORTANT: if you wish to add a new own shove_act() to a certain object, remember to add SHOVABLE_ONTO to its obj_flags bitfied var first.
///Generate the full examine string of this atom (including icon for goonchat)
/**
  * Called when a mob examines (shift click or verb) this atom twice (or more) within EXAMINE_MORE_TIME (default 1.5 seconds)
  *
  * This is where you can put extra information on something that may be superfluous or not important in critical gameplay
  * moments, while allowing people to manually double-examine to take a closer look
  *
  * Produces a signal [COMSIG_PARENT_EXAMINE_MORE]
  */
/**
 * Updates the appearence of the icon
 *
 * Mostly delegates to update_name, update_desc, and update_icon
 *
 * Arguments:
 * - updates: A set of bitflags dictating what should be updated. Defaults to [ALL]
 */
/// Updates the name of the atom
/// Updates the description of the atom
/// Updates the icon of the atom
/// Updates the icon state of the atom
/**
 * Builds a list of overlays for the atom, this will not apply them.
 * If you need to update overlays, use [update_icon(UPDATE_OVERLAYS)],
 * This proc is intended to be overridden.
 */
/**
  * Called when a wave explosion hits this atom. Do not override this.
  *
  * Returns explosion power to "allow through".
  */
/**
  * Called when a wave explosion hits this atom.
  *
  * Returns explosion power to "allow through". Standard handling and flag overrides in [wave_explode()].
  */
//returns the mob's dna info as a list, to be inserted in an object's blood_DNA list
//to add a mob's dna info into an object's blood_DNA list.
//to add blood dna info to the object's blood_DNA list
//to add blood from a mob onto something, and transfer their dna info
//to add blood onto something, with blood dna info to include.
/**
  * Respond to a electric bolt action on our item
  *
  * Default behaviour is to return, we define here to allow for cleaner code later on
  */
//This proc is called on the location of an atom when the atom is Destroy()'d
//called when the turf the atom resides on is ChangeTurfed
//the vision impairment to give to the mob whose perspective is set to that atom (e.g. an unfocused camera giving you an impaired vision when looking through it)
//the sight changes to give to the mob whose perspective is set to that atom (e.g. A mob with nightvision loses its nightvision while looking through a normal camera)
//Hook for running code when a dir change occurs
//If a mob logouts/logins in side of an object you can use this proc
/*
	Atom Colour Priority System
	A System that gives finer control over which atom colour to colour the atom with.
	The "highest priority" one is always displayed as opposed to the default of
	"whichever was set last is displayed"
*/
/*
	Adds an instance of colour_type to the atom's atom_colours list
*/
/*
	Removes an instance of colour_type from the atom's atom_colours list
*/
/*
	Resets the atom's color to null, and then sets it to the highest priority
	colour available
*/
// Tool behavior procedure. Redirects to tool-specific procs by default.
// You can override it to catch all tool interactions, for use in complex deconstruction procs.
// Just don't forget to return ..() in the end.
// Tool-specific behavior procs. To be overridden in subtypes.
/**
  * Called after a shuttle is loaded **from map template initially**.
  *
  * @params
  * * port - Mobile port/shuttle
  * * dock - Stationary dock the shuttle's at
  * * idnum - ID number of the shuttle
  */
// Generic logging helper
// Helper for logging chat messages or other logs with arbitrary inputs (e.g. announcements)
// Helper for logging of messages with only one sender and receiver
/**
  * Log a combat message in the attack log
  *
  * Arguments:
  * * atom/user - argument is the actor performing the action
  * * atom/target - argument is the target of the action
  * * what_done - is a verb describing the action (e.g. punched, throwed, kicked, etc.)
  * * atom/object - is a tool with which the action was made (usually an item)
  * * addition - is any additional text, which will be appended to the rest of the log line
  */
/**
  * log_wound() is for when someone is *attacked* and suffers a wound. Note that this only captures wounds from damage, so smites/forced wounds aren't logged, as well as demotions like cuts scabbing over
  *
  * Note that this has no info on the attack that dealt the wound: information about where damage came from isn't passed to the bodypart's damaged proc. When in doubt, check the attack log for attacks at that same time
  * TODO later: Add logging for healed wounds, though that will require some rewriting of healing code to prevent admin heals from spamming the logs. Not high priority
  *
  * Arguments:
  * * victim- The guy who got wounded
  * * suffered_wound- The wound, already applied, that we're logging. It has to already be attached so we can get the limb from it
  * * dealt_damage- How much damage is associated with the attack that dealt with this wound.
  * * dealt_wound_bonus- The wound_bonus, if one was specified, of the wounding attack
  * * dealt_bare_wound_bonus- The bare_wound_bonus, if one was specified *and applied*, of the wounding attack. Not shown if armor was present
  * * base_roll- Base wounding ability of an attack is a random number from 1 to (dealt_damage ** WOUND_DAMAGE_EXPONENT). This is the number that was rolled in there, before mods
  */
///Sets the custom materials for an item.
/**
  * Returns true if this atom has gravity for the passed in turf
  *
  * Sends signals COMSIG_ATOM_HAS_GRAVITY and COMSIG_TURF_HAS_GRAVITY, both can force gravity with
  * the forced gravity var
  *
  * Gravity situations:
  * * No gravity if you're not in a turf
  * * No gravity if this atom is in is a space turf
  * * Gravity if the area it's in always has gravity
  * * Gravity if there's a gravity generator on the z level
  * * Gravity if the Z level has an SSMappingTrait for ZTRAIT_GRAVITY
  * * otherwise no gravity
  */
/**
  * Causes effects when the atom gets hit by a rust effect from heretics
  *
  * Override this if you want custom behaviour in whatever gets hit by the rust
  */
/**
  * Used to set something as 'open' if it's being used as a supplypod
  *
  * Override this if you want an atom to be usable as a supplypod.
  */
/**
  * Used to set something as 'closed' if it's being used as a supplypod
  *
  * Override this if you want an atom to be usable as a supplypod.
  */
//Update the screentip to reflect what we're hoverin over
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\atoms_movable.dm. ----------------------
//For physical constraints to travelling up/down.
///Reports the event of the change in value of the pulledby variable.
/**
 * Recursively set glide size for atom's pulled things
 */
///Sets the anchored var and returns if it was sucessfully changed or not.
///If this returns FALSE then callback will not be called.
/// Returns true or false to allow src to move through the blocker, mover has final say
/// called when this atom is removed from a storage item, which is passed on as S. The loc variable is already set to the new destination before this is called.
/// called when this atom is added into a storage item, which is passed on as S. The loc variable is already set to the storage item.
//called when a mob resists while inside a container that is itself inside something.
/// Common proc used by painting tools like spraycans and palettes that can access the entire 24 bits color space.
//TODO: Better floating
/* 	Language procs
*	Unless you are doing something very specific, these are the ones you want to use.
*/
/// Gets or creates the relevant language holder. For mindless atoms, gets the local one. For atom with mind, gets the mind one.
/// Grants the supplied language and sets omnitongue true.
/// Grants every language.
/// Removes a single language.
/// Removes every language and sets omnitongue false.
/// Adds a language to the blocked language list. Use this over remove_language in cases where you will give languages back later.
/// Removes a language from the blocked language list.
/// Checks if atom has the language. If spoken is true, only checks if atom can speak the language.
/// Checks if atom can speak the language.
/// Returns the result of tongue specific limitations on spoken languages.
/// Returns selected language, if it can be spoken, or finds, sets and returns a new selected language if possible.
/// Gets a random understood language, useful for hallucinations and such.
/// Gets a random spoken language, useful for forced speech and such.
/// Copies all languages into the supplied atom/language holder. Source should be overridden when you
/// do not want the language overwritten by later atom updates or want to avoid blocked languages.
/// Empties out the atom specific languages and updates them according to the current atoms language holder.
/// As a side effect, it also creates missing language holders in the process.
/// Sets the vocal bark for the atom, using the bark's ID
/* End language procs */
//Returns an atom's power cell, if it has one. Overload for individual items.
/**
 * Updates the grab state of the movable
 *
 * This exists to act as a hook for behaviour
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\atoms_movement.dm. ----------------------
// File for movement procs for atom/movable
////////////////////////////////////////
// Here's where we rewrite how byond handles movement except slightly different
// To be removed on step_ conversion
// All this work to prevent a second bump
/**
 * meant for movement with zero side effects. only use for objects that are supposed to move "invisibly" (like camera mobs or ghosts)
 * if you want something to move onto a tile with a beartrap or recycler or tripmine or mouse without that object knowing about it at all, use this
 * most of the time you want forceMove()
 */
//Called after a successful Move(). By this point, we've already moved
// Make sure you know what you're doing if you call this, this is intended to only be called by byond directly.
// You probably want CanPass()
//oldloc = old location on atom, inserted when forceMove is called and ONLY when forceMove is called!
///Proc to modify the movement_type and hook behavior associated with it changing.
///////////// FORCED MOVEMENT /////////////
/**
 * Called whenever an object moves and by mobs when they attempt to move themselves through space
 * And when an object or action applies a force on src, see [newtonian_move][/atom/movable/proc/newtonian_move]
 *
 * Return 0 to have src start/keep drifting in a no-grav area and 1 to stop/not start drifting
 *
 * Mobs should return 1 if they should be able to move of their own volition, see [/client/proc/Move]
 *
 * Arguments:
 * * movement_dir - 0 when stopping or any dir when trying to move
 */
/// Only moves the object if it's under no gravity
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\communications.dm. ----------------------
/*
  HOW IT WORKS

  The SSradio is a global object maintaining all radio transmissions, think about it as about "ether".
  Note that walkie-talkie, intercoms and headsets handle transmission using nonstandard way.
  procs:

    add_object(obj/device as obj, var/new_frequency as num, var/filter as text|null = null)
      Adds listening object.
      parameters:
        device - device receiving signals, must have proc receive_signal (see description below).
          one device may listen several frequencies, but not same frequency twice.
        new_frequency - see possibly frequencies below;
        filter - thing for optimization. Optional, but recommended.
                 All filters should be consolidated in this file, see defines later.
                 Device without listening filter will receive all signals (on specified frequency).
                 Device with filter will receive any signals sent without filter.
                 Device with filter will not receive any signals sent with different filter.
      returns:
       Reference to frequency object.

    remove_object (obj/device, old_frequency)
      Obliviously, after calling this proc, device will not receive any signals on old_frequency.
      Other frequencies will left unaffected.

   return_frequency(var/frequency as num)
      returns:
       Reference to frequency object. Use it if you need to send and do not need to listen.

  radio_frequency is a global object maintaining list of devices that listening specific frequency.
  procs:

    post_signal(obj/source as obj|null, datum/signal/signal, var/filter as text|null = null, var/range as num|null = null)
      Sends signal to all devices that wants such signal.
      parameters:
        source - object, emitted signal. Usually, devices will not receive their own signals.
        signal - see description below.
        filter - described above.
        range - radius of regular byond's square circle on that z-level. null means everywhere, on all z-levels.

  obj/proc/receive_signal(datum/signal/signal, var/receive_method as num, var/receive_param)
    Handler from received signals. By default does nothing. Define your own for your object.
    Avoid of sending signals directly from this proc, use spawn(0). Do not use sleep() here please.
      parameters:
        signal - see description below. Extract all needed data from the signal before doing sleep(), spawn() or return!
        receive_method - may be TRANSMISSION_WIRE or TRANSMISSION_RADIO.
          TRANSMISSION_WIRE is currently unused.
        receive_param - for TRANSMISSION_RADIO here comes frequency.

  datum/signal
    vars:
    source
      an object that emitted signal. Used for debug and bearing.
    data
      list with transmitting data. Usual use pattern:
        data["msg"] = "hello world"
    encryption
      Some number symbolizing "encryption key".
      Note that game actually do not use any cryptography here.
      If receiving object don't know right key, it must ignore encrypted signal in its receive_signal.

*/
/*	the radio controller is a confusing piece of shit and didnt work
	so i made radios not use the radio controller.
*/
// For information on what objects or departments use what frequencies,
// see __DEFINES/radio.dm. Mappers may also select additional frequencies for
// use in maps, such as in intercoms.
//If range > 0, only post to devices on the same z_level and within range
//Use range = -1, to restrain to the same z_level without limiting range
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\say.dm. ----------------------
/*
 	Miauw's big Say() rewrite.
	This file has the basic atom/movable level speech procs.
	And the base of the send_speech() proc, which is the core of saycode.
*/
/// Converts specific characters, like +, |, and _ to formatted output.
/// Quirky citadel proc for our custom sayverbs to strip the verb out. Snowflakey as hell, say rewrite 3.0 when?
//HACKY VIRTUALSPEAKER STUFF BEYOND THIS POINT
//these exist mostly to deal with the AIs hrefs and job stuff.
//VIRTUALSPEAKERS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\shuttle_engines.dm. ----------------------
//Ugh this is a lot of copypasta from emitters, welding need some boilerplate reduction
//Propagates the change to the shuttle.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\sound.dm. ----------------------
// /tg/ reverb disabled
/*
///Default override for echo
/sound
	echo = list(
		0, // Direct
		0, // DirectHF
		-10000, // Room, -10000 means no low frequency sound reverb
		-10000, // RoomHF, -10000 means no high frequency sound reverb
		0, // Obstruction
		0, // ObstructionLFRatio
		0, // Occlusion
		0.25, // OcclusionLFRatio
		1.5, // OcclusionRoomRatio
		1.0, // OcclusionDirectRatio
		0, // Exclusion
		1.0, // ExclusionLFRatio
		0, // OutsideVolumeHF
		0, // DopplerFactor
		0, // RolloffFactor
		0, // RoomRolloffFactor
		1.0, // AirAbsorptionFactor
		0, // Flags (1 = Auto Direct, 2 = Auto Room, 4 = Auto RoomHF)
	)
	environment = SOUND_ENVIRONMENT_NONE //Default to none so sounds without overrides dont get reverb
*/
/*! playsound

playsound is a proc used to play a 3D sound in a specific range. This uses SOUND_RANGE + extra_range to determine that.

source - Origin of sound
soundin - Either a file, or a string that can be used to get an SFX
vol - The volume of the sound, excluding falloff and pressure affection.
vary - bool that determines if the sound changes pitch every time it plays
extrarange - modifier for sound range. This gets added on top of SOUND_RANGE
falloff_exponent - Rate of falloff for the audio. Higher means quicker drop to low volume. Should generally be over 1 to indicate a quick dive to 0 rather than a slow dive.
frequency - playback speed of audio
channel - The channel the sound is played at
pressure_affected - Whether or not difference in pressure affects the sound (E.g. if you can hear in space)
ignore_walls - Whether or not the sound can pass through walls.
falloff_distance - Distance at which falloff begins. Sound is at peak volume (in regards to falloff) aslong as it is in this range.

*/
/*! playsound

playsound_local is a proc used to play a sound directly on a mob from a specific turf.
This is called by playsound to send sounds to players, in which case it also gets the max_distance of that sound.

turf_source - Origin of sound
soundin - Either a file, or a string that can be used to get an SFX
vol - The volume of the sound, excluding falloff
vary - bool that determines if the sound changes pitch every time it plays
frequency - playback speed of audio
falloff_exponent - Rate of falloff for the audio. Higher means quicker drop to low volume. Should generally be over 1 to indicate a quick dive to 0 rather than a slow dive.
channel - The channel the sound is played at
pressure_affected - Whether or not difference in pressure affects the sound (E.g. if you can hear in space)
max_distance - The peak distance of the sound, if this is a 3D sound
falloff_distance - Distance at which falloff begins, if this is a 3D sound
distance_multiplier - Can be used to multiply the distance at which the sound is heard

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\world.dm. ----------------------
//This happens after the Master subsystem new(s) (it's a global datum)
//So subsystems globals exist, but are not initialised
/// Auxtools atmos
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\ai_monitored.dm. ----------------------
//Only need to use one camera
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas.dm. ----------------------
/**
 * # area
 *
 * A grouping of tiles into a logical space, mostly used by map editors
 */
/**
  * These two vars allow for multiple unique areas to be linked to a master area
  * and share some functionalities such as APC powernet nodes, fire alarms etc, without sacrificing
  * their own flags, statuses, variables and more snowflakes.
  * Friendly reminder: no map edited areas.
  */
/**
 * A list of teleport locations
 *
 * Adding a wizard area teleport list because motherfucking lag -- Urist
 * I am far too lazy to make it a proper list of areas so I'll just make it run the usual telepot routine at the start of the game
 */
/**
 * Generate a list of turfs you can teleport to from the areas list
 *
 * Includes areas if they're not a shuttle or not not teleport or have no contents
 *
 * The chosen turf is the first item in the areas contents that is a station level
 *
 * The returned list of turfs is sorted by name
 */
/**
 * Called when an area loads
 *
 *  Adds the item to the GLOB.areas_by_type list based on area type
 */
/**
 * Initalize this area
 *
 * intializes the dynamic area lighting and also registers the area with the z level via
 * reg_in_areas_in_z
 *
 * returns INITIALIZE_HINT_LATELOAD
 */
/**
 * Sets machine power levels in the area
 */
/**
 * Register this area as belonging to a z level
 *
 * Ensures the item is added to the SSmapping.areas_in_z list for this z
 */
/**
 * Destroy an area and clean it up
 *
 * Removes the area from GLOB.areas_by_type and also stops it processing on SSobj
 *
 * This is despite the fact that no code appears to put it on SSobj, but
 * who am I to argue with old coders
 */
/**
 * Generate a power alert for this area
 *
 * Sends to all ai players, alert consoles, drones and alarm monitor programs in the world
 */
///Get rid of any dangling camera refs
/**
  * Update the icon state of the area
  *
  * Im not sure what the heck this does, somethign to do with weather being able to set icon
  * states on areas?? where the heck would that even display?
  */
/**
  * Update the icon of the area (overridden to always be null for space
  */
/*
#define EQUIP 1
#define LIGHT 2
#define ENVIRON 3
*/
// called when power status changes
/**
 * Call back when an atom enters an area
 *
 * Sends signals COMSIG_AREA_ENTERED and COMSIG_ENTER_AREA (to the atom)
 *
 * If the area has ambience, then it plays some ambience music to the ambience channel
 */
///Divides total beauty in the room by roomsize to allow us to get an average beauty per tile.
/**
 * Called when an atom exits an area
 *
 * Sends signals COMSIG_AREA_EXITED and COMSIG_EXIT_AREA (to the atom)
 */
// A hook so areas can modify the incoming args
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\Space_Station_13_areas.dm. ----------------------
/*

### This file contains a list of all the areas in your station. Format is as follows:

/area/CATEGORY/OR/DESCRIPTOR/NAME   (you can make as many subdivisions as you want)
	name = "NICE NAME" (not required but makes things really nice)
	icon = 'ICON FILENAME' (defaults to 'icons/turf/areas.dmi')
	icon_state = "NAME OF ICON" (defaults to "unknown" (blank))
	requires_power = FALSE (defaults to true)
	ambience_index = AMBIENCE_GENERIC   (picks the ambience from an assoc list in ambience.dm)
	ambientsounds = list() (defaults to ambience_index's assoc on Initialize(). override it as "ambientsounds = list('sound/ambience/signal.ogg')" or by changing ambience_index)

NOTE: there are two lists of areas in the end of this file: centcom and station itself. Please maintain these lists valid. --rastaf0

*/
/*-----------------------------------------------------------------------------*/
//EXTRA
//STATION13
//AI
//AI - Turret_protected
//Maintenance
//Maintenance - Departmental
//Maintenance - Prison
//Maintenance - Generic
//Hallway
//Command
//Command - Teleporters
//Command - AI Monitored
//Commons
// Commons - Vacant Rooms
//Commons - Storage
//Areas that predominantly only apply to CogStation
//Service
// /area/service
// 	airlock_wires = /datum/wires/airlock/service
//Engineering
//Engineering - Construction
//Solars
//Solar Maint
//MedBay
//Security
//Security - AI Monitored
//Cargo
//Science
// Telecommunications Satellite
//Telecommunications - On Station
//External Hull Access
//Routers (currently exclusive to CogStation)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\away_content.dm. ----------------------
/*
Unused icons for new areas are "awaycontent1" ~ "awaycontent30"
*/
// Away Missions
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\centcom.dm. ----------------------
// CENTCOM
// Side note, be sure to change the network_root_id of any areas that are not a part of centcom
// and just using the z space as safe harbor.  It shouldn't matter much as centcom z is isolated
// from everything anyway
// dear mappers who make winterball: THROW YOUR AREAS IN A DIFFERENT MAP, THIS IS DEFAULT GAME STUFF NOT EVENT STUFF
//THUNDERDOME
//ENEMY
//Wizard
//Abductors
//Syndicates
//CAPTURE THE FLAG
// REEBE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\edina.dm. ----------------------
///Nova Edina Streets///
/////////////////Edina specific derivitives///////////////////////////////////
////////////////Mapping helper/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\holodeck.dm. ----------------------
/*
	Power tracking: Use the holodeck computer's power grid
	Asserts are to avoid the inevitable infinite loops
*/
/*
	This is the standard holodeck.  It is intended to allow you to
	blow off steam by doing stupid things like laying down, throwing
	spheres at holes, or bludgeoning people.
*/
// Bad programs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\mining.dm. ----------------------
/**********************Mine areas**************************/
/**********************Lavaland Areas**************************/
/**********************Ice Moon Areas**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\shuttles.dm. ----------------------
//These are shuttle areas; all subtypes are only used as teleportation markers, they have no actual function beyond that.
//Multi area shuttles are a thing now, use subtypes! ~ninjanomnom
////////////////////////////Multi-area shuttles////////////////////////////
////////////////////////////Syndicate infiltrator////////////////////////////
////////////////////////////Pirate Shuttle////////////////////////////
////////////////////////////Bounty Hunter Shuttles////////////////////////////
////////////////////////////White Ship////////////////////////////
////////////////////////////Single-area shuttles////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\ruins\icemoon.dm. ----------------------
// Icemoon Ruins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\ruins\lavaland.dm. ----------------------
//Lavaland Ruins
//Xeno Nest
//ash walker nest
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\ruins\space.dm. ----------------------
//Space Ruin Parents
/////////////
// Ruins of "onehalf" ship
//Ruin of Hotel
//Ruin of Space Diner
//Ruin of "Skelter" ship
//Ruin of Derelict Oupost
//Ruin of Space Bar
//Ruin of turretedoutpost
//Ruin of old teleporter
//Ruin of mech transport
//Ruin of gas the lizard
//Ruin of Deep Storage
//Ruin of Abandoned Zoo
//Ruin of ancient Space Station
//DERELICT
//DJSTATION
//ABANDONED TELEPORTER
//OLD AI SAT
//ABANDONED BOX WHITESHIP
//SYNDICATE LISTENING POST STATION
// Abductor Replication Lab
//HELL'S FACTORY OPERATING FACILITY
// /area/ruin/space/has_grav/hellfactory
// 	name = "Hell Factory"
// 	icon_state = "yellow"
// /area/ruin/space/has_grav/hellfactoryoffice
// 	name = "Hell Factory Office"
// 	icon_state = "red"
// 	area_flags = VALID_TERRITORY | BLOBS_ALLOWED | UNIQUE_AREA | NOTELEPORT
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\ruins\templates.dm. ----------------------
//Template ruin areas
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\area\areas\ruins\_ruins.dm. ----------------------
//Parent types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\game_mode.dm. ----------------------
/*
 * GAMEMODES (by Rastaf0)
 *
 * In the new mode system all special roles are fully supported.
 * You can have proper wizards/traitors/changelings/cultists during any mode.
 * Only two things really depends on gamemode:
 * 1. Starting roles, equipment and preparations
 * 2. Conditions of finishing the round.
 *
 */
///Checks to see if the game can be setup and ran with the current number of players or whatnot.
///Attempts to select players for special roles the mode might have.
///Everyone should now be on the station and have their normal gear.  This is the place to give the special roles extra things
///Handles late-join antag assignments
///Allows rounds to basically be "rerolled" should the initial premise fall through. Also known as mulligan antags.
///Called by the gameSSticker
//For things that do not die easily
// This is a frequency selection system. You may imagine it like a raffle where each player can have some number of tickets. The more tickets you have the more likely you are to
// "win". The default is 100 tickets. If no players use any extra tickets (earned with the antagonist rep system) calling this function should be equivalent to calling the normal
// pick() function. By default you may use up to 100 extra tickets per roll, meaning at maximum a player may double their chances compared to a player who has no extra tickets.
//
// The odds of being picked are simply (your_tickets / total_tickets). Suppose you have one player using fifty (50) extra tickets, and one who uses no extra:
//     Player A: 150 tickets
//     Player B: 100 tickets
//        Total: 250 tickets
//
// The odds become:
//     Player A: 150 / 250 = 0.6 = 60%
//     Player B: 100 / 250 = 0.4 = 40%
//Use return list if you want a list, with the arg being the number you want returned.
//WARNING: THIS PROC DOES NOT TAKE INTO ACCOUNT WHAT SSPersistence ALREADY HAS FOR "ADJUST ANTAG REP". If this is used more than once
//and the person rolls more than once, they will not get even more deduction!
//More efficient if you use return list instead of calling this multiple times
//fail_default_pick makes it use pick() instead of antag rep if it can't find anyone
//allow_zero_if_insufficient allows it to pick people with zero rep if there isn't enough antags
//////////////////////////
//Reports player logouts//
//////////////////////////
//			WARNING("AR_DEBUG: [p_ckey]: failed - [failed], antag_rep_change: [SSpersistence.antag_rep_change[p_ckey]]")
//				WARNING("AR_DEBUG: Zeroed [p_ckey]'s antag_rep_change")
//If the configuration option is set to require players to be logged as old enough to play certain jobs, then this proc checks that they are, otherwise it just returns 1
//By default nuke just ends the round
//Additional report section in roundend report
//Set result and news report here
/// Mode specific admin panel.
/// Mode specific info for ghost game_info
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\objective.dm. ----------------------
//CITADEL EDIT
//END EDIT
//Shared by few objective types
/*
Used during the round to check if an objective has already been completed, generally should have harsher requirements that the default objective  (no true because of short afk, etc)
If not set, defaults to check_completion instead. Set it. It's used by cryo.
*/
/*
/datum/objective/capture
	name = "capture"
	var/captured_amount = 0

/datum/objective/capture/proc/gen_amount_goal()
	target_amount = rand(5,10)
	explanation_text = "Capture [target_amount] lifeform\s with an energy net. Live, rare specimens are worth more."
	return target_amount

/datum/objective/capture/update_explanation_text()
	. = ..()
	explanation_text = "Capture [target_amount] lifeform\s with an energy net. Live, rare specimens are worth more."

/datum/objective/capture/check_completion()//Basically runs through all the mobs in the area to determine how much they are worth.
	/*var/area/centcom/holding/A = GLOB.areas_by_type[/area/centcom/holding]
	for(var/mob/living/carbon/human/M in A)//Humans.
		if(M.stat == DEAD)//Dead folks are worth less.
			captured_amount+=0.5
			continue
		captured_amount+=1
	for(var/mob/living/carbon/monkey/M in A)//Monkeys are almost worthless, you failure.
		captured_amount+=0.1
	for(var/mob/living/carbon/alien/larva/M in A)//Larva are important for research.
		if(M.stat == DEAD)
			captured_amount+=0.5
			continue
		captured_amount+=1
	for(var/mob/living/carbon/alien/humanoid/M in A)//Aliens are worth twice as much as humans.
		if(istype(M, /mob/living/carbon/alien/humanoid/royal/queen))//Queens are worth three times as much as humans.
			if(M.stat == DEAD)
				captured_amount+=1.5
			else
				captured_amount+=3
			continue
		if(M.stat == DEAD)
			captured_amount+=1
			continue
		captured_amount+=2*/ //Removed in favour of adding points on capture, in energy_net_nets.dm
//Changeling Objectives
//End Changeling Objectives
//Created by admin tools
////////////////////////////////
// Changeling team objectives //
////////////////////////////////
//Impersonate department
//Picks as many people as it can from a department (Security,Engineer,Medical,Science)
//and tasks the lings with killing and replacing them
//A subtype of impersonate_department
//This subtype always picks as many command staff as it can (HoS,HoP,Cap,CE,CMO,RD)
//and tasks the lings with killing and replacing them
// For saboteurs. Go in and cause some trouble somewhere. Not necessarily breaking things, just sufficiently troublemaking.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\objective_items.dm. ----------------------
//Contains the target item datums for Steal objectives.
//Items with special checks!
//Unique Objectives
//Old ninja objectives.
//Stack objectives get their own subtype
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\objective_sabotage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\bloodsucker\bloodsucker.dm. ----------------------
// Seems to be run by game ONCE, and finds all potential players to be antag.
// Gamemode is all done being set up. We have all our Vamps. We now pick objectives and let them know what's happening.
// Init Sunlight (called from datum_bloodsucker.on_gain(), in case game mode isn't even Bloodsucker
// End Sun (last bloodsucker removed)
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\bloodsucker\hunter.dm. ----------------------
/*
// Called from game mode pre_setup()
/datum/game_mode/proc/assign_monster_hunters(monster_count = 4, guaranteed_hunters = FALSE, list/datum/mind/exclude_from_hunter)

	// Not all game modes GUARANTEE a hunter
	if (rand(0,2) == 0) // 50% of the time, we get fewer or NO Hunters
		if (!guaranteed_hunters)
			return
		else
			monster_count /= 2

	var/list/no_hunter_jobs = list("AI","Cyborg")

	// Set Restricted Jobs
	if(CONFIG_GET(flag/protect_roles_from_antagonist))
		no_hunter_jobs += list("Security Officer", "Warden", "Detective", "Head of Security", "Captain", "Head of Personnel", "Chief Engineer", "Chief Medical Officer", "Research Director", "Quartermaster")

	if(CONFIG_GET(flag/protect_assistant_from_antagonist))
		no_hunter_jobs += "Assistant"

	// Find Valid Hunters
	var/list/datum/mind/hunter_candidates = get_players_for_role(ROLE_MONSTERHUNTER)

	// Assign Hunters (as many as vamps, plus one)
	for(var/i = 1, i < monster_count, i++) // Start at 1 so we skip Hunters if there's only one sucker.
		if (!hunter_candidates.len)
			break
		// Assign Hunter
		var/datum/mind/hunter = pick(hunter_candidates)
		hunter_candidates.Remove(hunter) // Remove Either Way
		// Already Antag? Skip
		if (islist(exclude_from_hunter) && (locate(hunter) in exclude_from_hunter)) //if (islist(hunter.antag_datums) && hunter.antag_datums.len)
			i --
			continue
		// NOTE:
		vamphunters += hunter
		hunter.restricted_roles = no_hunter_jobs
		log_game("[hunter.key] (ckey) has been selected as a Hunter.")

// Called from game mode post_setup()
/datum/game_mode/proc/finalize_monster_hunters(monster_count = 4)
	var/amEvil = TRUE // First hunter is always an evil boi
	for(var/datum/mind/hunter in vamphunters)
		var/datum/antagonist/vamphunter/A = new (hunter)
		A.bad_dude = amEvil
		hunter.add_antag_datum(A)
		amEvil = FALSE  // Every other hunter is just a boring greytider
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\brother\traitor_bro.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\changeling\changeling.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\changeling\traitor_chan.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\clock_cult\clock_cult.dm. ----------------------
/*

CLOCKWORK CULT: Based off of the failed pull requests from /vg/

While Nar'Sie is the oldest and most prominent of the elder gods, there are other forces at work in the universe.
Ratvar, the Clockwork Justiciar, a homage to Nar'Sie granted sentience by its own power, is one such other force.
Imprisoned within a massive construct known as the Celestial Derelict - or Reebe - an intense hatred of the Blood God festers.
Ratvar, unable to act in the mortal plane, seeks to return and forms covenants with mortals in order to bolster his influence.
Due to his mechanical nature, Ratvar is also capable of influencing silicon-based lifeforms, unlike Nar'Sie, who can only influence natural life.

This is a team-based gamemode, and the team's objective is shared by all cultists. Their goal is to defend an object called the Ark on a separate z-level.

The clockwork version of an arcane tome is the clockwork slab.

This file's folder contains:
	clock_cult.dm: Core gamemode files.
	clock_effect.dm: The base clockwork effect code.
	- Effect files are in game/gamemodes/clock_cult/clock_effects/
	clock_item.dm: The base clockwork item code.
	- Item files are in game/gamemodes/clock_cult/clock_items/
	clock_mobs.dm: Hostile clockwork creatures.
	clock_scripture.dm: The base Scripture code.
	- Scripture files are in game/gamemodes/clock_cult/clock_scripture/
	clock_structure.dm: The base clockwork structure code, including clockwork machines.
	- Structure files, and Ratvar, are in game/gamemodes/clock_cult/clock_structures/

	game/gamemodes/clock_cult/clock_helpers/ contains several helper procs, including the Ratvarian language.

	clockcult defines are in __DEFINES/clockcult.dm

Credit where due:
1. VelardAmakar from /vg/ for the entire design document, idea, and plan. Thank you very much.
2. SkowronX from /vg/ for MANY of the assets
3. FuryMcFlurry from /vg/ for many of the assets
4. PJB3005 from /vg/ for the failed continuation PR
5. Xhuis from /tg/ for coding the first iteration of the mode, and the new, reworked version
6. ChangelingRain from /tg/ for maintaining the gamemode for months after its release prior to its rework
7. Clockwork cult code as of now, at least the one being pulled from Citadel Station's master branch, is being, or already is, fixed by Coolgat3 and Avunia.
8. Modern clockwork cult code mixed with original clockwork code, with various changes to make it less of a fustercluck, done by KeRSe. \
	Fixes and assistance done by TimothyTeakettle, Kevinz000, and Deltafire15. -Very glad for the help they gave.
*/
///////////
// PROCS //
///////////
///////////////
// GAME MODE //
///////////////
//Servant of Ratvar outfit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\clown_ops\bananium_bomb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\clown_ops\clown_ops.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\clown_ops\clown_weapons.dm. ----------------------
//COMBAT CLOWN SHOES
//Clown shoes with combat stats and noslip. Of course they still squeak.
//The super annoying version
//BANANIUM SWORD
//BANANIUM SHIELD
//BOMBANANA
//TEARSTACHE GRENADE
//DARK H.O.N.K. AND CLOWN MECH WEAPONS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\cult\cult.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\devil\devil_game_mode.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\devil\game_mode.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\devil\objectives.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\devil\devil agent\devil_agent.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic.dm. ----------------------
// Are HIGH_IMPACT_RULESETs allowed to stack?
// If enabled does not accept or execute any rulesets.
// Antags still allowed, but no roundstart antags + midrounds are low impact
// How high threat is required for HIGH_IMPACT_RULESETs stacking.
// This is independent of dynamic_no_stacking.
// List of forced roundstart rulesets.
// Forced threat level, setting this to zero or higher forces the roundstart threat to the value.
// Checks if there are HIGH_IMPACT_RULESETs and calls the rule's round_result() proc
/// Generates the threat level using lorentz distribution and assigns peaceful_percentage.
/// Generates the midround and roundstart budgets
/// Initializes the internal ruleset variables
/// Returns a list of the provided rulesets.
/// Configures their variables to match config.
/// A simple roundstart proc used when dynamic_forced_roundstart_ruleset has rules in it.
/// Initializes the round start ruleset provided to it. Returns how much threat to spend.
/// Mainly here to facilitate delayed rulesets. All roundstart rulesets are executed with a timered callback to this proc.
/// An experimental proc to allow admins to call rules on the fly or have rules call other rules.
/// Gets the chance for latejoin injection, the dry_run argument is only used for forced injection.
/// Gets the chance for midround injection, the dry_run argument is only used for forced injection.
/// Usually defers to the latejoin injection chance.
/// Removes type from the list
/// Checks if a type in blocking_list is in rule_list.
/// Apply configurations to rule.
/// Refund threat, but no more than threat_level.
/// Generate threat and increase the threat_level if it goes beyond, capped at 100
/// Expend round start threat, can't fall under 0.
/// Expend midround threat, can't fall under 0.
/// Turns the value generated by lorentz distribution to number between 0 and 100.
/// Used for threat level and splitting the budgets.
/// Log to messages and to the game
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_hijacking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_logging.dm. ----------------------
/// A "snapshot" of dynamic at an important point in time.
/// Exported to JSON in the dynamic.json log file.
/// A ruleset chosen during a snapshot
/// Convert the snapshot to an associative list
/// Updates the log for the current snapshots.
/// Creates a new snapshot with the given rulesets chosen, and writes to the JSON output.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_rulesets.dm. ----------------------
// Can be drafted when a player joins the server
/// By default, a rule is acceptable if it satisfies the threat level/population requirements.
/// If your rule has extra checks, such as counting security officers, do that in ready() instead
/// When picking rulesets, if dynamic picks the same one multiple times, it will "scale up".
/// However, doing this blindly would result in lowpop rounds (think under 10 people) where over 80% of the crew is antags!
/// This function is here to ensure the antag ratio is kept under control while scaling up.
/// Returns how much threat to actually spend in the end.
/// Returns what the antag cap with the given population is.
/// This is called if persistent variable is true everytime SSTicker ticks.
/// Called on game mode pre_setup for roundstart rulesets.
/// Do everything you need to do before job is assigned here.
/// IMPORTANT: ASSIGN special_role HERE
/// Called on post_setup on roundstart and when the rule executes on midround and latejoin.
/// Give your candidates or assignees equipment and antag datum here.
/// Here you can perform any additional checks you want. (such as checking the map etc)
/// Remember that on roundstart no one knows what their job is at this point.
/// IMPORTANT: If ready() returns TRUE, that means pre_execute() or execute() should never fail!
/// Runs from gamemode process() if ruleset fails to start, like delayed rulesets not getting valid candidates.
/// This one only handles refunding the threat, override in ruleset to clean up the rest.
/// Gets weight of the ruleset
/// Note that this decreases weight if repeatable is TRUE and repeatable_weight_decrease is higher than 0
/// Note: If you don't want repeatable rulesets to decrease their weight use the weight variable directly
/// Here you can remove candidates that do not meet your requirements.
/// This means if their job is not correct or they have disconnected you can remove them from candidates here.
/// Usually this does not need to be changed unless you need some specific requirements from your candidates.
/// Set mode result and news report here.
/// Only called if ruleset is flagged as HIGH_IMPACT_RULESET
//////////////////////////////////////////////
//                                          //
//           ROUNDSTART RULESETS            //
//                                          //
//////////////////////////////////////////////
/// Checks if candidates are connected and if they are banned or don't want to be the antagonist.
/// Do your checks if the ruleset is ready to be executed here.
/// Should ignore certain checks if forced is TRUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_rulesets_latejoin.dm. ----------------------
//////////////////////////////////////////////
//                                          //
//            LATEJOIN RULESETS             //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//           SYNDICATE TRAITORS             //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//       REVOLUTIONARY PROVOCATEUR          //
//                                          //
//////////////////////////////////////////////
/// Checks for revhead loss conditions and other antag datums.
//////////////////////////////////////////////
//                                          //
//           HERETIC SMUGGLER               //
//                                          //
//////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_rulesets_midround.dm. ----------------------
/// Probability the AI going malf will be accompanied by an ion storm announcement and some ion laws.
/// The probability to replace an existing law with an ion law instead of adding a new ion law.
//////////////////////////////////////////////
//                                          //
//            MIDROUND RULESETS             //
//                                          //
//////////////////////////////////////////////
// You can then for example prompt dead players in execute() to join as strike teams or whatever
// Or autotator someone
// IMPORTANT, since /datum/dynamic_ruleset/midround may accept candidates from both living, dead, and even antag players, you need to manually check whether there are enough candidates
// (see /datum/dynamic_ruleset/midround/autotraitor/ready(forced = FALSE) for example)
/// This sends a poll to ghosts if they want to be a ghost spawn from a ruleset.
/// Here is where you can check if your ghost applicants are valid for the ruleset.
/// Called by send_applications().
/// Fired when there are no valid candidates. Will spawn a sleeper agent or latejoin traitor.
//////////////////////////////////////////////
//                                          //
//           SYNDICATE TRAITORS             //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//                 FAMILIES                 //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//         Malfunctioning AI                //
//                                         //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//              WIZARD (GHOST)              //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//          NUCLEAR OPERATIVES (MIDROUND)   //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//              Clock Cult (MID)            //
//                                          //
//////////////////////////////////////////////
//changes two people midround into clockwork cultists
//////////////////////////////////////////////
//                                          //
//              BLOB (GHOST)                //
//                                          //
//////////////////////////////////////////////
/// Infects a random player, making them explode into a blob.
//////////////////////////////////////////////
//                                          //
//           XENOMORPH (GHOST)              //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//           NIGHTMARE (GHOST)              //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//           SPACE DRAGON (GHOST)           //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//           ABDUCTORS    (GHOST)           //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//            SWARMERS    (GHOST)           //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//            SPACE NINJA (GHOST)           //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//            Revenant     (GHOST)          //
//                                          //
//////////////////////////////////////////////
/// Revenant ruleset
/// Sentient Disease ruleset
/// Space Pirates ruleset
/// Probability the AI going malf will be accompanied by an ion storm announcement and some ion laws.
/// The probability to replace an existing law with an ion law instead of adding a new ion law.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_rulesets_roundstart.dm. ----------------------
//////////////////////////////////////////////
//                                          //
//           SYNDICATE TRAITORS             //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////
//                                      //
//           BLOOD BROTHERS             //
//                                      //
//////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//               CHANGELINGS                //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//              ELDRITCH CULT               //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//               WIZARDS                    //
//                                          //
//////////////////////////////////////////////
// Dynamic is a wonderful thing that adds wizards to every round and then adds even more wizards during the round.
//////////////////////////////////////////////
//                                          //
//                BLOOD CULT                //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//          NUCLEAR OPERATIVES              //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//               REVS                       //
//                                          //
//////////////////////////////////////////////
/// Checks for revhead loss conditions and other antag datums.
//////////////////////////////////////////////
//                                          //
//               Clock Cult                 //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//                 FAMILIES                 //
//                                          //
//////////////////////////////////////////////
// Admin only rulesets. The threat requirement is 101 so it is not possible to roll them.
//////////////////////////////////////////////
//                                          //
//               EXTENDED                   //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//               CLOWN OPS                  //
//                                          //
//////////////////////////////////////////////
//////////////////////////////////////////////
//                                          //
//               MONKEY                     //
//                                          //
//////////////////////////////////////////////
// This does not get called. Look into making it work.
//////////////////////////////////////////////
//                                          //
//               METEOR                     //
//                                          //
//////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\dynamic_simulations.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\dynamic\ruleset_picking.dm. ----------------------
/// From a list of rulesets, returns one based on weight and availability.
/// Mutates the list that is passed into it to remove invalid rules.
/// Executes a random midround ruleset from the list of drafted rules.
/// Fired after admins do not cancel a midround injection.
/// Executes a random latejoin ruleset from the list of drafted rules.
/// Mainly here to facilitate delayed rulesets. All midround/latejoin rulesets are executed with a timered callback to this proc.
/// Fired when an admin cancels the current midround injection.
/// Fired when an admin requests a different midround injection.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\eldritch_cult\eldritch_cult.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\extended\extended.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\gang\gang.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\meteor\meteor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\meteor\meteors.dm. ----------------------
//set to at least 100 unless you want evarr ruining every round
//Meteors probability of spawning during a given wave
///////////////////////////////
//Meteor spawning global procs
///////////////////////////////
///////////////////////
//The meteor effect
//////////////////////
//process getting 'hit' by colliding with a dense object
//or randomly when ramming turfs
///////////////////////
//Meteor types
///////////////////////
//Dust
//Medium-sized
//Large-sized
//Flaming meteor
//Radiation meteor
//Meaty Ore
//Meaty Ore Xeno edition
//Station buster Tunguska
//////////////////////////
//Spookoween meteors
/////////////////////////
//////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\monkey\monkey.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\nuclear\nuclear.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\overthrow\objective.dm. ----------------------
// This is a point based objective. You can only lose if you fail to even handle one single command personnel, else you win. But, if you win, you're given a certain number of points,
// based on the role of the head (Captain, HoP/HoS, other heads, warden, security officers) and whether you converted them, exiled or just killed (applying a modifier of 1.5, 1 and 0.5 respectively)
// because this is meant for the overthrow gamemode, which is a bloodless coup, unlike revs.
// Point system:
// Base points for each role:
// AI, Captain = 5;
// Head of Personnel, Head of Security, target = 4;
// Chief Engineer, Chief Medical Officer, Research Director = 3;
// Modifiers:
// Converting: 1.5 for the converting team, 1 for all the other ones;
// Exiling: 1;
// Killing: 0.5
// Parent type holding the get_points proc used for round end log.
// Heads overthrow objective. This targets the heads only, assigning points based on the rank of the head, captain being the highest target.
// Amount of points = foreach head, result += head basepoints * modifier.
// AI converting objective. The team who managed to convert the AI with the overthrow module gets the normal 1.5x boost.
// Overthrow target objective. A crewmember in particular has a certain bond with some centcom officials, and the Syndicate want you to target him in particular, even though he's not a head.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\overthrow\overthrow.dm. ----------------------
// Overthrow gamemode, based on the sleeping agent antagonist.
// Calculates points for each team and displays the winners.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\revolution\revolution.dm. ----------------------
// To add a rev to the list of revolutionaries, make sure it's rev (with if(SSticker.mode.name == "revolution)),
// then call SSticker.mode:add_revolutionary(_THE_PLAYERS_MIND_)
// nothing else needs to be done, as that proc will check if they are a valid target.
// Just make sure the converter is a head before you call it!
// To remove a rev (from brainwashing or w/e), call SSticker.mode:remove_revolutionary(_THE_PLAYERS_MIND_),
// this will also check they're not a head, so it can just be called freely
// If the game somtimes isn't registering a win properly, then SSticker.mode.check_win() isn't being called somewhere.
///////////////////////////
//Announces the game type//
///////////////////////////
///////////////////////////////////////////////////////////////////////////////
//Gets the round setup, cancelling if there's not enough players at the start//
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////
//Checks if the revs have won or not//
//////////////////////////////////////
///////////////////////////////
//Checks if the round is over//
///////////////////////////////
///////////////////////////////////////////////////
//Deals with converting players to the revolution//
///////////////////////////////////////////////////
//////////////////////////
//Checks for rev victory//
//////////////////////////
/////////////////////////////
//Checks for a head victory//
/////////////////////////////
//TODO What should be displayed for revs in non-rev rounds
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\sandbox\airlock_maker.dm. ----------------------
/*
	This is for the sandbox for now,
	maybe useful later for an actual thing?
	-Sayu
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\sandbox\h_sandbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\sandbox\sandbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\traitor\double_agents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\traitor\traitor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\gamemodes\wizard\wizard.dm. ----------------------
//returns whether the mob is a wizard (or apprentice)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\airlock_control.dm. ----------------------
// This code allows for airlocks to be controlled externally by setting an id_tag and comm frequency (disables ID access)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\ai_slipper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\announcement_system.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\aug_manipulator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\autolathe.dm. ----------------------
//Called when the object is constructed by an autolathe
//Has a reference to the autolathe so you can do !!FUN!! things with hacked lathes
// override the base to allow plastics
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\autoloom.dm. ----------------------
// like a recycler, but for plants only ig
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\bank_machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\Beacon.dm. ----------------------
// update the invisibility and icon
// update the icon_state
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\bloodbankgen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\buttons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\cell_charger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\civilian_bountys.dm. ----------------------
///Pad for the Civilian Bounty Control.
///Computer for assigning new civilian bounties, and sending bounties for collection.
/**
  * This fully rewrites base behavior in order to only check for bounty objects, and nothing else.
  */
///Here is where cargo bounties are added to the player's bank accounts, then adjusted and scaled into a civilian bounty.
///Self explanitory, holds the ID card inthe console for bounty payout and manipulation.
///Removes A stored ID card.
///Upon completion of a civilian bounty, one of these is created. It is sold to cargo to give the cargo budget bounty money, and the person who completed it cash.
//for when you need a REAL bounty cube to test with and don't want to do a bounty each time your code changes
///Beacon to launch a new bounty setup when activated.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\cloning.dm. ----------------------
//Cloning revival method.
//The pod handles the actual cloning while the computer manages the clone profiles
//Potential replacement for genetics revives or something I dunno (?)
//Clonepod
//Start growing a human clone in the pod!
//Grow clones to maturity then kick them out.  FREELOADERS
//Let's unlock this early I guess.  Might be too early, needs tweaking.
//Put messages in the connected computer's temp var for display.
//Experimental cloner; clones a body regardless of the owner's status, letting a ghost control it instead
/*
 *	Manual -- A big ol' manual.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\colormate.dm. ----------------------
/// Produces the preview image of the item, used in the UI, the way the color is not stacking is a sin.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\constructable_frame.dm. ----------------------
//callback proc used on stacks use_tool to stop unnecessary amounts being wasted from spam clicking.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\cryopod.dm. ----------------------
/*
 * Cryogenic refrigeration unit. Basically a despawner.
 * Stealing a lot of concepts/code from sleepers due to massive laziness.
 * The despawn tick will only fire if it's been more than time_till_despawned ticks
 * since time_entered, which is world.time when the occupant moves in.
 * ~ Zuhayr
 */
//Main cryopod console.
// Cryopods themselves.
// This is not a good situation
// Attacks/effects.
/// The box
// This function can not be undone; do not call this unless you are sure
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\dance_machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\defibrillator_mount.dm. ----------------------
//Holds defibs and recharges them from the powernet
//You can activate the mount with an empty hand to grab the paddles
//Not being adjacent will cause the paddles to snap back
//defib interaction
//wallframe, for attaching the mounts easily
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\deployable.dm. ----------------------
//Barricades/cover
/////BARRICADE TYPES///////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\dish_drive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\dna_scanner.dm. ----------------------
// search for ghosts, if the corpse is empty and the scanner is connected to a cloner
//Just for transferring between genetics machines.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doppler_array.dm. ----------------------
//Portable version, built into EOD equipment. It simply provides an explosion's three damage levels.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\droneDispenser.dm. ----------------------
// I don't need your forgiveness, this is awesome.
// An example of a custom drone dispenser.
// This one requires no materials and creates basic hivebots
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\firealarm.dm. ----------------------
/*
 * Return of Party button
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\flasher.dm. ----------------------
// It is a gizmo that flashes a small area
//Don't want to render prison breaks impossible
//Let the AI trigger them directly.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\gulag_item_reclaimer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\gulag_teleporter.dm. ----------------------
/*
The gulag teleporter teleports a prisoner to the gulag outpost.
It automatically strips the prisoner and equips a prisoner ID, prisoner jumpsuit and oranges sneakers.
You can set the amount of points in the console
The console is located at computer/gulag_teleporter.dm
*/
//Gulag teleporter
// strips and stores all occupant's items
/*  beacon that receives the teleported prisoner */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\harvester.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\hologram.dm. ----------------------
/* Holograms!
 * Contains:
 * Holopad
 * Hologram
 * Other stuff
 */
/*
Revised. Original based on space ninja hologram code. Which is also mine. /N
How it works:
AI clicks on holopad in camera view. View centers on holopad.
AI clicks again on the holopad to display a hologram. Hologram stays as long as AI is looking at the pad and it (the hologram) is in range of the pad.
AI can use the directional keys to move the hologram around, provided the above conditions are met and the AI in question is the holopad's master.
Any number of AIs can use a holopad. /Lo6
AI may cancel the hologram at any time by clicking on the holopad once more.

Possible to do for anyone motivated enough:
	Give an AI variable for different hologram icons.
	Itegrate EMP effect to disable the unit.
*/
/*
 * Holopad
 */
/**
 * hangup_all_calls: Disconnects all current holocalls from the holopad
 */
/*This is the proc for special two-way communication between AI and holopad/people talking near holopad.
For the other part of the code, check silicon say.dm. Particularly robot talk.*/
//Try to transfer hologram to another pad that can project on T
//Can we display holos there
//Area check instead of line of sight check because this is a called a lot if AI wants to move around.
// RECORDED MESSAGES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\hypnochair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\igniter.dm. ----------------------
// Wall mounted remote-control igniter.
//		src.sd_SetLuminosity(2)
//		src.sd_SetLuminosity(0)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\iv_drip.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\launch_pad.dm. ----------------------
//Starts in the briefcase. Don't spawn this directly, or it will runtime when closing.
//Briefcase item that contains the launchpad.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\lightswitch.dm. ----------------------
/// The light switch. Can have multiple per area.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\limbgrower.dm. ----------------------
/// The limbgrower. Makes organd and limbs with synthflesh and chems.
/// See [limbgrower_designs.dm] for everything we can make.
/*
 * The process of beginning to build a limb or organ.
 * Goes through and sanity checks that we actually have enough reagent to build our item.
 * Then, remove those reagents from our reagents datum.
 *
 * After the reagents are handled, we can proceede with making the limb or organ. (Limbs are handled in a separate proc)
 *
 * modified_consumed_reagents_list - the list of reagents we will consume on build, modified by the production coefficient.
 */
/*
 * The process of putting together a limb.
 * This is called from after we remove the reagents, so this proc is just initializing the limb type.
 *
 * This proc handles skin / mutant color, greyscaling, names and descriptions, and various other limb creation steps.
 *
 * built_typepath - the path of the bodypart we're building.
 */
/*
 * Builds genitals, modifies to be the same
 * as the person's cloning data on the data disk
 */
/*
 * Checks our reagent list to see if a design can be built.
 *
 * limb_design - the design we're checking for buildability.
 *
 * returns TRUE if we have enough reagent to build it. Returns FALSE if we do not.
 */
/// Emagging a limbgrower allows you to build synthetic armblades.
//Defines some vars that makes limbs appears, TO-DO: define every single species.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\magnet.dm. ----------------------
// Magnetic attractor, creates variable magnetic fields and attraction.
// Can also be used to emit electron/proton beams to create a center of magnetism on another tile
// tl;dr: it's magnets lol
// This was created for firing ranges, but I suppose this could have other applications - Doohl
// update the invisibility and icon
// update the icon_state
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\mass_driver.dm. ----------------------
// /obj/machinery/mass_driver/chapelgun
// 	name = "holy driver"
// 	id = MASSDRIVER_CHAPEL
// /obj/machinery/mass_driver/toxins
// 	id = MASSDRIVER_TOXINS
// /obj/machinery/mass_driver/trash
// 	id = MASSDRIVER_DISPOSALS
// /obj/machinery/mass_driver/Destroy()
// 	for(var/obj/machinery/computer/pod/control in GLOB.machines)
// 		if(control.id == id)
// 			control.connected = null
// 	return ..()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\mechlaunchpad.dm. ----------------------
/**
  * Spawns a special supply pod whitelisted to only accept mechs and have its drop off location be another mechpad
  * Arguments:
  * * where - where the supply pod will land after grabbing the mech
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\navbeacon.dm. ----------------------
// Navigation beacon for AI robots
// No longer exists on the radio controller, it is managed by a global list.
// set the transponder codes assoc list from codes_txt
///Registers the navbeacon to the global beacon lists
// called when turf state changes
// hide the object if turf is intact
// update the icon_state
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\PDApainter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\posi_alert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\prisonlabor.dm. ----------------------
///This proc attempts to create a plate. User cannot move during this process.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\quantum_pad.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\recharger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\rechargestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\recycler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\requests_console.dm. ----------------------
/******************** Requests Console ********************/
/** Originally written by errorage, updated by: Carn, needs more work though. I just added some security fixes */
//		if(4)		//write message
//			screen = 4
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\sheetifier.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\shieldgen.dm. ----------------------
//////////////Containment Field START
//the shield wall is immune to damage but it drains the stored power of the generators.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\Sleeper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\slotmachine.dm. ----------------------
/*******************************\
|		  Slot Machines		  	|
|	  Original code by Glloyd	|
|	  Tgstation port by Miauw	|
\*******************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\spaceheater.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\stasis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\status_display.dm. ----------------------
// Status display
// (formerly Countdown timer display)
/// Status display which can show images and scrolling text.
/// Immediately change the display to the given picture.
/// Immediately change the display to the given two lines.
/**
 * Remove both message objs and null the fields.
 * Don't call this in subclasses.
 */
/**
 * Create/update message overlay.
 * They must be handled as real objects for the animation to run.
 * Don't call this in subclasses.
 * Arguments:
 * * overlay - the current /obj/effect/overlay/status_display_text instance
 * * line_y - The Y offset to render the text.
 * * message - the new message text.
 * Returns new /obj/effect/overlay/status_display_text or null if unchanged.
 */
// Timed process - performs nothing in the base class
/// Update the display and, if necessary, re-enable processing.
// Helper procs for child display types.
/**
 * Nice overlay to make text smoothly scroll with no client updates after setup.
 */
/// Evac display which shows shuttle timer or message set by Command.
// MAPPING_DIRECTIONAL_HELPERS(/obj/machinery/status_display/evac, 32)
//makes it go on the wall when built
/// Supply display which shows the status of the supply shuttle.
/// General-purpose shuttle status display.
/// Pictograph display which the AI can use to emote.
// MAPPING_DIRECTIONAL_HELPERS(/obj/machinery/status_display/ai, 32)
// ai vtuber moment
// modified version of how holopads 'hear' and relay to AIs
/*
/obj/item/circuit_component/status_display
	display_name = "Status Display"
	desc = "Output text and pictures to a status display."
	circuit_flags = CIRCUIT_FLAG_INPUT_SIGNAL|CIRCUIT_FLAG_OUTPUT_SIGNAL

	var/datum/port/input/option/command
	var/datum/port/input/option/picture
	var/datum/port/input/message1
	var/datum/port/input/message2

	var/obj/machinery/status_display/connected_display

	var/list/command_map
	var/list/picture_map

/obj/item/circuit_component/status_display/populate_ports()
	message1 = add_input_port("Message 1", PORT_TYPE_STRING)
	message2 = add_input_port("Message 2", PORT_TYPE_STRING)

/obj/item/circuit_component/status_display/populate_options()
	var/static/list/command_options = list(
		"Blank" = "blank",
		"Shuttle" = "shuttle",
		"Message" = "message",
		"Alert" = "alert"
	)

	var/static/list/picture_options = list(
		"Default" = "default",
		"Red Alert" = "redalert",
		"Biohazard" = "biohazard",
		"Lockdown" = "lockdown",
		"Happy" = "ai_happy",
		"Neutral" = "ai_neutral",
		"Very Happy" = "ai_veryhappy",
		"Sad" = "ai_sad",
		"Unsure" = "ai_unsure",
		"Confused" = "ai_confused",
		"Surprised" = "ai_surprised",
		"BSOD" = "ai_bsod"
	)

	command = add_option_port("Command", command_options)
	command_map = command_options

	picture = add_option_port("Picture", picture_options)
	picture_map = picture_options

/obj/item/circuit_component/status_display/register_usb_parent(atom/movable/shell)
	. = ..()
	if(istype(shell, /obj/machinery/status_display))
		connected_display = shell

/obj/item/circuit_component/status_display/unregister_usb_parent(atom/movable/parent)
	connected_display = null
	return ..()

/obj/item/circuit_component/status_display/input_received(datum/port/input/port)
	// Just use command handling built into status display.
	// The option inputs thankfully sanitize command and picture for us.

	if(!connected_display)
		return

	var/command_value = command_map[command.value]
	var/datum/signal/status_signal = new(list("command" = command_value))
	switch(command_value)
		if("message")
			status_signal.data["msg1"] = message1.value
			status_signal.data["msg2"] = message2.value
		if("alert")
			status_signal.data["picture_state"] = picture_map[picture.value]

	connected_display.receive_signal(status_signal)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\suit_storage_unit.dm. ----------------------
// SUIT STORAGE UNIT /////////////////
/**
 * UV decontamination sequence.
 * Duration is determined by the uv_cycles var.
 * Effects determined by the uv_super var.
 * * If FALSE, all atoms (and their contents) contained are cleared of radiation. If a mob is inside, they are burned every cycle.
 * * If TRUE, all items contained are destroyed, and burn damage applied to the mob is increased. All wires will be cut at the end.
 * All atoms still inside at the end of all cycles are ejected from the unit.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\syndicatebeacon.dm. ----------------------
////////////////////////////////////////
//Singularity beacon
////////////////////////////////////////
//stealth direct power usage
// SINGULO BEACON SPAWNER
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\syndicatebomb.dm. ----------------------
///Bomb Subtypes///
///Bomb Cores///
//Note: 	Because of how var/defused is used you shouldn't override this UNLESS you intend to set the var to 0 or
//			otherwise remove the core/reset the wires before the end of defuse(). It will repeatedly be called otherwise.
///Bomb Core Subtypes///
///Syndicate Detonator (aka the big red button)///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\teleporter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\transformer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\turnstile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\washing_machine.dm. ----------------------
//dye registry, add dye colors and their resulting output here if you want the sprite to change instead of just the color.
//what happens to this object when washed inside a washing machine
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\wishgranter.dm. ----------------------
//ITEMS THAT IT USES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\_machinery.dm. ----------------------
/*
Overview:
   Used to create objects that need a per step proc call.  Default definition of 'Initialize()'
   stores a reference to src machine in global 'machines list'.  Default definition
   of 'Destroy' removes reference to src machine in global 'machines list'.

Class Variables:
   use_power (num)
      current state of auto power use.
      Possible Values:
         NO_POWER_USE -- no auto power use
         IDLE_POWER_USE -- machine is using power at its idle power level
         ACTIVE_POWER_USE -- machine is using power at its active power level

   active_power_usage (num)
      Value for the amount of power to use when in active power mode

   idle_power_usage (num)
      Value for the amount of power to use when in idle power mode

   power_channel (num)
      What channel to draw from when drawing power for power mode
      Possible Values:
         EQUIP:0 -- Equipment Channel
         LIGHT:2 -- Lighting Channel
         ENVIRON:3 -- Environment Channel

   component_parts (list)
      A list of component parts of machine used by frame based machines.

   stat (bitflag)
      Machine status bit flags.
      Possible bit flags:
         BROKEN -- Machine is broken
         NOPOWER -- No power is being supplied to machine.
         MAINT -- machine is currently under going maintenance.
         EMPED -- temporary broken by EMP pulse

Class Procs:
   Initialize()                     'game/machinery/machine.dm'

   Destroy()                   'game/machinery/machine.dm'

   auto_use_power()            'game/machinery/machine.dm'
      This proc determines how power mode power is deducted by the machine.
      'auto_use_power()' is called by the 'master_controller' game_controller every
      tick.

      Return Value:
         return:1 -- if object is powered
         return:0 -- if object is not powered.

      Default definition uses 'use_power', 'power_channel', 'active_power_usage',
      'idle_power_usage', 'powered()', and 'use_power()' implement behavior.

   powered(chan = EQUIP)         'modules/power/power.dm'
      Checks to see if area that contains the object has power available for power
      channel given in 'chan'.

   use_power(amount, chan=EQUIP)   'modules/power/power.dm'
      Deducts 'amount' from the power channel 'chan' of the area that contains the object.

   power_change()               'modules/power/power.dm'
      Called by the area that contains the object when ever that area under goes a
      power state change (area runs out of power, or area channel is turned off).

   RefreshParts()               'game/machinery/machine.dm'
      Called to refresh the variables in the machine that are contributed to by parts
      contained in the component_parts list. (example: glass and material amounts for
      the autolathe)

      Default definition does nothing.

   process()                  'game/machinery/machine.dm'
      Called by the 'machinery subsystem' once per machinery tick for each machine that is listed in its 'machines' list.

   process_atmos()
      Called by the 'air subsystem' once per atmos tick for each machine that is listed in its 'atmos_machines' list.

   is_operational()
		Returns 0 if the machine is unpowered, broken or undergoing maintenance, something else if not

	Compiled by Aygar
*/
///Called when we want to change the value of the stat variable. Holds bitflags.
////////////////////////////////////////////////////////////////////////////////////////////
//Return a non FALSE value to interrupt attack_hand propagation to subtypes.
////////////////////////////////////////////////////////////////////////////////////////////
//called on machinery construction (i.e from frame to machinery) but not on initialization
//called on deconstruction before the final deletion
/**
 * Alerts the AI that a hack is in progress.
 *
 * Sends all AIs a message that a hack is occurring.  Specifically used for space ninja tampering as this proc was originally in the ninja files.
 * However, the proc may also be used elsewhere.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\camera\camera.dm. ----------------------
// Construction/Deconstruction
//Return a working camera that can see a given mob
//or null if none
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\camera\camera_assembly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\camera\motion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\camera\presets.dm. ----------------------
// PRESETS
// EMP
// X-ray
// MOTION
// ALL UPGRADES
// AUTONAME
//This camera type automatically sets it's name to whatever the area that it's in is called.
// CHECKS
// UPGRADE PROCS
// If you are upgrading Motion, and it isn't in the camera's Initialize(), add it to the machines list.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\camera\tracking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\aifixer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\apc_control.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\arcade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\atmos_alert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\atmos_control.dm. ----------------------
/////////////////////////////////////////////////////////////
// AIR SENSOR (found in gas tanks)
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// GENERAL AIR CONTROL (a.k.a atmos computer)
/////////////////////////////////////////////////////////////
//Incinerator sensor only
//Toxins mix sensor only
/////////////////////////////////////////////////////////////
// LARGE TANK CONTROL
/////////////////////////////////////////////////////////////
// This hacky madness is the evidence of the fact that a lot of machines were never meant to be constructable, im so sorry you had to see this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\buildandrepair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\camera.dm. ----------------------
// Returns the list of cameras accessible from this computer
// SECURITY MONITORS
// TELESCREENS
// Bypass clickchain to allow humans to use the telescreen from a distance
// Subtype that connects to shuttles.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\camera_advanced.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\card.dm. ----------------------
//Keeps track of the time for the ID console. Having it as a global variable prevents people from dismantling/reassembling it to
//increase the slots of many jobs.
//Check if you can't open a new position for a certain job
//Logic check for Topic() if you can open the job
//Logic check for Topic() if you can close the job
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\cloning.dm. ----------------------
//Used by the experimental cloning computer.
//Prototype cloning console, much more rudimental and lacks modern functions such as saving records, autocloning, or safety checks.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\communications.dm. ----------------------
// The communications computer
/// Are we NOT a silicon, AND we're logged in as the captain?
/// Are we a silicon, OR we're logged in as the captain?
/// Are we a silicon, OR logged in?
/// Returns whether or not the communications console can communicate with the station
/// Returns TRUE if the user can buy shuttles.
/// If they cannot, returns FALSE or a string detailing why.
/**
 * Call an emergency meeting
 *
 * Comm Console wrapper for the Communications subsystem wrapper for the call_emergency_meeting world proc.
 * Checks to make sure the proc can be called, and handles relevant feedback, logging and timing.
 * See the SScommunications proc definition for more detail, in short, teleports the entire crew to
 * the bridge for a meetup. Should only really happen during april fools.
 * Arguments:
 * * user - Mob who called the meeting
 */
/// Override the cooldown for special actions
/// Used in places such as CentCom messaging back so that the crew can answer right away
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\crew.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\dna_console.dm. ----------------------
/// Base timeout for creating mutation activators and other injectors
/// Maximum number of genetic makeup storage slots in DNA Console
/// Timeout for DNA Scramble in DNA Consoles
/// Timeout for using the Joker feature to solve a gene in DNA Console
/// How much time DNA Scanner upgrade tiers remove from JOKER_TIMEOUT
/// Maximum value for radiaton strength when pulsing enzymes
/// Larger multipliers will affect the range of values when pulsing enzymes
/// Maximum value for the radiation pulse duration when pulsing enzymes
/// Large values reduce pulse accuracy and may pulse other enzymes than selected
/// Special status indicating a scanner occupant is transforming eg. from monkey to human
/// Multiplier for how much radiation received from DNA Console functionality
/// Flag for the mutation ref search system. Search will include scanner occupant
/// Flag for the mutation ref search system. Search will include console storage
/// Flag for the mutation ref search system. Search will include diskette storage
/// Flag for the mutation ref search system. Search will include advanced injector mutations
/**
  * Applies the enzyme buffer to the current scanner occupant
  *
  * Applies the type of a specific genetic makeup buffer to the current scanner
	* occupant
	*
  * Arguments:
  * * type - "ui"/"ue"/"mixed" - Which part of the enzyme buffer to apply
  * * buffer_slot - Index of the enzyme buffer to apply
  */
/**
  * Checks if there is a connected DNA Scanner that is operational
  */
/**
  * Checks if there is a valid DNA Scanner occupant for genetic modification
  *
	* Checks if there is a valid subject in the DNA Scanner that can be genetically
	* modified. Will set the scanner occupant var as part of this check.
	* Requires that the scanner can be operated and will return early if it can't
  */
/**
  * Checks for adjacent DNA scanners and connects when it finds a viable one
  *
	* Seearches cardinal directions in order. Stops when it finds a viable DNA Scanner.
	* Will connect to a broken scanner if no functional scanner is available.
	* Links itself to the DNA Scanner to receive door open and close events.
  */
/**
  * Called by connected DNA Scanners when their doors close.
  *
	* Sets the new scanner occupant and completes delayed enzyme transfer if one
	* is queued.
  */
/**
  * Called by connected DNA Scanners when their doors open.
  *
	* Clears enzyme pulse operations, stops processing and nulls the current
	* scanner occupant var.
  */
/**
  * Builds the genetic makeup list which will be sent to tgui interface.
  */
/**
  * Builds the genetic makeup list which will be sent to tgui interface.
	*
	* Will iterate over the connected scanner occupant, DNA Console, inserted
	* diskette and chromosomes and any advanced injectors, building the main data
	* structures which get passed to the tgui interface.
  */
/**
  * Takes any given chromosome and calculates chromosome compatibility
	*
	* Will iterate over the stored chromosomes in the DNA Console and will check
	* whether it can be applied to the supplied mutation. Then returns a list of
	* names of chromosomes that were compatible.
	*
	* Arguments:
  * * mutation - The mutation to check chromosome compatibility with
  */
/**
  * Checks whether a mutation alias has been discovered
	*
	* Checks whether a given mutation's genetic sequence has been completed and
	* discovers it if appropriate
	*
	* Arguments:
  * * alias - Alias of the mutation to check (ie "Mutation 51" or "Mutation 12")
  */
/**
  * Find a mutation from various storage locations via ATOM ref
	*
	* Takes an ATOM Ref and searches the appropriate mutation buffers and storage
	* vars to try and find the associated mutation.
	*
	* Arguments:
  * * ref - ATOM ref of the mutation to locate
	* * target_flags - Flags for storage mediums to search, see #defines
  */
/**
  * Creates a randomised accuracy value for the enzyme pulse functionality.
	*
	* Donor code from previous DNA Console iteration.
	*
	* Arguments:
  * * position - Index of the intended enzyme element to pulse
	* * radduration - Duration of intended radiation pulse
	* * number_of_blocks - Number of individual data blocks in the pulsed enzyme
  */
/**
  * Scrambles an enzyme element value for the enzyme pulse functionality.
	*
	* Donor code from previous DNA Console iteration.
	*
	* Arguments:
  * * input - Enzyme identity element to scramble, expected hex value
	* * rs - Strength of radiation pulse, increases the range of possible outcomes
  */
/**
  * Sets the default state for the tgui interface.
  */
/**
  * Ejects the DNA Disk from the console.
	*
	* Will insert into the user's hand if possible, otherwise will drop it at the
	* console's location.
	*
	* Arguments:
  * * user - The mob that is attempting to eject the diskette.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\launchpad_control.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\law.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\mechlaunchpad.dm. ----------------------
///Tries to locate a pad in the cardinal directions, if it finds one it returns it
/**
  * Tries to call the launch proc on the connected mechpad, returns if there is no connected mechpad or there is no mecha on the pad
  * Arguments:
  * * user - The user of the proc
  * * where - The mechpad that the connected mechpad will try to send a supply pod to
  */
///Checks if the pad of a certain number has been QDELETED, if yes returns FALSE, otherwise returns TRUE
///Returns the pad of the value specified
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\Operating.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\pod.dm. ----------------------
/**
 * Initiates launching sequence by checking if all components are functional, opening poddoors, firing mass drivers and then closing poddoors
 */
// /obj/machinery/computer/pod/old/mass_driver_controller
// 	name = "\improper Mass Driver Controller"
// 	icon = 'icons/obj/airlock_machines.dmi'
// 	icon_state = "airlock_control_standby"
// 	icon_keyboard = "no_keyboard"
// 	density = FALSE
// /obj/machinery/computer/pod/old/mass_driver_controller/toxinsdriver
// 	id = MASSDRIVER_TOXINS
// //for maps where pod doors are outside of the standard 4 tile controller detection range (ie Pubbystation)
// /obj/machinery/computer/pod/old/mass_driver_controller/toxinsdriver/longrange
// 	range = 6
// /obj/machinery/computer/pod/old/mass_driver_controller/chapelgun
// 	id = MASSDRIVER_CHAPEL
// /obj/machinery/computer/pod/old/mass_driver_controller/trash
// 	id = MASSDRIVER_DISPOSALS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\security.dm. ----------------------
//Someone needs to break down the dat += into chunks instead of long ass lines.
/*Revised /N
I can't be bothered to look more of the actual code outside of switch but that probably needs revising too.
What a mess.*/
// SORTING!
//BASIC FUNCTIONS
//RECORD FUNCTIONS
//RECORD DELETE
//RECORD CREATE
//FIELD FUNCTIONS
//TEMPORARY MENU FUNCTIONS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\station_alert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\telecrystalconsoles.dm. ----------------------
/////////////////////////////////////////////
///////
/////////////////////////////////////////
/////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\teleporter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\_computer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\arcade\battle.dm. ----------------------
// ** BATTLE ** //
///creates the enemy base stats for a new round along with the enemy passives
///sets up the main screen for the user
///happens after a player action and before the enemy turn. the enemy turn will be cancelled if there's a gameover.
///the enemy turn, the enemy's action entirely depend on their current passive and a teensy tiny bit of randomness
///used to check if the last three move of the player are the one we want in the right order and if the passive's weakpoint has been triggered yet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\arcade\misc_arcade.dm. ----------------------
// Memeorable yet too short arcade games ahead.
// ** AMPUTATION ** //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\arcade\orion_trail.dm. ----------------------
// *** THE ORION TRAIL ** //
//Orion Trail Events
//Add Random/Specific crewmember
//Remove Random/Specific crewmember
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\prisoner\gulag_teleporter.dm. ----------------------
//computer that handle the points and teleports the prisoner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\prisoner\management.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\computer\prisoner\_prisoner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\airlock.dm. ----------------------
/*
	New methods:
	pulse - sends a pulse into a wire for hacking purposes
	cut - cuts a wire and makes any necessary state changes
	mend - mends a wire and makes any necessary state changes
	canAIControl - 1 if the AI can control the airlock, 0 if not (then check canAIHack to see if it can hack in)
	canAIHack - 1 if the AI can hack into the airlock to recover control, 0 if not. Also returns 0 if the AI does not *need* to hack it.
	hasPower - 1 if the main or backup power are functioning, 0 if not.
	requiresIDs - 1 if the airlock is requiring IDs, 0 if not
	isAllPowerCut - 1 if the main and backup power both have cut wires.
	regainMainPower - handles the effect of main power coming back on.
	loseMainPower - handles the effect of main power going offline. Usually (if one isn't already running) spawn a thread to count down how long it will be offline - counting down won't happen if main power was completely cut along with backup power, though, the thread will just sleep.
	loseBackupPower - handles the effect of backup power going offline.
	regainBackupPower - handles the effect of main power coming back on.
	shock - has a chance of electrocuting its target.
*/
// Wires for the airlock are located in the datum folder, inside the wires datum folder.
// shock user with probability prb (if all connections & power are working)
// returns TRUE if shocked, FALSE otherwise
// The preceding comment was borrowed from the grille's shock script
/// Returns if a crowbar would remove the airlock electronics
// gets called when a player uses an airlock painter on this airlock
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\airlock_electronics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\airlock_types.dm. ----------------------
/*
	Station Airlocks Regular
*/
//////////////////////////////////
/*
	Station Airlocks Glass
*/
//////////////////////////////////
/*
	Station Airlocks Mineral
*/
//////////////////////////////////
/*
	Station2 Airlocks
*/
//////////////////////////////////
/*
	External Airlocks
*/
//////////////////////////////////
/*
	CentCom Airlocks
*/
//////////////////////////////////
/*
	Vault Airlocks
*/
//////////////////////////////////
/*
	Hatch Airlocks
*/
//////////////////////////////////
/*
	High Security Airlocks
*/
//////////////////////////////////
/*
	Shuttle Airlocks
*/
//////////////////////////////////
/*
	Cult Airlocks
*/
//Pinion airlocks: Clockwork doors that only let servants of Ratvar through.
//////////////////////////////////
/*
	Misc Airlocks
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\alarmlock.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\brigdoors.dm. ----------------------
///////////////////////////////////////////////////////////////////////////////////////////////
// Brig Door control displays.
//  Description: This is a controls the timer for the brig doors, displays the timer on itself and
//               has a popup window when used, allowing to set the timer.
//  Code Notes: Combination of old brigdoor.dm code from rev4407 and the status_display.dm code
//  Date: 01/September/2010
//  Programmer: Veryinky
/////////////////////////////////////////////////////////////////////////////////////////////////
//Main door timer loop, if it's timing and time is >0 reduce time by 1.
// if it's less than 0, open door, reset timer
// update the door_timer window and the icon
// has the door power sitatuation changed, if so update icon.
// open/closedoor checks if door_timer has power, if so it checks if the
// linked door is open/closed (by density) then opens it/closes it.
//icon update function
// if NOPOWER, display blank
// if BROKEN, display blue screen of death icon AI uses
// if timing=true, run update display function
// Adds an icon in case the screen is broken/off, stolen from status_display.dm
//Checks to see if there's 1 line or 2, adds text-icons-numbers/letters over display
// Stolen from status_display
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\checkForMultipleDoors.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\door.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\firedoor.dm. ----------------------
//see also turf/AfterChange for adjacency shennanigans
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\passworddoor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\poddoor.dm. ----------------------
//special poddoors that open when emergency shuttle docks at centcom
//"BLAST" doors are obviously stronger than regular doors when it comes to BLASTS.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\shutters.dm. ----------------------
// The below shutters are the original ones from the TG codebase. They are remaining as "secure" shutters. If anyone wants to improve their animation, feel free.
// The original shutters are now shutters_old.dmi; copy the naming format of the files into new a new .dmi to add new shutters that work with the poddoor code for animating the doors.
// Originally, the shutters were reskins of blast doors. Eighty hits with the Cap's sabre to destroy one shutter is far too powerful considering shutters cannot be deconstructed (yet).
// If you're a mapper and want super strong shutter, use the 'old' ones.
// End of old shutter stuff. Credit for the old shutter sprites to TG.
/* //SPLURT edit, now handled better in modular
/obj/machinery/door/poddoor/shutters/radiation/do_animate(animation)
	..()
	switch(animation)
		if("opening")
			rad_insulation = 1
		if("closing")
			rad_insulation = -0.5
*/
// A 3x3 N2 SM setup won't irradiate you if you're behind the shutter at -0.9 insulation. If it starts to delam, it'll start irradiating you slowly. Keep the value between -0.1 to -0.9
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\unpowered.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\doors\windowdoor.dm. ----------------------
//used in the AStar algorithm to determinate if the turf the door is on is passable
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\embedded_controller\access_controller.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\embedded_controller\airlock_controller.dm. ----------------------
//States for airlock_control
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\embedded_controller\embedded_controller_base.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\embedded_controller\simple_vent_controller.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\pipe\construction.dm. ----------------------
/*CONTENTS
Buildable pipes
Buildable meters
*/
//construction defines are in __defines/pipe_construction.dm
//update those defines ANY TIME an atmos path is changed...
//...otherwise construction will stop working
// Convert dir of fitting into dir of built component
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\pipe\pipe_dispenser.dm. ----------------------
//Allow you to drag-drop disposal pipes and transit tubes into it
//transit tube dispenser
//inherit disposal for the dragging proc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\porta_turret\portable_turret.dm. ----------------------
//turret healing
////////////////////////
//Turret Control Panel//
////////////////////////
//lasertag presets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\porta_turret\portable_turret_construct.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\porta_turret\portable_turret_cover.dm. ----------------------
/************************
* PORTABLE TURRET COVER *
************************/
//The below code is pretty much just recoded from the initial turret object. It's necessary but uncommented because it's exactly the same!
//>necessary
//I'm not fixing it because i'm fucking bored of this code already, but someone should just reroute these to the parent turret's procs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\poweredfans\fan_assembly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\poweredfans\poweredfans.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\shuttle\custom_shuttle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\shuttle\shuttle_engine.dm. ----------------------
//-----------------------------------------------
//-------------Engine Thrusters------------------
//-----------------------------------------------
//Thanks to spaceheater.dm for inspiration :)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\shuttle\shuttle_heater.dm. ----------------------
//-----------------------------------------------
//--------------Engine Heaters-------------------
//This uses atmospherics, much like a thermomachine,
//but instead of changing temp, it stores plasma and uses
//it for the engine.
//-----------------------------------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\broadcasting.dm. ----------------------
/**

	Here is the big, bad function that broadcasts a message given the appropriate
	parameters.

	@param M:
		Reference to the mob/speaker, stored in signal.data["mob"]

	@param vmask:
		Boolean value if the mob is "hiding" its identity via voice mask, stored in
		signal.data["vmask"]

	@param vmessage:
		If specified, will display this as the message; such as "chimpering"
		for monkeys if the mob is not understood. Stored in signal.data["vmessage"].

	@param radio:
		Reference to the radio broadcasting the message, stored in signal.data["radio"]

	@param message:
		The actual string message to display to mobs who understood mob M. Stored in
		signal.data["message"]

	@param name:
		The name to display when a mob receives the message. signal.data["name"]

	@param job:
		The name job to display for the AI when it receives the message. signal.data["job"]

	@param realname:
		The "real" name associated with the mob. signal.data["realname"]

	@param vname:
		If specified, will use this name when mob M is not understood. signal.data["vname"]

	@param data:
		If specified:
				1 -- Will only broadcast to intercoms
				2 -- Will only broadcast to intercoms and station-bounced radios
				3 -- Broadcast to syndicate frequency
				4 -- AI can't track down this person. Useful for imitation broadcasts where you can't find the actual mob

	@param compression:
		If 0, the signal is audible
		If nonzero, the signal may be partially inaudible or just complete gibberish.

	@param level:
		The list of Z levels that the sending radio is broadcasting to. Having 0 in the list broadcasts on all levels

	@param freq
		The frequency of the signal

**/
// Subtype of /datum/signal with additional processing information.
// Vocal transmissions (i.e. using saycode).
// Despite "subspace" in the name, these transmissions can also be RADIO
// (intercoms and SBRs) or SUPERSPACE (CentCom).
// This is the meat function for making radios hear vocal transmissions.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machine_interactions.dm. ----------------------
/*

	All telecommunications interactions:

*/
// Check if the user can use it.
// Check if the user is nearby and has a multitool.
// Returns a multitool from a user depending on their mobtype.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\telecomunications.dm. ----------------------
/*
	Hello, friends, this is Doohl from sexylands. You may be wondering what this
	monstrous code file is. Sit down, boys and girls, while I tell you the tale.


	The telecom machines were designed to be compatible with any radio
	signals, provided they use subspace transmission. Currently they are only used for
	headsets, but they can eventually be outfitted for real COMPUTER networks. This
	is just a skeleton, ladies and gentlemen.

	Look at radio.dm for the prequel to this code.
*/
// Used in auto linking
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\computers\logbrowser.dm. ----------------------
/*
	The log console for viewing the entire telecomms
	network log
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\computers\message.dm. ----------------------
/*
	The monitoring computer for the messaging server.
	Lets you read PDA and request console messages.
*/
// The monitor itself.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\computers\telemonitor.dm. ----------------------
/*
	Telecomms monitor tracks the overall trafficing of a telecommunications network
	and displays a heirarchy of linked machines.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\allinone.dm. ----------------------
/*
	Basically just an empty shell for receiving and broadcasting radio messages. Not
	very flexible, but it gets the job done.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\broadcaster.dm. ----------------------
/*
	The broadcaster sends processed messages to all radio devices in the game. They
	do not have to be headsets; intercoms and station-bounced radios suffice.

	They receive their message from a server after the message has been logged.
*/
//Preset Broadcasters
//--PRESET LEFT--//
//--PRESET RIGHT--//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\bus.dm. ----------------------
/*
	The bus mainframe idles and waits for hubs to relay them signals. They act
	as junctions for the network.

	They transfer uncompressed subspace packets to processor units, and then take
	the processed packet to a server for logging.

	Link to a subspace hub if it can't send to a server.
*/
//Preset Buses
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\hub.dm. ----------------------
/*
	The HUB idles until it receives information. It then passes on that information
	depending on where it came from.

	This is the heart of the Telecommunications Network, sending information where it
	is needed. It mainly receives information from long-distance Relays and then sends
	that information to be processed. Afterwards it gets the uncompressed information
	from Servers/Buses and sends that back to the relay, to then be broadcasted.
*/
//Preset HUB
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\message_server.dm. ----------------------
/*
	The equivalent of the server, for PDA and request console messages.
	Without it, PDA and request console messages cannot be transmitted.
	PDAs require the rest of the telecomms setup, but request consoles only
	require the message server.
*/
// A decorational representation of SSblackbox, usually placed alongside the message server. Also contains a traitor theft item.
// The message server itself.
// PDA signal datum
// Log datums stored by the message server.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\processor.dm. ----------------------
/*
	The processor is a very simple machine that decompresses subspace signals and
	transfers them back to the original bus. It is essential in producing audible
	data.

	Link to servers if bus is not present
*/
//Preset Processors
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\receiver.dm. ----------------------
/*
	The receiver idles and receives messages from subspace-compatible radio equipment;
	primarily headsets. They then just relay this information to all linked devices,
	which can would probably be network hubs.

	Link to Processor Units in case receiver can't send to bus units.
*/
//Preset Receivers
//--PRESET LEFT--//
//--PRESET RIGHT--//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\relay.dm. ----------------------
/*
	The relay idles until it receives information. It then passes on that information
	depending on where it came from.

	The relay is needed in order to send information pass Z levels. It must be linked
	with a HUB, the only other machine that can send/receive pass Z levels.
*/
// Checks to see if it can send/receive.
//Preset Relay
//Generic preset relay
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\machinery\telecomms\machines\server.dm. ----------------------
/*
	The server logs all traffic and signal data. Once it records the signal, it sends
	it to the subspace broadcaster.

	Store a maximum of 100 logs and then deletes them.
*/
// Simple log entry datum
// Preset Servers
//Common and other radio frequencies for people to freely use
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\buckling.dm. ----------------------
//Interaction
//procs that handle the actual buckling and unbuckling
//Handle any extras after buckling
//Called on buckle_mob()
//same but for unbuckle
//Wrapper procs that handle sanity and user feedback
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\empulse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items.dm. ----------------------
// if true, everyone item when created will have its name changed to be
// more... RPG-like.
//user: The mob that is suiciding
//damagetype: The type of damage the item will inflict on the user
//BRUTELOSS = 1
//FIRELOSS = 2
//TOXLOSS = 4
//OXYLOSS = 8
//Output a creative message and then return the damagetype done
// afterattack() and attack() prototypes moved to _onclick/item_attack.dm for consistency
/// Called when a mob drops an item.
// called just as an item is picked up (loc is not yet changed)
// called when "found" in pockets and storage items. Returns 1 if the search should end.
/**
 * Called after an item is placed in an equipment slot.
 *
 * Note that hands count as slots.
 *
 * Arguments:
 * * user is mob that equipped it
 * * slot uses the slot_X defines found in setup.dm for items that can be placed in multiple slots
 * * Initial is used to indicate whether or not this is the initial equipment (job datums etc) or just a player doing it
 */
//Overlays for the worn overlay so you can overlay while you overlay
//eg: ammo counters, primed grenade flashing, etc.
//"icon_file" is used automatically for inhands etc. to make sure it gets the right inhand file
//sometimes we only want to grant the item's action if it's equipped in a specific slot.
//the mob M is attempting to equip this item into the slot passed through as 'slot'. Return 1 if it can do this and 0 if it can't.
//if this is being done by a mob other than M, it will include the mob equipper, who is trying to equip the item to mob M. equipper will be null otherwise.
//If you are making custom procs but would like to retain partial or complete functionality of this one, include a 'return ..()' to where you want this to happen.
//Set disable_warning to TRUE if you wish it to not give you outputs.
//This proc is executed when someone clicks the on-screen UI button.
//The default action is attack_self().
//Checks before we get to here are: mob is alive, mob is not restrained, stunned, asleep, resting, laying, item is on the mob.
// Called when a mob tries to use the item as a tool.
// Handles most checks.
// Called before use_tool if there is a delay, or by use_tool if there isn't.
// Only ever used by welding tools and stacks, so it's not added on any other use_tool checks.
// A check called by tool_start_check once, and by use_tool on every tick of delay.
// Generic use proc. Depending on the item, it uses up fuel, charges, sheets, etc.
// Returns TRUE on success, FALSE on failure.
// Plays item's usesound, if any.
// Used in a callback that is passed by use_tool into do_after call. Do not override, do not call manually.
// Returns a numeric value for sorting items used as parts in machines, so they can be replaced by the rped
//Can this item be given to people?
/// Get an item's volume that it uses when being stored.
/**
  * Sets our slowdown and updates equipment slowdown of any mob we're equipped on.
  */
/**
 * Does the current embedding var meet the criteria for being harmless? Namely, does it explicitly define the pain multiplier and jostle pain mult to be 0? If so, return true.
 *
 */
///In case we want to do something special (like self delete) upon failing to embed in something, return true
/**



  * tryEmbed() is for when you want to try embedding something without dealing with the damage + hit messages of calling hitby() on the item while targetting the target.



  *



  * Really, this is used mostly with projectiles with shrapnel payloads, from [/datum/element/embed/proc/checkEmbedProjectile], and called on said shrapnel. Mostly acts as an intermediate between different embed elements.



  *



  * Arguments:



  * * target- Either a body part, a carbon, or a closed turf. What are we hitting?



  * * forced- Do we want this to go through 100%?



  */
///For when you want to disable an item's embedding capabilities (like transforming weapons and such), this proc will detach any active embed elements from it.
///For when you want to add/update the embedding on an item. Uses the vars in [/obj/item/embedding], and defaults to config values for values that aren't set. Will automatically detach previous embed elements on this item.
/**
 * * An interrupt for offering an item to other people, called mainly from [/mob/living/carbon/proc/give], in case you want to run your own offer behavior instead.
 *
 * * Return TRUE if you want to interrupt the offer.
 *
 * * Arguments:
 * * offerer - the person offering the item
 */
/**
 * * An interrupt for someone trying to accept an offered item, called mainly from [/mob/living/carbon/proc/take], in case you want to run your own take behavior instead.
 *
 * * Return TRUE if you want to interrupt the taking.
 *
 * * Arguments:
 * * offerer - the person offering the item
 * * taker - the person trying to accept the offer
 */
/**
 * Updates all action buttons associated with this item
 *
 * Arguments:
 * * status_only - Update only current availability status of the buttons to show if they are ready or not to use
 * * force - Force buttons update even if the given button icon state has not changed
 */
/// Special stuff you want to do when an outfit equips this item.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\objs.dm. ----------------------
/// @depricated DO NOT USE
//called when the user unsets the machine.
/**
 * This proc is used for telling whether something can pass by this object in a given direction, for use by the pathfinding system.
 *
 * Trying to generate one long path across the station will call this proc on every single object on every single tile that we're seeing if we can move through, likely
 * multiple times per tile since we're likely checking if we can access said tile from multiple directions, so keep these as lightweight as possible.
 *
 * Arguments:
 * * ID- An ID card representing what access we have (and thus if we can open things like airlocks or windows to pass through them). The ID card's physical location does not matter, just the reference
 * * to_dir- What direction we're trying to move in, relevant for things like directional windows that only block movement in certain directions
 * * caller- The movable we're checking pass flags for, if we're making any such checks
 **/
/// Do you want to make overrides, of course you do! Will be called if an object was reskinned successfully
//For returning special data when the object is saved
//For example, or silos will return a list of their materials which will be dumped on top of them
//Can be customised if you have something that contains something you want saved
//If you put an incorrect format it will break outputting, so don't use this if you don't know what you are doing
//NOTE: Contents is automatically saved, so if you store your things in the contents var, don't worry about this
//====Output Format Examples====:
//===Single Object===
//	"/obj/item/folder/blue"
//===Multiple Objects===
//	"/obj/item/folder/blue,\n
//	/obj/item/folder/red"
//===Single Object with metadata===
//	"/obj/item/folder/blue{\n
//	\tdir = 8;\n
//	\tname = "special folder"\n
//	\t}"
//===Multiple Objects with metadata===
//	"/obj/item/folder/blue{\n
//	\tdir = 8;\n
//	\tname = "special folder"\n
//	\t},\n
//	/obj/item/folder/red"
//====How to save easily====:
//	return "[thing.type][generate_tgm_metadata(thing)]"
//Where thing is the additional thing you want to same (For example ores inside an ORM)
//Just add ,\n between each thing
//generate_tgm_metadata(thing) handles everything inside the {} for you
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\obj_defense.dm. ----------------------
//the essential proc to call when an obj must receive damage of any kind.
//returns the damage value of the attack after processing the obj's various armor protections
//the sound played when the obj is damaged.
///// ACID
//the obj's reaction when touched by acid
//called when the obj is destroyed by acid.
//// FIRE
//called when the obj is destroyed by fire
//The surgeon general warns that being buckled to certain objects receiving powerful shocks is greatly hazardous to your health
//Only tesla coils, vehicles, and grounding rods currently call this because mobs are already targeted over all other objects, but this might be useful for more things later.
//the obj is deconstructed into pieces, whether through careful disassembly or when destroyed.
//what happens when the obj's health is below integrity_failure level.
//what happens when the obj's integrity reaches zero.
//changes max_integrity while retaining current health percentage
//returns TRUE if the obj broke, FALSE otherwise
//returns how much the object blocks an explosion
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\alien_acid.dm. ----------------------
//xenomorph corrosive acid
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\anomalies.dm. ----------------------
//Anomalies, used for events. Note that these DO NOT work by themselves; their procs are called by the event datum.
///////////////////////
/////////////////////
/////////////////////
/////////////////////
/////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\arachnid_web.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\blessing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\bump_teleporter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\contraband.dm. ----------------------
// This is synced up to the poster placing animation.
// The poster item
// These icon_states may be overridden, but are for mapper's convinence
// The poster sign/structure
//separated to reduce code duplication. Moved here for ease of reference and to unclutter r_wall/attackby()
// Various possible posters follow
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\countdown.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effects.dm. ----------------------
//objects in /obj/effect should never be things that are attackable, use obj/structure instead.
//Effects are mostly temporary visual effects like sparks, smoke, as well as decals, etc...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\forcefields.dm. ----------------------
///////////Mimewalls///////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\glowshroom.dm. ----------------------
//separate dm since hydro is getting bloated already
/**
  *	Creates a new glowshroom structure.
  *
  * Arguments:
  * * newseed - Seed of the shroom
  * * mutate_stats - If the plant needs to mutate their stats
  * * spread - If the plant is a result of spreading, reduce its stats
  */
/**
  * Causes glowshroom spreading across the floor/walls.
  */
/**
  * Causes the glowshroom to decay by decreasing its endurance.
  *
  * Arguments:
  * * spread - Boolean to indicate if the decay is due to spreading or natural decay.
  * * amount - Amount of endurance to be reduced due to spread decay.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\landmarks.dm. ----------------------
// Please stop bombing the Observer-Start landmark.
// START LANDMARKS FOLLOW. Don't change the names unless
// you are refactoring shitty landmark code.
//Department Security spawns
// Must be immediate because players will
// join before SSatom initializes everything.
// carp.
// lone op (optional)
// observer-start.
// xenos.
// blobs.
//Servant spawn locations
//City of Cogs entrances
//generic event spawns
//------Station Rooms Landmarks------------//
// The landmark for the Engine on Box
// Landmark for the mining station
// handled in portals.dm, id connected to one-way portal
///Spawns the mob with some drugginess/drunkeness, and some disgust.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\mines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\misc.dm. ----------------------
//The effect when you wrap a dead body in gift wrap
//Makes a tile fully lit no matter what
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\overlays.dm. ----------------------
// /obj/effect/overlay/atmos_excited
// 	name = "excited group"
// 	icon = null
// 	icon_state = null
// 	anchored = TRUE  // should only appear in vis_contents, but to be safe
// 	appearance_flags = RESET_TRANSFORM | TILE_BOUND
// 	invisibility = INVISIBILITY_ABSTRACT
// 	mouse_opacity = MOUSE_OPACITY_TRANSPARENT
// 	layer = ATMOS_GROUP_LAYER
// 	plane = ATMOS_GROUP_PLANE
// /obj/effect/overlay/light_visible
// 	name = ""
// 	icon = 'icons/effects/light_overlays/light_32.dmi'
// 	icon_state = "light"
// 	layer = O_LIGHTING_VISUAL_LAYER
// 	plane = O_LIGHTING_VISUAL_PLANE
// 	appearance_flags = RESET_COLOR | RESET_ALPHA | RESET_TRANSFORM
// 	mouse_opacity = MOUSE_OPACITY_TRANSPARENT
// 	alpha = 0
// 	vis_flags = NONE
// /obj/effect/overlay/light_cone
// 	name = ""
// 	icon = 'icons/effects/light_overlays/light_cone.dmi'
// 	icon_state = "light"
// 	layer = O_LIGHTING_VISUAL_LAYER
// 	plane = O_LIGHTING_VISUAL_PLANE
// 	appearance_flags = RESET_COLOR | RESET_ALPHA | RESET_TRANSFORM
// 	mouse_opacity = MOUSE_OPACITY_TRANSPARENT
// 	vis_flags = NONE
// 	alpha = 110
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\portals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\proximity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spiders.dm. ----------------------
//generic procs copied from obj/effect/alien
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\step_triggers.dm. ----------------------
/* Simple object type, calls a proc when "stepped" on by something */
/* Sends a message to mob when triggered*/
/* Tosses things in a certain direction */
/* Stops things thrown by a thrower, doesn't do anything */
/* Instant teleporter */
/* Random teleporter, teleports atoms to locations ranging from teleport_x - teleport_x_offset, etc */
/* Fancy teleporter, creates sparks and smokes when used */
/* Simple sound player, Mapper friendly! */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\wanted_poster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable.dm. ----------------------
/**
 * A data list is passed into this.
 * This should return null to skip saving, or the type of data to save. Type must be /cleanable.
 */
/**
 * Loads from a data list.
 */
//Add "bloodiness" of this blood's type, to the human's shoes
//This is on /cleanable because fuck this ancient mess
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\crayon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\decal.dm. ----------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\misc.dm. ----------------------
//Used by spraybottles.
/// proc called to handle us hitting something
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\remains.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\vgdecals.dm. ----------------------
// Full credit goes to VG station for these assets. https://github.com/vgstation-coders/vgstation13
// All items in this .dm and the associated .dmi were made by VG station and all credit should go to them.
// -<| IMPORTANT MAPPER NOTE |>-
// Change the 'color' variable on any white sprite to simply recolour it!
// NUMBERS START
// NUMBERS END
// ATMOS START
// ATMOS END
// DEPARTMENT START
// DEPARTMENT END
// MISC START
// MISC END
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable\aliens.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable\gibs.dm. ----------------------
//Lizards
// Slime Gibs
//IPCs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable\humans.dm. ----------------------
//BLOODY FOOTPRINTS
/* Eventually TODO: make snowflake trails like baycode's
/obj/effect/decal/cleanable/blood/footprints/tracks/shoe
	name = "footprints"
	desc = "They look like tracks left by footwear."
	icon_state = FOOTPRINT_SHOE
	print_state = FOOTPRINT_SHOE

/obj/effect/decal/cleanable/blood/footprints/tracks/foot
	name = "footprints"
	desc = "They look like tracks left by a bare foot."
	icon_state = FOOTPRINT_FOOT
	print_state = FOOTPRINT_FOOT

/obj/effect/decal/cleanable/blood/footprints/tracks/snake
	name = "tracks"
	desc = "They look like tracks left by a giant snake."
	icon_state = FOOTPRINT_SNAKE
	print_state = FOOTPRINT_SNAKE

/obj/effect/decal/cleanable/blood/footprints/tracks/paw
	name = "footprints"
	desc = "They look like tracks left by paws."
	icon_state = FOOTPRINT_PAW
	print_state = FOOTPRINT_PAW

/obj/effect/decal/cleanable/blood/footprints/tracks/claw
	name = "footprints"
	desc = "They look like tracks left by claws."
	icon_state = FOOTPRINT_CLAW
	print_state = FOOTPRINT_CLAW

/obj/effect/decal/cleanable/blood/footprints/tracks/wheels
	name = "tracks"
	desc = "They look like tracks left by wheels."
	gender = PLURAL
	icon_state = FOOTPRINT_WHEEL
	print_state = FOOTPRINT_WHEEL

/obj/effect/decal/cleanable/blood/footprints/tracks/body
	name = "trails"
	desc = "A trail left by something being dragged."
	icon_state = FOOTPRINT_DRAG
	print_state = FOOTPRINT_DRAG */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable\misc.dm. ----------------------
//crematoriums need their own ash cause default ash deletes itself if created in an obj
//Vomit (sorry)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\cleanable\robots.dm. ----------------------
// Note: BYOND is object oriented. There is no reason for this to be copy/pasted blood code.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\turfdecal\dirt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\turfdecal\markings.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\turfdecal\tilecoloring.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\decals\turfdecal\weather.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_explosion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_foam.dm. ----------------------
// Foam
// Similar to smoke, but slower and mobs absorb its reagent through their exposed skin.
///////////////////////////////////////////////
//FOAM EFFECT DATUM
//////////////////////////////////////////////////////////
// FOAM STRUCTURE. Formed by metal foams. Dense and opaque, but easy to break
//Atmos Backpack Resin, transparent, prevents atmos and filters the air
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_other.dm. ----------------------
/////////////////////////////////////////////
//////// Attach a trail to any object, that spawns when it moves (like for the jetpack)
/// just pass in the object to attach it to in set_up
/// Then do start() to start it and stop() to stop it, obviously
/// and don't call start() in a loop that will be repeated otherwise it'll get spammed!
/////////////////////////////////////////////
//Reagent-based explosion effect
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_smoke.dm. ----------------------
/////////////////////////////////////////////
//// SMOKE SYSTEMS
/////////////////////////////////////////////
/////////////////////////////////////////////
// Bad smoke
/////////////////////////////////////////////
/////////////////////////////////////////////
// Nanofrost smoke
/////////////////////////////////////////////
/////////////////////////////////////////////
// Sleep smoke
/////////////////////////////////////////////
/////////////////////////////////////////////
// Chem smoke
/////////////////////////////////////////////
/////////////////////////////////////////////
// Transparent smoke
/////////////////////////////////////////////
//Same as the base type, but the smoke produced is not opaque
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_sparks.dm. ----------------------
/////////////////////////////////////////////
//SPARK SYSTEM (like steam system)
// The attach(atom/atom) proc is optional, and can be called to attach the effect
// to something, like the RCD, so then you can just call start() and the sparks
// will always spawn at the items location.
/////////////////////////////////////////////
//electricity
//fake sparks, not subtyped because we don't want light/heat, nor checks inside an often used proc for a rare subcase for saving like 10 lines of code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effects_water.dm. ----------------------
//WATER EFFECTS
/////////////////////////////////////////////
// GENERIC STEAM SPREAD SYSTEM
//Usage: set_up(number of bits of steam, use North/South/East/West only, spawn location)
// The attach(atom/atom) proc is optional, and can be called to attach the effect
// to something, like a smoking beaker, so then you can just call start() and the steam
// will always spawn at the items location, even if it's moved.
/* Example:
 var/datum/effect_system/steam_spread/steam = new /datum/effect_system/steam_spread() -- creates new system
steam.set_up(5, 0, mob.loc) -- sets up variables
OPTIONAL: steam.attach(mob)
steam.start() -- spawns the effect
*/
/////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\effect_system\effect_system.dm. ----------------------
/* This is an attempt to make some easily reusable "particle" type effect, to stop the code
constantly having to be rewritten. An item like the jetpack that uses the ion_trail_follow system, just has one
defined, then set up when it is created with New(). Then this same system can just be reused each time
it needs to create more trails.A beaker could have a steam_trail_follow system set up, then the steam
would spawn and follow the beaker, even if it is carried or thrown.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\bombspawner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\bundle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\gibspawner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\lootdrop.dm. ----------------------
// Minor lootdrops follow
// Tech storage circuit board spawners
// For these, make sure that lootcount equals the number of list items
//Note this is out of a 100 - Meaning the number you see is also the percent its going to pick that
//This is meant for "low" loot that anyone could find in a toilet, for better gear use high loot toilet
//Note this is out of a 100 - Meaning the number you see is also the percent its going to pick that
//This is meant for "prison" loot that is rather rare and meant for "prisoners if they get a crowbar to fine, or sec.
//Note this is out of a 100 - Meaning the number you see is also the percent its going to pick that
//The items inside are always going to be something usefull, illegal and likely traitorous.
// Random Parts
// Random Weapon Parts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\structure.dm. ----------------------
/*
Because mapping is already tedious enough this spawner let you spawn generic
"sets" of objects rather than having to make the same object stack again and
again.
*/
//normal windows
//reinforced
//tinted and electrochromatic
//shuttle window
//plastitanium window
//plastitanium pirate window
//ice window
//survival pod window
//plasma windows
//plasma reinforced
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\traps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\vaultspawner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\spawners\xeno_egg_delivery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\clockcult.dm. ----------------------
//temporary visual effects(/obj/effect/temp_visual) used by clockcult stuff
//Foreshadows a servant warping in.
//Used by the Eminence to coordinate the cult
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\cult.dm. ----------------------
//temporary visual effects(/obj/effect/temp_visual) used by cult stuff
//visuals for runes being magically created
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\miscellaneous.dm. ----------------------
//unsorted miscellaneous temporary visuals
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\temporary_visual.dm. ----------------------
//temporary visual effects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\projectiles\impact.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\projectiles\muzzle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\projectiles\projectile_effects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\effects\temporary_visuals\projectiles\tracer.dm. ----------------------
//BEAM RIFLE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\airlock_painter.dm. ----------------------
//	desc_controls = "Alt-Click to remove the ink cartridge."
//		"Hydroponics" = /obj/machinery/door/airlock/hydroponics,
//This proc doesn't just check if the painter can be used, but also uses it.
//Only call this if you are certain that the painter will be used right after this check!
//This proc only checks if the painter can be used.
//Call this if you don't want the painter to be used right after this check, for example
//because you're expecting user input.
//	desc_controls = "Alt-Click to remove the ink cartridge."
/**
 * Actually add current decal to the floor.
 *
 * Responsible for actually adding the element to the turf for maximum flexibility.area
 * Can be overriden for different decal behaviors.
 * Arguments:
 * * target - The turf being painted to
*/
/**
 * Return the final icon_state for the given decal options
 *
 * Arguments:
 * * decal - the selected decal base icon state
 * * color - the selected color
 * * dir - the selected dir
 */
//	cross_round_cachable = TRUE
/**
 * Underlay an example floor for preview purposes, and return the new icon.
 *
 * Arguments:
 * * decal - the decal to place over the example floor tile
 */
/**
 * Insert a specific state into the spritesheet.
 *
 * Arguments:
 * * decal - the given decal base state.
 * * dir - the given direction.
 * * color - the given color.
 */
//	desc_controls = "Alt-Click to remove the ink cartridge."
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\AI_modules.dm. ----------------------
/*
CONTAINS:
AI MODULES

*/
// AI module
//The proc other things should be calling
//The proc that actually changes the silicon's laws.
/******************** Modules ********************/
//TransmitInstructions for each type of board: Supplied, Core, Zeroth and Ion. May not be neccesary right now, but allows for easily adding more complex boards in the future. ~Miauw
/******************** Safeguard ********************/
/******************** OneCrew ********************/
/******************** ProtectStation ********************/
/******************** Quarantine ********************/
/******************** OxygenIsToxicToHumans ********************/
/****************** New Freeform ******************/
/******************** Law Removal ********************/
/******************** Reset ********************/
/******************** Purge ********************/
/******************* Full Core Boards *******************/
/******************** Asimov ********************/
/******************** Asimov++ *********************/
/******************** Corporate ********************/
/****************** P.A.L.A.D.I.N. 3.5e **************/
/****************** P.A.L.A.D.I.N. 5e **************/
/********************* Custom *********************/
/****************** T.Y.R.A.N.T. *****************/
/******************** Robocop ********************/
/******************** Antimov ********************/
/******************** Freeform Core ******************/
/******************** Overthrow ******************/
/******************** Hacked AI Module ******************/
//	..()    //We don't want this module reporting to the AI who dun it. --NEO
/******************* Ion Module *******************/
/******************** Mother Drone  ******************/
/******************** Robodoctor ****************/
/******************** Reporter *******************/
/****************** Thermodynamic *******************/
/******************Live And Let Live*****************/
/******************Guardian of Balance***************/
// Bad times ahead
/******************H.O.G.A.N.***************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\apc_frame.dm. ----------------------
// APC HULL
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\armor_kits.dm. ----------------------
// Armor kits! Reinforcing uniforms to maintain fashion and also armor capabilities.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\binoculars.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\blueprints.dm. ----------------------
//Station blueprints!!!
//Blueprint Subtypes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\bodybag.dm. ----------------------
// Bluespace bodybag
// Containment bodybag
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\body_egg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\boombox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\broom.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\candle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\cardboard_cutouts.dm. ----------------------
//Cardboard cutouts! They're man-shaped and can be colored with a crayon to look like a human in a certain outfit, although it's limited, discolored, and obvious to more than a cursory glance.
/**
  * change_appearance: Changes a skin of the cardboard cutout based on a user's choice
  *
  * Arguments:
  * * crayon The crayon used to change and recolor the cardboard cutout
  * * user The mob choosing a skin of the cardboard cutout
  */
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  * * crayon The crayon used to interact with a menu
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\cards_ids.dm. ----------------------
/* Cards
 * Contains:
 *		DATA CARD
 *		ID CARD
 *		FINGERPRINT CARD HOLDER
 *		FINGERPRINT CARD
 */
/*
 * DATA CARDS - Used for the IC data card reader
 */
/*
 * ID CARDS
 */
// Returns true if new account was set.
//Polychromatic Knight Badge
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\chainsaw.dm. ----------------------
// CHAINSAW
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\charter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\chromosome.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\chrono_eraser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\cigs_lighters.dm. ----------------------
//cleansed 9/15/2012 17:48
/*
CONTAINS:
MATCHES
CIGARETTES
CIGARS
SMOKING PIPES
CHEAP LIGHTERS
ZIPPO
ROLLING PAPER
VAPES
BONGS

CIGARETTE PACKETS ARE IN FANCY.DM
*/
///////////
//MATCHES//
///////////
//////////////////
//FINE SMOKABLES//
//////////////////
// Cigarette brands.
// Rollies.
////////////
// CIGARS //
////////////
/////////////////
//SMOKING PIPES//
/////////////////
/////////
//ZIPPO//
/////////
///////////
//ROLLING//
///////////
///////////////
//VAPE NATION//
///////////////
///////////////
/////BONGS/////
///////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\clown_items.dm. ----------------------
/* Clown Items
 * Contains:
 *		Soap
 *		Bike Horns
 *		Air Horns
 *		Canned Laughter
 */
/*
 * Soap
 */
/*
 * Bike Horns
 */
//air horn
//golden bikehorn
//canned laughter
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\control_wand.dm. ----------------------
// Airlock remote works by sending NTNet packets to whatever it's pointed at.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\cosmetics.dm. ----------------------
//you can wipe off lipstick with paper!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\courtroom.dm. ----------------------
// Contains:
// Gavel Hammer
// Gavel Block
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\crab17.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\crayons.dm. ----------------------
/*
 * Crayons
 */
//////////////Gang mode stuff/////////////////
/////////////////Gang end////////////////////
/*
 * Crayon Box
 */
//Spraycan stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\credit_holochip.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\debug_items.dm. ----------------------
/* This file contains standalone items for debug purposes. */
// Revive this once we purge all the istype checks for tools for tool_behaviour
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\defib.dm. ----------------------
//backpack item
//paddles
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
///////////////////////////////////////////
/////////Defibrillator Disks//////////////
///////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\dehy_carp.dm. ----------------------
/*
 *	Dehydrated Carp
 *	Instant carp, just add water
 */
//Child of carpplushie because this should do everything the toy does and more
//Attack self
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\dice.dm. ----------------------
/*****************************Dice Bags********************************/
/*****************************Dice********************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\dna_injector.dm. ----------------------
/////////////////////////////////////
////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\documents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\dualsaber.dm. ----------------------
/*
 * Double-Bladed Energy Swords - Cheridan
 */
/// Triggered on wield of two handed item
/// Specific hulk checks due to reflection chance for balance issues and switches hitsounds.
/// Triggered on unwield of two handed item
/// switch hitsounds
/////////////////////////////////////////////////////
//	HYPEREUTACTIC Blades	/////////////////////////
/////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\dyekit.dm. ----------------------
/**
 * Applies a gradient and a gradient color to a mob.
 *
 * Arguments:
 * * target - The mob who we will apply the gradient and gradient color to.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\eightball.dm. ----------------------
// A broken magic eightball, it only says "YOU SUCK" over and over again.
// Haunted eightball is identical in description and function to toy,
// except it actually ASKS THE DEAD (wooooo)
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\electrostaff.dm. ----------------------
// haha security desword time /s
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\extinguisher.dm. ----------------------
//Particle movement loop
//Chair movement loop
//firebot assembly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\fireaxe.dm. ----------------------
/*
 * Fireaxe
 */
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
/*
 * Bone Axe
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\flamethrower.dm. ----------------------
//Called from turf.dm turf/dblclick
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\fluff.dm. ----------------------
/*	Balls, Bones, and Bountiful Fun
//
//	Includes:-
//		1) Fluff Content, lines 12 - 131
//
//			1) Tennis balls, lines 39 - 99
//			2) Chew bones, lines 101 - 138
//			3) Frisbee, lines 140 - 166
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\gift.dm. ----------------------
/* Gifts and wrapping paper
 * Contains:
 *		Gifts
 *		Wrapping Paper
 */
/*
 * Gifts
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\granters.dm. ----------------------
///books that teach things (intrinsic actions like bar flinging, spells like fireball or smoke, or martial arts)///
///TRAITS///
///ACTION BUTTONS///
///SPELLS///
///MARTIAL ARTS///
// I did not include mushpunch's grant, it is not a book and the item does it just fine.
//Crafting Recipe books
/*/obj/item/book/granter/crafting_recipe/bone_bow //Bow crafting for non-ashwalkers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\handcuffs.dm. ----------------------
//Handcuffs
//Legcuffs
/**
  * Attempts to legcuff someone with the bola
  *
  * Arguments:
  * * C - the carbon that we will try to ensnare
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\his_grace.dm. ----------------------
//His Grace is a very special weapon granted only to traitor chaplains.
//When awakened, He thirsts for blood and begins ticking a "bloodthirst" counter.
//The wielder of His Grace is immune to stuns and gradually heals.
//If the wielder fails to feed His Grace in time, He will devour them and become incredibly aggressive.
//Leaving His Grace alone for some time will reset His thirst and put Him to sleep.
//Using His Grace effectively requires extreme speed and care.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\holosign_creator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\holy_weapons.dm. ----------------------
// CHAPLAIN CUSTOM ARMORS //
// CITADEL CHANGES: More variants
// CITADEL CHANGES ENDS HERE
// CITADEL CHANGES: More variants
// CITADEL CHANGES ENDS HERE
// CITADEL CHANGES: More Variants
// CITADEL CHANGES ENDS HERE
// CHAPLAIN NULLROD AND CUSTOM WEAPONS //
/**
  * reskin_holy_weapon: Shows a user a list of all available nullrod reskins and based on his choice replaces the nullrod with the reskinned version
  *
  * Arguments:
  * * M The mob choosing a nullrod reskin
  */
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\hot_potato.dm. ----------------------
//CREATOR'S NOTE: DO NOT FUCKING GIVE THIS TO BOTANY!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\inducer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\kitchen.dm. ----------------------
/* Kitchen tools
 * Contains:
 *		Fork
 *		Kitchen knives
 *		Ritual Knife
 *		Bloodletter
 *		Butcher's cleaver
 *		Combat Knife
 *		Rolling Pins
 */
/* Trays  moved to /obj/item/storage/bag */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\latexballoon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\manuals.dm. ----------------------
/*********************MANUALS (BOOKS)***********************/
//Oh god what the fuck I am not good at computer
// Wiki books that are linked to the configured wiki link.
// A book that links to the wiki
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\miscellaneous.dm. ----------------------
//choice boxes (they just open in your hand instead of making a pod)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\mop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\paint.dm. ----------------------
//NEVER USE THIS IT SUX	-PETETHEGOAT
//IT SUCKS A BIT LESS -GIACOM
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\paiwire.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\pet_carrier.dm. ----------------------
//Used to transport little animals without having to drag them across the station.
//Comes with a handy lock to prevent them from running off.
//bluespace jar, a reskin of the pet carrier that can fit people and smashes when thrown
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\pinpointer.dm. ----------------------
//Pinpointers are used to track atoms from a distance as long as they're on the same z-level. The captain and nuke ops have ones that track the nuclear authentication disk.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\pitchfork.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\plushes.dm. ----------------------
//Overrides parent proc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\pneumaticCannon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\powerfist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\puzzle_pieces.dm. ----------------------
//**************
//*****Keys*******************
//**************		**  **
//Two test keys for use alongside the two test doors.
//***************
//*****Doors*****
//***************
//Standard Expressions to make keycard doors basically un-cheeseable
//Test doors. Gives admins a few doors to use quickly should they so choose.
//*************************
//***Box Pushing Puzzles***
//*************************
//We're working off a subtype of pressureplates, which should work just a BIT better now.
//Uses the pressure_plate settings for a pretty basic custom pattern that waits for a specific item to trigger. Easy enough to retool for mapping purposes or subtypes.
// snowflake code until undertile elements
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\RCD.dm. ----------------------
/*
CONTAINS:
RCD
ARCD
RLD
*/
// Ranged RCD
// RAPID LIGHTING DEVICE
///pretty much rcd_create, but named differently to make myself feel less bad for copypasting from a sibling-type
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\RCL.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
//previous contents of trigger(), lays cable each time the player moves
//searches the current tile for a stub cable of the same colour
//Callback used to respond to interactions with the wiring menu
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\religion.dm. ----------------------
//this is all part of one item set
//Prophet helmet
//Structure conversion staff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\RPD.dm. ----------------------
/*
CONTAINS:
RPD
*/
// SKYRAT CHANGE: Made BSRPD into a subtype of RPD, additionally made it work at range.
/* unneeded, you can craft ducts from plastic
/obj/item/pipe_dispenser/plumbing
	name = "Plumberinator"
	desc = "A crude device to rapidly plumb things."
	icon_state = "plumberer"
	category = PLUMBING_CATEGORY
	locked = TRUE

/obj/item/pipe_dispenser/plumbing/Initialize(mapload)
	. = ..()
	spark_system = new
	spark_system.set_up(5, 0, src)
	spark_system.attach(src)
	if(!first_plumbing)
		first_plumbing = GLOB.fluid_duct_recipes[GLOB.fluid_duct_recipes[1]][1]

	recipe = first_plumbing

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\RSF.dm. ----------------------
/*
CONTAINS:
RSF

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\scrolls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\sharpener.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\shields.dm. ----------------------
/// Entirely overriden take_damage. This shouldn't exist outside of an implant (other than maybe christmas).
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\shooting_range.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\shrapnel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\signs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\singularityhammer.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\spear.dm. ----------------------
//spears
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
//GREY TIDE
/*
 * Bone Spear
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stunbaton.dm. ----------------------
//return TRUE to interrupt attack chain.
//Makeshift stun baton. Replacement for stun gloves.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\summon.dm. ----------------------
/// doing nothing/orbiting idly
/// performing reset animation
/// performing attack animation
/// performing animation between attacks
/**
 * Simple summon weapon code in this file
 *
 * tl;dr latch onto target, repeatedly proc attacks, animate using transforms,
 * no real hitboxes/collisions, think of /datum/component/orbit-adjacent
 */
/**
 * Serves as the master datum for summon weapons
 */
/**
 * A singular summoned object
 *
 * How summon weapons work:
 *
 * Reset() - makes it go back to its master.
 * Target() - locks onto a target for a duration
 *
 * The biggest challenge is synchronizing animations.
 * Variables keep track of when things tick, but,
 * animations are client-timed, and not server-timed
 *
 * Animations:
 * The weapon can only track its "intended" angle and dist
 * "Current" pixel x/y are always calculated relative to a target from the current orbiting atom the physical effect is on
 * There's 3 animations,
 * MoveTo(location, angle, dist, rotation)
 * Orbit(location)
 * Rotate(degrees)
 *
 * And an non-animation that just snaps it to a location,
 * HardReset(location)
 */
/**
 * relative to defaults to current location
 */
/**
 * rotation defaults to facing towards locked atom
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\taster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\teleportation.dm. ----------------------
/* Teleportation devices.
 * Contains:
 *		Locator
 *		Hand-tele
 */
/*
 * Locator
 */
/*
 * Hand-tele
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\teleprod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\telescopic_iv.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\theft_tools.dm. ----------------------
//Items for nuke theft, supermatter theft traitor objective
// STEALING THE NUKE
//the nuke core - objective item
//nuke core box, for carrying the core
//snowflake screwdriver, works as a key to start nuke theft, traitor only
// STEALING SUPERMATTER
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\toys.dm. ----------------------
/* Toys!
 * Contains
 *		Balloons
 *		Fake singularity
 *		Toy gun
 *		Toy crossbow
 *		Toy swords
 *		Crayons
 *		Snap pops
 *		Mech prizes
 *		AI core prizes
 *		Toy codex gigas
 * 		Skeleton toys
 *		Cards
 *		Toy nuke
 *		Fake meteor
 *		Foam armblade
 *		Toy big red button
 *		Beach ball
 *		Toy xeno
 *      Kitty toys!
 *		Snowballs
 *		Clockwork Watches
 *		Toy Daggers
 */
/*
 * Balloons
 */
/*
 * Fake singularity
 */
/*
 * Toy gun: Why isnt this an /obj/item/gun?
 */
/*
 * Toy swords
 */
// Copied from /obj/item/melee/transforming/energy/sword/attackby
/*
 * Foam armblade
 */
/*
 * Subtype of Double-Bladed Energy Swords
 */
/*
 * Snap pops
 */
/*
 * Mech prizes
 */
//all credit to skasi for toy mech fun ideas
// Talking toys are language universal, and thus all species can use them
/*
 * AI core prizes
 */
/*
|| A Deck of Cards for playing various games of chance ||
*/
//ATTACK HAND NOT CALLING PARENT
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  */
/**
  * This proc updates the sprite for when you create a hand of cards
  */
/*
|| Syndicate playing cards, for pretending you're Gambit and playing poker for the nuke disk. ||
*/
/*
 * Fake nuke
 */
/*
 * Fake meteor
 */
/*
 * Toy big red button
 */
/*
 * Snowballs
 */
/*
 * Beach ball
 */
/*
 * Clockwork Watch
 */
/*
 * Toy Dagger
 */
/*
 * Xenomorph action figure
 */
// TOY MOUSEYS :3 :3 :3
/*
 * Action Figures
 */
//Add changing looks when i feel suicidal about making 20 inhands for these.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\trash.dm. ----------------------
//Added by Jack Rost
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\vending_items.dm. ----------------------
/*
	Vending machine refills can be found at /code/modules/vending/ within each vending machine's respective file
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\weaponry.dm. ----------------------
/*
oranges says: This is a meme relating to the english translation of the ss13 russian wiki page on lurkmore.
mrdoombringer sez: and remember kids, if you try and PR a fix for this item's grammar, you are admitting that you are, indeed, a newfriend.
for further reading, please see: https://github.com/tgstation/tgstation/pull/30173 and https://translate.google.com/translate?sl=auto&tl=en&js=y&prev=_t&hl=en&ie=UTF-8&u=%2F%2Flurkmore.to%2FSS13&edit-text=&act=url
*/
/// BOKKEN CRAFTNG PIECES
// /obj/item/ectoplasm/angelic
// 	icon = 'icons/obj/wizard.dmi'
// 	icon_state = "angelplasm"
// /obj/item/statuebust/hippocratic
// 	name = "hippocrates bust"
// 	desc = "A bust of the famous Greek physician Hippocrates of Kos, often referred to as the father of western medicine."
// 	icon_state = "hippocratic"
// 	impressiveness = 50
//EROS REMOVE modular_splurt\code\game\objects\items\weaponry\melee
/*
/obj/item/melee/baseball_bat/attack(mob/living/target, mob/living/user)
	. = ..()
	if(HAS_TRAIT(user, TRAIT_PACIFISM))
		return
	var/atom/throw_target = get_edge_target_turf(target, user.dir)
	if(homerun_ready)
		user.visible_message("<span class='userdanger'>It's a home run!</span>")
		target.throw_at(throw_target, rand(8,10), 14, user)
		target.ex_act(EXPLODE_HEAVY)
		playsound(get_turf(src), 'sound/weapons/homerun.ogg', 100, TRUE)
		homerun_ready = 0
		return
	else if(!target.anchored)
		var/whack_speed = (prob(60) ? 1 : 4)
		target.throw_at(throw_target, rand(1, 2), whack_speed, user) // sorry friends, 7 speed batting caused wounds to absolutely delete whoever you knocked your target into (and said target)
*/
//END EROS REMOVE
/// Stage 1: The mistake is made
/// Stage 2: Fear sets in
/// Stage 3A: We face our own failures
/// Stage 3B: We face our reckoning (unless we moved away or they're incapacitated)
/// Yeah broh! This is where we do the high-fiving (or high-tenning :o)
/// Gangster secret handshakes.
/// Adds the user to the family that this package corresponds to, dispenses the free_clothes of that family, and adds them to the handler if it exists.
/// Checks if the user is trying to use the package of the family they are in, and if not, adds them to the family, with some differing processing depending on whether the user is already a family member.
// /obj/item/gohei
// 	name = "gohei"
// 	desc = "A wooden stick with white streamers at the end. Originally used by shrine maidens to purify things. Now used by the station's valued weeaboos."
// 	force = 5
// 	throwforce = 5
// 	hitsound = "swing_hit"
// 	attack_verb_continuous = list("whacks", "thwacks", "wallops", "socks")
// 	attack_verb_simple = list("whack", "thwack", "wallop", "sock")
// 	icon = 'icons/obj/items_and_weapons.dmi'
// 	icon_state = "gohei"
// 	item_state = "gohei"
// 	lefthand_file = 'icons/mob/inhands/weapons/staves_lefthand.dmi'
// 	righthand_file = 'icons/mob/inhands/weapons/staves_righthand.dmi'
//HF blade
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\circuitboards\circuitboard.dm. ----------------------
//File with the circuitboard and circuitboard/machine class definitions and procs
// Circuitboard
/**
 * Used to allow the circuitboard to configure a machine in some way, shape or form.
 *
 * Arguments:
 * * machine - The machine to attempt to configure.
 */
// Circuitboard/machine
/*Common Parts: Parts List: Ignitor, Timer, Infra-red laser, Infra-red sensor, t_scanner, Capacitor, Valve, sensor unit,
micro-manipulator, console screen, beaker, Microlaser, matter bin, power cells.
*/
// Applies the default parts defined by the circuit board when the machine is created
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\circuitboards\computer_circuitboards.dm. ----------------------
//Command
//obj/item/circuitboard/computer/shield
//	name = "Shield Control (Computer Board)"
//	icon_state = "command"
//	build_path = /obj/machinery/computer/stationshield
//Engineering
// /obj/item/circuitboard/computer/atmos_control/tank/bz_tank
// 	name = "BZ Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/bz_tank
// /obj/item/circuitboard/computer/atmos_control/tank/freon_tank
// 	name = "Freon Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/freon_tank
// /obj/item/circuitboard/computer/atmos_control/tank/halon_tank
// 	name = "Halon Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/halon_tank
// /obj/item/circuitboard/computer/atmos_control/tank/healium_tank
// 	name = "Healium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/healium_tank
// /obj/item/circuitboard/computer/atmos_control/tank/hydrogen_tank
// 	name = "Hydrogen Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/hydrogen_tank
// /obj/item/circuitboard/computer/atmos_control/tank/hypernoblium_tank
// 	name = "Hypernoblium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/hypernoblium_tank
// /obj/item/circuitboard/computer/atmos_control/tank/miasma_tank
// 	name = "Miasma Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/miasma_tank
// /obj/item/circuitboard/computer/atmos_control/tank/nitryl_tank
// 	name = "Nitryl Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/nitryl_tank
// /obj/item/circuitboard/computer/atmos_control/tank/pluoxium_tank
// 	name = "Pluoxium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/pluoxium_tank
// /obj/item/circuitboard/computer/atmos_control/tank/proto_nitrate_tank
// 	name = "Proto-Nitrate Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/proto_nitrate_tank
// /obj/item/circuitboard/computer/atmos_control/tank/stimulum_tank
// 	name = "Stimulum Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/stimulum_tank
// /obj/item/circuitboard/computer/atmos_control/tank/tritium_tank
// 	name = "Tritium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/tritium_tank
// /obj/item/circuitboard/computer/atmos_control/tank/water_vapor
// 	name = "Water Vapor Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/water_vapor
// /obj/item/circuitboard/computer/atmos_control/tank/zauker_tank
// 	name = "Zauker Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/zauker_tank
// /obj/item/circuitboard/computer/atmos_control/tank/helium_tank
// 	name = "Helium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/helium_tank
// /obj/item/circuitboard/computer/atmos_control/tank/antinoblium_tank
// 	name = "Antinoblium Supply Control (Computer Board)"
// 	build_path = /obj/machinery/computer/atmos_control/tank/antinoblium_tank
// /obj/item/circuitboard/computer/base_construction/aux
// 	name = "circuit board (Aux Mining Base Construction Console)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/computer/camera_advanced/base_construction/aux
// /obj/item/circuitboard/computer/base_construction/centcom
// 	name = "circuit board (Centcom Base Construction Console)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/computer/camera_advanced/base_construction/centcom
//Generic
// /obj/item/circuitboard/computer/white_ship/bridge
// 	name = "White Ship Bridge (Computer Board)"
// 	icon_state = "generic"
// 	build_path = /obj/machinery/computer/shuttle/white_ship/bridge
//Medical
//Science
// /obj/item/circuitboard/computer/mechpad
// 	name = "Mecha Orbital Pad Console (Computer Board)"
// 	icon_state = "science"
// 	build_path = /obj/machinery/computer/mechpad
//Security
// /obj/item/circuitboard/computer/warrant
// 	name = "Security Warrant Viewer (Computer Board)"
// 	icon_state = "security"
// 	build_path = /obj/machinery/computer/warrant
//Service
//Supply
// DIY shuttle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\circuitboards\machine_circuitboards.dm. ----------------------
//Command
//Engineering
// why is this not a subtype of autolathe?
// /obj/item/circuitboard/machine/scanner_gate
// 	name = "Scanner Gate (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/scanner_gate
// 	req_components = list(
// 		/obj/item/stock_parts/scanning_module = 3)
// /obj/item/circuitboard/machine/HFR_fuel_input
// 	name = "HFR Fuel Input (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/atmospherics/components/unary/hypertorus/fuel_input
// 	req_components = list(
// 		/obj/item/stack/sheet/plasteel = 5)
// /obj/item/circuitboard/machine/HFR_waste_output
// 	name = "HFR Waste Output (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/atmospherics/components/unary/hypertorus/waste_output
// 	req_components = list(
// 		/obj/item/stack/sheet/plasteel = 5)
// /obj/item/circuitboard/machine/HFR_moderator_input
// 	name = "HFR Moderator Input (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/atmospherics/components/unary/hypertorus/moderator_input
// 	req_components = list(
// 		/obj/item/stack/sheet/plasteel = 5)
// /obj/item/circuitboard/machine/HFR_core
// 	name = "HFR core (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/atmospherics/components/unary/hypertorus/core
// 	req_components = list(
// 		/obj/item/stack/cable_coil = 10,
// 		/obj/item/stack/sheet/glass = 10,
// 		/obj/item/stack/sheet/plasteel = 10)
// /obj/item/circuitboard/machine/HFR_corner
// 	name = "HFR Corner (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/hypertorus/corner
// 	req_components = list(
// 		/obj/item/stack/sheet/plasteel = 5)
// /obj/item/circuitboard/machine/HFR_interface
// 	name = "HFR Interface (Machine Board)"
// 	icon_state = "engineering"
// 	build_path = /obj/machinery/hypertorus/interface
// 	req_components = list(
// 		/obj/item/stack/cable_coil = 10,
// 		/obj/item/stack/sheet/glass = 10,
// 		/obj/item/stack/sheet/plasteel = 5)
//Generic
// /obj/item/circuitboard/machine/electrolyzer
// 	name = "Electrolyzer (Machine Board)"
// 	icon_state = "generic"
// 	build_path = /obj/machinery/electrolyzer
// 	req_components = list(
// 		/obj/item/stock_parts/electrolite = 2,
// 		/obj/item/stock_parts/capacitor = 2,
// 		/obj/item/stack/cable_coil = 5,
// 		/obj/item/stack/sheet/glass = 1)
// 	needs_anchored = FALSE
// /obj/item/circuitboard/machine/accounting
// 	name = "Account Registration Device (Machine Board)"
// 	icon_state = "command"
// 	build_path = /obj/machinery/accounting
// 	req_components = list(
// 		/obj/item/stock_parts/card_reader = 1,
// 		/obj/item/stock_parts/scanning_module = 1
// 	)
//Medical
// /obj/item/circuitboard/machine/fat_sucker
// 	name = "Lipid Extractor (Machine Board)"
// 	icon_state = "medical"
// 	build_path = /obj/machinery/fat_sucker
// 	req_components = list(/obj/item/stock_parts/micro_laser = 1,
// 		/obj/item/kitchen/fork = 1)
// /obj/item/circuitboard/machine/medical_kiosk
// 	name = "Medical Kiosk (Machine Board)"
// 	icon_state = "medical"
// 	build_path = /obj/machinery/medical_kiosk
// 	var/custom_cost = 10
// 	req_components = list(
// 		/obj/item/healthanalyzer = 1,
// 		/obj/item/stock_parts/scanning_module = 1)
// /obj/item/circuitboard/machine/medical_kiosk/multitool_act(mob/living/user)
// 	. = ..()
// 	var/new_cost = input("Set a new cost for using this medical kiosk.","New cost", custom_cost) as num|null
// 	if(!new_cost || (loc != user))
// 		to_chat(user, "<span class='warning'>You must hold the circuitboard to change its cost!</span>")
// 		return
// 	custom_cost = clamp(round(new_cost, 1), 10, 1000)
// 	to_chat(user, "<span class='notice'>The cost is now set to [custom_cost].</span>")
// /obj/item/circuitboard/machine/medical_kiosk/examine(mob/user)
// 	. = ..()
// 	. += "The cost to use this kiosk is set to [custom_cost]."
//Science
// /obj/item/circuitboard/machine/mechpad
// 	name = "Mecha Orbital Pad (Machine Board)"
// 	icon_state = "science"
// 	build_path = /obj/machinery/mechpad
// 	req_components = list()
//Security
//Service
// /obj/item/circuitboard/machine/griddle
// 	name = "circuit board (Griddle)"
// 	icon_state = "service"
// 	build_path = /obj/machinery/griddle
// 	req_components = list(/obj/item/stock_parts/micro_laser = 1)
// 	needs_anchored = FALSE
//Supply
//Misc
// /obj/item/circuitboard/machine/plumbing_receiver
// 	name = "Chemical Recipient (Machine Board)"
// 	icon_state = "medical"
// 	build_path = /obj/machinery/plumbing/receiver
// 	req_components = list(
// 		/obj/item/stack/ore/bluespace_crystal = 1,
// 		/obj/item/stock_parts/capacitor = 2,
// 		/obj/item/stack/sheet/glass = 1)
// 	def_components = list(/obj/item/stack/ore/bluespace_crystal = /obj/item/stack/ore/bluespace_crystal/artificial)
// 	needs_anchored = FALSE
// /obj/item/circuitboard/machine/skill_station
// 	name = "Skill Station (Machine Board)"
// 	build_path = /obj/machinery/skill_station
// 	req_components = list(
// 		/obj/item/stock_parts/matter_bin = 2,
// 		/obj/item/stock_parts/micro_laser = 2,
// 		/obj/item/stock_parts/scanning_module = 2
// 	)
// DIY SHUTTLE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\aicard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\anomaly_neutralizer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\beacon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\camera_bug.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\chameleonproj.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\compressionkit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\desynchronizer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\dogborg_sleeper.dm. ----------------------
// Dogborg Sleeper units
// Bags are prohibited from this due to the potential explotation of objects, same with brought
//Gurgleborg process
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\doorCharge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\electroadaptive_pseudocircuit.dm. ----------------------
//Used by engineering cyborgs in place of generic circuits.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\electrochromatic_kit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\flashlight.dm. ----------------------
// see: [/datum/wound/burn/proc/uv()]
// the desk lamps are a bit special
// green-shaded desk lamp
//Bananalamp
// FLARES
// Glowsticks, in the uncomfortable range of similar to flares,
// but not similar enough to make it worth a refactor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\forcefieldprojector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\geiger_counter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\glue.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\gps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\laserpointer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\lightreplacer.dm. ----------------------
// Light Replacer (LR)
//
// ABOUT THE DEVICE
//
// This is a device supposedly to be used by Janitors and Janitor Cyborgs which will
// allow them to easily replace lights. This was mostly designed for Janitor Cyborgs since
// they don't have hands or a way to replace lightbulbs.
//
// HOW IT WORKS
//
// You attack a light fixture with it, if the light fixture is broken it will replace the
// light fixture with a working light; the broken light is then placed on the floor for the
// user to then pickup with a trash bag. If it's empty then it will just place a light in the fixture.
//
// HOW TO REFILL THE DEVICE
//
// It will need to be manually refilled with lights.
// If it's part of a robot module, it will charge when the Robot is inside a Recharge Station.
//
// EMAGGED FEATURES
//
// NOTICE: The Cyborg cannot use the emagged Light Replacer and the light's explosion was nerfed. It cannot create holes in the station anymore.
//
// I'm not sure everyone will react the emag's features so please say what your opinions are of it.
//
// When emagged it will rig every light it replaces, which will explode when the light is on.
// This is VERY noticable, even the device's name changes when you emag it so if anyone
// examines you when you're holding it in your hand, you will be discovered.
// It will also be very obvious who is setting all these lights off, since only Janitor Borgs and Janitors have easy
// access to them, and only one of them can emag their device.
//
// The explosion cannot insta-kill anyone with 30% or more health.
// Negative numbers will subtract
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\megaphone.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\multitool.dm. ----------------------
/**
 * Multitool -- A multitool is used for hacking electronic devices.
 *
 */
// Syndicate device disguised as a multitool; it will turn red when an AI camera is nearby.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\paicard.dm. ----------------------
// 		WIRE_SIGNAL = 1
//		WIRE_RECEIVE = 2
//		WIRE_TRANSMIT = 4
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\pipe_painter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\polycircuit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\portable_chem_mixer.dm. ----------------------
/**
  * Updates the contents of the portable chemical mixer
  *
  * A list of dispensable reagents is created by iterating through each source beaker in the portable chemical beaker and reading its contents
  */
/**
  * Replaces the beaker of the portable chemical mixer with another beaker, or simply adds the new beaker if none is in currently
  *
  * Checks if a valid user and a valid new beaker exist and attempts to replace the current beaker in the portable chemical mixer with the one in hand. Simply places the new beaker in if no beaker is currently loaded
  *	Arguments:
  * * mob/living/user							-	The user who is trying to exchange beakers
  *	* obj/item/reagent_containers/new_beaker	-	The new beaker that the user wants to put into the device
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\powersink.dm. ----------------------
// Powersink - used to drain station power
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\pressureplates.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\quantum_keycard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\reverse_bear_trap.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\scanners.dm. ----------------------
/*

CONTAINS:
T-RAY
HEALTH ANALYZER
GAS ANALYZER
SLIME SCANNER
NANITE SCANNER
GENETICS SCANNER

*/
// Describes the three modes of scanning available for health analyzers
// Used by the PDA medical scanner too
/// Displays wounds with extended information on their status vs medscanners
//slime scanner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\sensor_device.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\swapper.dm. ----------------------
//ported from TG, credit to XDTM
//Gets the topmost teleportable container
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\taperecorder.dm. ----------------------
//empty tape recorders
//Random colour tapes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\traitordevices.dm. ----------------------
/*

Miscellaneous traitor devices

BATTERER

RADIOACTIVE MICROLASER

*/
/*

The Batterer, like a flashbang but 50% chance to knock people over. Can be either very
effective or pretty fucking useless.

*/
/*
		The radioactive microlaser, a device disguised as a health analyzer used to irradiate people.

		The strength of the radiation is determined by the 'intensity' setting, while the delay between
	the scan and the irradiation kicking in is determined by the wavelength.

		Each scan will cause the microlaser to have a brief cooldown period. Higher intensity will increase
	the cooldown, while higher wavelength will decrease it.

		Wavelength is also slightly increased by the intensity as well.
*/
/*portable turret*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\transfer_valve.dm. ----------------------
//TODO: Have this take an assemblyholder
//Attached device memes
//These keep attached devices synced up, for example a TTV with a mouse trap being found in a bag so it's triggered, or moving the TTV with an infrared beam sensor to update the beam's direction.
/*
	Exadv1: I know this isn't how it's going to work, but this was just to check
	it explodes properly when it gets a signal (and it does).
*/
/*
	This doesn't do anything but the timer etc. expects it to be here
	eventually maybe have it update icon to show state (timer, prox etc.) like old bombs
*/
/**
  * Returns if this is ready to be detonated. Checks if both tanks are in place.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\PDA\cart.dm. ----------------------
//Neither copytext nor copytext_char is appropriate here; neither 30 UTF-8 code units nor 30 code points equates to 30 columns of output.
//Some glyphs are very tall or very wide while others are small or even take up no space at all.
//Emojis can take modifiers which are many characters but render as only one glyph.
//A proper solution here (as far as Unicode goes, maybe not ideal as far as markup goes, a table would be better)
//would be to use <span style="width: NNNpx; overflow: none;">[A.area.name]</span>
//If the cartridge adds a special line to the top of the messaging app
//If the cartridge adds something to each potetial messaging target
//This is called for special abilities of cartridges
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\PDA\PDA.dm. ----------------------
//The advanced pea-green monochrome lcd of tomorrow.
//pda icon overlays list defines
//BASIC FUNCTIONS===================================
//MENU FUNCTIONS===================================
//MAIN FUNCTIONS===================================
//NOTEKEEPER FUNCTIONS===================================
//MESSENGER FUNCTIONS===================================
//SYNDICATE FUNCTIONS===================================
//pAI FUNCTIONS===================================
//DRINK RECIPE BROWSER=============================
//CHEMISTRY RECIPE BROWSER
//LINK FUNCTIONS===================================
//EXTRA FUNCTIONS===================================
//trying to insert or remove an id
// access to status display signals
//AI verb and proc for sending PDA messages.
// Pass along the pulse to atoms in contents, largely added so pAIs are vulnerable to EMP
//borg pda stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\PDA\PDA_types.dm. ----------------------
//Clown PDA is slippery.
//Mime PDA sends "silent" messages.
// Special AI/pAI PDAs that cannot explode.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\PDA\radio.dm. ----------------------
// Radio Cartridge, essentially a remote signaler with limited spectrum.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\PDA\virus_cart.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\radio\electropack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\radio\encryptionkey.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\radio\headset.dm. ----------------------
// Used for translating channels to tokens on examination
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\radio\intercom.dm. ----------------------
//Created through the autolathe or through deconstructing intercoms. Can be applied to wall to make a new intercom on it!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\devices\radio\radio.dm. ----------------------
// Checks if this radio can receive on the given frequency.
///////////////////////////////
//////////Borg Radios//////////
///////////////////////////////
//Giving borgs their own radio to have some more room to work with -Sieve
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\antigravity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\chem_grenade.dm. ----------------------
//assembly stuff
//Large chem grenades accept slime cores and use the appropriately.
//////////////////////////////
////// PREMADE GRENADES //////
//////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\clusterbuster.dm. ----------------------
////////////////////
//Clusterbang
////////////////////
//////////////////////
//Clusterbang segment
//////////////////////
//////////////////////////////////
//The payload spawner effect
/////////////////////////////////
//////////////////////////////////
//Custom payload clusterbusters
/////////////////////////////////
//random clusterbuster spawner
//rainbow slime effect
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\emgrenade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\flashbang.dm. ----------------------
//Flash
//Bang
// Grenade that releases more shrapnel the more times you use it in hand between priming and detonation (sorta like the 9bang from MW3), for admin goofs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\ghettobomb.dm. ----------------------
//improvised explosives//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\grenade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\plastic.dm. ----------------------
//assembly stuff
//////////////////////////
///// The Explosives /////
//////////////////////////
// X4 is an upgraded directional variant of c4 which is relatively safe to be standing next to. And much less safe to be standing on the other side of.
// C4 is intended to be used for infiltration, and destroying tech. X4 is intended to be used for heavy breaching and tight spaces.
// Intended to replace C4 for nukeops, and to be a randomdrop in surplus/random traitor purchases.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\smokebomb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\spawnergrenade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\grenades\syndieminibomb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant.dm. ----------------------
//What does the implant do upon injection?
//return 1 if the implant injects
//return 0 if there is no room for implant / it fails
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implantcase.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implantchair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implanter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implantpad.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_abductor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_chem.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_clown.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_deathrattle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_exile.dm. ----------------------
//Exile implants will allow you to use the station gate, but not return home.
//This will allow security to exile badguys/for badguys to exile their kill targets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_explosive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_freedom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_hijack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_krav_maga.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_mindshield.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_misc.dm. ----------------------
//Health Tracker Implant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_spell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_stealth.dm. ----------------------
//Box Object
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_storage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_track.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\implants\implant_uplink.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\melee\energy.dm. ----------------------
//Most of the other special functions are handled in their own files. aka special snowflake code so kewl
/*/////////////////////////////////////////////////////////////////////////
/////////////		The TRUE Energy Sword		///////////////////////////
//Broken version. Not a toy, but not as strong.
////////		Tatortot NEB		/////////////// (same stats as regular esword)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\melee\misc.dm. ----------------------
// Fast, efficient parry.
// Description for trying to stun when still on cooldown.
// Description for when turning their baton "on"
// Default message for stunning mob.
// Default message for stunning a silicon.
// Are we applying any special effects when we stun to carbon
// Are we applying any special effects when we stun to silicon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\melee\transforming.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\robot\ai_upgrades.dm. ----------------------
///AI Upgrades
//Malf Picker
//Lipreading
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\robot\robot_items.dm. ----------------------
/**********************************************************************
						Cyborg Spec Items
***********************************************************************/
//Peacekeeper Cyborg Projectile Dampenening Field
/**********************************************************************
						HUD/SIGHT things
***********************************************************************/
/**********************************************************************
						Grippers oh god oh fuck
***********************************************************************/
// Used to drop whatever's in the gripper.
// Rare cases - meant to be handled by code\modules\mob\living\silicon\robot\robot.dm:584 and the weirdness of get_active_held_item() of borgs.
// Splitable items
// Even rarer cases
// At this point you're just kidding me, but have this one as well.
// Make it clear what we can do with it.
// Resets vis_contents and if holding something, add it to vis_contents.
// Generates the "minified" version of the item being held and adjust it's position.
// I kind of wanted the item to be held in the gripper when stored as well, but i realized "store" is just drop as well, so i'll do this for now.
// This will handle cases where the borg runs out of power or is damaged enough so the module is forcefully stored.
// Clear references on being destroyed
/**********************************************************************
						Dogborg stuff
***********************************************************************/
///Mere cosmetic dogborg items, remnants of what were once the most annoying cyborg modules.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\robot\robot_parts.dm. ----------------------
//The robot bodyparts have been moved to code/module/surgery/bodyparts/robot_bodyparts.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\robot\robot_upgrades.dm. ----------------------
// robot_upgrades.dm
// Contains various borg upgrades.
/*
This proc gets called by upgrades after installing them. Use this for things that for example need to be moved into a specific borg item,
as performing this in action() will cause the upgrade to end up in the borg instead of its intended location due to forceMove() being called afterwards..
*/
/* moved to modular_sand
/obj/item/borg/upgrade/expand/action(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if(.)

		if(R.hasExpanded)
			to_chat(usr, "<span class='notice'>This unit already has an expand module installed!</span>")
			return FALSE

		R.mob_transforming = TRUE
		var/prev_locked_down = R.locked_down
		R.SetLockdown(1)
		R.anchored = TRUE
		var/datum/effect_system/smoke_spread/smoke = new
		smoke.set_up(1, R.loc)
		smoke.start()
		sleep(2)
		for(var/i in 1 to 4)
			playsound(R, pick('sound/items/drill_use.ogg', 'sound/items/jaws_cut.ogg', 'sound/items/jaws_pry.ogg', 'sound/items/welder.ogg', 'sound/items/ratchet.ogg'), 80, 1, -1)
			sleep(12)
		if(!prev_locked_down)
			R.SetLockdown(0)
		R.anchored = FALSE
		R.mob_transforming = FALSE
		R.resize = 2
		R.hasExpanded = TRUE
		R.update_transform()

/obj/item/borg/upgrade/expand/deactivate(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if (. && R.hasExpanded)
		R.resize = 0.5
		R.hasExpanded = FALSE
		R.update_transform()
*/
// Citadel's Vtech Controller
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\bscrystal.dm. ----------------------
//Bluespace crystals, used in telescience and when crushed it will blink you to a random turf.
//Artificial bluespace crystal, doesn't give you much research.
//Polycrystals, aka stacks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\cash.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\license_plates.dm. ----------------------
///Override to allow for variations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\medical.dm. ----------------------
// gauze is only relevant for wounds, which are handled in the wounds themselves
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\rods.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\stack.dm. ----------------------
/* Stack type objects!
 * Contains:
 * 		Stacks
 * 		Recipe datum
 * 		Recipe list datum
 */
/*
 * Stacks
 */
/** Sets the amount of materials per unit for this stack.
 *
 * Arguments:
 * - [mats][/list]: The value to set the mats per unit to.
 * - multiplier: The amount to multiply the mats per unit by. Defaults to 1.
 */
/** Updates the custom materials list of this stack.
 */
/**
 * Override to make things like metalgen accurately set custom materials
 */
/**
 * Builds all recipes in a given recipe list and returns an association list containing them
 *
 * Arguments:
 * * recipe_to_iterate - The list of recipes we are using to build recipes
 */
/**
 * Returns a list of properties of a given recipe
 *
 * Arguments:
 * * R - The stack recipe we are using to get a list of properties
 */
/**
 * Checks if the recipe is valid to be used
 *
 * Arguments:
 * * R - The stack recipe we are checking if it is valid
 * * recipe_list - The list of recipes we are using to check the given recipe
 */
/** Adds some number of units to this stack.
 *
 * Arguments:
 * - _amount: The number of units to add to this stack.
 */
/** Checks whether this stack can merge itself into another stack.
 *
 * Arguments:
 * - [check][/obj/item/stack]: The stack to check for mergeability.
 */
//ATTACK HAND IGNORING PARENT RETURN VALUE
/** Splits the stack into two stacks.
 *
 * Arguments:
 * - [user][/mob]: The mob splitting the stack.
 * - amount: The number of units to split from this stack.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\stack_recipe.dm. ----------------------
/*
 * Recipe datum
 */
/*
 * Recipe list datum
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\tape.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\telecrystal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\tickets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\wrap.dm. ----------------------
/*
 * Wrapping Paper
 */
/*
 * Package Wrap
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\glass.dm. ----------------------
/* Glass stack types
 * Contains:
 *		Glass sheets
 *		Plasma glass
 *		Reinforced glass sheets
 *		Reinforced plasma glass
 *		Titanium glass
 *		Plastitanium glass
 *		Glass shards - TODO: Move this into code/game/object/item/weapons
 */
/*
 * Glass sheets
 */
/*
 * Reinforced glass sheets
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\leather.dm. ----------------------
//don't see anywhere else to put these, maybe together they could be used to make the xenos suit?
/*
 * Leather SHeet
 */
/*
 * Sinew
 */
//Step one - dehairing.
//Step two - washing..... it's actually in washing machine code.
//Step three - drying
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\light.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\mineral.dm. ----------------------
/*
Mineral Sheets
	Contains:
		- Sandstone
		- Sandbags
		- Diamond
		- Uranium
		- Plasma
		- Gold
		- Silver
		- Clown
		- Titanium
		- Plastitanium
	Others:
		- Adamantine
		- Mythril
		- Snow
		- Abductor
		- Coal
*/
/*
 * Sandstone
 */
/*
 * Sandbags
 */
/*
 * Diamond
 */
/*
 * Uranium
 */
/*
 * Plasma
 */
//	new/datum/stack_recipe("plasma ingot", /obj/item/ingot/plasma, 6, time = 100), \ no
/*
 * Gold
 */
/*
 * Silver
 */
/*
 * Clown
 */
/*
 * Titanium
 */
/*
 * Plastitanium
 */
/****************************** Others ****************************/
/*
 * Adamantine
 */
/*
 * Runite
 */
/*
 * Mythril
 */
/*
 * Snow
 */
/*
 * Alien Alloy
 */
/*
 * Coal
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\sheets.dm. ----------------------
/**
  * Called on the glass sheet upon solar construction (duh):
  * Different glass sheets can modify different stas/vars, such as obj_integrity or efficiency
  * and possibly extra effects if you wish to code them.
  * Keep in mind the solars' max_integrity is set equal to the obj_integrity later,
  * so you won't have to do so here.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\sheets\sheet_types.dm. ----------------------
/* Diffrent misc types of sheets
 * Contains:
 * Metal
 * Plasteel
 * Wood
 * Bamboo
 * Cloth
 * Durathread
 * Cardboard
 * Runed Metal (cult)
 * Brass (clockwork cult)
 * Bronze (bake brass)
 * Gems
 * Bones
 * Plastic
 * Paper Frames
 * Cotton/Duracotton
 */
/*
 * Metal
 */
/*
 * Plasteel
 */
/*
 * Wood
 */
/*
 * Bamboo
 */
/*
 * Cloth
 */
/*
 * Durathread
 */
/*
 * Cardboard
 */
/*
 * Runed Metal
 */
/*
 * Brass
 */
/*
 * Bronze
 */
/*
 * Lesser and Greater gems - unused
 */
//durathread and cotton raw
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\tiles\light.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\tiles\tile_mineral.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\stacks\tiles\tile_types.dm. ----------------------
//Grass
//Fairygrass
//Wood
//Cloth Floors
//Basalt
//Carpets
//High-traction
//Circuit
//Pod floor
//Plasteel (normal)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\backpack.dm. ----------------------
/* Backpacks
 * Contains:
 *		Backpack
 *		Backpack Types
 *		Satchel Types
 */
/*
 * Backpack
 */
/*
 * Backpack Types
 */
/*
 * Satchel Types
 */
// For ClownOps.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\bags.dm. ----------------------
/*
 *	These absorb the functionality of the plant bag, ore satchel, etc
 *	They use the use_to_pickup, quick_gather, and quick_empty functions
 *	that were already defined in weapon/storage, but which had been
 *	re-implemented in other classes.
 *
 *	Contains:
 *		Trash Bag
 *		Mining Satchel
 *		Plant Bag
 *		Sheet Snatcher
 *		Book Bag
 *      Biowaste Bag
 *
 *	-Sayu
 */
//  Generic non-item
// -----------------------------
//          Trash bag
// -----------------------------
// -----------------------------
//        Mining Satchel
// -----------------------------
// -----------------------------
//          Plant bag
// -----------------------------
////////
// -----------------------------
//        Sheet Snatcher
// -----------------------------
// Because it stacks stacks, this doesn't operate normally.
// However, making it a storage/bag allows us to reuse existing code in some places. -Sayu
// -----------------------------
//    Sheet Snatcher (Cyborg)
// -----------------------------
// -----------------------------
//           Book bag
// -----------------------------
/*
 * Trays - Agouri
 */
//bluespace tray, holds more items
/*
 *	Chemistry bag
 */
/*
 *  Biowaste bag (mostly for xenobiologists)
 */
/*
Bag for holding materials
*/
/*
 *  Construction bag (for engineering, holds stock parts and electronics)
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\belt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\book.dm. ----------------------
/**
  * Checks if we are allowed to interact with the radial
  *
  * Arguements: user The mob interacting with the menu
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\boxes.dm. ----------------------
/*
 *	Everything derived from the common cardboard box.
 *	Basically everything except the original is a kit (starts full).
 *
 *	Contains:
 *		Empty box, starter boxes (survival/engineer),
 *		Latex glove and sterile mask boxes,
 *		Syringe, beaker, dna injector boxes,
 *		Blanks, flashbangs, and EMP grenade boxes,
 *		Tracking and chemical implant boxes,
 *		Prescription glasses and drinking glass boxes,
 *		Condiment bottle and silly cup boxes,
 *		Donkpocket and monkeycube boxes,
 *		ID and security PDA cart boxes,
 *		Handcuff, mousetrap, and pillbottle boxes,
 *		Snap-pops and matchboxes,
 *		Replacement light boxes,
 *		Ammo types,
 *		Action Figure Boxes,
 *		Various paper bags,
 *		Colored boxes
 *
 *		For syndicate call-ins see uplink_kits.dm
 */
//Disk boxes
// Ordinary survival box
// Mining survival box
// Engineer survival box
// Syndie survival box
// Security survival box
//Some spare PDAs in a box
/////clown box & honkbot assembly
//////
// Clown survival box
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  * * P The pen used to interact with a menu
  */
//Colored boxes.
//Where do I put this?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\briefcase.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\dakis.dm. ----------------------
//////////////////////////////////
//dakimakuras
//////////////////////////////////
////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\fancy.dm. ----------------------
/*
 * The 'fancy' path is for objects like donut boxes that show how many items are in the storage item on the sprite itself
 * .. Sorry for the shitty path name, I couldnt think of a better one.
 *
 * WARNING: var/icon_type is used for both examine text and sprite name. Please look at the procs below and adjust your sprite names accordingly
 *		TODO: Cigarette boxes should be ported to this standard
 *
 * Contains:
 *		Donut Box
 *		Egg Box
 *		Candle Box
 *		Cigarette Box
 *		Cigar Case
 *		Heart Shaped Box w/ Chocolates
 *		Ring Box
 */
/*
 * Donut Box
 */
/*
 * Egg Box
 */
/*
 * Candle Box
 */
////////////
//CIG PACK//
////////////
///The value in here has NOTHING to do with icons. It needs to be this for the proper examine.
///Overrides to do nothing because fancy boxes are fucking insane.
//Derringer "Cigarettes"//
//For traitors with luck/class
//For operatives, bound in a ka-tet.
//For Cargomen, looking for a good deal on arms, with no quarrels as to where they're from.
/////////////
//CIGAR BOX//
/////////////
/*
 * Heart Shaped Box w/ Chocolates
 */
/*
 * Ring Box
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\firstaid.dm. ----------------------
/* First aid storage
 * Contains:
 *		First Aid Kits
 * 		Pill Bottles
 *		Dice Pack (in a pill bottle)
 */
/*
 * First Aid Kits
 */
/*
 * Pill Bottles
 */
/////////////
//Organ Box//
/////////////
//hijacking the minature first aids for hypospray boxes. <3
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\lockbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\secure.dm. ----------------------
/*
 *	Absorbs /obj/item/secstorage.
 *	Reimplements it only slightly to use existing storage functionality.
 *
 *	Contains:
 *		Secure Briefcase
 *		Wall Safe
 */
// -----------------------------
//         Generic Item
// -----------------------------
// -----------------------------
//        Secure Briefcase
// -----------------------------
//Syndie variant of Secure Briefcase. Contains space cash, slightly more robust.
// -----------------------------
//        Secure Safe
// -----------------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\toolbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\uplink_kits.dm. ----------------------
//5*(2*4) = 5*8 = 45, 45 damage if you hit one person with all 5 stars.
//Not counting the damage it will do while embedded (2*4 = 8, at 15% chance)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\wallets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\storage\_storage.dm. ----------------------
//Cyberboss says: "USE THIS TO FILL IT, NOT INITIALIZE OR NEW"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tanks\jetpack.dm. ----------------------
//Return a jetpack that the mob can use
//Back worn jetpacks, hardsuit internal packs, and so on.
//Used in Process_Spacemove() and wherever you want to check for/get a jetpack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tanks\tanks.dm. ----------------------
// /obj/item/tank/ComponentInitialize()
// 	. = ..()
// 	if(tank_holder_icon_state)
// 		AddComponent(/datum/component/container_item/tank_holder, tank_holder_icon_state)
// /obj/item/tank/return_analyzable_air()
// 	return air_contents
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tanks\tank_types.dm. ----------------------
/* Types of tanks!
 * Contains:
 *		Oxygen
 *		Anesthetic
 *		Air
 *		Plasma
 *		Emergency Oxygen
 */
/*
 * Oxygen
 */
/*
 * Anesthetic
 */
/*
 * Air
 */
/*
 * Plasma
 */
//Makes empty oxygen tanks spawn without gas
/*
 * Plasmaman Plasma Tank
 */
//makes empty plasma tanks spawn without gas.
/*
 * Emergency Oxygen
 */
/*
 * Methyl Bromide
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tanks\watertank.dm. ----------------------
//Hydroponics tank and base code
// This mister item is intended as an extension of the watertank and always attached to it.
// Therefore, it's designed to be "locked" to the player's hands or extended back onto
// the watertank backpack. Allowing it to be placed elsewhere or created without a parent
// watertank object will likely lead to weird behaviour or runtimes.
//Janitor tank
//ATMOS FIRE FIGHTING BACKPACK
//Todo : cache these.
//Operator backpack spray
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tools\crowbar.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tools\screwdriver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tools\weldingtool.dm. ----------------------
// Returns the amount of fuel in the welder
// Uses fuel from the welding tool.
//Turns off the welder if there is no more fuel (does this really need to be its own proc?)
//Switches the welder on
//Switches the welder off
//Returns whether or not the welding tool is currently on.
// When welding is about to start, run a normal tool_use_check, then flash a mob if it succeeds.
// Flash the user during welding progress
// If welding tool ran out of fuel during a construction task, construction fails.
//Self filling welders below
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tools\wirecutters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\items\tools\wrench.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\ai_core.dm. ----------------------
/*
This is a good place for AI-related object verbs so I'm sticking it here.
If adding stuff to this, don't forget that an AI need to cancel_camera() whenever it physically moves to a different location.
That prevents a few funky behaviors.
*/
//The type of interaction, the player performing the operation, the AI itself, and the card object, if any.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\aliens.dm. ----------------------
/* Alien shit!
 * Contains:
 *		structure/alien
 *		Resin
 *		Weeds
 *		Egg
 */
/*
 * Generic alien stuff, not related to the purple lizards but still alien-like
 */
/*
 * Resin
 */
/*
 * Weeds
 */
//Weed nodes
/*
 * Egg
 */
//for the status var
//drops and kills the hugger if any is remaining
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\artstuff.dm. ----------------------
///////////
// EASEL //
///////////
//Adding canvases
//Stick to the easel like glue
//Todo make this element ?
// /obj/structure/sign/painting/update_name(updates)
// 	name = current_canvas ? "painting - [current_canvas.painting_name]" : initial(name)
// 	return ..()
// /obj/structure/sign/painting/update_desc(updates)
// 	desc = current_canvas ? desc_with_canvas : initial(desc)
// 	return ..()
//Presets for art gallery mapping, for paintings to be shared across stations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\barsigns.dm. ----------------------
//filling the barsigns list
//randomly assigning a sign
//Code below is to define useless variables for datums. It errors without these
//Anything below this is where all the specific signs are. If people want to add more signs, add them below.
//Hidden signs list below this point
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\bedsheet_bin.dm. ----------------------
/*
CONTAINS:
BEDSHEETS
LINEN BINS
*/
// for Free Golems.
//unlockable bedsheets
//janitor: clean 100 messes with mop as janitor
//cook: use microwave 100 times properly (contents must make one good item) as cook
//miner: redeem 100,000 mining points
//bedsheet bin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\chess.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\destructible_structures.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\displaycase.dm. ----------------------
//The captains display case requiring specops ID access is intentional. "that was a joke, totally useless, everyone broke it anyways, atleast the captain can have his OWN THING -- sandstorm edit"
//The lab cage and captains display case do not spawn with electronics, which is why req_access is needed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\divine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\door_assembly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\door_assembly_types.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\dresser.dm. ----------------------
/* skyrat edit - the dresser is useless with our inventory system
/obj/structure/dresser/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
	. = ..()
	if(. || !ishuman(user) || !user.canUseTopic(src, BE_CLOSE, FALSE, NO_TK))
		return
	var/mob/living/carbon/human/H = user

	if(H.dna && H.dna.species && (NO_UNDERWEAR in H.dna.species.species_traits))
		to_chat(H, "<span class='warning'>You are not capable of wearing underwear.</span>")
		return

	var/list/undergarment_choices = list("Underwear", "Underwear Color", "Undershirt", "Undershirt Color", "Socks", "Socks Color")
	if(!(GLOB.underwear_list[H.underwear]?.has_color))
		undergarment_choices -= "Underwear Color"
	if(!(GLOB.undershirt_list[H.undershirt]?.has_color))
		undergarment_choices -= "Undershirt Color"
	if(!(GLOB.socks_list[H.socks]?.has_color))
		undergarment_choices -= "Socks Color"

	var/choice = input(H, "Underwear, Undershirt, or Socks?", "Changing") as null|anything in undergarment_choices
	if(!H.canUseTopic(src, BE_CLOSE, FALSE, NO_TK))
		return
	var/dye_undie = FALSE
	var/dye_shirt = FALSE
	var/dye_socks = FALSE
	switch(choice)
		if("Underwear")
			var/new_undies = input(H, "Select your underwear", "Changing") as null|anything in GLOB.underwear_list
			if(new_undies)
				H.underwear = new_undies
				H.saved_underwear = new_undies
				var/datum/sprite_accessory/underwear/bottom/B = GLOB.underwear_list[new_undies]
				dye_undie = B?.has_color
		if("Undershirt")
			var/new_undershirt = input(H, "Select your undershirt", "Changing") as null|anything in GLOB.undershirt_list
			if(new_undershirt)
				H.undershirt = new_undershirt
				H.saved_undershirt = new_undershirt
				var/datum/sprite_accessory/underwear/top/T = GLOB.undershirt_list[new_undershirt]
				dye_shirt = T?.has_color
		if("Socks")
			var/new_socks = input(H, "Select your socks", "Changing") as null|anything in GLOB.socks_list
			if(new_socks)
				H.socks = new_socks
				H.saved_socks = new_socks
				var/datum/sprite_accessory/underwear/socks/S = GLOB.socks_list[new_socks]
				dye_socks = S?.has_color
	if(dye_undie || choice == "Underwear Color")
		H.undie_color = recolor_undergarment(H, "underwear", H.undie_color)
	if(dye_shirt || choice == "Undershirt Color")
		H.shirt_color = recolor_undergarment(H, "undershirt", H.shirt_color)
	if(dye_socks || choice == "Socks Color")
		H.socks_color = recolor_undergarment(H, "socks", H.socks_color)

	add_fingerprint(H)
	H.update_body(TRUE)

/obj/structure/dresser/proc/recolor_undergarment(mob/living/carbon/human/H, garment_type = "underwear", default_color)
	var/n_color = input(H, "Choose your [garment_type]'\s color.", "Character Preference", default_color) as color|null
	if(!n_color || !H.canUseTopic(src, BE_CLOSE, FALSE, NO_TK))
		return default_color
	return sanitize_hexcolor(n_color, 3, FALSE, default_color)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\electricchair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\extinguisher.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\false_walls.dm. ----------------------
/*
 * False Walls
 */
/*
 * False R-Walls
 */
/*
 * Uranium Falsewalls
 */
/*
 * Other misc falsewall types
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\femur_breaker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\fence.dm. ----------------------
//Chain link fences
//Sprites ported from /VG/
//FENCE DOORS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\fireaxe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\fireplace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\flora.dm. ----------------------
//trees
//grass
//bushes
//newbushes
//a rock is flora according to where the icon file is
//and now these defines
//Jungle grass
//Jungle rocks
//Jungle bushes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\fluff.dm. ----------------------
//Fluff structures serve no purpose and exist only for enriching the environment. They can be destroyed with a wrench.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\fugitive_role_spawners.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\ghost_role_spawners.dm. ----------------------
//Objects that spawn ghosts in as a certain role when they click on it, i.e. away mission bartenders.
//Preserved terrarium/seed vault: Spawns in seed vault structures in lavaland. Ghosts become plantpeople and are advised to begin growing plants in the room near them.
//Ash walker eggs: Spawns in ash walker dens in lavaland. Ghosts become unbreathing lizards that worship the Necropolis and are advised to retrieve corpses to create more ash walkers.
//Ash walkers on birth understand how to make bone bows, bone arrows and ashen arrows
//Timeless prisons: Spawns in Wish Granter prisons in lavaland. Ghosts become age-old users of the Wish Granter and are advised to seek repentance for their past.
//Golem shells: Spawns in Free Golem ships in lavaland. Ghosts become mineral golems and are advised to spread personal freedom.
//Malfunctioning cryostasis sleepers: Spawns in makeshift shelters in lavaland. Ghosts become hermits with knowledge of how they got to where they are now.
//Broken rejuvenation pod: Spawns in animal hospitals in lavaland. Ghosts become disoriented interns and are advised to search for help.
//Prisoner containment sleeper: Spawns in crashed prison ships in lavaland. Ghosts become escaped prisoners and are advised to find a way out of the mess they've gotten themselves into.
//Space Hotel Staff
//Ancient cryogenic sleepers. Players become NT crewmen from a hundred year old space station, now on the verge of collapse.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\girders.dm. ----------------------
// Screwdriver behavior for girders
// Wirecutter behavior for girders
//////////////////////////////////////////// cult girder //////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\grille.dm. ----------------------
//window placing begin
//window placing end
// shock user with probability prb (if all connections & power are working)
// returns 1 if shocked, 0 otherwise
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\guillotine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\guncase.dm. ----------------------
//GUNCASES//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\headpike.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\hivebot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\holosign.dm. ----------------------
//holographic signs and barriers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\janicart.dm. ----------------------
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\kitchen_spike.dm. ----------------------
//////Kitchen Spike
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\ladders.dm. ----------------------
// Basic ladder. By default links to the z-level above/below.
//ATTACK GHOST IGNORING PARENT RETURN VALUE
// Indestructible away mission ladders which link based on a mapped ID and height value rather than X/Y/Z.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\lattice.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\life_candle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\loom.dm. ----------------------
///This is a loom. It's usually made out of wood and used to weave fabric like durathread or cotton into their respective cloth types.
///Handles the weaving.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\loot_pile.dm. ----------------------
//uses the maintenance_loot global list, mostly boring stuff and mices.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\manned_turret.dm. ----------------------
/////// MANNED TURRET ////////
//BUCKLE HOOKS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\memorial.dm. ----------------------
/*

At 7:30 AM on March 8th, 2017, ArcLumin died in a fatal car crash on impact.
Rest in peace, man. You did good work.
When a contributor for SS13 dies, all codebases feel it and suffer.
We may disagree on whether farts should be a thing, or what color to paint the bikeshed,
but we are all contributors together.

Goodbye, man. We'll miss you.

This memorial has been designed for him and any future coders to perish.

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\mineral_doors.dm. ----------------------
//NOT using the existing /obj/machinery/door type, since that has some complications on its own, mainly based on its
//machineryness
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\mirror.dm. ----------------------
//wip wip wup
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\mop_bucket.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\morgue.dm. ----------------------
/* Morgue stuff
 * Contains:
 *		Morgue
 *		Morgue tray
 *		Crematorium
 *		Creamatorium
 *		Crematorium tray
 *		Crematorium button
 */
/*
 * Bodycontainer
 * Parent class for morgue and crematorium
 * For overriding only
 */
/*
 * Morgue
 */
/*
 * Crematorium
 */
/*
 * Generic Tray
 * Parent class for morguetray and crematoriumtray
 * For overriding only
 */
/*
 * Crematorium tray
 */
/*
 * Morgue tray
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\noticeboard.dm. ----------------------
//attaching papers!!
/**
 * Removes an item from the notice board
 *
 * Arguments:
 * * item - The item that is to be removed
 * * user - The mob that is trying to get the item removed, if there is one
 */
// Notice boards for the heads of staff (plus the qm)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\petrified_statue.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\plasticflaps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\railings.dm. ----------------------
///Implements behaviour that makes it possible to unanchor the railing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\reflector.dm. ----------------------
//TYPES OF REFLECTORS, SINGLE, DOUBLE, BOX
//SINGLE
//DOUBLE
//BOX
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\safe.dm. ----------------------
/*
CONTAINS:
SAFES
FLOOR SAFES
*/
/// Chance for a sound clue
/// Explosion number threshold for opening safe
//SAFES
/**
 * Checks if safe is considered in a broken state for force-opening the safe
 */
/**
 * Called every dial turn to determine whether the safe should unlock or not.
 */
/**
 * Called every dial turn to provide feedback if possible.
 */
//FLOOR SAFES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\showcase.dm. ----------------------
/*Completely generic structures for use by mappers to create fake objects, i.e. display rooms*/
//Deconstructing
//Showcases can be any sprite, so it makes sense that they can't be constructed.
//However if a player wants to move an existing showcase or remove one, this is for that.
//Feedback is given in examine because showcases can basically have any sprite assigned to them
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\spawner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\spirit_board.dm. ----------------------
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\stairs.dm. ----------------------
// dir determines the direction of travel to go upwards (due to lack of sprites, currently only 1 and 2 make sense)
// stairs require /turf/open/openspace as the tile above them to work
// multiple stair objects can be chained together; the Z level transition will happen on the final stair object in the chain
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\statues.dm. ----------------------
//////////////////////////////////////STATUES/////////////////////////////////////////////////////////////
////////////////////////uranium///////////////////////////////////
////////////////////////////plasma///////////////////////////////////////////////////////////////////////
//////////////////////gold///////////////////////////////////////
//////////////////////////silver///////////////////////////////////////
/////////////////////////diamond/////////////////////////////////////////
////////////////////////bananium///////////////////////////////////////
/////////////////////sandstone/////////////////////////////////////////
/////////////////////snow/////////////////////////////////////////
///////////////////////////////bronze///////////////////////////////////
///////////Elder Atmosian///////////////////////////////////////////
/* Yeah no.
/obj/structure/statue/elder_atmosian
	name = "Elder Atmosian"
	desc = "A statue of an Elder Atmosian, capable of bending the laws of thermodynamics to their will"
	icon_state = "eng"
	custom_materials = list(/datum/material/metalhydrogen = MINERAL_MATERIAL_AMOUNT*10)
	max_integrity = 1000
	impressiveness = 100
	abstract_type = /obj/structure/statue/elder_atmosian //This one is uncarvable
*/
/*
Hit the block to start
Point with the chisel at the target to choose what to sculpt or hit block to choose from preset statue types.
Hit block again to start sculpting.
Moving interrupts
*/
// We aim at something distant.
/// Returns a list of preset statues carvable from this block depending on the custom materials
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\tables_racks.dm. ----------------------
/* Tables and Racks
 * Contains:
 *		Tables
 *		Glass Tables
 *		Wooden Tables
 *		Reinforced Tables
 *		Racks
 *		Rack Parts
 */
/*
 * Tables
 */
/**
 * Gets all connected tables
 * Cardinals only
 */
///Table on wheels
/*
 * Glass tables
 */
/*
 * Plasmaglass tables
 */
/*
 * Wooden tables
 */
/*
 * Reinforced tables
 */
/*
 * Surgery Tables
 */
/*
 * Racks
 */
/*
 * Rack destruction
 */
/*
 * Rack Parts
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\table_frames.dm. ----------------------
/* Table Frames
 * Contains:
 *		Frames
 *		Wooden Frames
 */
/*
 * Normal Frames
 */
/*
 * Wooden Frames
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\tank_dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\target_stake.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\traps.dm. ----------------------
//fugitive traps
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\watercloset.dm. ----------------------
//The making of the well
//Shower Curtains//
//Defines used are pre-existing in layers.dm//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\windoor_assembly.dm. ----------------------
/* Windoor (window door) assembly -Nodrak
 * Step 1: Create a windoor out of rglass
 * Step 2: Add r-glass to the assembly to make a secure windoor (Optional)
 * Step 3: Rotate or Flip the assembly to face and open the way you want
 * Step 4: Wrench the assembly in place
 * Step 5: Add cables to the assembly
 * Step 6: Set access for the door.
 * Step 7: Screwdriver the door to complete
 */
//Flips the windoor assembly, determines whather the door opens to the left or the right
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\window.dm. ----------------------
//This proc is used to update the icons of nearby windows.
//merges adjacent full-tile windows into one
/* Full Tile Windows (more obj_integrity) */
//pirate ship windows
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\beds_chairs\alien_nest.dm. ----------------------
//Alium nests. Essentially beds with an unbuckle delay that only aliums can buckle mobs to.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\beds_chairs\bed.dm. ----------------------
/* Beds... get your mind out of the gutter, they're for sleeping!
 * Contains:
 * 		Beds
 *		Roller beds
 */
/*
 * Beds
 */
/*
 * Roller beds
 */
//Dog bed
//Double Beds, for luxurious sleeping, i.e. the captain and maybe heads- Do use this for ERP
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\beds_chairs\chair.dm. ----------------------
// Chair types
///Material chair
//Stool
//////////////////////////
//Alien(Disco) Stools!////
//////////////////////////
//////////////////////////
//Brass & Bronze stools!//
//////////////////////////
/////////////////////////////////
//End of Brass & Bronze stools!//
/////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\beds_chairs\pew.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\beds_chairs\sofa.dm. ----------------------
// Credit for the sprites goes to CEV Eris. The sprites were taken from Hyper Station and modified to fit with armrests which were also added.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets.dm. ----------------------
//USE THIS TO FILL IT, NOT INITIALIZE OR NEW
///Proc to override for effects after opening a door
///Proc to override for effects after closing a door
// tk grab then use on self
// Objects that try to exit a locker by stepping were doing so successfully,
// and due to an oversight in turf/Enter() were going through walls.  That
// should be independently resolved, but this is also an interesting twist.
/// cit specific ///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates.dm. ----------------------
// cit specific
//Snowflake organ freezer code
//Order is important, since we check source, we need to do the check whenever we have all the organs in the crate
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\bodybag.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\cardboardbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\fitness.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\genpop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\gimmick.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\job_closets.dm. ----------------------
// Closets for specific jobs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\l3closet.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\syndicate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\utility_closets.dm. ----------------------
/* Utility Closets
 * Contains:
 *		Emergency Closet
 *		Fire Closet
 *		Tool Closet
 *		Radiation Closet
 *		Bombsuit Closet
 *		Hydrant
 *		First Aid
 */
/*
 * Emergency Closet
 */
/*
 * Fire Closet
 */
/*
 * Tool Closet
 */
/*
 * Radiation Closet
 */
/*
 * Bombsuit closet
 */
/*
 * Ammunition
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\wardrobe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\bar.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\cargo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\engineering.dm. ----------------------
/*
 * Empty lockers
 * Some of the lockers are filled with junk, and sometimes its nice to just fill it with your own set-up for your own map gimmicks.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\freezer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\hydroponics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\personal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\scientist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\secure_closets.dm. ----------------------
// Exists to work around the minimum 700 cr price for goodies / small items / materials
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\closets\secure\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates\bins.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates\critter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates\large.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates\secure.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\crates_lockers\crates\wooden.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\icemoon\cave_entrance.dm. ----------------------
/**
  * Clears rocks around the spawner when it is created
  *
  */
/**
  * Effects and messages created when the spawner is destroyed
  *
  */
/**
  * Drops items after the spawner is destroyed
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\lavaland\geyser.dm. ----------------------
//If you look at the "geyser_soup" overlay icon_state, you'll see that the first frame has 25 ticks.
//That's because the first 18~ ticks are completely skipped for some ungodly weird fucking byond reason
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\lavaland\necropolis_tendril.dm. ----------------------
//Necropolis Tendrils, which spawn lavaland monsters and break into a chasm when killed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\signs\signs_departments.dm. ----------------------
//departmental signs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\signs\signs_maps.dm. ----------------------
//map and direction signs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\signs\signs_plaques.dm. ----------------------
//plaques and memorials
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\signs\signs_warning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\signs\_signs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\transit_tubes\station.dm. ----------------------
// A place where tube pods stop, and people can get in or out.
// Mappers: use "Generate Instances from Directions" for this
//  one.
//pod insertion
// Stations which will send the tube in the opposite direction after their stop.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\transit_tubes\transit_tube.dm. ----------------------
// Called to check if a pod should stop upon entering this tube.
// Called when a pod stops in this tube section.
// Searches for an exit direction within 45 degrees of the
//  specified dir. Returns that direction, or 0 if none match.
// Return how many BYOND ticks to wait before entering/exiting
//  the tube section. Default action is to return the value of
//  a var, which wouldn't need a proc, but it makes it possible
//  for later tube types to interact in more interesting ways
//  such as being very fast in one direction, but slow in others
//Some of these are mostly for mapping use
//mostly for mapping use
//mostly for mapping use
//mostly for mapping use
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\transit_tubes\transit_tube_construction.dm. ----------------------
// transit tube construction
// normal transit tubes
// transit tube station
// reverser station, used for the terminus
//transit tube pod
//see station.dm for the logic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\objects\structures\transit_tubes\transit_tube_pod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\baseturf_skipover.dm. ----------------------
// This is a typepath to just sit in baseturfs and act as a marker for other things.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\change_turf.dm. ----------------------
// This is a list of turf types we dont want to assign to baseturfs unless through initialization or explicitly
//wrapper for ChangeTurf()s that you want to prevent/affect without overriding ChangeTurf() itself
// Creates a new turf
// new_baseturfs can be either a single type or list of types, formated the same as baseturfs. see turf.dm
// Take off the top layer turf and replace it with the next baseturf down
// Take the input as baseturfs and put it underneath the current baseturfs
// If fake_turf_type is provided and new_baseturfs is not the baseturfs list will be created identical to the turf type's
// If both or just new_baseturfs is provided they will be inserted below the existing baseturfs
// Make a new turf and put it on top
// The args behave identical to PlaceOnBottom except they go on top
// Things placed on top of closed turfs will ignore the topmost closed turf
// Returns the new turf
// Copy an existing turf and put it on top
// Returns the new turf
//If you modify this function, ensure it works correctly with lateloaded map templates.
//////Assimilate Air//////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\closed.dm. ----------------------
///helper proc that will center the screen if the icon is changed to a generic width, to make admins have to fudge around with pixel_x less. returns null
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\open.dm. ----------------------
//direction is direction of travel of A
//direction is direction of travel of A
//direction is direction of travel of air
//direction is direction of travel of air
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\turf.dm. ----------------------
/// Any floor or wall. What makes up the station and the rest of the map.
/**
 * Turf Initialize
 *
 * Doesn't call parent, see [/atom/proc/Initialize]
 */
//zPassIn doesn't necessarily pass an atom!
//direction is direction of travel of air
//direction is direction of travel of air
//direction is direction of travel of air
//direction is direction of travel of air
//There's a lot of QDELETED() calls here if someone can figure out how to optimize this but not runtime when something gets deleted by a Bump/CanPass/Cross call, lemme know or go ahead and fix this mess - kevinz000
// A proc in case it needs to be recreated or badmins want to change the baseturfs
// override for space turfs, since they should never hide anything
// Removes all signs of lattice on the pos of the turf -Donkieyo
//////////////////////////////
//Distance procs
//////////////////////////////
//Distance associates with all directions movement
//  This Distance proc assumes that only cardinal movement is
//  possible. It results in more efficient (CPU-wise) pathing
//  for bots and anything else that only moves in cardinal dirs.
////////////////////////////////////////////////////
//called on /datum/species/proc/altdisarm()
//Whatever happens after high temperature fire dies out or thermite reaction works.
//Should return new turf
/**
 * Returns adjacent turfs to this turf that are reachable, in all cardinal directions
 *
 * Arguments:
 * * caller: The movable, if one exists, being used for mobility checks to see what tiles it can reach
 * * ID: An ID card that decides if we can gain access to doors that would otherwise block a turf
 * * simulated_only: Do we only worry about turfs with simulated atmos, most notably things that aren't space?
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\open\floor\catwalk_plating.dm. ----------------------
/**
 * ## catwalk flooring
 *
 * They show what's underneath their catwalk flooring (pipes and the like)
 * you can crowbar it to interact with the underneath stuff without destroying the tile...
 * unless you want to!
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\openspace\transparent.dm. ----------------------
///Called when there is no real turf below this turf
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\chasm.dm. ----------------------
// Base chasm, defaults to oblivion but can be overridden
// Chasms for Lavaland, with planetary atmos and lava glow
// Chasms for Ice moon, with planetary atmos and glow
// Chasms for the jungle, with planetary atmos and a different icon
//For Bag of Holding Bombs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\dirtystation.dm. ----------------------
//Janitors!  Janitors, janitors, janitors!  -Sayu
//Conspicuously not-recent versions of suspicious cleanables
//This file was made not awful by Xhuis on September 13, 2016
//Making the station dirty, one tile at a time. Called by master controller's setup_objects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\glass.dm. ----------------------
// /turf/open/floor/glass/setup_broken_states()
// 	return list("glass-damaged1", "glass-damaged2", "glass-damaged3")
/// n(omegalul)
// /turf/open/floor/glass/reinforced/setup_broken_states()
// 	return list("reinf_glass-damaged1", "reinf_glass-damaged2", "reinf_glass-damaged3")
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\lava.dm. ----------------------
///LAVA
///Generic return value of the can_burn_stuff() proc. Does nothing.
/// Another. Won't burn the target but will make the turf start processing.
/// Burns the target and makes the turf process (depending on the return value of do_burn()).
///Proc that sets on fire something or everything on the turf that's not immune to lava. Returns TRUE to make the turf start processing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\minerals.dm. ----------------------
/**********************Mineral deposits**************************/
// Subtypes for mappers placing ores manually.
//GIBTONITE
// /turf/closed/mineral/strong/attackby(obj/item/I, mob/user, params)
// 	if(!ishuman(user))
// 		to_chat(usr, "<span class='warning'>Only a more advanced species could break a rock such as this one!</span>")
// 		return FALSE
// 	if(user.mind?.get_skill_level(/datum/skill/mining) >= SKILL_LEVEL_MASTER)
// 		. = ..()
// 	else
// 		to_chat(usr, "<span class='warning'>The rock seems to be too strong to destroy. Maybe I can break it once I become a master miner.</span>")
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\openspace.dm. ----------------------
// /turf/open/transparent/openspace/debug/update_multiz()
// 	..()
// 	return TRUE
// ///No bottom level for openspace.
// /turf/open/transparent/openspace/show_bottom_level()
// 	return FALSE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\reebe_void.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\river.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\walls.dm. ----------------------
/**
  *Deals damage back to the hulk's arm.
  *
  *When a hulk manages to break a wall using their hulk smash, this deals back damage to the arm used.
  *This is in its own proc just to be easily overridden by other wall types. Default allows for three
  *smashed walls per arm. Also, we use CANT_WOUND here because wounds are random. Wounds are applied
  *by hulk code based on arm damage and checked when we call break_an_arm().
  *Arguments:
  **arg1 is the arm to deal damage to.
  **arg2 is the hulk
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\water.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\fancy_floor.dm. ----------------------
/* In this file:
 * Wood floor
 * Grass floor
 * Fake Basalt
 * Carpet floor
 * Fake pits
 * Fake space
 */
//*****Airless versions of all of the above.*****
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\light_floor.dm. ----------------------
//Cycles through all of the colours
//Two different "dancefloor" types so that you can have a checkered pattern
// (also has a longer delay than colour_cycle between cycling colours)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\mineral_floor.dm. ----------------------
/* In this file:
 *
 * Plasma floor
 * Gold floor
 * Silver floor
 * Bananium floor
 * Diamond floor
 * Uranium floor
 * Shuttle floor (Titanium)
 */
//PLASMA
// Plasma floor that can't be removed, for disco
//GOLD
//SILVER
//TITANIUM (shuttle)
//PLASTITANIUM (syndieshuttle)
//BANANIUM
//DIAMOND
//URANIUM
// ALIEN ALLOY
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\misc_floor.dm. ----------------------
//Circuit flooring, glows a little
//Clockwork floor: Slowly heals toxin damage on nearby servants.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\plasteel_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\plating.dm. ----------------------
/* In this file:
 *
 * Plating
 * Airless
 * Airless plating
 * Engine floor
 * Foam plating
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\reinf_floor.dm. ----------------------
//air filled floors; used in atmos pressure chambers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\plating\asteroid.dm. ----------------------
/**********************Asteroid**************************/
// /turf/open/floor/plating/asteroid/setup_broken_states()
// 	return list("asteroid_dug")
/// Drops itemstack when dug and changes icon
/// If the user can dig the turf
// /turf/open/floor/plating/asteroid/crush()
// 	return
// /turf/open/floor/plating/asteroid/basalt/setup_broken_states()
// 	return list("basalt_dug")
///////Surface. The surface is warm, but survivable without a suit. Internals are required. The floors break to chasms, which drop you into the underground.
// /turf/open/floor/plating/asteroid/lowpressure
// 	initial_gas_mix = OPENTURF_LOW_PRESSURE
// 	baseturfs = /turf/open/floor/plating/asteroid/lowpressure
// 	turf_type = /turf/open/floor/plating/asteroid/lowpressure
// /turf/open/floor/plating/asteroid/snow/setup_broken_states()
// 	return list("snow_dug")
// /turf/open/floor/plating/asteroid/snow/ice/setup_broken_states()
// 	return list("snow-ice")
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\plating\dirt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\floor\plating\misc_plating.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\wall\material_walls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\wall\mineral_walls.dm. ----------------------
/////////////////////Titanium walls/////////////////////
//sub-type to be used for interior shuttle walls
//won't get an underlay of the destination turf on shuttle move
/////////////////////Plastitanium walls/////////////////////
//have to copypaste this code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\wall\misc_walls.dm. ----------------------
//Clockwork wall: Causes nearby tinkerer's caches to generate components.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\simulated\wall\reinf_walls.dm. ----------------------
/////////////////////Pirate Ship walls/////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\space\space.dm. ----------------------
/**
 * Space Initialize
 *
 * Doesn't call parent, see [/atom/proc/Initialize]
 */
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//IT SHOULD RETURN NULL YOU MONKEY, WHY IN TARNATION WHAT THE FUCKING FUCK
///Called when there is no real turf below this turf
///No bottom level for openspace.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\game\turfs\space\transit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\actionspeed\_actionspeed_modifier.dm. ----------------------
/*! Actionspeed modification datums.

	How action speed for mobs works

Action speed is now calculated by using modifier datums which are added to mobs. Some of them (nonvariable ones) are globally cached, the variable ones are instanced and changed based on need.

This gives us the ability to have multiple sources of actionspeed, reliabily keep them applied and remove them when they should be

THey can have unique sources and a bunch of extra fancy flags that control behaviour

Previously trying to update action speed was a shot in the dark that usually meant mobs got stuck going faster or slower

Actionspeed modification list is a simple key = datum system. Key will be the datum's ID if it is overridden to not be null, or type if it is not.

DO NOT override datum IDs unless you are going to have multiple types that must overwrite each other. It's more efficient to use types, ID functionality is only kept for cases where dynamic creation of modifiers need to be done.

When update actionspeed is called, the list of items is iterated, according to flags priority and a bunch of conditions
this spits out a final calculated value which is used as a modifer to last_move + modifier for calculating when a mob
can next move

*/
/// Grabs a STATIC MODIFIER datum from cache. YOU MUST NEVER EDIT THESE DATUMS, OR IT WILL AFFECT ANYTHING ELSE USING IT TOO!
///Add a action speed modifier to a mob. If a variable subtype is passed in as the first argument, it will make a new datum. If ID conflicts, it will overwrite the old ID.
/// Remove a action speed modifier from a mob, whether static or variable.
/*! Used for variable slowdowns like hunger/health loss/etc, works somewhat like the old list-based modification adds. Returns the modifier datum if successful
	How this SHOULD work is:
	1. Ensures type_id_datum one way or another refers to a /variable datum. This makes sure it can't be cached. This includes if it's already in the modification list.
	2. Instantiate a new datum if type_id_datum isn't already instantiated + in the list, using the type. Obviously, wouldn't work for ID only.
	3. Add the datum if necessary using the regular add proc
	4. If any of the rest of the args are not null (see: multiplicative slowdown), modify the datum
	5. Update if necessary
*/
///Is there a actionspeed modifier for this mob
/// Go through the list of actionspeed modifiers and calculate a final actionspeed. ANY ADD/REMOVE DONE IN UPDATE_actionspeed MUST HAVE THE UPDATE ARGUMENT SET AS FALSE!
///Adds a default action speed
/// Get the action speed modifiers list of the mob
/// Checks if a action speed modifier is valid and not missing any data
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\actionspeed\modifiers\base.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\actionspeed\modifiers\mood.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\actionspeed\modifiers\status_effects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\admin.dm. ----------------------
////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////Panels
//ambition start
//ambition end
//ambition start
//ambition end
//ambition start
//ambition end
/////////////////////////////////////////////////////////////////////////////////////////////////admins2.dm merge
//i.e. buttons/verbs
////////////////////////////////////////////////////////////////////////////////////////////////ADMIN HELPER PROCS
//
//
//ALL DONE
//*********************************************************************************************************
//TO-DO:
//
//
//RIP ferry snowflakes
//Kicks all the clients currently in the lobby. The second parameter (kick_only_afk) determins if an is_afk() check is ran, or if all clients are kicked
//defaults to kicking everyone (afk + non afk clients in the lobby)
//returns a list of ckeys of the kicked clients
//returns TRUE to let the dragdrop code know we are trapping this event
//returns FALSE if we don't plan to trap the event
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\adminmenu.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\admin_investigate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\admin_ranks.dm. ----------------------
// Adds/removes rights to this admin_rank
// Checks for (keyword-formatted) rights on this admin
//load our rank - > rights associations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\admin_verbs.dm. ----------------------
//admin verb groups - They can overlap if you so wish. Only one of each verb will exist in the verbs list regardless
//the procs are cause you can't put the comments in the GLOB var define
//	/datum/admins/proc/show_traitor_panel,	/*interface which shows a mob's mind*/ -Removed due to rare practical use. Moved to debug verbs ~Errorage
//	/client/proc/sendmob,				/*sends a mob somewhere*/ -Removed due to it needing two sorting procs to work, which were executed every time an admin right-clicked. ~Errorage
//verbs which can be hidden - needs work
// /client/proc/ban_panel()
// 	set name = "Banning Panel"
// 	set category = "Admin"
// 	if(!check_rights(R_BAN))
// 		return
// 	holder.ban_panel()
// 	SSblackbox.record_feedback("tally", "admin_verb", 1, "Banning Panel") //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!
// /client/proc/poll_panel()
// 	set name = "Server Poll Management"
// 	set category = "Admin"
// 	if(!check_rights(R_POLL))
// 		return
// 	holder.poll_list_panel()
// 	SSblackbox.record_feedback("tally", "admin_verb", 1, "Server Poll Management") //If you are copy-pasting this, ensure the 2nd parameter is unique to the new proc!
// /client/proc/atmos_control()
// 	set name = "Atmos Control Panel"
// 	set category = "Debug"
// 	if(!check_rights(R_DEBUG))
// 		return
// 	SSair.ui_interact(mob)
// /client/proc/reload_cards()
// 	set name = "Reload Cards"
// 	set category = "Debug"
// 	if(!check_rights(R_DEBUG))
// 		return
// 	if(!SStrading_card_game.loaded)
// 		message_admins("The card subsystem is not currently loaded")
// 		return
// 	reloadAllCardFiles(SStrading_card_game.card_files, SStrading_card_game.card_directory)
// /client/proc/validate_cards()
// 	set name = "Validate Cards"
// 	set category = "Debug"
// 	if(!check_rights(R_DEBUG))
// 		return
// 	if(!SStrading_card_game.loaded)
// 		message_admins("The card subsystem is not currently loaded")
// 		return
// 	var/message = checkCardpacks(SStrading_card_game.card_packs)
// 	message += checkCardDatums()
// 	if(message)
// 		message_admins(message)
// /client/proc/test_cardpack_distribution()
// 	set name = "Test Cardpack Distribution"
// 	set category = "Debug"
// 	if(!check_rights(R_DEBUG))
// 		return
// 	if(!SStrading_card_game.loaded)
// 		message_admins("The card subsystem is not currently loaded")
// 		return
// 	var/pack = input("Which pack should we test?", "You fucked it didn't you") as null|anything in sortList(SStrading_card_game.card_packs)
// 	var/batchCount = input("How many times should we open it?", "Don't worry, I understand") as null|num
// 	var/batchSize = input("How many cards per batch?", "I hope you remember to check the validation") as null|num
// 	var/guar = input("Should we use the pack's guaranteed rarity? If so, how many?", "We've all been there. Man you should have seen the old system") as null|num
// 	checkCardDistribution(pack, batchSize, batchCount, guar)
// /client/proc/print_cards()
// 	set name = "Print Cards"
// 	set category = "Debug"
// 	printAllCards()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\antag_panel.dm. ----------------------
//Things to do somewhere in the future (If you're reading this feel free to do any of these)
//Add HrefTokens to these
//Make this template or at least remove + "<br>" with joins where you can grasp the big picture.
//Span classes for the headers, wrap sections in div's and style them.
//Move common admin commands to /mob (maybe integrate with vv dropdown so the list is one thing with some flag where to show it)
//Move objective initialization/editing stuff from mind to objectives and completely remove mind.objectives
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\banjob.dm. ----------------------
//returns a reason if M is banned from rank, returns FALSE otherwise
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\chat_commands.dm. ----------------------
// More (silly) chat commands citadel added.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\check_antagonists.dm. ----------------------
//I wish we had interfaces sigh, and i'm not sure giving team and antag common root is a better solution here
//Name shown on antag list
//Whatever interesting things happened to the antag admins should know about
//Include additional information about antag in this part
//Builds the common FLW PM TP commands part
//Probably not going to be overwritten by anything but you never know
//Builds table row for the antag
// Jim (Status) FLW PM TP
//Builds section for the team
//Moves them to the top of the list if TRUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\create_mob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\create_object.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\create_poll.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\create_turf.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\force_event.dm. ----------------------
///Allows an admin to force an event
///Opens up the Force Event Panel
/// Force Event Panel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\fun_balloon.dm. ----------------------
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//Arena
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\holder2.dm. ----------------------
/*
checks if usr is an admin with at least ONE of the flags in rights_required. (Note, they don't need all the flags)
if rights_required == 0, then it simply checks if they are an admin.
if it doesn't return 1 and show_msg=1 it will prints a message explaining why the check has failed
generally it would be used like so:

/proc/admin_proc()
	if(!check_rights(R_ADMIN))
		return
	to_chat(world, "you have enough rights!")

NOTE: it checks usr! not src! So if you're checking somebody's rank in a proc which they did not call
you will have to do something like if(client.rights & R_ADMIN) yourself.
*/
//probably a bit iffy - will hopefully figure out a better solution
//This proc checks whether subject has at least ONE of the rights specified in rights_required.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\ipintel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\IsBanned.dm. ----------------------
//Blocks an attempt to connect before even creating our client datum thing.
//How many new ckey matches before we revert the stickyban to it's roundstart state
//These are exclusive, so once it goes over one of these numbers, it reverts the ban
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\NewBan.dm. ----------------------
//////////////////////////////////// DEBUG ////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\outfits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\outfit_editor.dm. ----------------------
//this proc will try to give a good selection of items that the user can choose from
//it does *not* give a selection of all items that can fit in a slot because lag;
//most notably the hand and pocket slots because they accept pretty much anything
//also stuff that fits in the belt and back slots are scattered pretty much all over the place
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\outfit_manager.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\permissionedit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\player_panel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\player_panel2.dm. ----------------------
// process_banlist: Gets all jobs in a job category
// Input:
// 	query (string): The name of the role / department you want to jobban.
//	is_category (boolean): Is the query a department / role category? e.g. query "Engineering" needs TRUE
//	want_to_ban (boolean): Should we ban or should we unban the job we just supplied.
//
// Output:A list of strings with the names of each role the INPUT covers.
// Updates the jobban status of this client's jobban panel.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\playtimes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\sound_emitter.dm. ----------------------
//Admin sound emitters with highly customizable functions!
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\sql_message_system.dm. ----------------------
//if the AUTOCONVERT_NOTES is turned on, anytime a player connects this will be run to try and add all their notes to the databas
/*alternatively this proc can be run once to pass through every note and attempt to convert it before deleting the file, if done then AUTOCONVERT_NOTES should be turned off
this proc can take several minutes to execute fully if converting and cause DD to hang if converting a lot of notes; it's not advised to do so while a server is live
/proc/mass_convert_notes()
	to_chat(world, "Beginning mass note conversion", confidential = TRUE)
	var/savefile/notesfile = new(NOTESFILE)
	if(!notesfile)
		log_game("Error: Cannot access [NOTESFILE]")
		return
	notesfile.cd = "/"
	for(var/ckey in notesfile.dir)
		convert_notes_sql(ckey)
	to_chat(world, "Deleting NOTESFILE", confidential = TRUE)
	fdel(NOTESFILE)
	to_chat(world, "Finished mass note conversion, remember to turn off AUTOCONVERT_NOTES", confidential = TRUE)*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\stickyban.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\topic.dm. ----------------------
//Regular jobs
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\whitelist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\callproc\callproc.dm. ----------------------
/// Wrapper for proccalls where the datum is flagged as vareditted
//adv proc call this, ya nerds
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\DB_ban\functions.dm. ----------------------
//Either pass the mob you wish to ban in the 'banned_mob' attribute, or the banckey, banip and bancid variables. If both are passed, the mob takes priority! If a mob is not passed, banckey is the minimum that needs to be passed! banip and bancid are optional.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\adminhelp.dm. ----------------------
//
//TICKET MANAGER
//
//private
//opens the ticket listings for one of the 3 states
//Tickets statpanel
//Reassociate still open ticket if one exists
//Dissasociate ticket
//Get a ticket given a ckey
//
//TICKET LIST STATCLICK
//
//called by admin topic
//
//TICKET DATUM
//
//call this on its own to create a ticket, don't manually assign current_ticket
//msg is the title of the ticket: usually the ahelp text
//is_bwoink is TRUE if this ticket was started by an admin PM
//Removes the ahelp verb and returns it after 2 minutes
//private
//private
//private
//private
//message from the initiator without a target, all admins will see this
//won't bug irc
//Reopen a closed ticket
//private
//Mark open ticket as closed/meme
//Mark open ticket as resolved/legitimate, returns ahelp verb
//Close and return ahelp verb, use if ticket is incoherent
//Resolve ticket with IC Issue message
//Let the initiator know their ahelp is being handled
//Show the ticket panel
//Forwarded action from admin/Topic
//
// TICKET STATCLICK
//
//
// CLIENT PROCS
//
// Used for methods where input via arg doesn't work
//
// LOGGING
//
//Use this proc when an admin takes action that may be related to an open ticket on what
//what can be a client, ckey, or mob
//
// HELPER PROCS
//
/**
 * Sends a message to a set of cross-communications-enabled servers using world topic calls
 *
 * Arguments:
 * * source - Who sent this message
 * * msg - The message body
 * * type - The type of message, becomes the topic command under the hood
 * * target_servers - A collection of servers to send the message to, defined in config
 * * additional_data - An (optional) associated list of extra parameters and data to send with this world topic call
 */
/// Sends a message to a given cross comms server by name (by name for security).
/**
 * Checks a given message to see if any of the words contain an active admin's ckey with an @ before it
 *
 * Returns nothing if no pings are found, otherwise returns an associative list with ckey -> client
 * Also modifies msg to underline the pings, then stores them in the key [ADMINSAY_PING_UNDERLINE_NAME_INDEX] for returning
 *
 * Arguments:
 * * msg - the message being scanned
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\adminjump.dm. ----------------------
/// Proc to hook user-enacted teleporting behavior and keep logging of the event.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\adminpm.dm. ----------------------
//allows right clicking mobs to send an admin PM to their client, forwards the selected mob's client to cmd_admin_pm
//shows a list of clients we could send PMs to, then forwards our choice to cmd_admin_pm
//takes input from cmd_admin_pm_context, cmd_admin_pm_panel or /client/Topic and sends them a PM.
//Fetching a message if needed. src is the sender and C is the target client
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\adminsay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\ak47s.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\atmosdebug.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\bluespacearty.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\borgpanel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\BrokenInhands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\cinematic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\deadsay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\debug.dm. ----------------------
//TODO: merge the vievars version into this or something maybe mayhaps
//				qdel(G)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\diagnostics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\dice.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\fps.dm. ----------------------
//replaces the old Ticklag verb, fps is easier to understand
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\getlogs.dm. ----------------------
//This proc allows download of past server logs saved within the data/logs/ folder.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\individual_logging.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\machine_upgrade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\manipulate_organs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\mapping.dm. ----------------------
//- Are all the floors with or without air, as they should be? (regular or airless)
//- Does the area have an APC?
//- Does the area have an Air Alarm?
//- Does the area have a Request Console?
//- Does the area have lights?
//- Does the area have a light switch?
//- Does the area have enough intercoms?
//- Does the area have enough security cameras? (Use the 'Camera Range Display' verb under Debug)
//- Is the area connected to the scrubbers air loop?
//- Is the area connected to the vent air loop? (vent pumps)
//- Is everything wired properly?
//- Does the area have a fire alarm and firedoors?
//- Do all pod doors work properly?
//- Are accesses set properly on doors, pod buttons, etc.
//- Are all items placed properly? (not below vents, scrubbers, tables)
//- Does the disposal system work properly from all the disposal units in this room and all the units, the pipes of which pass through this room?
//- Check for any misplaced or stacked piece of pipe (air and disposal)
//- Check for any misplaced or stacked piece of wire
//- Identify how hard it is to break into the area and where the weak points are
//- Check if the area has too much empty space. If so, make it smaller and replace the rest with maintenance tunnels.
//This proc is intended to detect lag problems relating to communication procs
//This generates the icon states for job starting location landmarks.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\maprotation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\map_template_loadverb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\one_click_antag.dm. ----------------------
//Abductors
///datum/admins/proc/makeAbductorTeam()
//	new /datum/round_event/ghost_role/abductor
//	return 1
// DEATH SQUADS
// CENTCOM RESPONSE TEAM
//Abductors
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\onlyone.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\panicbunker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\playsound.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\possess.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\pray.dm. ----------------------
/// Used by communications consoles to message CentCom
/// Used by communications consoles to message the Syndicate
/// Used by communications consoles to request the nuclear launch codes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\randomverbs.dm. ----------------------
// Unless I am dent-skulled, there is no way to do (mob/M in GLOB.mob_list, someothervar) with context-menu buttons, hence the instant proc call.
//I use this proc for respawn character too. /N
/*
If a guy was gibbed and you want to revive him, this is a good way to do so.
Works kind of like entering the game with a new character. Character receives a new mind if they didn't have one.
Traitors and the like can also be revived with the previous role mostly intact.
/N */
/*
/client/proc/admin_disable_shuttle()
	set category = "Admin.Events"
	set name = "Disable Shuttle"

	if(!check_rights(R_ADMIN))
		return
	if(SSshuttle.emergency.mode == SHUTTLE_DISABLED)
		to_chat(usr, "<span class='warning'>Error, shuttle is already disabled.</span>")
		return
	if(alert(src, "You sure?", "Confirm", "Yes", "No") != "Yes")
		return
	message_admins("<span class='adminnotice'>[key_name_admin(usr)] disabled the shuttle.</span>")
	SSshuttle.lastMode = SSshuttle.emergency.mode
	SSshuttle.lastCallTime = SSshuttle.emergency.timeLeft(1)
	SSshuttle.adminEmergencyNoRecall = TRUE
	SSshuttle.emergency.setTimer(0)
	SSshuttle.emergency.mode = SHUTTLE_DISABLED
	priority_announce("Warning: Emergency Shuttle uplink failure, shuttle disabled until further notice.", "Emergency Shuttle Uplink Alert", 'sound/misc/announce_dig.ogg')

/client/proc/admin_enable_shuttle()
	set category = "Admin - Events"
	set category = "Admin.Events"
	set name = "Enable Shuttle"

	if(!check_rights(R_ADMIN))
		return
	if(SSshuttle.emergency.mode != SHUTTLE_DISABLED)
		to_chat(usr, "<span class='warning'>Error, shuttle not disabled.</span>")
		return
	if(alert(src, "You sure?", "Confirm", "Yes", "No") != "Yes")
		return
	message_admins("<span class='adminnotice'>[key_name_admin(usr)] enabled the emergency shuttle.</span>")
	SSshuttle.adminEmergencyNoRecall = FALSE
	SSshuttle.emergencyNoRecall = FALSE
	if(SSshuttle.lastMode == SHUTTLE_DISABLED) //If everything goes to shit, fix it.
		SSshuttle.lastMode = SHUTTLE_IDLE
	SSshuttle.emergency.mode = SSshuttle.lastMode
	if(SSshuttle.lastCallTime < 10 SECONDS && SSshuttle.lastMode != SHUTTLE_IDLE)
		SSshuttle.lastCallTime = 10 SECONDS //Make sure no insta departures.
	SSshuttle.emergency.setTimer(SSshuttle.lastCallTime)
	priority_announce("Warning: Emergency Shuttle uplink reestablished, shuttle enabled.", "Emergency Shuttle Uplink Alert", 'sound/misc/announce_dig.ogg')
*/
/**
  * firing_squad is a proc for the :B:erforate smite to shoot each individual bullet at them, so that we can add actual delays without sleep() nonsense
  *
  * Hilariously, if you drag someone away mid smite, the bullets will still chase after them from the original spot, possibly hitting other people. Too funny to fix imo
  *
  * Arguments:
  * * target- guy we're shooting obviously
  * * source_turf- where the bullet begins, preferably on a turf next to the target
  * * body_zone- which bodypart we're aiming for, if there is one there
  * * wound_bonus- the wounding power we're assigning to the bullet, since we don't care about the base one
  * * damage- the damage we're assigning to the bullet, since we don't care about the base one
  */
/// Allow admin to add or remove traits of datum
/*
/client/proc/spawn_floor_cluwne()
	set category = "Admin.Fun"
	set name = "Unleash Floor Cluwne"
	set desc = "Pick a specific target or just let it select randomly and spawn the floor cluwne mob on the station. Be warned: spawning more than one may cause issues!"
	var/target

	if(!check_rights(R_FUN))
		return

	var/turf/T = get_turf(usr)
	target = input("Any specific target in mind? Please note only live, non cluwned, human targets are valid.", "Target", target) as null|anything in GLOB.player_list
	if(target && ishuman(target))
		var/mob/living/carbon/human/H = target
		var/mob/living/simple_animal/hostile/floor_cluwne/FC = new /mob/living/simple_animal/hostile/floor_cluwne(T)
		FC.Acquire_Victim(H)
	else
		new /mob/living/simple_animal/hostile/floor_cluwne(T)
	log_admin("[key_name(usr)] spawned floor cluwne.")
	message_admins("[key_name(usr)] spawned floor cluwne.")
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\reestablish_db_connection.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\secrets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\selectequipment.dm. ----------------------
/*
 * This is the datum housing the select equipment UI.
 *
 * You may notice some oddities about the way outfits are passed to the UI and vice versa here.
 * That's because it handles both outfit typepaths (for normal outfits) *and* outfit objects (for custom outfits).
 *
 * Custom outfits need to be objects as they're created in runtime.
 * "Then just handle the normal outfits as objects too and simplify the handling" - you may say.
 * There are about 300 outfit types at the time of writing this. Initializing all of these to objects would be a huge waste.
 *
 */
/**
 * Packs up data about an outfit as an assoc list to send to the UI as an outfit entry.
 *
 * Args:
 * * category (string) - The tab it will be under
 *
 * * identifier (typepath or ref) - This will sent this back to ui_act to preview or spawn in an outfit.
 * * Must be unique between all entries.
 *
 * * name (string) - Will be the text on the button
 *
 * * priority (bool)(optional) - If True, the UI will sort the entry to the top, right below favorites.
 *
 * * custom_entry (bool)(optional) - Send the identifier with a "ref" keyword instead of "path",
 * * for the UI to tell apart custom outfits from normal ones.
 *
 * Returns (list) An outfit entry
 */
//GLOB.custom_outfits lists outfit *objects* so we'll need to do some custom handling for it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\shuttlepanel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\spawnobjasmob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\tripAI.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\SDQL2\SDQL_2.dm. ----------------------
//SDQL2 datumized, /tg/station special!
/*
	Welcome admins, badmins and coders alike, to Structured Datum Query Language.
	SDQL allows you to powerfully run code on batches of objects (or single objects, it's still unmatched
	even there.)
	When I say "powerfully" I mean it you're in for a ride.

	Ok so say you want to get a list of every mob. How does one do this?
	"SELECT /mob"
	This will open a list of every object in world that is a /mob.
	And you can VV them if you need.

	What if you want to get every mob on a *specific z-level*?
	"SELECT /mob WHERE z == 4"

	What if you want to select every mob on even numbered z-levels?
	"SELECT /mob WHERE z % 2 == 0"

	Can you see where this is going? You can select objects with an arbitrary expression.
	These expressions can also do variable access and proc calls (yes, both on-object and globals!)
	Keep reading!

	Ok. What if you want to get every machine in the SSmachine process list? Looping through world is kinda
	slow.

	"SELECT * IN SSmachines.machinery"

	Here "*" as type functions as a wildcard.
	We know everything in the global SSmachines.machinery list is a machine.

	You can specify "IN <expression>" to return a list to operate on.
	This can be any list that you can wizard together from global variables and global proc calls.
	Every variable/proc name in the "IN" block is global.
	It can also be a single object, in which case the object is wrapped in a list for you.
	So yeah SDQL is unironically better than VV for complex single-object operations.

	You can of course combine these.
	"SELECT * IN SSmachines.machinery WHERE z == 4"
	"SELECT * IN SSmachines.machinery WHERE stat & 2" // (2 is NOPOWER, can't use defines from SDQL. Sorry!)
	"SELECT * IN SSmachines.machinery WHERE stat & 2 && z == 4"

	The possibilities are endless (just don't crash the server, ok?).

	Oh it gets better.

	You can use "MAP <expression>" to run some code per object and use the result. For example:

	"SELECT /obj/machinery/power/smes MAP [charge / capacity * 100, RCon_tag, src]"

	This will give you a list of all the APCs, their charge AND RCon tag. Useful eh?

	[] being a list here. Yeah you can write out lists directly without > lol lists in VV. Color matrix
	shenanigans inbound.

	After the "MAP" segment is executed, the rest of the query executes as if it's THAT object you just made
	(here the list).
	Yeah, by the way, you can chain these MAP / WHERE things FOREVER!

	"SELECT /mob WHERE client MAP client WHERE holder MAP holder"

	What if some dumbass admin spawned a bajillion spiders and you need to kill them all?
	Oh yeah you'd rather not delete all the spiders in maintenace. Only that one room the spiders were
	spawned in.

	"DELETE /mob/living/carbon/superior_animal/giant_spider WHERE loc.loc == marked"

	Here I used VV to mark the area they were in, and since loc.loc = area, voila.
	Only the spiders in a specific area are gone.

	Or you know if you want to catch spiders that crawled into lockers too (how even?)

	"DELETE /mob/living/carbon/superior_animal/giant_spider WHERE global.get_area(src) == marked"

	What else can you do?

	Well suppose you'd rather gib those spiders instead of simply flat deleting them...

	"CALL gib() ON /mob/living/carbon/superior_animal/giant_spider WHERE global.get_area(src) == marked"

	Or you can have some fun..

	"CALL forceMove(marked) ON /mob/living/carbon/superior_animal"

	You can also run multiple queries sequentially:

	"CALL forceMove(marked) ON /mob/living/carbon/superior_animal; CALL gib() ON
	/mob/living/carbon/superior_animal"

	And finally, you can directly modify variables on objects.

	"UPDATE /mob WHERE client SET client.color = [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]"

	Don't crash the server, OK?

	"UPDATE /mob/living/carbon/monkey SET #null = forceMove(usr.loc)"

	Writing "#null" in front of the "=" will call the proc and discard the return value.

	A quick recommendation: before you run something like a DELETE or another query.. Run it through SELECT
	first.
	You'd rather not gib every player on accident.
	Or crash the server.

	By the way, queries are slow and take a while. Be patient.
	They don't hang the entire server though.

	With great power comes great responsability.

	Here's a slightly more formal quick reference.

	The 4 queries you can do are:

	"SELECT <selectors>"
	"CALL <proc call> ON <selectors>"
	"UPDATE <selectors> SET var=<value>,var2=<value>"
	"DELETE <selectors>"

	"<selectors>" in this context is "<type> [IN <source>] [chain of MAP/WHERE modifiers]"

	"IN" (or "FROM", that works too but it's kinda weird to read),
	is the list of objects to work on. This defaults to world if not provided.
	But doing something like "IN living_mob_list" is quite handy and can optimize your query.
	All names inside the IN block are global scope, so you can do living_mob_list (a global var) easily.
	You can also run it on a single object. Because SDQL is that convenient even for single operations.

	<type> filters out objects of, well, that type easily. "*" is a wildcard and just takes everything in
	the source list.

	And then there's the MAP/WHERE chain.
	These operate on each individual object being ran through the query.
	They're both expressions like IN, but unlike it the expression is scoped *on the object*.
	So if you do "WHERE z == 4", this does "src.z", effectively.
	If you want to access global variables, you can do `global.living_mob_list`.
	Same goes for procs.

	MAP "changes" the object into the result of the expression.
	WHERE "drops" the object if the expression is falsey (0, null or "")

	What can you do inside expressions?

	* Proc calls
	* Variable reads
	* Literals (numbers, strings, type paths, etc...)
	* \ref referencing: {0x30000cc} grabs the object with \ref [0x30000cc]
	* Lists: [a, b, c] or [a: b, c: d]
	* Math and stuff.
	* A few special variables: src (the object currently scoped on), usr (your mob),
		marked (your marked datum), global(global scope)

	TG ADDITIONS START:
	Add USING keyword to the front of the query to use options system
	The defaults aren't necessarily implemented, as there is no need to.
	Available options: (D) means default
	PROCCALL = (D)ASYNC, BLOCKING
	SELECT = FORCE_NULLS, (D)SKIP_NULLS
	PRIORITY = HIGH, (D) NORMAL
	AUTOGC = (D) AUTOGC, KEEP_ALIVE

	Example: USING PROCCALL = BLOCKING, SELECT = FORCE_NULLS, PRIORITY = HIGH SELECT /mob FROM world WHERE z == 1

*/
// If only a single object got returned, wrap it into a list so the for loops run on it.
/**
  * Recursively prints out an object to text list for SDQL2 output to admins, with VV links and all.
  * Recursion limit: 50
  * Limit imposed by callers should be around 10000 objects
  * Seriously, if you hit those limits, you're doing something wrong.
  */
//Staying as a world proc as this is called too often for changes to offset the potential IsAdminAdvancedProcCall checking overhead.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\SDQL2\SDQL_2_parser.dm. ----------------------
//I'm pretty sure that this is a recursive [s]descent[/s] ascent parser.
//Spec
//////////
//
//	query				:	select_query | delete_query | update_query | call_query | explain
//	explain				:	'EXPLAIN' query
//	select_query		:	'SELECT' object_selectors
//	delete_query		:	'DELETE' object_selectors
//	update_query		:	'UPDATE' object_selectors 'SET' assignments
//	call_query			:	'CALL' variable 'ON' object_selectors // Note here: 'variable' does function calls. This simplifies parsing.
//
//	select_item			:	'*' | object_type
//
//  object_selectors    :   select_item [('FROM' | 'IN') from_item] [modifier_list]
//  modifier_list       :   ('WHERE' bool_expression | 'MAP' expression) [modifier_list]
//
//	from_item			:	'world' | expression
//
//	call_function		:	<function name> '(' [arguments] ')'
//	arguments			:	expression [',' arguments]
//
//	object_type			:	<type path>
//
//	assignments			:	assignment [',' assignments]
//	assignment			:	<variable name> '=' expression
//	variable			:	<variable name> | <variable name> '.' variable | '[' <hex number> ']' | '[' <hex number> ']' '.' variable
//
//	bool_expression		:	expression comparitor expression  [bool_operator bool_expression]
//	expression			:	( unary_expression | '(' expression ')' | value ) [binary_operator expression]
//	unary_expression	:	unary_operator ( unary_expression | value | '(' expression ')' )
//	comparitor			:	'=' | '==' | '!=' | '<>' | '<' | '<=' | '>' | '>='
//	value				:	variable | string | number | 'null' | object_type
//	unary_operator		:	'!' | '-' | '~'
//	binary_operator		:	comparitor | '+' | '-' | '/' | '*' | '&' | '|' | '^' | '%'
//	bool_operator		:	'AND' | '&&' | 'OR' | '||'
//
//	string				:	''' <some text> ''' | '"' <some text > '"'
//	number				:	<some digits>
//
//////////
//option_assignment:	query_option '=' define
//option_assignments: option_assignment, [',' option_assignments]
//query:	select_query | delete_query | update_query
//	select_query:	'SELECT' object_selectors
//delete_query:	'DELETE' object_selectors
//update_query:	'UPDATE' object_selectors 'SET' assignments
//call_query:	'CALL' call_function ['ON' object_selectors]
// object_selectors: select_item [('FROM' | 'IN') from_item] [modifier_list]
// modifier_list: ('WHERE' bool_expression | 'MAP' expression) [modifier_list]
//select_list:select_item [',' select_list]
//assignments:	assignment, [',' assignments]
//select_item:	'*' | select_function | object_type
// Standardized method for handling the IN/FROM and WHERE options.
//from_item:	'world' | expression
//bool_expression:	expression [bool_operator bool_expression]
//assignment:	<variable name> '=' expression
//variable:	<variable name> | <variable name> '.' variable | '[' <hex number> ']' | '[' <hex number> ']' '.' variable
//object_type:	<type path>
//comparitor:	'=' | '==' | '!=' | '<>' | '<' | '<=' | '>' | '>='
//bool_operator:	'AND' | '&&' | 'OR' | '||'
//string:	''' <some text> ''' | '"' <some text > '"'
//array:	'[' expression, expression, ... ']'
//call_function:	<function name> ['(' [arguments] ')']
//expression:	( unary_expression | '(' expression ')' | value ) [binary_operator expression]
//unary_expression:	unary_operator ( unary_expression | value | '(' expression ')' )
//binary_operator:	comparitor | '+' | '-' | '/' | '*' | '&' | '|' | '^' | '%'
//value:	variable | string | number | 'null' | object_type
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\verbs\SDQL2\SDQL_2_wrappers.dm. ----------------------
// Wrappers for BYOND default procs which can't directly be called by call().
/// Locating turfs
/**
 * Wrapper to return a copy of contents, as SDQL2 can't tell an internal list from a normal list.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\admin_delete.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\debug_variables.dm. ----------------------
/// Get displayed variable in VV variable list
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\filterrific.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\get_variables.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\mark_datum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\mass_edit_variables.dm. ----------------------
//not using global lists as vv is a debug function and debug functions should rely on as less things as possible.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\modify_variables.dm. ----------------------
//do they want you to include subtypes?
//FALSE = no subtypes, strict exact type pathing (or the type doesn't have subtypes)
//TRUE = Yes subtypes
//NULL = User cancelled at the prompt or invalid type given
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\reference_tracking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\topic.dm. ----------------------
//DO NOT ADD MORE TO THIS FILE.
//Use vv_do_topic() for datums!
//Stuff below aren't in dropdowns/etc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\topic_basic.dm. ----------------------
//Not using datum.vv_do_topic for very basic/low level debug things, incase the datum's vv_do_topic is runtiming/whatnot.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\topic_list.dm. ----------------------
//LISTS - CAN NOT DO VV_DO_TOPIC BECAUSE LISTS AREN'T DATUMS :(
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\admin\view_variables\view_variables.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\abductor.dm. ----------------------
// LANDMARKS
// OBJECTIVES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\ice_abductor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\abductee\abductee.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\abductee\abductee_objectives.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\abductee\trauma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\abduction_gear.dm. ----------------------
//AGENT VEST
// Operating Table / Beds / Lockers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\abduction_outfits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\abduction_surgery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\gland.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\orderable_gear.dm. ----------------------
/*
/datum/abductor_gear/shrink_ray
	name = "Shrink Ray Blaster"
	description = "This is a piece of frightening alien tech that enhances the magnetic pull of atoms in a localized space to temporarily make an object shrink. \
				That or it's just space magic. Either way, it shrinks stuff."
	id = "shrink_ray"
	cost = 2
	build_path = /obj/item/gun/energy/shrink_ray
	category = "Advanced Gear"
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\access.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\blood.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\chem.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\egg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\electric.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\heal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\mindshock.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\plasma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\quantum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\slime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\spider.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\transform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\trauma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\ventcrawl.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\equipment\glands\viral.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\machinery\camera.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\machinery\console.dm. ----------------------
//Common
//Console
/**
  * get_abductor_gear: Returns a list of a filtered abductor gear sorted by categories
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\machinery\dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\machinery\experiment.dm. ----------------------
/**
  * experiment: Performs selected experiment on occupant mob, resulting in a point reward on success
  *
  * Arguments:
  * * occupant The mob inside the machine
  * * type The type of experiment to be performed
  * * user The mob starting the experiment
  */
/**
  * send_back: Sends a mob back to a selected teleport location if safe
  *
  * Arguments:
  * * H The human mob to be sent back
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\abductor\machinery\pad.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\ashwalker\ashwalker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob.dm. ----------------------
//Non-overminds get this on blob antag assignment
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blob_report.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\overmind.dm. ----------------------
//Few global vars to track the blob
//the same but it's forced to be allowed by default as cameras usually don't allow emoting
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\powers.dm. ----------------------
// Power verbs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\theblob.dm. ----------------------
//I will need to recode parts of this but I am way too tired atm //I don't know who left this comment but they never did come back
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\blob_mobs.dm. ----------------------
////////////////
// BASE TYPE //
////////////////
//Do not spawn
////////////////
// BLOB SPORE //
////////////////
/////////////////
// BLOBBERNAUT //
/////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\core.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\factory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\node.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\resource.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobs\shield.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\blazing_oil.dm. ----------------------
//sets you on fire, does burn damage, explodes into flame when burnt, weak to water
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\cryogenic_poison.dm. ----------------------
//does brute, burn, and toxin damage, and cools targets down
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\electromagnetic_web.dm. ----------------------
//does burn damage and EMPs, slightly fragile
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\energized_jelly.dm. ----------------------
//does tons of oxygen damage and a little stamina, immune to tesla bolts, weak to EMP
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\explosive_lattice.dm. ----------------------
//does aoe brute damage when hitting targets, is immune to explosions
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\multiplex.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\networked_fibers.dm. ----------------------
//does massive brute and burn damage, but can only expand manually
//does massive brute and burn damage, but can only expand manually
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\pressurized_slime.dm. ----------------------
//does low brute damage, oxygen damage, and stamina damage and wets tiles when damaged
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\reactive_spines.dm. ----------------------
//does brute damage through armor and bio resistance
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\regenerative_materia.dm. ----------------------
//does toxin damage, hallucination, targets think they're not hurt at all
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\replicating_foam.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\shifting_fragments.dm. ----------------------
//does brute damage, shifts away when damaged
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\synchronous_mesh.dm. ----------------------
//does brute damage, bonus damage for each nearby blob, and spreads damage out
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\zombifying_pods.dm. ----------------------
//kills sleeping targets and turns them into blob zombies, produces fragile spores when killed or on expanding
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\_blobstrain.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blob\blob\blobstrains\_reagent.dm. ----------------------
// These can only be applied by blobs. They are what (reagent) blobs are made out of.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_flaws.dm. ----------------------
// 		Getting Flaws:
//
//	Killing crew
//
//	Gaining ranks
// 			* COMPULSION *  	Things you must do
//
//	SELECTIVE:		-Gender/BloodType/Job sustains you, but others give you less.
//
// 			* WEAKNESSES *  	Things that may harm you
//
//	LIGHTS:			-Bright light nullifies the Examine benefits of Masquerade.
//  				-Bright lights disable your healing (including in Torpor)
//
//	STAKES:			-Stakes kill you immediately.
//
//	PAINFUL:		-Your feed victims scream, despite being unconscious.
//
//	FIRE:			-You only need your max health (not x2) in fire damage to die.
//
//	CORPSE:			-Your Masquerade turns off when unconscious or crit.
//
//	FERAL:			-
//
//	CRAVEN
//	These are basically small weaknesses that affect your character in certain circumstances.
// As a rule, they should be specific as to when they happen, or have only some certain
// drawback.
// (core ideas)
// SENSITIVE: 	You are slightly blinded by bright lights.
// DARKFRIEND: 	Your automatic healing is at a crawl when in bright light.
// TRADITIONAL:	Every five minutes spent outside a coffin lowers your rate of automatic healing.
// CONSUMED:	Every five minutes spent outside a coffin increases the rate at which your blood ticks down.
// GOURMAND:	Animals and blood bags offer you no nourishment when feeding.
// DEATHMASK:	You no longer fake having a heartbeat, and always show up as pale when examined.
// BESTIAL:		When your blood is low, you will twitch involuntarily.
// (alternate ideas)
// STERILE:		There is a high chance that turning corpses to Bloodsuckers will fail, and further attempts on them by you are impossible.
// FERAL:		You're a threat to Vampire-kind: New Bloodsuckers may have an Objective to destroy you.
// UNHOLY:		The Chapel, the Bible, and Holy Water set you on fire.
// PARANOID:	Only your own claimed coffin counts for healing and banes.
// 	ON LEVEL-UP:
// Burn Damage increases
// Regen Rate increases
// Max Punch Damage increase
// Reset Level Timer
// Select Bane
// How to Burn Vamps:
//		C.adjustFireLoss(20)
//		C.adjust_fire_stacks(6)
//		C.IgniteMob()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_integration.dm. ----------------------
//				INTEGRATION: Adding Procs and Datums to existing "classes"
// 			EXAMINING
// Am I "pale" when examined? Bloodsuckers can trick this.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_life.dm. ----------------------
// 		TO PLUG INTO LIFE:
// Cancel BLOOD life
// Cancel METABOLISM life   (or find a way to control what gets digested)
// Create COLDBLOODED trait (thermal homeostasis)
// 		EXAMINE
//
// Show as dead when...
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			BLOOD
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			HEALING
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// I am thirsty for blud!
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			DEATH
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			HUMAN FOOD
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_objectives.dm. ----------------------
// Hide a random object somewhere on the station:
//		var/turf/targetturf = get_random_station_turf()
//		var/turf/targetturf = get_safe_random_station_turf()
//						 GENERATE!
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	//							 PROCS 									//	//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vassal becomes a Head, or part of a department
//						 GENERATE!
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Eat blood from a lot of people
// HOW: Track each feed (if human). Count victory.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convert a crewmate
// HOW: Find crewmate. Check if person is a bloodsucker
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Defile a facility with blood
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
// Destroy the Solar Arrays
/datum/objective/bloodsucker/solars

// Space_Station_13_areas.dm  <--- all the areas
/datum/objective/bloodsucker/solars/update_explanation_text()
	explanation_text = "Prevent all solar arrays on the station from functioning."

/datum/objective/bloodsucker/solars/check_completion()
	// Sort through all /obj/machinery/power/solar_control in the station ONLY, and check that they are functioning.
	// Make sure that lastgen is 0 or connected_panels.len is 0. Doesnt matter if it's tracking.
	for (var/obj/machinery/power/solar_control/SC in SSsun.solars)
		// Check On Station:
		var/turf/T = get_turf(SC)
		if(!T || !is_station_level(T.z)) // <------ Taken from NukeOp
			//message_admins("DEBUG A: [SC] not on station!")
			continue // Not on station! We don't care about this.
		if (SC && SC.lastgen > 0 && SC.connected_panels.len > 0 && SC.connected_tracker)
			return FALSE
	return TRUE
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Steal hearts. You just really wanna have some hearts.
//						 GENERATE!
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						 GENERATE!
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						 GENERATE!
//						EXPLANATION
//						WIN CONDITIONS?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						 GENERATE!
//						EXPLANATION
//						WIN CONDITIONS?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_powers.dm. ----------------------
//							NOTES
//
// 	click.dm <--- Where we can take over mouse clicks
//	spells.dm  /add_ranged_ability()  <--- How we take over the mouse click to use a power on a target.
///////////////////////////////////  PASSIVE POWERS	///////////////////////////////////
// New Type: Passive (Always on, no button)
///////////////////////////////////  TARGETTED POWERS	///////////////////////////////////
// Click power: Begin Aim
// Check if target is VALID (wall, turf, or character?)
// Check if valid target meets conditions
// Click Target
// Target Proc Holder
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_sunlight.dm. ----------------------
// Over Time, tick down toward a "Solar Flare" of UV buffeting the station. This period is harmful to vamps.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\bloodsucker_ui.dm. ----------------------
// For all things visual, such as leveling up
// Look up: _vending.dm    		proc/ui_interact()
//			Malf_Modules.dm 	proc/use()
/*
/datum/antagonist/bloodsucker/proc/LevelUpMenu()
	var/list/dat = list()

	dat += "<h3>You have become more ancient.<BR>Direct the path of your blood</h3>"
	dat += "<HR>"

	// Step One: Decide powers you CAN buy.
	for(var/pickedpower in typesof(/datum/action/bloodsucker))
		var/obj/effect/proc_holder/spell/bloodsucker/power = pickedpower
		// NAME
		dat += "<A href='byond://?src=[REF(src)];[module.mod_pick_name]=1'>[power.name]</A>"
		// COST
		dat += "<td align='right'><b>[power.name]&nbsp;</b><a href='byond://?src=[REF(src)];vend=[REF(R)]'>Vend</a></td>"
		dat == "<BR>"

	var/datum/browser/popup = new(owner.current, "bloodsuckerrank", "Bloodsucker Rank Up")
	popup.set_content(dat.Join())
	popup.open()

/datum/antagonist/bloodsucker/Topic(href, href_list)
	if(..())
		return
*/
// From browser.dm:   /datum/browser/New(nuser, nwindow_id, ntitle = 0, nwidth = 0, nheight = 0, var/atom/nref = null)
/*
	var/list/dat = list()
	dat += "<B>Select use of processing time: (currently #[processing_time] left.)</B><BR>"
	dat += "<HR>"
	dat += "<B>Install Module:</B><BR>"
	dat += "<I>The number afterwards is the amount of processing time it consumes.</I><BR>"
	for(var/datum/AI_Module/large/module in possible_modules)
		dat += "<A href='byond://?src=[REF(src)];[module.mod_pick_name]=1'>[module.module_name]</A><A href='byond://?src=[REF(src)];showdesc=[module.mod_pick_name]'>\[?\]</A> ([module.cost])<BR>"
	for(var/datum/AI_Module/small/module in possible_modules)
		dat += "<A href='byond://?src=[REF(src)];[module.mod_pick_name]=1'>[module.module_name]</A><A href='byond://?src=[REF(src)];showdesc=[module.mod_pick_name]'>\[?\]</A> ([module.cost])<BR>"
	dat += "<HR>"
	if(temp)
		dat += "[temp]"
	var/datum/browser/popup = new(user, "modpicker", "Malf Module Menu")
	popup.set_content(dat.Join())
	popup.open()
*/
/*
	var/dat = ""
	var/datum/bank_account/account
	var/mob/living/carbon/human/H
	var/obj/item/card/id/C
	if(ishuman(user))
		H = user
		C = H.get_idcard(TRUE)

	if(!C)
		dat += "<font color = 'red'><h3>No ID Card detected!</h3></font>"
	else if (!C.registered_account)
		dat += "<font color = 'red'><h3>No account on registered ID card!</h3></font>"
	if(onstation && C && C.registered_account)
		account = C.registered_account
	dat += "<h3>Select an item</h3>"
	dat += "<div class='statusDisplay'>"
	if(!product_records.len)
		dat += "<font color = 'red'>No product loaded!</font>"
	else
		var/list/display_records = product_records + coin_records
		if(extended_inventory)
			display_records = product_records + coin_records + hidden_records
		dat += "<table>"
		for (var/datum/data/vending_product/R in display_records)
			var/price_listed = "$[default_price]"
			var/is_hidden = hidden_records.Find(R)
			if(is_hidden && !extended_inventory)
				continue
			if(R.custom_price)
				price_listed = "$[R.custom_price]"
			if(!onstation || account && account.account_job && account.account_job.paycheck_department == payment_department)
				price_listed = "FREE"
			if(coin_records.Find(R) || is_hidden)
				price_listed = "$[R.custom_premium_price ? R.custom_premium_price : extra_price]"
			dat += "<tr><td><img src='data:image/jpeg;base64,[GetIconForProduct(R)]'/></td>"
			dat += "<td style=\"width: 100%\"><b>[sanitize(R.name)]  ([price_listed])</b></td>"
			if(R.amount > 0 && ((C && C.registered_account && onstation) || (!onstation && isliving(user))))
				dat += "<td align='right'><b>[R.amount]&nbsp;</b><a href='byond://?src=[REF(src)];vend=[REF(R)]'>Vend</a></td>"
			else
				dat += "<td align='right'><span class='linkOff'>Not&nbsp;Available</span></td>"
			dat += "</tr>"
		dat += "</table>"
	dat += "</div>"
	if(onstation && C && C.registered_account)
		dat += "<b>Balance: $[account.account_balance]</b>"
	if(istype(src, /obj/machinery/vending/snack))
		dat += "<h3>Chef's Food Selection</h3>"
		dat += "<div class='statusDisplay'>"
		for (var/O in dish_quants)
			if(dish_quants[O] > 0)
				var/N = dish_quants[O]
				dat += "<a href='byond://?src=[REF(src)];dispense=[sanitize(O)]'>Dispense</A> "
				dat += "<B>[capitalize(O)] ($[default_price]): [N]</B><br>"
		dat += "</div>"

	var/datum/browser/popup = new(user, "vending", (name))
	popup.set_content(dat)
	popup.set_title_image(user.browse_rsc_icon(icon, icon_state))
	popup.open()
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\datum_bloodsucker.dm. ----------------------
//owner.current.hellbound = FALSE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//This handles the application of antag huds/special abilities
//This handles the removal of antag huds/special abilities
//Assign default team and creates one for one of a kind team antagonists
// Create Objectives
//Name shown on antag list
//Whatever interesting things happened to the antag admins should know about
//Include additional information about antag in this part
//Individual roundend report
//Displayed at the start of roundend_category section, default to roundend_category header
//  		2019 Breakdown of Bloodsuckers:
//					G A M E P L A Y
//
//	Bloodsuckers should be inherrently powerful: they never stay dead, and they can hide in plain sight
//  better than any other antagonist aboard the station.
//
//	However, only elder Bloodsuckers are the powerful creatures of legend. Ranking up as a Bloodsucker
//  should impart slight strength and health benefits, as well as powers that can grow over time. But
//  their weaknesses should grow as well, and not just to fire.
//					A B I L I T I E S
//
// 	* Bloodsuckers can FEIGN LIFE + DEATH.
//		Feigning LIFE:
//			- Warms up the body
//			- Creates a heartbeat
//			- Fake blood amount (550)
//		Feign DEATH: Not yet done
//			- When lying down or sitting, you appear "dead and lifeless"
//	* Bloodsuckers REGENERATE
//		- Brute damage heals rather rapidly. Burn damage heals slowly.
//		- Healing is reduced when hungry or starved.
//		- Burn does not heal when starved. A starved vampire remains "dead" until burns can heal.
//		- Bodyparts and organs regrow in Torpor (except for the Heart and Brain).
//
//	* Bloodsuckers are IMMORTAL
//		- Brute damage cannot destroy them (and it caps very low, so they don't stack too much)
//		- Burn damage can only kill them at very high amounts.
//		- Removing the head kills the vamp forever.
//		- Removing the heart kills the vamp until replaced.
//
//	* Bloodsuckers are DEAD
//		- They do not breathe.
//		- Cold affects them less.
//		- They are immune to disease (but can spread it)
//		- Food is useless and cause sickness.
//		- Nothing can heal the vamp other than his own blood.
//
//	* Bloodsuckers are PREDATORS
//		- They detect life/heartbeats nearby.
//		- They know other predators instantly (Vamps, Werewolves, and alien types) regardless of disguise.
//
//
//
// 	* Bloodsuckers enter Torpor when DEAD or RESTING in coffin
//		- Torpid vampires regenerate their health. Coffins negate cost and speed up the process.
//		** To rest in a coffin, either SLEEP or CLOSE THE LID while you're in it. You will be given a prompt to sleep until healed. Healing in a coffin costs NO blood!
//
// 					O B J E C T I V E S
//
//
//
//
//	1) GROOM AN HEIR:	Find a person with appropriate traits (hair, blood type, gender) to be turned as a Vampire. Before they rise, they must be properly trained. Raise them to great power after their change.
//
//	2) BIBLIOPHILE:		Research objects of interest, study items looking for clues of ancient secrets, and hunt down the clues to a Vampiric artifact of horrible power.
//
//	3) CRYPT LORD:		Build a terrifying sepulcher to your evil, with servants to lavish upon you in undeath. The trappings of a true crypt lord come at grave cost.
//
//	4) GOURMOND:		Oh, to taste all the delicacies the station has to offer! DRINK ## BLOOD FROM VICTIMS WHO LIVE, EAT ## ORGANS FROM VICTIMS WHO LIVE
//			Vassals
//
// - Loyal to (and In Love With) Master
// - Master can speak to, summon, or punish his Vassals, even while asleep or torpid.
// - Master may have as many Vassals as Rank
// - Vassals see their Master's speech emboldened!
// 			Dev Notes
//
// HEALING: Maybe Vamps metabolize specially? Like, they slowly drip their own blood into their system?
//			- Give Vamps their own metabolization proc, perhaps?
//			** shadowpeople.dm has rules for healing.
//
// KILLING: It's almost impossible to track who someone has directly killed. But an Admin could be given
//			an easy way to whip a Bloodsucker for cruel behavior, as a RP mechanic but not a punishment.
//			**
//
// HUNGER:  Just keep adjusting mob's nutrition to Blood Hunger level. No need to cancel nutrition from eating.
//			** mob.dm /set_nutrition()
//			** snacks.dm / attack()  <-- Stop food from doing anything?
// ORGANS:  Liver
//			** life.dm /handle_liver()
//
// CORPSE:	Most of these effects likely go away when using "Masquerade" to appear alive.
//			** status_procs.dm /adjust_bodytemperature()
//			** traits.dm /TRAIT_NOBREATH /TRAIT_SLEEPIMMUNE /TRAIT_RESISTCOLD /TRAIT_RADIMMUNE  /TRAIT_VIRUSIMMUNE
//			*  MASQUERADE ON/OFF: /TRAIT_FAKEDEATH (M)
//			* /TRAIT_NIGHT_VISION
//			* /TRAIT_DEATHCOMA <-- This basically makes you immobile. When using status_procs /fakedeath(), make sure to remove Coma unless we're in Torpor!
//			* /TRAIT_NODEATH <--- ???
//			** species  /NOZOMBIE
//			* ADD: TRAIT_COLDBLOODED <-- add to carbon/life.dm /natural_bodytemperature_stabilization()
//
// MASQUERADE	Appear as human!
//				** examine.dm /examine() <-- Change "blood_volume < BLOOD_VOLUME_SAFE" to a new examine
//
// NOSFERATU ** human.add_trait(TRAIT_DISFIGURED, "insert_vamp_datum_here") <-- Makes you UNKNOWN unless your ID says otherwise.
// STEALTH   ** human_helpers.dm /get_visible_name()     ** shadowpeople.dm has rules for Light.
//
// FRENZY	** living.dm /update_mobility() (USED TO be update_canmove)
//
// PREDATOR See other Vamps!
//		    * examine.dm /examine()
//
// WEAKNESSES:	-Poor mood in Chapel or near Chaplain.  -Stamina damage from Bible
// TODO:
//
// Death (fire, heart, brain, head)
// Disable Life: BLOOD
// Body Temp
// Spend blood over time (more if imitating life) (none if sleeping in coffin)
// Auto-Heal (brute to 0, fire to 99) (toxin/o2 always 0)
//
// Hud Icons
// UI Blood Counter
// Examine Name (+Masquerade, only "Dead and lifeless" if not standing?)
//
//
// Turn vamps
// Create vassals
//
// FIX LIST
//
/////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\datum_hunter.dm. ----------------------
/*
#define HUNTER_SCAN_MIN_DISTANCE 8
#define HUNTER_SCAN_MAX_DISTANCE 35
#define HUNTER_SCAN_PING_TIME 20 //5s update time.


/datum/antagonist/vamphunter
	name = "Hunter"
	roundend_category = "hunters"
	antagpanel_category = "Monster Hunter"
	job_rank = ROLE_MONSTERHUNTER
	var/list/datum/action/powers = list()// Purchased powers
	var/list/datum/objective/objectives_given = list()	// For removal if needed.
	var/datum/martial_art/my_kungfu // Hunters know a lil kung fu.
	var/bad_dude = FALSE  	// Every first hunter spawned is a SHIT LORD.
	threat = -3

/datum/antagonist/vamphunter/threat()
	return bad_dude ? -(..()) : ..()

/datum/antagonist/vamphunter/on_gain()

	SSticker.mode.vamphunters |= owner // Add if not already in here (and you might be, if you were picked at round start)

	// Hunter Pinpointer
	//owner.current.apply_status_effect(/datum/status_effect/agent_pinpointer/hunter_edition)

	// Give Hunter Power
	var/datum/action/P = new /datum/action/bloodsucker/trackvamp
	P.Grant(owner.current)

	// Give Hunter Martial Arts
	//if (rand(1,3) == 1)
	//	var/datum/martial_art/pick_type = pick (/datum/martial_art/cqc, /datum/martial_art/krav_maga, /datum/martial_art/cqc, /datum/martial_art/krav_maga, /datum/martial_art/wrestling)  // /datum/martial_art/boxing  <--- doesn't include grabbing, so don't use!
	//	my_kungfu = new pick_type //pick (/datum/martial_art/boxing, /datum/martial_art/cqc) // ick_type
	//	my_kungfu.teach(owner.current, 0)

	// Give Hunter Objective
	var/datum/objective/bloodsucker/monsterhunter/monsterhunter_objective = new
	monsterhunter_objective.owner = owner
	monsterhunter_objective.generate_objective()
	objectives += monsterhunter_objective
	objectives_given += monsterhunter_objective
	// Badguy Hunter? (Give him BADGUY objectives)
	if (bad_dude)
		// Stolen DIRECTLY from datum_traitor.dm
		if(prob(15) && !(locate(/datum/objective/download) in objectives) && !(owner.assigned_role in list("Research Director", "Scientist", "Roboticist")))
			var/datum/objective/download/download_objective = new
			download_objective.owner = owner
			download_objective.gen_amount_goal()
			objectives += download_objective
			objectives_given += download_objective
		else
			var/datum/objective/steal/steal_objective = new
			steal_objective.owner = owner
			steal_objective.find_target()
			objectives += steal_objective
			objectives_given += steal_objective


	. = ..()

/datum/antagonist/vamphunter/on_removal()

	SSticker.mode.vamphunters -= owner // Add if not already in here (and you might be, if you were picked at round start)

	// Master Pinpointer
	//owner.current.remove_status_effect(/datum/status_effect/agent_pinpointer/hunter_edition)

	// Take Hunter Power
	if (owner.current)
		for (var/datum/action/bloodsucker/P in owner.current.actions)
			P.Remove(owner.current)

	// Take Hunter Martial Arts
	//my_kungfu.remove(owner.current)

	// Remove Hunter Objectives
	for(var/O in objectives_given)
		objectives -= O
		qdel(O)
	objectives_given = list()

	. = ..()

/datum/antagonist/vamphunter/greet()
	var/vamp_hunter_greet = "<span class='userdanger'>You are a fearless Monster Hunter!</span>"
	vamp_hunter_greet += "<span class='boldannounce'>You know there's one or more filthy creature onboard the station, though their identities elude you.<span>"
	vamp_hunter_greet += "<span class='boldannounce'>It's your job to root them out, destroy their nests, and save the crew.<span>"
	vamp_hunter_greet += "<span class='boldannounce'>Use <b>WHATEVER MEANS NECESSARY</b> to find these creatures...no matter who gets hurt or what you have to destroy to do it.</span>"
	vamp_hunter_greet += "There are greater stakes at hand than the safety of the station!<span>"
	vamp_hunter_greet += "<span class='boldannounce'>However, security may detain you if they discover your mission...<span>"
	antag_memory += "You remember your training:<br>"
	antag_memory += " -Bloodsuckers are weak to fire, or a stake to the heart. Removing their head or heart will also destroy them permanently.<br>"
	antag_memory += " -Wooden stakes can be made from planks, and hardened by a welding tool. Your recipes list has ways of making them even stronger.<br>"
	antag_memory += " -Changelings return to life unless their body is destroyed. Not even decapitation can stop them for long.<br>"
	antag_memory += " -Cultists are weak to the Chaplain's holy water.<br>"
	antag_memory += " -Wizards are notoriously hard to outmatch. Rob or steal whatever weapons you need to destroy them, and shoot before asking questions.<br><br>"
	if (my_kungfu != null)
		vamp_hunter_greet += "<span class='announce'>Hunter Tip: Use your [my_kungfu.name] techniques to give you an advantage over the enemy.</span><br>"
		antag_memory += "You remember your training: You are skilled in the [my_kungfu.name] style of combat.<br>"
	to_chat(owner, vamp_hunter_greet)

/datum/antagonist/vamphunter/farewell()
	to_chat(owner, "<span class='userdanger'>Your hunt has ended: you are no longer a monster hunter!</span>")


// TAKEN FROM:  /datum/action/changeling/pheromone_receptors    // pheromone_receptors.dm      for a version of tracking that Changelings have!


/datum/status_effect/agent_pinpointer/hunter_edition
	alert_type = /atom/movable/screen/alert/status_effect/agent_pinpointer/hunter_edition
	minimum_range = HUNTER_SCAN_MIN_DISTANCE
	tick_interval = HUNTER_SCAN_PING_TIME
	duration = 160 // Lasts 10s
	range_fuzz_factor = 5//PINPOINTER_EXTRA_RANDOM_RANGE

/atom/movable/screen/alert/status_effect/agent_pinpointer/hunter_edition
	name = "Monster Tracking"
	desc = "You always know where the hellspawn are."


/datum/status_effect/agent_pinpointer/hunter_edition/on_creation(mob/living/new_owner, ...)
	..()

	// Pick target
	var/turf/my_loc = get_turf(owner)
	var/list/mob/living/carbon/vamps = list()

	for(var/datum/mind/M in SSticker.mode.bloodsuckers)
		if (!M.current || M.current == owner || !get_turf(M.current) || !get_turf(new_owner))
			continue
		var/datum/antagonist/bloodsucker/antag_datum = M.has_antag_datum(ANTAG_DATUM_BLOODSUCKER)
		if(!istype(antag_datum))
			continue
		var/their_loc = get_turf(M.current)
		var/distance = get_dist_euclidian(my_loc, their_loc)
		if (distance < HUNTER_SCAN_MAX_DISTANCE)
			vamps[M.current] = (HUNTER_SCAN_MAX_DISTANCE ** 2) - (distance ** 2)
	// Found one!
	if(vamps.len)
		scan_target = pickweight(vamps) //Point at a 'random' vamp, biasing heavily towards closer ones.
		to_chat(owner, "<span class='warning'>You detect signs of monsters to the <b>[dir2text(get_dir(my_loc,get_turf(scan_target)))]!</b></span>")
	// Will yield a "?"
	else
		to_chat(owner, "<span class='notice'>There are no monsters nearby.</span>")
	// Force Point-To Immediately
	point_to_target()

/datum/status_effect/agent_pinpointer/hunter_edition/scan_for_target()
	// Lose target? Done. Otherwise, scan for target's current position.
	if (!scan_target && owner)
		owner.remove_status_effect(/datum/status_effect/agent_pinpointer/hunter_edition)

	// NOTE: Do NOT run ..(), or else we'll remove our target.


/datum/status_effect/agent_pinpointer/hunter_edition/Destroy()
	if (scan_target)
		to_chat(owner, "<span class='notice'>You've lost the trail.</span>")
	..()
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*


/datum/action/bloodsucker/trackvamp/
	name = "Track Monster"//"Cellular Emporium"
	desc = "Take a moment to look for clues of any nearby monsters.<br>These creatures are slippery, and often look like the crew."
	button_icon = 'icons/mob/actions/bloodsucker.dmi'	//This is the file for the BACKGROUND icon
	background_icon_state = "vamp_power_off"		//And this is the state for the background icon
	icon_icon = 'icons/mob/actions/bloodsucker.dmi'		//This is the file for the ACTION icon
	button_icon_state = "power_hunter" 				//And this is the state for the action icon
	amToggle = FALSE  // Action-Related
	cooldown = 300 // 10 ticks, 1 second.
	bloodcost = 0

/datum/action/bloodsucker/trackvamp/ActivatePower()

	var/mob/living/user = owner
	to_chat(user, "<span class='notice'>You look around, scanning your environment and discerning signs of any filthy, wretched affronts to the natural order.</span>")

	if (!do_mob(user,owner,80))
		return
	// Add Power
	// REMOVED //user.apply_status_effect(/datum/status_effect/agent_pinpointer/hunter_edition)
	// We don't track direction anymore!
	// Return text indicating direction
	display_proximity()
	// NOTE: DON'T DEACTIVATE!
	//DeactivatePower()

/datum/action/bloodsucker/trackvamp/proc/display_proximity()
	// Pick target
	var/turf/my_loc = get_turf(owner)
	//var/list/mob/living/carbon/vamps = list()
	var/best_dist = 9999
	var/mob/living/best_vamp

	// Track ALL MONSTERS in Game Mode
	var/list/datum/mind/monsters = list()
	monsters += SSticker.mode.bloodsuckers
	monsters += SSticker.mode.devils
	//monsters += SSticker.mode.cult
	monsters += SSticker.mode.wizards
	monsters += SSticker.mode.apprentices
	monsters += SSticker.mode.servants_of_ratvar
	//monsters += SSticker.mode.changelings Disabled anyways
	//
	for(var/datum/mind/M in monsters)
		if (!M.current || M.current == owner)//   || !get_turf(M.current) || !get_turf(owner))
			continue
		for(var/a in M.antag_datums)
			var/datum/antagonist/antag_datum = a // var/datum/antagonist/antag_datum = M.has_antag_datum(ANTAG_DATUM_BLOODSUCKER)
			if(!istype(antag_datum) || antag_datum.AmFinalDeath())
				continue
			var/their_loc = get_turf(M.current)
			var/distance = get_dist_euclidian(my_loc, their_loc)
			// Found One: Closer than previous/max distance
			if (distance < best_dist && distance <= HUNTER_SCAN_MAX_DISTANCE)
				best_dist = distance
				best_vamp = M.current
				break // Stop searching through my antag datums and go to the next guy

	// Found one!
	if(best_vamp)
		var/distString = best_dist <= HUNTER_SCAN_MAX_DISTANCE / 2 ? "<b>somewhere closeby!</b>" : "somewhere in the distance."
		//to_chat(owner, "<span class='warning'>You detect signs of Bloodsuckers to the <b>[dir2text(get_dir(my_loc,get_turf(targetVamp)))]!</b></span>")
		to_chat(owner, "<span class='warning'>You detect signs of monsters [distString]</span>")

	// Will yield a "?"
	else
		to_chat(owner, "<span class='notice'>There are no monsters nearby.</span>")













////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// From martial.dm

/*
/datum/martial_art/hunter
	name = "Hunter-Fu"
	id = "MARTIALART_HUNTER" //ID, used by mind/has_martialart
	//streak = ""
	//max_streak_length = 6
	//current_target
	//datum/martial_art/base // The permanent style. This will be null unless the martial art is temporary
	//deflection_chance = 0 //Chance to deflect projectiles
	//reroute_deflection = FALSE //Delete the bullet, or actually deflect it in some direction?
	//block_chance = 0 //Chance to block melee attacks using items while on throw mode.
	//restraining = 0 //used in cqc's disarm_act to check if the disarmed is being restrained and so whether they should be put in a chokehold or not
	//help_verb
	//no_guns = FALSE
	//allow_temp_override = TRUE //if this martial art can be overridden by temporary martial arts

/datum/martial_art/hunter/disarm_act(mob/living/carbon/human/A, mob/living/carbon/human/D)
	return FALSE

/datum/martial_art/hunter/harm_act(mob/living/carbon/human/A, mob/living/carbon/human/D)
	return FALSE

/datum/martial_art/hunter/grab_act(mob/living/carbon/human/A, mob/living/carbon/human/D)
	return FALSE

/datum/martial_art/hunter/can_use(mob/living/carbon/human/H)
	return TRUE


/datum/martial_art/hunter/add_to_streak(element,mob/living/carbon/human/D)
	if(D != current_target)
		current_target = D
		streak = ""
		restraining = 0
	streak = streak+element
	if(length_char(streak) > max_streak_length)
		streak = streak[1]
	return


/datum/martial_art/hunter/basic_hit(mob/living/carbon/human/A,mob/living/carbon/human/D)

	var/damage = rand(A.dna.species.punchdamagelow, A.dna.species.punchdamagehigh)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\datum_vassal.dm. ----------------------
//Displayed at the start of roundend_category section, default to roundend_category header
/*/datum/antagonist/vassal/roundend_report_header()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\items\bloodsucker_organs.dm. ----------------------
// 		HEART: OVERWRITE	//
// 		HEART 		//
// 		EYES 		//
/*
//		LIVER		//
/obj/item/organ/liver/vampliver
	// Livers run on_life(), which calls reagents.metabolize() in holder.dm, which calls on_mob_life.dm in the cheam (medicine_reagents.dm)
	//															Holder also calls reagents.reaction_mob for the moment it happens

/obj/item/organ/liver/vampliver/on_life()
	var/mob/living/carbon/C = owner

	if(!istype(C))
		return

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\items\bloodsucker_stake.dm. ----------------------
// organ_internal.dm   --   /obj/item/organ
// Do I have a stake in my heart?
// Can this target be staked? If someone stands up before this is complete, it fails. Best used on someone stationary.
// Convert back to Silver
// Look up recipes.dm OR pneumaticCannon.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\objects\bloodsucker_coffin.dm. ----------------------
// TRAIT_DEATHCOMA -  Activate this when you're in your coffin to simulate sleep/death.
// Coffins...
//	-heal all wounds, and quickly.
//	-restore limbs & organs
//
// Without Coffins...
//	-
//	-limbs stay lost
// To put to sleep:  use 		owner.current.fakedeath("bloodsucker") but change name to "bloodsucker_coffin" so you continue to stay fakedeath despite healing in the main thread!
// crate.dm
//////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\objects\bloodsucker_crypt.dm. ----------------------
//									IDEAS		--
//					An object that disguises your coffin while you're in it!
//
//					An object that lets your lair itself protect you from sunlight, like a coffin would (no healing tho)
// Hide a random object somewhere on the station:
//		var/turf/targetturf = get_random_station_turf()
//		var/turf/targetturf = get_safe_random_station_turf()
// 		CRYPT OBJECTS
//
//
// 	PODIUM		Stores your Relics
//
// 	ALTAR		Transmute items into sacred items.
//
//	PORTRAIT	Gaze into your past to: restore mood boost?
//
//	BOOKSHELF	Discover secrets about crew and locations. Learn languages. Learn marial arts.
//
//	BRAZER		Burn rare ingredients to gleen insights.
//
//	RUG			Ornate, and creaks when stepped upon by any humanoid other than yourself and your vassals.
//
//	X COFFIN		(Handled elsewhere)
//
//	X CANDELABRA	(Handled elsewhere)
//
//	THRONE		Your mental powers work at any range on anyone inside your crypt.
//
//	MIRROR		Find any person
//
//	BUST/STATUE	Create terror, but looks just like you (maybe just in Examine?)
//		RELICS
//
//	RITUAL DAGGER
//
// 	SKULL
//
//	VAMPIRIC SCROLL
//
//	SAINTS BONES
//
//	GRIMOIRE
// 		RARE INGREDIENTS
// Ore
// Books (Manuals)
// 										NOTE:  Look up AI and Sentient Disease to see how the game handles the selector logo that only one player is allowed to see. We could add hud for vamps to that?
//											   ALTERNATIVELY, use the Vamp Huds on relics to mark them, but only show to relevant vamps?
/*
/obj/structure/bloodsucker/bloodthrone
	name = "wicked throne"
	desc = "Twisted metal shards jut from the arm rests. Very uncomfortable looking. It would take a sadistic sort to sit on this jagged piece of furniture."

/obj/structure/bloodsucker/bloodaltar
	name = "bloody altar"
	desc = "It is marble, lined with basalt, and radiates an unnerving chill that puts your skin on edge."

/obj/structure/bloodsucker/bloodstatue
	name = "bloody countenance"
	desc = "It looks upsettingly familiar..."

/obj/structure/bloodsucker/bloodportrait
	name = "oil portrait"
	desc = "A disturbingly familiar face stares back at you. On second thought, the reds don't seem to be painted in oil..."

/obj/structure/bloodsucker/bloodbrazer
	name = "lit brazer"
	desc = "It burns slowly, but doesn't radiate any heat."

/obj/structure/bloodsucker/bloodmirror
	name = "faded mirror"
	desc = "You get the sense that the foggy reflection looking back at you has an alien intelligence to it."
*/
/*	if(user.mind.has_antag_datum(ANTAG_DATUM_VASSAL)
	. += {"<span class='cult'>This is the vassal rack, which allows your master to thrall crewmembers into his minions.\n
	Aid your master in bringing their victims here and keeping them secure.\n
	You can secure victims to the vassal rack by click dragging the victim onto the rack while it is secured</span>"} */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///obj/structure/bloodsucker/candelabrum/is_hot() // candle.dm
/*	if(user.mind.has_antag_datum(ANTAG_DATUM_VASSAL)
		. += {"<span class='cult'>This is a magical candle which drains at the sanity of the fools who havent yet accepted your master, as long as it is active.\n
		You can turn it on and off by clicking on it while you are next to it</span>"} */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   OTHER THINGS TO USE: HUMAN BLOOD. /obj/effect/decal/cleanable/blood
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\objects\bloodsucker_lair.dm. ----------------------
// Created by claiming a Coffin.
// 		THINGS TO SPAWN:
//
//	/obj/effect/decal/cleanable/cobweb && /obj/effect/decal/cleanable/cobweb/cobweb2
//	/obj/effect/decal/cleanable/generic
//	/obj/effect/decal/cleanable/dirt/dust <-- Pretty cool, just stains the tile itself.
//	/obj/effect/decal/cleanable/blood/old
/*
/area/
	// All coffins assigned to this area
	var/list/obj/structure/closet/crate/laircoffins = new list()

// Called by Coffin when an area is claimed as a vamp's lair
/area/proc/ClaimAsLair(/obj/structure/closet/crate/inClaimant)
	set waitfor = FALSE // Don't make on_gain() wait for this function to finish. This lets this code run on the side.

	laircoffins += laircoffins
	sleep()

	// Cancel!
	if (laircoffins.len == 0)
		return
		*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\brawn.dm. ----------------------
/* Doesnt work
	// Destroy Straightjacket
	if(ishuman(owner))
		var/mob/living/carbon/human/user_H = owner
		if(user_H.wear_suit && user_H.wear_suit.breakouttime)
			var/obj/item/clothing/suit/straight_jacket/S = user_H.get_item_by_slot(ITEM_SLOT_ICLOTHING)
			if(istype(S))
				user_C.visible_message("<span class='warning'>[user_C] attempts to remove [S]!</span>", \
						 			"<span class='warning'>You rip through [S] like it's nothing!</span>")
				user_C.clear_cuffs(S,TRUE)
				playsound(get_turf(usr), 'sound/effects/grillehit.ogg', 80, 1, -1)
				return TRUE */
/* Doesnt work
/datum/action/bloodsucker/targeted/brawn/proc/CheckBreakLocker()
	if(!istype(owner.loc, /obj/structure/closet))
		return FALSE
		playsound(get_turf(owner), 'sound/machines/airlock_alien_prying.ogg', 40, 1, -1)
		if(do_mob(owner ,target, 25))
			var/obj/structure/closet/C = owner.loc
			to_chat(owner, "<span class='notice'>You prepare to tear open the [C].</span>")
			owner.do_attack_animation(C, ATTACK_EFFECT_SMASH)
			playsound(get_turf(C), 'sound/effects/bang.ogg', 30, 1, -1)
			C.bust_open()
			return TRUE
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\cloak.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\feed.dm. ----------------------
// If I'm not grabbing someone, find me someone nearby.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\fortitude.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\go_home.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\haste.dm. ----------------------
// Level 1: Speed to location
// Level 2: Dodge Bullets
// Level 3: Stun People Passed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\lunge.dm. ----------------------
//Without this, the leap component would get removed too early, causing the normal crash into effects.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\masquerade.dm. ----------------------
// 		WITHOUT THIS POWER:
//
//	- Mid-Blood: SHOW AS PALE
//	- Low-Blood: SHOW AS DEAD
//	- No Heartbeat
//  - Examine shows actual blood
//	- Thermal homeostasis (ColdBlooded)
// 		WITH THIS POWER:
//	- Normal body temp -- remove Cold Blooded (return on deactivate)
//	-
// NOTE: Firing off vulgar powers disables your Masquerade!
/*/datum/action/bloodsucker/masquerade/CheckCanUse(display_error)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\mesmerize.dm. ----------------------
//	* MEZMERIZE
//		LOVE:		Target falls in love with you. Being harmed directly causes them harm if they see it?
//		STAY:		Target will do everything they can to stand in the same place.
//		FOLLOW:		Target follows you, spouting random phrases from their history (or maybe Polly's or NPC's vocab?)
//		ATTACK:		Target finds a nearby non-Bloodsucker victim to attack.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\recuperate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\trespass.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\bloodsucker\powers\veil.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\blood_contract\blood_contract.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\brainwashing\brainwashing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\brother\brother.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\cellular_emporium.dm. ----------------------
// cellular emporium
// The place where changelings go to buy their biological weaponry.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\changeling.dm. ----------------------
/// Helper to format the text that gets thrown onto the chem hud element.
//Called in life()
// Profile
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\changeling_power.dm. ----------------------
/*
 * Don't use the apostrophe in name or desc. Causes script errors.//probably no longer true
 */
/*
changeling code now relies on on_purchase to grant powers.
if you override it, MAKE SURE you call parent or it will not be usable
the same goes for Remove(). if you override Remove(), call parent or else your power wont be removed on respec
*/
//Fairly important to remember to return TRUE on success >.<
//used in /mob/Stat()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\absorb.dm. ----------------------
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\adrenaline.dm. ----------------------
//Recover from stuns.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\augmented_eyesight.dm. ----------------------
//Augmented Eyesight: Gives you X-ray vision or protection from flashes. Also, high DNA cost because of how powerful it is.
//Possible todo: make a custom message for directing a penlight/flashlight at the eyes - not sure what would display though.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\biodegrade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\chameleon_skin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\digitalcamo.dm. ----------------------
//Prevents AIs tracking you but makes you easily detectable to the human-eye.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\fakedeath.dm. ----------------------
//Fake our own death and fully heal. You will appear to be dead but regenerate fully after a short delay.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\fleshmend.dm. ----------------------
//Starts healing you every second for 10 seconds.
//Can be used whilst unconscious.
//Check buffs.dm for the fleshmend status effect code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\headcrab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\hivemind.dm. ----------------------
//HIVEMIND COMMUNICATION (:g)
// HIVE MIND UPLOAD/DOWNLOAD DNA
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\humanform.dm. ----------------------
//Transform into a human.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\lesserform.dm. ----------------------
//Transform into a monkey.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\linglink.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\mimic_voice.dm. ----------------------
// Fake Voice
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\mutations.dm. ----------------------
/*
	Changeling Mutations! ~By Miauw (ALL OF IT :V)
	Contains:
		Arm Blade
		Space Suit
		Shield
		Armor
		Tentacles
	Hatterhat Additions:
		claws! (glove slot)
		jagged (thieves') claws
		bone gauntlets for punching dudes
*/
//Parent to shields and blades because muh copypasted code.
//Parent to space suits and armor.
//checks if we already have an organic suit and casts it off.
//fancy headers yo
/***************************************\
|***************ARM BLADE***************|
\***************************************/
/***************************************\
|***********COMBAT TENTACLES*************|
\***************************************/
/***************************************\
|****************SHIELD*****************|
\***************************************/
/***************************************\
|*********SPACE SUIT + HELMET***********|
\***************************************/
/***************************************\
|*****************ARMOR*****************|
\***************************************/
/***************************************\
|*****************CLAWS*****************|
\***************************************/
//checks if we already have claws and casts it off
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\panacea.dm. ----------------------
//Heals the things that the other regenerative abilities don't.
//buffs.dm has the code for anatomic panacea
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\pheromone_receptors.dm. ----------------------
//Modified IA pinpointer - Points to the NEAREST changeling, but will only get you within a few tiles of the target.
//You'll still have to rely on intuition and observation to make the identification.  Lings can 'hide' in public places.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\regenerate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\shriek.dm. ----------------------
//A flashy ability, good for crowd control and sowing chaos.
//A flashy ability, good for crowd control and sowing chaos.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\spiders.dm. ----------------------
//Makes some spiderlings. Good for setting traps and causing general trouble.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\strained_muscles.dm. ----------------------
//Strained Muscles: Temporary speed boost at the cost of rapid damage
//Limited because of hardsuits and such; ideally, used for a quick getaway
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\tiny_prick.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\changeling\powers\transform.dm. ----------------------
//Change our DNA to that of somebody we've absorbed.
/**
 * Gives a changeling a list of all possible dnas in their profiles to choose from and returns profile containing their chosen dna
 */
/**
 * Checks if we are allowed to interact with a radial menu
 *
 * Arguments:
 * * user The carbon mob interacting with the menu
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clockcult.dm. ----------------------
//CLOCKCULT PROOF OF CONCEPT
//I have no idea where to put this so I'm leaving it here. Loads reebe. Only one reebe can exist, so it's checked via a global var.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effect.dm. ----------------------
//The base clockwork effect. Can have an alternate desc and will show up in the list of clockwork objects.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_item.dm. ----------------------
//The base clockwork item. Can have an alternate desc and will show up in the list of clockwork objects.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_mobs.dm. ----------------------
//The base for clockwork mobs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scripture.dm. ----------------------
/*
Tiers and Requirements

Pieces of scripture require certain follower counts, contruction value, and active caches in order to recite.
Drivers: Unlocked by default
Scripts: 35k power or one convert
Applications: 50k or three converts
Judgement 80k power or nine converts
*/
//messages for offstation scripture recital, courtesy ratvar's generals(and neovgre)
//Channeled scripture begins instantly but runs constantly
//Creates an object at the invoker's feet
//Used specifically to create construct shells.
//Uses a ranged slab ability, returning only when the ability no longer exists(ie, when interrupted) or finishes.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structure.dm. ----------------------
//The base clockwork structure. Can have an alternate desc and will show up in the list of clockwork objects.
//for the ark and Ratvar
//the base clockwork machinery, which is not actually machines, but happens to use power
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\city_of_cogs_rift.dm. ----------------------
//These spawn across the station when the Ark activates. Anyone can walk through one to teleport to Reebe.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\clock_overlay.dm. ----------------------
//an "overlay" used by clockwork walls and floors to appear normal to mesons.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\clock_sigils.dm. ----------------------
//Sigils: Rune-like markings on the ground with various effects.
//Sigil of Transgression: Stuns the first non-servant to walk on it and flashes all nearby non_servants. Nar'Sian cultists are damaged and knocked down for a longer time
//Sigil of Submission: After a short time, converts any non-servant standing on it. Knocks down and silences them for five seconds afterwards.
//Sigil of Transmission: Serves as an access point for powered structures.
//Vitality Matrix: Drains health from non-servants to heal or even revive servants.
//as long as they're still on the sigil and are either not a servant or they're a servant AND it has remaining vitality
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\general_markers.dm. ----------------------
//massive markers for Revenant and Judgement scripture.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\servant_blocker.dm. ----------------------
//Marks the point at which "no man's land" begins on Reebe. Servants can't pass beyond this point in any way.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_effects\spatial_gateway.dm. ----------------------
//Spatial gateway: A usually one-way rift to another location.
//set up a gateway with another gateway
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//This proc creates and sets up a gateway from invoker input.
//Stable Gateway: Used to travel to and from reebe without any further powercost. Needs a clockwork obilisk to keep active, but stays active as long as it is not deactivated via an null rod or a slab, or the obilisk is destroyed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\clock_powerdrain.dm. ----------------------
/*
horrifying power drain proc made for clockcult's power drain in lieu of six istypes or six for(x in view) loops
args:
clockcult_user: If the user / source has to do with clockcult stuff
drain_weapons: If this drains weaponry, such as batons and guns
recursive: If this recurses through mob / storage contents. ONLY USE THIS IF IT'S NOT CALLED TOO FREQUENTLY, or I'm not liable for any lag / functional issues caused
drain_amount: How much is drained by default; Influenced by a multiplier on most things depending on how much power they usually hold.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\clock_rites.dm. ----------------------
//This file is for clock rites, mainly used by the Sigil of Rites in clock_sigils.dm
//The rites themselves are in this file to prevent bloating the other file too much, aswell as for easier access
//The base clockwork rite. This should never be visible
//Adds a organ or cybernetic implant to a servant without the need for surgery. Cannot be used with brains for.. reasons.
//Heals all wounds (not damage) on the target, causing toxloss proportional to amount of wounds healed. 10 damage per wound.
//Summons a brass claw implant on the sigil, which can extend a claw that benefits from repeatedly attacking a single target. Can only be cast a limited amount of times.
//summons a soul vessel, which is the clockwork cult version of a soul shard. It acts like a posibrain and, as long as the target has a brain, a soul shard.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\component_helpers.dm. ----------------------
//returns a component spanclass from a component id
//returns a component color from a component id, but with brighter colors for the darkest
//returns a component color from a component id
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\fabrication_helpers.dm. ----------------------
//For the clockwork fabricator, this proc exists to make it easy to customize what the fabricator does when hitting something.
//if a valid target, returns an associated list in this format;
//list("operation_time" = 15, "new_obj_type" = /obj/structure/window/reinforced/clockwork, "power_cost" = 5, "spawn_dir" = dir, "dir_in_new" = TRUE)
//otherwise, return literally any non-list thing but preferably FALSE
//returning TRUE won't produce the "cannot be fabricated" message and will still prevent fabrication
//Turf conversion
//False wall conversion
//Metal conversion
//Brass directly to power
//Airlock conversion
//Table conversion
//Window conversion
//Windoor conversion
//Grille conversion
//Lattice conversion
//Girder conversion
//Hitting a clockwork structure will try to repair it.
//Fabricator mob heal proc, to avoid as much copypaste as possible.
//Hitting a ratvar'd silicon will also try to repair it.
//Same with clockwork mobs.
//Cogscarabs get special interaction because they're drones and have innate self-heals/revives.
//Convert shards and gear bits directly to power
// Winter coat
//tools
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\hierophant_network.dm. ----------------------
//Sends a string to all servants and optionally ghosts, who will get a follow link to whatever is provided as the target.
//Sends a titled message from a mob to all servants of ratvar and ghosts.
//Hierophant Network action, allows a servant with it to communicate to other servants.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\power_helpers.dm. ----------------------
//Helper procs for clockwork power, used by structures and items and that kind of jazz.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\ratvarian_language.dm. ----------------------
/*
The Ratvarian Language
	In the lore of the Servants of Ratvar, the Ratvarian tongue is a timeless language and full of power. It sounds like gibberish, much like Nar'Sie's language, but is in fact derived from
aforementioned language, and may induce miracles when spoken in the correct way with an amplifying tool (similar to runes used by the Nar'Sian cult).

	While the canon states that the language of Ratvar and his servants is incomprehensible to the unenlightened as it is a derivative of the most ancient known language, in reality it is
actually very simple. To translate a plain English sentence to Ratvar's tongue, simply move all of the letters thirteen places ahead, starting from "a" if the end of the alphabet is reached.
This cipher is known as "rot13" for "rotate 13 places" and there are many sites online that allow instant translation between English and rot13 - one of the benefits is that moving the translated
sentence thirteen places ahead changes it right back to plain English.

	There are, however, a few parts of the Ratvarian tongue that aren't typical and are implemented for fluff reasons. Some words may have graves, or hyphens (prefix and postfix), making the plain
English translation apparent but disjoined (for instance, "Orubyq zl-cbjre!" translates directly to "Behold my-power!") although this can be ignored without impacting overall quality. When
translating from Ratvar's tongue to plain English, simply remove the disjointments and use the finished sentence. This would make "Orubyq zl-cbjre!" into "Behold my power!" after removing the
abnormal spacing, hyphens, and grave accents.

List of nuances:
- Any time the WORD "of" occurs, it is linked to the previous word by a hyphen. (i.e. "V nz-bs Ratvar." directly translates to "I am-of Ratvar.")
- Any time "th", followed by any two letters occurs, you add a grave (`) between those two letters, i.e; "Thi`s"
- In the same vein, any time "ti", followed by one letter occurs, you add a grave (`) between "i" and the letter, i.e; "Ti`me"
- Whereever "te" or "et" appear and there is another letter next to the e(i.e; "m"etal, greate"r"), add a hyphen between "e" and the letter, i.e; "M-etal", "Greate-r"
- Where "gua" appears, add a hyphen between "gu" and "a", i.e "Gu-ard"
- Where the WORD "and" appears it is linked to all surrounding words by hyphens, i.e; "Sword-and-shield"
- Where the WORD "to" appears, it is linked to the following word by a hyphen, i.e; "to-use"
- Where the WORD "my" appears, it is linked to the following word by a hyphen, i.e; "my-light"
- Although "Ratvar" translates to "Engine" in English, the word "Ratvar" is used regardless of language as it is a proper noun.
 - The same rule applies to Ratvar's four generals: Nezbere (Armorer), Sevtug (Fright), Nzcrentr (Amperage), and Inath-neq (Vangu-Ard), although these words can be used in proper context if one is
   not referring to the four generals and simply using the words themselves.
*/
//Regexes used to alter english to ratvarian style
//Regexes used to remove ratvarian styling from english
//Causes the mob or AM in question to speak a message; it assumes that the message is already translated to ratvar speech using text2ratvar()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\scripture_checks.dm. ----------------------
//returns a list of scriptures and if they're unlocked or not
//reports to servants when scripture is locked or unlocked
//changes construction value
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_helpers\slab_abilities.dm. ----------------------
//The base for slab-bound/based ranged abilities
//For the Hateful Manacles scripture; applies replicant handcuffs to the target.
//For the Sentinel's Compromise scripture; heals a target servant.
//For the Volt Void scripture, fires a ray of energy at a target location
//For the Kindle scripture; stuns and mutes a target non-servant.
//For the cyborg Linked Vanguard scripture, grants you and a nearby ally Vanguard
//For the cyborg Judicial Marker scripture, places a judicial marker
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clockwork_armor.dm. ----------------------
//Clockwork armor: High melee protection but weak to lasers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clockwork_slab.dm. ----------------------
/*//this module was commented out so why wasn't this?
//Power generation
//Slab actions; Hierophant, Quickbind
//Scripture Recital
/*
 * Gets text for a certain section. "Default" is used for when you first open Recollection.
 * Current sections (make sure to update this if you add one:
 * Basics
 * Terminology
 * Components
 * Scripture
 * Power
 * Conversion
 * * what - What section?
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clockwork_weaponry.dm. ----------------------
//This is the base type for clockwork melee weapons.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_augments.dm. ----------------------
//This file is for snowflakey clock augmentations and clock-themed cybernetic implants.
//The base clockie arm implant, which only clock cultist can use unless it is emagged. THIS SHOULD NEVER ACTUALLY EXIST
//Brass claw implant. Holds the brass claw from brass_claw.dm and can extend / retract it at will.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_components.dm. ----------------------
//Components: Used in scripture.
//Shards of Alloy, suitable only as a source of power for a replica fabricator.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\construct_chassis.dm. ----------------------
//Construct shells that can be activated by ghosts.
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//Marauder armor, used to create clockwork marauders - sturdy frontline combatants that can deflect projectiles.
//Cogscarab shell, used to create cogcarabs - fragile but zippy little drones that build and maintain the base.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\integration_cog.dm. ----------------------
//Can be used on an open APC to replace its guts with clockwork variants, and begin passively siphoning power from it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\judicial_visor.dm. ----------------------
//Judicial visor: Grants the ability to smite an area and knocking down the unfaithful nearby every thirty seconds.
//Judicial marker: Created by the judicial visor. Immediately applies Belligerent and briefly knocks down, then after 3 seconds does large damage and briefly knocks down again
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\replica_fabricator.dm. ----------------------
//Replica Fabricator: Converts applicable objects to Ratvarian variants.
//A note here; return values are for if we CAN BE PUT ON A TABLE, not IF WE ARE SUCCESSFUL, unless no_table_check is TRUE
//The following three procs are heavy wizardry.
//What these procs do is they take an existing list of values, which they then modify.
//This(modifying an existing object, in this case the list) is the only way to get information OUT of a do_after callback, which this is used as.
//The fabricate check proc.
//The repair check proc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\soul_vessel.dm. ----------------------
//Soul vessel: An ancient positronic brain that serves only Ratvar.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\wraith_spectacles.dm. ----------------------
//Wraith spectacles: Grants X-ray and night vision at the eventual cost of the wearer's sight if worn too long. Nar'Sian cultists are instantly blinded.
//The effect that causes/repairs the damage the spectacles cause.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_weapons\brass_claw.dm. ----------------------
//Brass claw, an armblade-like weapon used by a clock implant. Stealthy if retracted, very obvious if active.
//Bit weaker than an armblade strength-wise but gains combo on consecutive attacks against the same target, which causes bonus damage
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_weapons\ratvarian_shield.dm. ----------------------
//Subtype of (riot) shield because of already implemented shieldbash stuff aswell as integrity and simillar things
//ratvarian shield: A shield that absorbs energy from attacks and uses it to empower its bashes with remendous force. It is also quite resistant to damage, though less so against lasers and energy weaponry.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_weapons\ratvarian_spear.dm. ----------------------
//Ratvarian spear: A relatively fragile spear from the Celestial Derelict. Deals extreme damage to silicons and enemy cultists, but doesn't last long when summoned.
//A very short, very effective parry that counts on you predicting when the enemy will attack.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_items\clock_weapons\_call_weapon.dm. ----------------------
//This is the innate action for "binding" and calling weapons to yourself. These weapons can appear and disappear at will.
//You can invoke a cooldown period by calling "weapon_reset(cooldown in deciseconds)." By default, this only applies to dismissing weapons.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_mobs\clockwork_guardian.dm. ----------------------
//Clockwork guardian: Slow but with high damage, resides inside of a servant. Created via the Memory Allocation scripture.
//DAMAGE and FATIGUE
//ATTACKING, BLOCKING, and COUNTERING
//COMMUNICATION and EMERGENCE
/*
/mob/living/simple_animal/hostile/clockwork/guardian/handle_inherent_channels(message, message_mode)
	if(host && (is_in_host() || message_mode == MODE_BINARY))
		guardian_comms(message)
		return TRUE
	return ..()
*/
//HOST ACTIONS
//Summon guardian action: Calls forth or recalls your guardian
//Linked Minds action: talks to your guardian
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_mobs\clockwork_marauder.dm. ----------------------
//Clockwork marauder: A well-rounded frontline construct. Only one can exist for every two human servants.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_mobs\_eminence.dm. ----------------------
//Helper proc to get an Eminence mob if it exists
//The Eminence is a unique mob that functions like the leader of the cult. It's incorporeal but can interact with the world in several ways.
//Eminence actions below this point
//Lists available powers
/*

//Returns to the Ark - Commented out and replaced with obelisk_jump
/datum/action/innate/eminence/ark_jump
	name = "Return to Ark"
	desc = "Warps you to the Ark."
	button_icon_state = "Abscond"

/datum/action/innate/eminence/ark_jump/Activate()
	var/obj/structure/destructible/clockwork/massive/celestial_gateway/G = GLOB.ark_of_the_clockwork_justiciar
	if(G)
		owner.forceMove(get_turf(G))
		owner.playsound_local(owner, 'sound/magic/magic_missile.ogg', 50, TRUE)
		flash_color(owner, flash_color = "#AF0AAF", flash_time = 25)
	else
		to_chat(owner, "<span class='warning '>There is no Ark!</span>")
*/
//Warps to a chosen Obelisk
//Warps to the Station
//A quick-use button for recalling the servants to the Ark
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scriptures\scripture_applications.dm. ----------------------
//////////////////
// APPLICATIONS // For various structures and base building, as well as advanced power generation.
//////////////////
//Sigil of Transmission: Creates a sigil of transmission that can drain and store power for clockwork structures.
//Prolonging Prism: Creates a prism that will delay the shuttle at a power cost
//Mania Motor: Creates a malevolent transmitter that will broadcast the whispers of Sevtug into the minds of nearby nonservants, causing a variety of mental effects at a power cost.
//Clockwork Obelisk: Creates a powerful obelisk that can be used to broadcast messages or open a gateway to any servant or clockwork obelisk at a power cost.
//Memory Allocation: Finds a willing ghost and makes them into a clockwork guardian for the invoker.
//Clockwork Marauder: Creates a construct shell for a clockwork marauder, a well-rounded frontline fighter.
//Summon Neovgre: Summon a very powerful combat mech that explodes when destroyed for massive damage.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scriptures\scripture_cyborg.dm. ----------------------
/////////////////
// CYBORG ONLY // Cyborgs only, fleshed ones.
/////////////////
//Linked Vanguard: grants Vanguard to the invoker and a target
//Judicial Marker: places a judicial marker at a target location
//These are exactly the same as the default scriptures, but cyborgs don't need a second person to create them
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scriptures\scripture_drivers.dm. ----------------------
/////////////
// DRIVERS // Starter spells
/////////////
//Stargazer: Creates a stargazer, a cheap power generator that utilizes starlight.
//Integration Cog: Creates an integration cog that can be inserted into APCs to passively siphon power.
//Sigil of Transgression: Creates a sigil of transgression, which briefly stuns and applies Belligerent to the first non-servant to cross it.
//Sigil of Submission: Creates a sigil of submission, which converts one heretic above it after a delay.
//Kindle: Charges the slab with blazing energy. It can be released to stun and silence a target.
//Hateful Manacles: Applies restraints from melee over several seconds. The restraints function like handcuffs and break on removal.
//Belligerent: Channeled for up to fifteen times over thirty seconds. Forces non-servants that can hear the chant to walk, doing minor damage. Nar-Sian cultists are burned.
//Vanguard: Provides twenty seconds of greatly increased stamina regeneration and stun immunity. At the end of the twenty seconds, 25% of all stuns absorbed aswell as 50% of healed stamloss are applied to the invoker.
//Sentinel's Compromise: Allows the invoker to select a nearby servant and convert their brute, burn, and oxygen damage into half as much toxin damage.
/*//commenting this out until its reworked to actually do random teleports
//Abscond: Used to return to Reebe.
//Replicant: Creates a new clockwork slab.
//Wraith Spectacles: Creates a pair of wraith spectacles, which grant xray vision but damage vision slowly.
//Spatial Gateway: Allows the invoker to teleport themselves and any nearby allies to a conscious servant or clockwork obelisk.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scriptures\scripture_judgement.dm. ----------------------
///////////////
// JUDGEMENT // For the big game changing things. TODO: Summonable generals, just need mob sprites for them.
///////////////
//Ark of the Clockwork Justiciar: Creates a Gateway to the Celestial Derelict, summoning ratvar.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_scriptures\scripture_scripts.dm. ----------------------
/////////////
// SCRIPTS // Various miscellanious spells for offense/defense/construction.
/////////////
//Replica Fabricator: Creates a replica fabricator, used to convert objects and repair clockwork structures.
//Ocular Warden: Creates an ocular warden, which defends a small area near it.
//Vitality Matrix: Creates a sigil which will drain health from nonservants and can use that health to heal or even revive servants.
//Sigil of Rites: Creates a sigil that allows to perform certain rites on it. More information on these can be found in clock_rites.dm, they usually require power, materials and sometimes a target.
//Judicial Visor: Creates a judicial visor, which can smite an area.
//Nezbere's shield: Creates a ratvarian shield which absorbs attacks, see ratvarian_shield.dm for details.
//Clockwork Armaments: Grants the invoker the ability to call forth a Ratvarian spear and clockwork armor.
//Clockwork Armaments: Equips a set of clockwork armor. Three-minute cooldown.
//Call Spear: Calls forth a powerful Ratvarian spear.
//Mending Mantra: Channeled for up to ten times over twenty seconds to repair structures and heal allies
//Volt Blaster: Channeled for up to five times over ten seconds to fire up to five rays of energy at target locations.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\ark_of_the_clockwork_justicar.dm. ----------------------
//The gateway to Reebe, from which Ratvar emerges.
//Converts nearby turfs into their clockwork equivalent, with ever-increasing range the closer the ark is to summoning Ratvar
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//the actual appearance of the Ark of the Clockwork Justicar; an object so the edges of the gate can be clicked through.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\clockwork_obelisk.dm. ----------------------
//Clockwork Obelisk: Can broadcast a message at a small power cost or outright open a spatial gateway at a massive power cost.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\eminence_spire.dm. ----------------------
//Used to nominate oneself or ghosts for the role of Eminence.
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\heralds_beacon.dm. ----------------------
//Used to "declare war" against the station. The servants' equipment will be permanently supercharged, and the Ark given extra time to prepare.
//This will send an announcement to the station, meaning that they will be warned very early in advance about the impending attack.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\mania_motor.dm. ----------------------
//Mania Motor: A pair of antenna that, while active, cause a variety of negative mental effects in nearby human mobs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\ocular_warden.dm. ----------------------
//Ocular warden: Low-damage, low-range turret. Deals constant damage to whoever it makes eye contact with.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\prolonging_prism.dm. ----------------------
//Prolonging Prism: A prism that consumes power to delay the shuttle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\ratvar_the_clockwork_justicar.dm. ----------------------
//Ratvar himself. Impossible to damage by most standard means, and converts nearby objects and players into clockwork variants and Servants.
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//Put me in Reebe, will you? Ratvar has found and is going to do a hecking murder on Nar'Sie
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\reflector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\stargazer.dm. ----------------------
//Stargazer: A very fragile but cheap generator that creates power from starlight.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\taunting_trail.dm. ----------------------
//Used by the Taunting Tirade scripture as a trail.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\wall_gear.dm. ----------------------
//A massive gear, effectively a girder for clocks.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\_trap_object.dm. ----------------------
//No, not that kind.
//These objects send signals to normal traps to activate
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\traps\brass_skewer.dm. ----------------------
//Non-servants standing over this will get spikes through the feet, immobilizing them until they're freed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\traps\power_null.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\traps\steam_vent.dm. ----------------------
//This doesn't function like a "trap" in of itself, but obscures vision when active.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\trap_triggers\lever.dm. ----------------------
//Lever: Do I really need to explain this?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\trap_triggers\pressure_sensor.dm. ----------------------
//Pressure sensor: Activates when stepped on.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\trap_triggers\pressure_sensor_mech.dm. ----------------------
//Mech sensor: Activates when stepped on by a mech
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\clockcult\clock_structures\trap_triggers\repeater.dm. ----------------------
//Repeater: Activates every second.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\collector\collector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\blood_magic.dm. ----------------------
//Cult Blood Spells
// The "magic hand" items
//Stun
//Teleportation
//Shackles
//Construction: Creates a construct shell out of 50 metal sheets, or converts plasteel into runed metal
//Armor: Gives the target a basic cultist combat loadout
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\cult.dm. ----------------------
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\cult_comms.dm. ----------------------
// Contains cult communion, guide, and cult master abilities
//////// ELDRITCH PULSE /////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\cult_items.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\cult_structures.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\ritual.dm. ----------------------
/*

This file contains the cult dagger and rune list code

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\runes.dm. ----------------------
/*

This file contains runes.
Runes are used by the cult to cause many different effects and are paramount to their success.
They are drawn with a ritual dagger in blood, and are distinguishable to cultists and normal crew by examining.
Fake runes can be drawn in crayon to fool people.
Runes can either be invoked by one's self or with many different cultists. Each rune has a specific incantation that the cultists will say when invoking it.


*/
/*

There are a few different procs each rune runs through when a cultist activates it.
can_invoke() is called when a cultist activates the rune with an empty hand. If there are multiple cultists, this rune determines if the required amount is nearby.
invoke() is the rune's actual effects.
fail_invoke() is called when the rune fails, via not enough people around or otherwise. Typically this just has a generic 'fizzle' effect.
structure_check() searches for nearby cultist structures required for the invocation. Proper structures are pylons, forges, archives, and altars.

*/
//Malformed Rune: This forms if a rune is not drawn correctly. Invoking it does nothing but hurt the user.
//Rite of Offering: Converts or sacrifices a target.
//Ritual of Dimensional Rending: Calls forth the avatar of Nar'Sie upon the station.
//Rite of Resurrection: Requires a dead or inactive cultist. When reviving the dead, you can only perform one revival for every sacrifice your cult has carried out.
//Rite of the Corporeal Shield: When invoked, becomes solid and cannot be passed. Invoke again to undo.
//Rite of Joined Souls: Summons a single cultist.
//Rite of Boiling Blood: Deals extremely high amounts of damage to non-cultists nearby
//Rite of Spectral Manifestation: Summons a ghost on top of the rune as a cultist human with no items. User must stand on the rune at all times, and takes damage for each summoned ghost.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\cult\rune_spawn_action.dm. ----------------------
//after a delay, creates a rune below you. for constructs creating runes.
//teleport rune
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\devil.dm. ----------------------
//These are also used in the codex gigas, so let's declare them globally.
//A simple super light weight datum for the codex gigas.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\devil_helpers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\imp\imp.dm. ----------------------
//////////////////The Monster
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\sintouched\objectives.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\sintouched\sintouched.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\true_devil\inventory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\devil\true_devil\_true_devil.dm. ----------------------
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\disease\disease_abilities.dm. ----------------------
/*
Abilities that can be purchased by disease mobs. Most are just passive symptoms that will be
added to their disease, but some are active abilites that affect only the target the overmind
is currently following.
*/
//these sybtypes are for conveniently separating the different categories, they have no unique code.
//active abilities and their associated actions
/*******************BASE SYMPTOM TYPES*******************/
// cost is for convenience and can be changed. If you're changing req_tot_points then don't use the subtype...
//healing costs more so you have to techswitch from naughty disease otherwise we'd have friendly disease for easy greentext (no fun!)
/******MILD******/
/******MEDIUM******/
/******POWERFUL******/
/****HEALING SUBTYPE****/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\disease\disease_datum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\disease\disease_disease.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\disease\disease_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\disease\disease_mob.dm. ----------------------
/*
A mob of type /mob/camera/disease is an overmind coordinating at least one instance of /datum/disease/advance/sentient_disease
that has infected a host. All instances in a host will be synchronized with the stats of the overmind's disease_template. Any
samples outside of a host will retain the stats they had when they left the host, but infecting a new host will cause
the new instance inside the host to be updated to the template's stats.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_antag.dm. ----------------------
///What happens to the heretic once he dies, used to remove any custom perks
////////////////
// Knowledge //
////////////////
////////////////
// Objectives //
////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_book.dm. ----------------------
///Gives you a charge and destroys a corresponding influence
///Draws a rune on a selected turf
///Removes runes from the selected turf
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_effects.dm. ----------------------
/**
 * #Reality smash tracker
 *
 * Stupid fucking list holder, DONT create new ones, it will break the game, this is automnatically created whenever eldritch cultists are created.
 *
 * Tracks relevant data, generates relevant data, useful tool
 */
/**
 * Automatically fixes the target and smash network
 *
 * Fixes any bugs that are caused by late Generate() or exchanging clients
 */
/**
 * Generates a set amount of reality smashes based on the N value
 *
 * Automatically creates more reality smashes
 */
/**
*CIT CHANGE
*
*Creates a singular reality smash
*Credit to slimelust
*/
/**
 * Adds a mind to the list of people that can see the reality smashes
 *
 * Use this whenever you want to add someone to the list
 */
/**
 * Removes a mind from the list of people that can see the reality smashes
 *
 * Use this whenever you want to remove someone from the list
 */
///Makes this obj appear out of nothing
///Makes the mind able to see this effect
///Makes the mind not able to see this effect
///Generates random name
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_items.dm. ----------------------
///Action of carving runes, gives you the ability to click on floor and choose a rune of your need.
///The effect of the potion if it has any special one, in general try not to override this and utilize the status_effect var to make custom effects.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_knowledge.dm. ----------------------
/**
  * #Eldritch Knowledge
  *
  * Datum that makes eldritch cultist interesting.
  *
  * Eldritch knowledge aren't instantiated anywhere roundstart, and are initalized and destroyed as the round goes on.
  */
/**
  * What happens when this is assigned to an antag datum
  *
  * This proc is called whenever a new eldritch knowledge is added to an antag datum
  */
/**
  * What happens when you loose this
  *
  * This proc is called whenever antagonist looses his antag datum, put cleanup code in here
  */
/**
  * What happens every tick
  *
  * This proc is called on SSprocess in eldritch cultist antag datum. SSprocess happens roughly every second
  */
/**
  * Special check for recipes
  *
  * If you are adding a more complex summoning or something that requires a special check that parses through all the atoms in an area override this.
  */
/**
  * A proc that handles the code when the mob dies
  *
  * This proc is primarily used to end any soundloops when the heretic dies
  */
/**
  * What happens once the recipe is succesfully finished
  *
  * By default this proc creates atoms from result_atoms list. Override this is you want something else to happen.
  */
/**
  * Used atom cleanup
  *
  * Overide this proc if you dont want ALL ATOMS to be destroyed. useful in many situations.
  */
/**
  * Mansus grasp act
  *
  * Gives addtional effects to mansus grasp spell
  */
/**
  * Sickly blade act
  *
  * Gives addtional effects to sickly blade weapon
  */
/**
  * Sickly blade distant act
  *
  * Same as [/datum/eldritch_knowledge/proc/on_eldritch_blade] but works on targets that are not in proximity to you.
  */
//////////////
///Subtypes///
//////////////
//Ascension knowledge
///////////////
///Base lore///
///////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_magic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_monster_antag.dm. ----------------------
///Tracking reasons
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\eldritch_structures.dm. ----------------------
///Proc that eats the active limb of the victim
///Proc that sets the owner
//this trap can only get destroyed by rune carving knife or nullrod
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\knowledge\ash_lore.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\knowledge\flesh_lore.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\knowledge\rust_lore.dm. ----------------------
/**
  * #Rust spread datum
  *
  * Simple datum that automatically spreads rust around it
  *
  * Simple implementation of automatically growing entity
  */
/**
  * Compile turfs
  *
  * Recreates all edge_turfs as well as normal turfs.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\eldritch_cult\knowledge\void_lore.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\ert\ert.dm. ----------------------
//Both ERT and DS are handled by the same datums since they mostly differ in equipment in objective.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\fugitive\fugitive.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\fugitive\fugitive_outfits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\fugitive\fugitive_ship.dm. ----------------------
//works similar to the experiment machine (experiment.dm) except it just holds more and more prisoners
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\fugitive\hunter.dm. ----------------------
//The hunters!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\cellphone.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\gang.dm. ----------------------
/// Gives a gangster their equipment in their backpack and / or pockets.
/// Allow gangs to have custom naming schemes for their gangsters.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\handler.dm. ----------------------
///Forces the Families theme to be the one in this variable via variable editing. Used for debugging.
/**
 * # Families gamemode / dynamic ruleset handler
 *
 * A special datum used by the families gamemode and dynamic rulesets to centralize code. "Family" and "gang" used interchangeably in code.
 *
 * This datum centralizes code used for the families gamemode / dynamic rulesets. Families incorporates a significant
 * amount of unique processing; without this datum, that could would be duplicated. To ensure the maintainability
 * of the families gamemode / rulesets, the code was moved to this datum. The gamemode / rulesets instance this
 * datum, pass it lists (lists are passed by reference; removing candidates here removes candidates in the gamemode),
 * and call its procs. Additionally, the families antagonist datum and families induction package also
 * contain vars that reference this datum, allowing for new families / family members to add themselves
 * to this datum's lists thereof (primarily used for point calculation). Despite this, the basic team mechanics
 * themselves should function regardless of this datum's instantiation, should a player have the gang or cop
 * antagonist datum added to them through methods external to the families gamemode / rulesets.
 *
 */
/**
 * Sets antag_candidates and restricted_jobs.
 *
 * Sets the antag_candidates and restricted_jobs lists to the equivalent
 * lists of its instantiating game_mode / dynamic_ruleset datum. As lists
 * are passed by reference, the variable set in this datum and the passed list
 * list used to set it are literally the same; changes to one affect the other.
 * Like all New() procs, called when the datum is first instantiated.
 * There's an annoying caveat here, though -- dynamic rulesets don't have
 * lists of minds for candidates, they have lists of mobs. Ghost mobs, before
 * the round has started. But we still want to preserve the structure of the candidates
 * list by not duplicating it and making sure to remove the candidates as we use them.
 * So there's a little bit of boilerplate throughout to preserve the sanctity of this reference.
 * Arguments:
 * * given_candidates - The antag_candidates list or equivalent of the datum instantiating this one.
 * * revised_restricted - The restricted_jobs list or equivalent of the datum instantiating this one.
 */
/**
 * pre_setup() or pre_execute() equivalent.
 *
 * This proc is always called externally, by the instantiating game_mode / dynamic_ruleset.
 * This is done during the pre_setup() or pre_execute() phase, after first instantiation
 * and the modification of gangs_to_generate, gang_balance_cap, and midround_ruleset.
 * It is intended to take the place of the code that would normally occupy the pre_setup()
 * or pre_execute() proc, were the code localized to the game_mode or dynamic_ruleset datum respectively
 * as opposed to this handler. As such, it picks players to be chosen for starting familiy members
 * or undercover cops prior to assignment to jobs. Sets start_time, default end_time,
 * and the current value of deaths_during_shift, to ensure the wanted level only cares about
 * the deaths since this proc has been called.
 * Takes no arguments.
 */
/**
 * post_setup() or execute() equivalent.
 *
 * This proc is always called externally, by the instantiating game_mode / dynamic_ruleset.
 * This is done during the post_setup() or execute() phase, after the pre_setup() / pre_execute() phase.
 * It is intended to take the place of the code that would normally occupy the pre_setup()
 * or pre_execute() proc. As such, it ensures that all prospective starting family members /
 * undercover cops are eligible, and picks replacements if there were ineligible cops / family members.
 * It then assigns gear to the finalized family members and undercover cops, adding them to its lists,
 * and sets the families announcement proc (that does the announcing) to trigger in five minutes.
 * Additionally, if given the argument TRUE, it will return FALSE if there are no eligible starting family members.
 * This is only to be done if the instantiating datum is a dynamic_ruleset, as these require returns
 * while a game_mode is not expected to return early during this phase.
 * Arguments:
 * * return_if_no_gangs - Boolean that determines if the proc should return FALSE should it find no eligible family members. Should be used for dynamic only.
 */
/**
 * process() or rule_process() equivalent.
 *
 * This proc is always called externally, by the instantiating game_mode / dynamic_ruleset.
 * This is done during the process() or rule_process() phase, after post_setup() or
 * execute() and at regular intervals thereafter. process() and rule_process() are optional
 * for a game_mode / dynamic_ruleset, but are important for this gamemode. It is of central
 * importance to the gamemode's flow, calculating wanted level updates, family point gain,
 * and announcing + executing the arrival of the space cops, achieved through calling internal procs.
 * Takes no arguments.
 */
/**
 * set_round_result() or round_result() equivalent.
 *
 * This proc is always called externally, by the instantiating game_mode / dynamic_ruleset.
 * This is done by the set_round_result() or round_result() procs, at roundend.
 * Sets the ticker subsystem to the correct result based off of the relative populations
 * of space cops and family members.
 * Takes no arguments.
 */
/// Internal. Announces the presence of families to the entire station and sets sent_announcement to true to allow other checks to occur.
/// Internal. Checks if our wanted level has changed; calls update_wanted_level. Only updates wanted level post the initial announcement and until the cops show up. After that, it's locked.
/// Internal. Updates the icon states for everyone, and calls procs that send out announcements / change the end_time if the wanted level has changed.
/// Internal. Updates the end_time and sends out an announcement if the wanted level has increased. Called by update_wanted_level().
/// Internal. Updates the end_time and sends out an announcement if the wanted level has decreased. Called by update_wanted_level().
/// Internal. Polls ghosts and sends in a team of space cops according to the wanted level, accompanied by an announcement. Will let the shuttle leave 10 minutes after sending. Freezes the wanted level.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\induction_package.dm. ----------------------
/// Adds the user to the family that this package corresponds to, dispenses the free_clothes of that family, and adds them to the handler if it exists.
/// Checks if the user is trying to use the package of the family they are in, and if not, adds them to the family, with some differing processing depending on whether the user is already a family member.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\outfits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\gang\themes.dm. ----------------------
///Gang themes for the Families gamemode. Used to determine the RP theme of the round, what gangs are present, and what their objectives are.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\greentext\greentext.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\greybois\greybois.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\highlander\highlander.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\magic_servant\magic_servant.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\monkey\monkey.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\morph\morph.dm. ----------------------
//Spawn Event
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\morph\morph_antag.dm. ----------------------
//It does nothing! (Besides tracking)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nightmare\nightmare.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\clownop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\nukeop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\equipment\borgchameleon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\equipment\nuclearbomb.dm. ----------------------
/*
This is here to make the tiles around the station mininuke change when it's armed.
*/
//==========DAT FUKKEN DISK===============
/*
 * You can't accidentally eat the nuke disk, bro
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\equipment\nuclear_challenge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\nukeop\equipment\pinpointer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\official\official.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\overthrow\overthrow.dm. ----------------------
// Syndicate mutineer agents. They're agents selected by the Syndicate to take control of stations when assault teams like nuclear operatives cannot be sent.
// They sent teams made of 3 agents, of which only one is woke up at round start. The others are, lore-wise, sleeping agents and must be implanted with the converter to wake up.
// Mechanics wise, it's just 1 dude per team and he can convert maximum 2 more people of his choice, based on the implanter use var, Upon converting, the newly made guys are given access
// to a storage implant they came with when the Syndicate sent them aboard, with one random low-cost traitor item. The initial agent also has this. The only difference between
// initial agents and converted ones is that the initial agent has the items required to convert people and the AI.
// Overthrow agent. The idea is based on sleeping agents being sent as crewmembers, with one for each team that starts woken up who can also wake up others with their converter implant.
// Obviously they can just convert anyone, the idea of sleeping agents is just lore. This also explains why this antag type has no deconversion way: they're traitors. Traitors cannot be
// deconverted.
// Generates the list of possible items for the storage implant given on_gain
// Sets objectives, equips all antags with the storage implant.
// Creates the overthrow team, or sets it. The objectives are static for all the team members.
// Used to name the team at round start. If no name is passed, a syndicate themed one is given randomly.
// CLOWNMUT removal and HUD creation/being given
// The opposite
// Dynamically creates the HUD for the team if it doesn't exist already, inserting it into the global huds list, and assigns it to the user. The index is saved into a var owned by the team datum.
// Removes hud. Destroying the hud datum itself in case the team is deleted is done on team Destroy().
// Gives the storage implant with a random item. They're sleeping agents, after all.
// Equip the initial overthrow agent. Manually called in overthrow gamemode, when the initial agents are chosen. Gives uplink, AI module board and the converter.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\overthrow\overthrow_converter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\overthrow\overthrow_team.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\pirate\pirate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revenant\revenant.dm. ----------------------
//Revenants: based off of wraiths from Goon
//"Ghosts" that are invisible and move like ghosts, cannot take damage while invisible
//Can hear deadchat, but are NOT normal ghosts and do NOT have x-ray vision
//Admin-spawn or random event
//Life, Stat, Hud Updates, and Say
//Immunities
//damage, gibbing, and dying
//reveal, stun, icon updates, cast checks, and essence changing
//reforming
//Use this for effects you want to happen when a revenant throws stuff, check the TRAIT_SPOOKY_THROW if you want to know if its still being thrown
//objectives
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revenant\revenant_abilities.dm. ----------------------
//Harvest; activated ly clicking the target, will try to drain their essence.
//Toggle night vision: lets the revenant toggle its night vision
//Transmit: the revemant's only direct way to communicate. Sends a single message silently to a single mob
//Overload Light: Breaks a light that's online and sends out lightning bolts to all nearby people.
//Defile: Corrupts nearby stuff, unblesses floor tiles.
//Malfunction: Makes bad stuff happen to robots and machines.
//A note to future coders: do not replace this with an EMP because it will wreck malf AIs and everyone will hate you.
//Blight: Infects nearby humans and in general messes living stuff up.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revenant\revenant_antag.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revenant\revenant_blight.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revenant\revenant_spawn_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\revolution\revolution.dm. ----------------------
//How often to check for promotion possibility
//Bump up to head_rev
/// Checks if the revolution succeeded, and lets them know.
//blunt trauma deconversions call this through species.dm spec_attacked_by()
/// "Enemy of the Revolutionary", given to heads and security when the revolution wins
/// Checks if revs have won
/// Checks if heads have won
/// Updates the state of the world depending on if revs won or loss.
/// Returns who won, at which case this method should no longer be called.
/// If revs_win_injection_amount is passed, then that amount of threat will be added if the revs win.
/// Mutates the ticker to report that the revs have won
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\santa\santa.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\separatist\separatist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\slaughter\slaughter.dm. ----------------------
//////////////////The Monster
//The loot from killing a slaughter demon - can be consumed to allow the user to blood crawl
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\slaughter\slaughterevent.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\slaughter\slaughter_antag.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\space_dragon\space_dragon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\space_ninja\space_ninja.dm. ----------------------
/**
  * Proc that equips the space ninja outfit on a given individual.  By default this is the owner of the antagonist datum.
  *
  * Proc that equips the space ninja outfit on a given individual.  By default this is the owner of the antagonist datum.
  * Arguments:
  * * ninja - The human to receive the gear
  * * Returns a proc call on the given human which will equip them with all the gear.
  */
/**
  * Proc that adds the proper memories to the antag datum
  *
  * Proc that adds the ninja starting memories to the owner of the antagonist datum.
  */
/**
  * Proc that adds all the ninja's objectives to the antag datum.
  *
  * Proc that adds all the ninja's objectives to the antag datum.  Called when the datum is gained.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\survivalist\survivalist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\swarmer\swarmer.dm. ----------------------
////Deactivated swarmer shell////
////The Mob itself////
////CTRL CLICK FOR SWARMERS AND SWARMER_ACT()'S////
////END CTRL CLICK FOR SWARMERS////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\swarmer\swarmer_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\datum_traitor.dm. ----------------------
// needs to be refactored to base /datum/antagonist sometime..
/// Generates a complete set of traitor objectives up to the traitor objective limit, including non-generic objectives such as martyr and hijack.
/// Outputs this shift's codewords and responses to the antag's chat and copies them to their memory.
/// Proc detailing contract kit buys/completed contracts/additional info
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\syndicate_contract.dm. ----------------------
// Launch the pod to collect our victim.
// We're returning the victim
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\ai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\assassin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\freeform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\hijack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\martyr.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\subterfuge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\classes\traitor_class.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\equipment\contractor.dm. ----------------------
/// Support unit gets it's own very basic antag datum for admin logging.
/// Team for storing both the contractor and their support unit - only really for the HUD and admin logging.
// Subtract cost, and spawn if it's an item.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\equipment\Malf_Modules.dm. ----------------------
//The malf AI action subtype. All malf actions are subtypes of this.
//Framework for ranged abilities that can have different effects by left-clicking stuff.
//The actual ranged proc holder.
//The datum and interface for the malf unlock menu, which lets them choose actions to unlock.
//The base module type, which holds info about each ability.
//Doomsday Device: Starts the self-destruct timer. It can only be stopped by killing the AI completely.
//AI Turret Upgrade: Increases the health and damage of all turrets.
//Hostile Station Lockdown: Locks, bolts, and electrifies every airlock on the station. After 90 seconds, the doors reset.
//Destroy RCDs: Detonates all non-cyborg RCDs on the station.
//Unlock Mech Domination: Unlocks the ability to dominate mechs. Big shocker, right?
//Thermal Sensor Override: Unlocks the ability to disable all fire alarms from doing their job.
//Air Alarm Safety Override: Unlocks the ability to enable flooding on all air alarms.
//Overload Machine: Allows the AI to overload a machine, detonating it after a delay. Two uses per purchase.
//Override Machine: Allows the AI to override a machine, animating it into an angry, living version of itself.
//Robotic Factory: Places a large machine that converts humans that go through it into cyborgs. Unlocking this ability removes shunting.
//Blackout: Overloads a random number of lights across the station. Three uses.
//Disable Emergency Lights
//Reactivate Camera Network: Reactivates up to 30 cameras across the station.
//Upgrade Camera Network: EMP-proofs all cameras, in addition to giving them X-ray vision.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\traitor\IAA\internal_affairs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\valentines\heartbreaker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\valentines\valentine.dm. ----------------------
//Squashed up a bit
//Just so it's distinct, basically.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\wishgranter\wishgranter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\wizard\wizard.dm. ----------------------
//Random event wizard
//Solo wizard report
//Wizard with apprentices report
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\wizard\equipment\artefact.dm. ----------------------
//Apprenticeship contract - moved to antag_spawner.dm
///////////////////////////Veil Render//////////////////////
////TEAR IN REALITY
/////////////////////////////////////////Scrying///////////////////
/////////////////////////////////////////Necromantic Stone///////////////////
//Funny gimmick, skeletons always seem to wear roman/ancient armour
//Provides a decent heal, need to pump every 6 seconds
//Warp Whistle: Provides uncontrolled long distance teleportation.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\wizard\equipment\soulstone.dm. ----------------------
//////////////////////////////Capturing////////////////////////////////////////////////////////
///////////////////Options for using captured souls///////////////////////////////////////
///////////////////////////Transferring to constructs/////////////////////////////////////////////////////
////////////////////////////Proc for moving soul in and out off stone//////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\wizard\equipment\spellbook.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\xeno\xeno.dm. ----------------------
//Simply lists them.
//XENO
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\_common\antag_datum.dm. ----------------------
//ambition start
//ambition end
//ambition start
//ambition end
//This will be called in add_antag_datum before owner assignment.
//Should return antag datum without owner.
///Called by the transfer_to() mind proc after the mind (mind.current and new_character.mind) has moved but before the player (key and client) is transfered.
//This handles the application of antag huds/special abilities
//This handles the removal of antag huds/special abilities
/// This is called when the antagonist is being mindshielded.
/// This is called when the antagonist is successfully mindshielded.
// Adds the specified antag hud to the player. Usually called in an antag datum file
// Removes the specified antag hud from the player. Usually called in an antag datum file
/// Handles adding and removing the clumsy mutation from clown antags. Gets called in apply/remove_innate_effects
//Assign default team and creates one for one of a kind team antagonists
///Called by the add_antag_datum() mind proc after the instanced datum is added to the mind's antag_datums list.
/**
 * Proc that checks the sent mob aganst the banlistfor this antagonist.
 * Returns FALSE if no mob is sent, or the mob is not found to be banned.
 *
 *  * mob/M: The mob that you are looking for on the banlist.
 */
/**
 * Proc that replaces a player who cannot play a specific antagonist due to being banned via a poll, and alerts the player of their being on the banlist.
 */
/**
 * Called by the remove_antag_datum() and remove_all_antag_datums() mind procs for the antag datum to handle its own removal and deletion.
 */
/**
 * Proc that sends fluff or instructional messages to the player when they are given this antag datum.
 * Use this proc for playing sounds, sending alerts, or helping to setup non-gameplay influencing aspects of the antagonist type.
 */
/**
 * Proc that sends fluff or instructional messages to the player when they lose this antag datum.
 * Use this proc for playing sounds, sending alerts, or otherwise informing the player that they're no longer a specific antagonist type.
 */
/**
 * Proc that assigns this antagonist's ascribed moodlet to the player.
 */
/**
 * Proc that removes this antagonist's ascribed moodlet from the player.
 */
/**
 * Removes invalid quirks.
 */
/**
 * Proc that will return the team this antagonist belongs to, when called. Helpful with antagonists that may belong to multiple potential teams in a single round, like families.
 */
/**
 * Proc that sends string information for the end-round report window to the server.
 * This runs on every instance of every antagonist that exists at the end of the round.
 * This is the body of the message, sandwiched between roundend_report_header and roundend_report_footer.
 */
/**
 * Proc that sends string data for the round-end report.
 * Displayed before roundend_report and roundend_report_footer.
 * Appears at start of roundend_catagory section.
 */
/**
 * Proc that sends string data for the round-end report.
 * Displayed after roundend_report and roundend_report_footer.
 * Appears at the end of the roundend_catagory section.
 */
//ADMIN TOOLS
//Called when using admin tools to give antag status
//Called when removing antagonist using admin tools
//gamemode/proc/is_mode_antag(antagonist/A) => TRUE/FALSE
/**
 * Additional data to display in the antagonist panel section.
 * For example, nuke disk code, genome count, etc
 */
/// List of ["Command"] = CALLBACK(), user will be appeneded to callback arguments on execution
/// Creates an icon from the preview outfit.
/// Custom implementors of `get_preview_icon` should use this, as the
/// result of `get_preview_icon` is expected to be the completed version.
/// Given an icon, will crop it to be consistent of those in the preferences menu.
/// Not necessary, and in fact will look bad if it's anything other than a human.
/// Returns the icon to show on the preferences menu.
/**
 * Gets how fast we can hijack the shuttle, return 0 for can not hijack.
 * Defaults to hijack_speed var, override for custom stuff like buffing hijack speed for hijack objectives or something.
 */
/**
 * Gets our threat level. Override this proc for custom functionality/dynamic threat level.
 */
//This one is created by admin tools for custom objectives
///ANTAGONIST UI STUFF
///generic helper to send objectives as data through tgui. supports smart objectives too!
//button for antags to review their descriptions/info
///Clears change requests from deleted objectives to avoid broken references.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\_common\antag_helpers.dm. ----------------------
//Returns MINDS of the assigned antags of given type/subtypes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\_common\antag_hud.dm. ----------------------
//GAME_MODE PROCS
//called to set a mob's antag icon state
//MIND PROCS
//these are called by mind.transfer_to()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\_common\antag_spawner.dm. ----------------------
///////////WIZARD
///////////BORGS AND OPERATIVES
//////CLOWN OP
//////SYNDICATE BORG
///////////SLAUGHTER DEMON
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\antagonists\_common\antag_team.dm. ----------------------
//A barebones antagonist team.
//Display members/victory/failure/objectives for the team
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\arousal.dm. ----------------------
//Mob procs
//Here's the main proc itself
//skyrat edit - forced partner and spillage
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\genitals.dm. ----------------------
//exposure and through-clothing code
//post organ duo making arrangements.
//proc to give a player their genitals and stuff when they log in
//Checks to see if organs are new on the mob, and changes their colours so that they don't get crazy colours.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\genitals_sprite_accessories.dm. ----------------------
//DICKS,COCKS,PENISES,WHATEVER YOU WANT TO CALL THEM
//Testicles
//Vaginas
//BREASTS BE HERE
//BUTT BE HERE
//there literally shouldn't be any other ass types besides one because that'd be weird, this is just here to keep things consistent for the genital system.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\breasts.dm. ----------------------
//Allows breasts to grow and change size, with sprite changes too.
//maximum wah
//Comical sizes slow you down in movement and actions.
//Ridiculous sizes makes you more cumbersome.
//this is far too lewd wah
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\butt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\penis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\testicles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\vagina.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\organs\womb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\arousal\toys\dildos.dm. ----------------------
//////////
//DILDOS//
//////////
// Suicide acts, by request
//	is_knotted = ((src.dildo_shape == "knotted")?"They swallowed the knot":"Their face is turning blue")
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\assembly.dm. ----------------------
///Call this when detaching it from a device. handles any special functions that need to be updated ex post facto
///Called when the holder is moved
//Called when another assembly acts on this one, var/radio will determine where it came from for wire calcs
//Called when this device attempts to act on another device, var/radio determines if it was sent via radio or direct
// What the device does when turned on
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\bomb.dm. ----------------------
//Assembly / attached device memes
// ---------- Procs below are for tanks that are used exclusively in 1-tank bombs ----------
//Bomb assembly proc. This turns assembly+tank into a bomb
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\doorcontrol.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\flash.dm. ----------------------
//BYPASS CHECKS ALSO PREVENTS BURNOUT!
//ported from tg - check to make sure it can't appear where it's not supposed to.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\health.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\helpers.dm. ----------------------
// See _DEFINES/is_helpers.dm for type helpers
/*
Name:	IsSpecialAssembly
Desc:	If true is an object that can be attached to an assembly holder but is a special thing like a plasma can or door
*/
/*
Name:	IsAssemblyHolder
Desc:	If true is an object that can hold an assemblyholder object
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\holder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\igniter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\infrared.dm. ----------------------
/***************************IBeam*********************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\mousetrap.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\playback.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\proximity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\shock_kit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\signaler.dm. ----------------------
// Embedded signaller used in grenade construction.
// It's necessary because the signaler doens't have an off state.
// Generated during grenade construction.  -Sayu
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\timer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\assembly\voice.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\asset_cache_client.dm. ----------------------
/// Process asset cache client topic calls for `"asset_cache_confirm_arrival=[INT]"`
/// Process asset cache client topic calls for `"asset_cache_preload_data=[HTML+JSON_STRING]"`
/// Updates the client side stored json file used to keep track of what assets the client has between restarts/reconnects.
/// Blocks until all currently sending browse and browse_rsc assets have been sent.
/// Due to byond limitations, this proc will sleep for 1 client round trip even if the client has no pending asset sends.
/// This proc will return an untrue value if it had to return before confirming the send, such as timeout or the client going away.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\asset_cache_item.dm. ----------------------
/**
 * # asset_cache_item
 *
 * An internal datum containing info on items in the asset cache. Mainly used to cache md5 info for speed.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\asset_list.dm. ----------------------
//These datums are used to populate the asset cache, the proc "register()" does this.
//Place any asset datums you create in asset_list_items.dm
//all of our asset datums, used for referring to these later
//get an assetdatum or make a new one
/// Returns a cached tgui message of URL mappings
/// If you don't need anything complicated.
// For registering or sending multiple others at once
// spritesheet implementation - coalesces various icons into a single .png file
// and uses CSS to select icons out of that file - saves on transferring some
// 1400-odd individual PNG files
/**
 * A simple proc handing the Icon for you to modify before it gets turned into an asset.
 *
 * Arguments:
 * * I: icon being turned into an asset
 */
/**
 * Returns the size class (ex design32x32) for a given sprite's icon
 *
 * Arguments:
 * * sprite_name - The sprite to get the size of
 */
//Generates assets based on iconstates of a single icon
/// Namespace'ed assets (for static css and html files)
/// When sent over a cdn transport, all assets in the same asset datum will exist in the same folder, as their plain names.
/// Used to ensure css files can reference files by url() without having to generate the css at runtime, both the css file and the files it depends on must exist in the same namespace asset datum. (Also works for html)
/// For example `blah.css` with asset `blah.png` will get loaded as `namespaces/a3d..14f/f12..d3c.css` and `namespaces/a3d..14f/blah.png`. allowing the css file to load `blah.png` by a relative url rather then compute the generated url with get_url_mappings().
/// The namespace folder's name will change if any of the assets change. (excluding parent assets)
/// Get a html string that will load a html asset.
/// Needed because byond doesn't allow you to browse() to a url.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\asset_list_items.dm. ----------------------
//DEFINITIONS FOR ASSET DATUMS START HERE.
// /datum/asset/spritesheet/simple/condiments
// 	name = "condiments"
// 	assets = list(
// 		CONDIMASTER_STYLE_FALLBACK = 'icons/ui_icons/condiments/emptycondiment.png',
// 		"enzyme" = 'icons/ui_icons/condiments/enzyme.png',
// 		"flour" = 'icons/ui_icons/condiments/flour.png',
// 		"mayonnaise" = 'icons/ui_icons/condiments/mayonnaise.png',
// 		"milk" = 'icons/ui_icons/condiments/milk.png',
// 		"blackpepper" = 'icons/ui_icons/condiments/peppermillsmall.png',
// 		"rice" = 'icons/ui_icons/condiments/rice.png',
// 		"sodiumchloride" = 'icons/ui_icons/condiments/saltshakersmall.png',
// 		"soymilk" = 'icons/ui_icons/condiments/soymilk.png',
// 		"soysauce" = 'icons/ui_icons/condiments/soysauce.png',
// 		"sugar" = 'icons/ui_icons/condiments/sugar.png',
// 		"ketchup" = 'icons/ui_icons/condiments/ketchup.png',
// 		"capsaicin" = 'icons/ui_icons/condiments/hotsauce.png',
// 		"frostoil" = 'icons/ui_icons/condiments/coldsauce.png',
// 		"bbqsauce" = 'icons/ui_icons/condiments/bbqsauce.png',
// 		"cornoil" = 'icons/ui_icons/condiments/oliveoil.png',
// 	)
//this exists purely to avoid meta by pre-loading all language icons.
// Representative icons for each research design
// /datum/asset/spritesheet/fish
// 	name = "fish"
// /datum/asset/spritesheet/fish/register()
// 	for (var/path in subtypesof(/datum/aquarium_behaviour/fish))
// 		var/datum/aquarium_behaviour/fish/fish_type = path
// 		var/fish_icon = initial(fish_type.icon)
// 		var/fish_icon_state = initial(fish_type.icon_state)
// 		var/id = sanitize_css_class_name("[fish_icon][fish_icon_state]")
// 		if(sprites[id]) //no dupes
// 			continue
// 		Insert(id, fish_icon, fish_icon_state)
// 	..()
/// Removes all non-alphanumerics from the text, keep in mind this can lead to id conflicts
// /datum/asset/spritesheet/moods
// 	name = "moods"
// 	var/iconinserted = 1
// /datum/asset/spritesheet/moods/register()
// 	for(var/i in 1 to 9)
// 		var/target_to_insert = "mood"+"[iconinserted]"
// 		Insert(target_to_insert, 'icons/hud/screen_gen.dmi', target_to_insert)
// 		iconinserted++
// 	..()
// /datum/asset/spritesheet/moods/ModifyInserted(icon/pre_asset)
// 	var/blended_color
// 	switch(iconinserted)
// 		if(1)
// 			blended_color = "#f15d36"
// 		if(2 to 3)
// 			blended_color = "#f38943"
// 		if(4)
// 			blended_color = "#dfa65b"
// 		if(5)
// 			blended_color = "#4b96c4"
// 		if(6)
// 			blended_color = "#86d656"
// 		else
// 			blended_color = "#2eeb9a"
// 	pre_asset.Blend(blended_color, ICON_MULTIPLY)
// 	return pre_asset
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\transports\asset_transport.dm. ----------------------
/// When sending mutiple assets, how many before we give the client a quaint little sending resources message
/// Base browse_rsc asset transport
/// Called when the transport is loaded by the config controller, not called on the default transport unless it gets loaded by a config change.
/// Initialize - Called when SSassets initializes.
/// Register a browser asset with the asset cache system
/// asset_name - the identifier of the asset
/// asset - the actual asset file (or an asset_cache_item datum)
/// returns a /datum/asset_cache_item.
/// mutiple calls to register the same asset under the same asset_name return the same datum
/// Returns a url for a given asset.
/// asset_name - Name of the asset.
/// asset_cache_item - asset cache item datum for the asset, optional, overrides asset_name
/// Sends a list of browser assets to a client
/// client - a client or mob
/// asset_list - A list of asset filenames to be sent to the client. Can optionally be assoicated with the asset's asset_cache_item datum.
/// Returns TRUE if any assets were sent.
/// Precache files without clogging up the browse() queue, used for passively sending files on connection start.
/// Check the config is valid to load this transport
/// Returns TRUE or FALSE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\asset_cache\transports\webroot_transport.dm. ----------------------
/// CDN Webroot asset transport. 
/// Processes thru any assets that were registered before we were loaded as a transport.
/// Register a browser asset with the asset cache system
/// We also save it to the CDN webroot at this step instead of waiting for send_assets()
/// asset_name - the identifier of the asset
/// asset - the actual asset file or an asset_cache_item datum.
/// Saves the asset to the webroot taking into account namespaces and hashes.
/// Returns a url for a given asset.
/// asset_name - Name of the asset.
/// asset_cache_item - asset cache item datum for the asset, optional, overrides asset_name
/// webroot asset sending - does nothing unless passed legacy assets
/// webroot slow asset sending - does nothing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\multiz.dm. ----------------------
/// This is an atmospherics pipe which can relay air up/down a deck.
///Attempts to locate a multiz pipe that's above us, if it finds one it merges us into its pipenet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\auxgm\breathing_classes.dm. ----------------------
// Breathing classes are, yes, just a list of gases, associated with numbers.
// But they're very simple: pluoxium's status as O2 * 8 is represented here,
// with a single line of code, no hardcoding and special-casing across the codebase.
// Not only that, but they're very general: you could have a negative value
// to simulate asphyxiants, e.g. if I add krypton it could go into the oxygen
// breathing class at -7, simulating krypton narcosis.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\auxgm\gas_types.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\environmental\LINDA_fire.dm. ----------------------
//This is the icon for fire on turfs, also helps for nurturing small fires until they are full tile
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\environmental\LINDA_system.dm. ----------------------
//returns a list of adjacent turfs that can share air with this one.
//alldir includes adjacent diagonal tiles that can share
//	air with both of the related adjacent cardinal tiles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\environmental\LINDA_turf_tile.dm. ----------------------
/// Function for Extools Atmos
/////////////////GAS MIXTURE PROCS///////////////////
/////////////////////////GAS OVERLAYS//////////////////////////////
/////////////////////////////SIMULATION///////////////////////////////////
/*#define LAST_SHARE_CHECK \
	var/last_share = our_air.get_last_share();\
	if(last_share > MINIMUM_AIR_TO_SUSPEND){\
		our_excited_group.reset_cooldowns();\
		cached_atmos_cooldown = 0;\
	} else if(last_share > MINIMUM_MOLES_DELTA_TO_MOVE) {\
		our_excited_group.dismantle_cooldown = 0;\
		cached_atmos_cooldown = 0;\
	}
*/
//////////////////////////SPACEWIND/////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\gasmixtures\auxgm.dm. ----------------------
// Auxgm
// It's a send-up of XGM, like what baystation got.
// It's got the same architecture as XGM, but it's structured
// differently to make it more convenient for auxmos.
// Most important compared to TG is that it does away with hardcoded typepaths,
// which lead to problems on the auxmos end anyway. We cache the string value
// references on the Rust end, so no performance is lost here.
// Also allows you to add new gases at runtime
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\gasmixtures\gas_mixture.dm. ----------------------
/*
we use a hook instead
/datum/gas_mixture/Del()
	__gasmixture_unregister()
	. = ..()
	*/
// VV WRAPPERS - EXTOOLS HOOKED PROCS DO NOT TAKE ARGUMENTS FROM CALL() FOR SOME REASON.
/*
	var/list/gas = params2list(gas_string)
	if(gas["TEMP"])
		var/temp = text2num(gas["TEMP"])
		gas -= "TEMP"
		if(!isnum(temp) || temp < 2.7)
			temp = 2.7
		set_temperature(temp)
	clear()
	for(var/id in gas)
		set_moles(id, text2num(gas[id]))
	archive()
	return 1
	*/
/*
/datum/gas_mixture/react(datum/holder)
	. = NO_REACTION
	if(!total_moles())
		return
	var/list/reactions = list()
	for(var/datum/gas_reaction/G in SSair.gas_reactions)
		if(get_moles(G.major_gas))
			reactions += G
	if(!length(reactions))
		return
	reaction_results = new
	var/temp = return_temperature()
	var/ener = thermal_energy()

	reaction_loop:
		for(var/r in reactions)
			var/datum/gas_reaction/reaction = r

			var/list/min_reqs = reaction.min_requirements
			if((min_reqs["TEMP"] && temp < min_reqs["TEMP"]) \
			|| (min_reqs["ENER"] && ener < min_reqs["ENER"]))
				continue

			for(var/id in min_reqs)
				if (id == "TEMP" || id == "ENER")
					continue
				if(get_moles(id) < min_reqs[id])
					continue reaction_loop
			//at this point, all minimum requirements for the reaction are satisfied.

			/*	currently no reactions have maximum requirements, so we can leave the checks commented out for a slight performance boost
				PLEASE DO NOT REMOVE THIS CODE. the commenting is here only for a performance increase.
				enabling these checks should be as easy as possible and the fact that they are disabled should be as clear as possible
			var/list/max_reqs = reaction.max_requirements
			if((max_reqs["TEMP"] && temp > max_reqs["TEMP"]) \
			|| (max_reqs["ENER"] && ener > max_reqs["ENER"]))
				continue
			for(var/id in max_reqs)
				if(id == "TEMP" || id == "ENER")
					continue
				if(cached_gases[id] && cached_gases[id][MOLES] > max_reqs[id])
					continue reaction_loop
			//at this point, all requirements for the reaction are satisfied. we can now react()
			*/
//Mathematical proofs:
/*
get_breath_partial_pressure(gas_pp) --> gas_pp/total_moles()*breath_pp = pp
get_true_breath_pressure(pp) --> gas_pp = pp/breath_pp*total_moles()
10/20*5 = 2.5
10 = 2.5/5*20
*/
/*
/mob/verb/profile_atmos()
	/world{loop_checks = 0;}
	var/datum/gas_mixture/A = new
	var/datum/gas_mixture/B = new
	A.parse_gas_string("o2=200;n2=800;TEMP=50")
	B.parse_gas_string("co2=500;plasma=500;TEMP=5000")
	var/pa
	var/pb
	pa = world.tick_usage
	for(var/I in 1 to 100000)
		B.transfer_to(A, 1)
		A.transfer_to(B, 1)
	pb = world.tick_usage
	var/total_time = (pb-pa) * world.tick_lag
	to_chat(src, "Total time (gas transfer): [total_time]ms")
	to_chat(src, "Operations per second: [100000 / (total_time/1000)]")
	pa = world.tick_usage
	for(var/I in 1 to 100000)
		B.total_moles();
	pb = world.tick_usage
	total_time = (pb-pa) * world.tick_lag
	to_chat(src, "Total time (total_moles): [total_time]ms")
	to_chat(src, "Operations per second: [100000 / (total_time/1000)]")
	pa = world.tick_usage
	for(var/I in 1 to 100000)
		new /datum/gas_mixture
	pb = world.tick_usage
	total_time = (pb-pa) * world.tick_lag
	to_chat(src, "Total time (new gas mixture): [total_time]ms")
	to_chat(src, "Operations per second: [100000 / (total_time/1000)]")
*/
/// Releases gas from src to output air. This means that it can not transfer air to gas mixture with higher pressure.
/// a global proc due to rustmos
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\gasmixtures\immutable_mixtures.dm. ----------------------
//"immutable" gas mixture used for immutable calculations
//it can be changed, but any changes will ultimately be undone before they can have any effect
//used by space tiles
//used by cloners
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\gasmixtures\reactions.dm. ----------------------
//All defines used in reactions are located in ..\__DEFINES\reactions.dm
//water vapor: puts out fires?
// no test cause it's entirely based on location
//tritium combustion: combustion of oxygen and tritium (treated as hydrocarbons). creates hotspots. exothermic
//plasma combustion: combustion of oxygen and plasma (treated as hydrocarbons). creates hotspots. exothermic
// no requirements, always runs
// bad idea? maybe
// this is overridden by auxmos but, hey, good idea to have it readable
//fusion: a terrible idea that was fun but broken. Now reworked to be less broken and more interesting. Again (and again, and again). Again!
//Fusion Rework Counter: Please increment this if you make a major overhaul to this system again.
//6 reworks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\gasmixtures\zextools_broke.dm. ----------------------
//prefer this to gas_mixture/total_moles in performance critical areas
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\airalarm.dm. ----------------------
//all air alarms in area are connected via magic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\atmosmachinery.dm. ----------------------
// Quick overview:
//
// Pipes combine to form pipelines
// Pipelines and other atmospheric objects combine to form pipe_networks
//   Note: A single pipe_network represents a completely open space
//
// Pipes -> Pipelines
// Pipelines + Other Objects -> Pipe network
//this is called just after the air controller sets up turfs
//Find a connecting /obj/machinery/atmospherics in specified direction
// Throws the user when they unwrench a pipe with a major difference between the internal and environmental pressure.
//Used for certain children of obj/machinery/atmospherics to not show pipe vision when mob is inside it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\datum_pipeline.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\components_base.dm. ----------------------
// So much of atmospherics.dm was used solely by components, so separating this makes things all a lot cleaner.
// On top of that, now people can add component-speciic procs/vars if they want!
// Iconnery
// Pipenet stuff; housekeeping
// Helpers
// UI Stuff
// Tool acts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\binary_devices.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\circulator.dm. ----------------------
//node2, air2, network2 correspond to input
//node1, air1, network1 correspond to output
//default cold circ for mappers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\dp_vent_pump.dm. ----------------------
//Acts like a normal vent, but has an input AND output.
// Mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\passive_gate.dm. ----------------------
/*

Passive gate is similar to the regular pump except:
* It doesn't require power
* Can not transfer low pressure to higher pressure (so it's more like a valve where you can control the flow)

*/
//Radio remote control
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\pump.dm. ----------------------
// Every cycle, the pump uses the air in air_in to try and make air_out the perfect pressure.
//
// node1, air1, network1 correspond to input
// node2, air2, network2 correspond to output
//
// Thus, the two variables affect pump operation are set in New():
//   air1.volume
//     This is the volume of gas available to the pump that may be transfered to the output
//   air2.volume
//     Higher quantities of this cause more air to be perfected later
//     but overall network volume is also increased as this increases...
//	..()
//Radio remote control
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\relief_valve.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\valve.dm. ----------------------
/*
It's like a regular ol' straight pipe, but you can turn it on and off.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\binary_devices\volume_pump.dm. ----------------------
// Every cycle, the pump uses the air in air_in to try and make air_out the perfect pressure.
//
// node1, air1, network1 correspond to input
// node2, air2, network2 correspond to output
//
// Thus, the two variables affect pump operation are set in New():
//   air1.volume
//     This is the volume of gas available to the pump that may be transfered to the output
//   air2.volume
//     Higher quantities of this cause more air to be perfected later
//     but overall network volume is also increased as this increases...
//	..()
// Pump mechanism just won't do anything if the pressure is too high/too low
// Mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\trinary_devices\filter.dm. ----------------------
// Mapping
// These two filter types have critical_machine flagged to on and thus causes the area they are in to be exempt from the Grid Check event.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\trinary_devices\mixer.dm. ----------------------
// mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\trinary_devices\trinary_devices.dm. ----------------------
/*
Housekeeping and pipe network stuff
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\cryo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\heat_exchanger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\outlet_injector.dm. ----------------------
// mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\passive_vent.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\portables_connector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\relief_valve.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\tank.dm. ----------------------
// /obj/machinery/atmospherics/components/unary/tank/freon
// 	icon_state = "blue"
// 	gas_type = /datum/gas/freon
// /obj/machinery/atmospherics/components/unary/tank/halon
// 	icon_state = "blue"
// 	gas_type = /datum/gas/halon
// /obj/machinery/atmospherics/components/unary/tank/healium
// 	icon_state = "red"
// 	gas_type = /datum/gas/healium
// /obj/machinery/atmospherics/components/unary/tank/hydrogen
// 	icon_state = "grey"
// 	gas_type = /datum/gas/hydrogen
// /obj/machinery/atmospherics/components/unary/tank/proto_nitrate
// 	icon_state = "red"
// 	gas_type = /datum/gas/proto_nitrate
// /obj/machinery/atmospherics/components/unary/tank/zauker
// 	gas_type = /datum/gas/zauker
// /obj/machinery/atmospherics/components/unary/tank/helium
// 	gas_type = /datum/gas/helium
// /obj/machinery/atmospherics/components/unary/tank/antinoblium
// 	gas_type = /datum/gas/antinoblium
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\thermomachine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\unary_devices.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\vent_pump.dm. ----------------------
//Radio remote control
// mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\components\unary_devices\vent_scrubber.dm. ----------------------
//There is no easy way for an object to be notified of changes to atmos can pass flags
//	So we check every machinery process (2 seconds)
//we populate a list of turfs with nonatmos-blocked cardinal turfs AND
//	diagonal turfs that can share atmos with *both* of the cardinal turfs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\other\meter.dm. ----------------------
// TURF METER - REPORTS A TILE'S AIR CONTENTS
//	why are you yelling?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\other\miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\bluespace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\layermanifold.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\manifold.dm. ----------------------
//3-Way Manifold
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\manifold4w.dm. ----------------------
//4-Way Manifold
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\mapping.dm. ----------------------
//Colored pipes, use these for mapping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\pipes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\simple.dm. ----------------------
// Simple Pipe
// The regular pipe you see everywhere, including bent ones.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\heat_exchange\he_pipes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\heat_exchange\junction.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\heat_exchange\manifold.dm. ----------------------
//3-Way Manifold
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\heat_exchange\manifold4w.dm. ----------------------
//4-Way Manifold
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\pipes\heat_exchange\simple.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\portable\canister.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\portable\portable_atmospherics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\portable\pump.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\atmospherics\machinery\portable\scrubber.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\away_props.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\bluespaceartillery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\capture_the_flag.dm. ----------------------
//ATTACK HAND IGNORING PARENT RETURN VALUE
//ATTACK GHOST IGNORING PARENT RETURN VALUE
// RED TEAM GUNS
// BLUE TEAM GUNS
// MELEE GANG
//Control Point
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\corpse.dm. ----------------------
//If someone can do this in a neater way, be my guest-Kor
//To do: Allow corpses to appear mangled, bloody, etc. Allow customizing the bodies appearance (they're all bald and white right now).
///override this to add special spawn conditions to a ghost role
//ATTACK GHOST IGNORING PARENT RETURN VALUE
// Base version - place these on maps/templates.
//Instant version - use when spawning corpses during runtime
//Non-human spawners
// I'll work on making a list of corpses people request for maps, or that I think will be commonly used. Syndicate operatives for example.
///////////Civilians//////////////////////
/////////////////Officers+Nanotrasen Security//////////////////////
/////////////////Spooky Undead//////////////////////
//For ghost bar.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\exile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\gateway.dm. ----------------------
/// Station home gateway
/// List of possible gateway destinations.
/**
 * Corresponds to single entry in gateway control.
 *
 * Will NOT be added automatically to GLOB.gateway_destinations list.
 */
/* Can a gateway link to this destination right now. */
/* Returns user-friendly description why you can't connect to this destination, displayed in UI */
/* Check if the movable is allowed to arrive at this destination (exile implants mostly) */
/* Get the actual turf we'll arrive at */
/* Called after moving the movable to target turf */
/* Called when gateway activates with this destination. */
/* Called when gateway targeting this destination deactivates. */
/* Returns data used by gateway controller ui */
/* Destination is another gateway */
/* We set the target gateway target to activator gateway */
/* We turn off the target gateway if it's linked with us */
/* Special home destination, so we can check exile implants */
/* Destination is one ore more turfs - created by landmarks */
/* Dense invisible object starting the teleportation. Created by gateways on activation. */
/* Station's primary gateway */
/* Doesn't need control console or power, always links to home when interacting. */
/* Gateway control computer */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\pamphlet.dm. ----------------------
//we don't want the silly text overlay!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\signpost.dm. ----------------------
/*An alternative to exit gateways, signposts send you back to somewhere safe onstation with their semiotic magic.*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\super_secret_room.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\zlevel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\Academy.dm. ----------------------
//Academy Areas
//Academy Items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\Cabin.dm. ----------------------
/*Cabin areas*/
//other Cabin Stuff//
/*Cabin's forest. Removed in the new cabin map since it was buggy and I prefer manual placement.*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\caves.dm. ----------------------
//Areas
//caves papers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\centcomAway.dm. ----------------------
//centcomAway areas
//centcomAway items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\challenge.dm. ----------------------
//Challenge Areas
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\jungleresort.dm. ----------------------
// welcome to the jungle, we got fun and games
//areas
//objects
//turfs
//mobs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\moonoutpost19.dm. ----------------------
// moonoutpost19
//Areas
//Papers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\murderdome.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\research.dm. ----------------------
//Research Base Areas//--
//research papers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\snowdin.dm. ----------------------
//Snow Valley Areas//--
//shuttle console for elevators//
//liquid plasma!!!!!!//
///////////	papers
//profile of each of the old crewmembers for the outpost
//holo disk recording//--
//lootspawners//--
//special items//--
//mobs//--
//ice spiders moved to giant_spiders.dm
//objs//--
//decals//--
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\stationCollision.dm. ----------------------
/* Station-Collision(sc) away mission map specific stuff
 *
 * Notes:
 *		Feel free to use parts of this map, or even all of it for your own project. Just include me in the credits :)
 *
 *		Some of this code unnecessary, but the intent is to add a little bit of everything to serve as examples
 *		for anyone who wants to make their own stuff.
 *
 * Contains:
 *		Landmarks
 *		Guns
 *		Safe code hints
 *		Captain's safe
 *		Modified Nar'Sie
 */
/*
 * Landmarks - Instead of spawning a new object type, I'll spawn the bible using a landmark!
 */
/*
 * Guns - I'm making these specifically so that I dont spawn a pile of fully loaded weapons on the map.
 */
//Captain's retro laser - Fires practice laser shots instead.
//	projectile_type = "/obj/item/projectile/practice"
//Syndicate sub-machine guns.
//Barman's shotgun
//Lasers
/*
 * Safe code hints
 */
//These vars hold the code itself, they'll be generated at round-start
//Pieces of paper actually containing the hints
/*
 * Captain's safe
 */
/*
 * Modified Nar'Sie
 */
//Override this to prevent no adminlog runtimes and admin warnings about a singularity without containment
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\undergroundoutpost45.dm. ----------------------
// undergroundoutpost45
//Areas
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\awaymissions\mission_code\wildwest.dm. ----------------------
/* Code for the Wild West map by Brotemis
 * Contains:
 *		Wish Granter
 *		Meat Grinder
 */
//Areas
/*
 * Wish Granter
 */
///////////////Meatgrinder//////////////
/////For the Wishgranter///////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\balloon_alert\balloon_alert.dm. ----------------------
/// The increase in duration per character in seconds
/// The amount of characters needed before this increase takes into effect
/// Creates text that will float from the atom upwards to the viewer.
/// Create balloon alerts (text that floats up) to everything within range.
/// Will only display to people who can see.
// Do not use.
// MeasureText blocks. I have no idea for how long.
// I would've made the maptext_height update on its own, but I don't know
// if this would look bad on laggy clients.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\bm_mode.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\buildmode.dm. ----------------------
// this creates a nice offset grid for choosing between buildmode options,
// because going "click click click ah hell" sucks.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\buttons.dm. ----------------------
// used to switch between modes
// used to switch between dirs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\effects\line.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\advanced.dm. ----------------------
// FIXME: add logic which adds a button displaying the icon
// of the currently selected path
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\area_edit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\basic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\boom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\copy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\fill.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\mapgen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\save_area.dm. ----------------------
//This could be optimised by making turfs that are the same go in the same, but this is a quick bodge solution so yea, fun job for coder here :)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\throwing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\buildmode\submodes\variable_edit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounty.dm. ----------------------
// Displayed on bounty UI screen.
// Displayed on bounty UI screen.
// Called when the claim button is clicked. Override to provide fancy rewards.
// If an item sent in the cargo shuttle can satisfy the bounty.
// Called when an object is shipped on the cargo shuttle.
// When randomly generating the bounty list, duplicate bounties must be avoided.
// This proc is used to determine if two bounties are duplicates, or incompatible in general.
// This proc is called when the shuttle docks at CentCom.
// It handles items shipped for bounties.
// Returns FALSE if the bounty is incompatible with the current bounties.
// Returns a new bounty of random type, but does not add it to GLOB.bounties_list.
// Called lazily at startup to populate GLOB.bounties_list with random bounties.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounty_console.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\centcom_podlauncher.dm. ----------------------
//The Great and Mighty CentCom Pod Launcher - MrDoomBringer
//This was originally created as a way to get adminspawned items to the station in an IC manner. It's evolved to contain a few more
//features such as item removal, smiting, controllable delivery mobs, and more.
//This works by creating a supplypod (refered to as temp_pod) in a special room in the centcom map.
//IMPORTANT: Even though we call it a supplypod for our purposes, it can take on the appearance and function of many other things: Eg. cruise missiles, boxes, or walking, living gondolas.
//When the user launched the pod, items from special "bays" on the centcom map are taken and put into the supplypod
//The user can change properties of the supplypod using the UI, and change the way that items are taken from the bay (One at a time, ordered, random, etc)
//Many of the effects of the supplypod set here are put into action in supplypod.dm
//Variables declared to change how items in the launch bay are picked and launched. (Almost) all of these are changed in the ui_act proc
//Some effect groups are choices, while other are booleans. This is because some effects can stack, while others dont (ex: you can stack explosion and quiet, but you cant stack ordered launch and random launch)
//Proc for admins to enable others to use podlauncher after roundend
//Set the dropoff location and indicator to either a specific turf or somewhere in an area
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\console.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\coupon.dm. ----------------------
/// Choose what our prize is :D
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports.dm. ----------------------
/* How it works:
 The shuttle arrives at CentCom dock and calls sell(), which recursively loops through all the shuttle contents that are unanchored.

 Each object in the loop is checked for applies_to() of various export datums, except the invalid ones.
*/
/* The rule in figuring out item export cost:
 Export cost of goods in the shipping crate must be always equal or lower than:
  packcage cost - crate cost - manifest cost
 Crate cost is 500cr for a regular plasteel crate and 100cr for a large wooden one. Manifest cost is always 200cr.
 This is to avoid easy cargo points dupes.

Credit dupes that require a lot of manual work shouldn't be removed, unless they yield too much profit for too little work.
 For example, if some player buys metal and glass sheets and uses them to make and sell reinforced glass:

 100 glass + 50 metal -> 100 reinforced glass
 (1500cr -> 1600cr)

 then the player gets the profit from selling his own wasted time.
*/
// Simple holder datum to pass export results around
// external_report works as "transaction" object, pass same one in if you're doing more than one export in single go
// Checks the cost. 0 cost items are skipped in export.
// Checks the amount of exportable in object. Credits in the bill, sheets in the stack, etc.
// Usually acts as a multiplier for a cost, so item that has 0 amount will be skipped in export.
// Checks if the item is fit for export datum.
// Called only once, when the object is actually sold by the datum.
// Adds item's cost and amount to the current export cycle.
// get_cost, get_amount and applies_to do not neccesary mean a successful sale.
// Total printout for the cargo console.
// Called before the end of current export cycle.
// It must always return something if the datum adds or removes any credts.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\export_scanner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\expressconsole.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\gondolapod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\order.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\supplypod.dm. ----------------------
//The "pod_landingzone" temp visual is created by anything that "launches" a supplypod. This is what animates the pod and makes the pod forcemove to the station.
//------------------------------------SUPPLY POD-------------------------------------//
//------------------------------------TEMPORARY_VISUAL-------------------------------------//
//------------------------------------UPGRADES-------------------------------------//
// let's not.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\supplypod_beacon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_item.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_market.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_telepad.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_uplink.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_items\clothing.dm. ----------------------
/* commented out until someone wants to port the actual boots
 * i am unsure they are in accordance with server design ideals

/datum/blackmarket_item/clothing/rocket_boots
	name = "Rocket Boots"
	desc = "We found a pair of jump boots and overclocked the hell out of them. No liability for grevious harm to or with a body."
	item = /obj/item/clothing/shoes/bhop/rocket
	price_min = 1500
	price_max = 3000
	stock_max = 1
	availability_prob = 30

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_items\consumables.dm. ----------------------
// i found no other way to fill a glass with a random reagent at runtime. and i definitely was not going to do the same done in bottle.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_items\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_items\tools.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\blackmarket\blackmarket_items\weapons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\assistant.dm. ----------------------
//Moved Maint Loot and other assorted bounties to silly.dm
// /datum/bounty/item/assistant/donut
// 	name = "Donuts"
// 	description = "CentCom's security forces are facing heavy losses against the Syndicate. Ship donuts to raise morale."
// 	reward = 2000
// 	required_count = 10
// 	wanted_types = list(/obj/item/reagent_containers/food/snacks/donut)
// /datum/bounty/item/assistant/donkpocket
// 	name = "Donk-Pockets"
// 	description = "Consumer safety recall: Warning. Donk-Pockets manufactured in the past year contain hazardous lizard biomatter. Return units to CentCom immediately."
// 	reward = 1000
// 	required_count = 10
// 	wanted_types = list(/obj/item/reagent_containers/food/snacks/donkpocket)
/*
/datum/bounty/item/assistant/geranium
 	name = "Geraniums"
 	description = "Commander Zot has the hots for Commander Zena. Send a shipment of geraniums - her favorite flower - and he'll happily reward you."
 	reward = 1000
 	required_count = 3
	wanted_types = list(/obj/item/reagent_containers/food/snacks/grown/poppy/geranium)
	include_subtypes = FALSE
*/
// /datum/bounty/item/assistant/earmuffs
// 	name = "Earmuffs"
// 	description = "Central Command is getting tired of your station's messages. They've ordered that you ship some earmuffs to lessen the annoyance."
// 	reward = 1000
// 	wanted_types = list(/obj/item/clothing/ears/earmuffs)
/* I don't like that you can just buy a box of monkey cubes and finish this for -half- of them.
/datum/bounty/item/assistant/monkey_cubes
	name = "Monkey Cubes"
	description = "Due to a recent genetics accident, Central Command is in serious need of monkeys. Your mission is to ship monkey cubes."
	reward = 2000
	required_count = 3
	wanted_types = list(/obj/item/reagent_containers/food/snacks/monkeycube)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\botany.dm. ----------------------
//Easy Stuff (1200)
//Medium Stuff (2400)
//Harder Stuff (3600-7200)
// /datum/bounty/item/botany/kudzu
// 	name = "Kudzu Pods"
// 	wanted_types = list(/obj/item/reagent_containers/food/snacks/grown/kudzupod)
// 	bonus_desc = "Store in a dry, dark place."
// 	multiplier = 4
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\chef.dm. ----------------------
//Moved (most) bounties requiring botany to gardencook.dm Roundstart cook bounties go here.
// /datum/bounty/item/chef/cubancarp
// 	name = "Cuban Carp"
// 	description = "To celebrate the birth of Castro XXVII, ship one cuban carp to CentCom."
// 	reward = 3000
// 	wanted_types = list(/obj/item/reagent_containers/food/snacks/cubancarp)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\engineering.dm. ----------------------
//datum/bounty/item/engineering/gas/nitryl_tank
//	name = "Full Tank of Nitryl"
//	description = "The non-human staff of Station 88 has been volunteered to test performance enhancing drugs. Ship them a tank full of Nitryl so they can get started."
//	gas_type = GAS_NITRYL
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\gardencook.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\item.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\mech.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\medical.dm. ----------------------
/* If anyone wants to try and fix/work, go for it
/datum/bounty/item/medical/medibot // Mob so this dosn't work yet*
	name = "Medibot"
	description = "A sister station is dealing with um problem, they need a medibot to help treat their wounded..."
	reward = 3000
	wanted_types = list(/mob/living/simple_animal/bot/medbot)

/datum/bounty/item/medical/bloodl //Dosnt work do to how blood is yet*
	name = "L-type Blood"
	description = "After a small scuffle, a few of our lizard employees need another blood transfusion."
	reward = 4000
	required_count = 200
	wanted_types = (L,/datum/reagent/blood)
	if(istype(L,/datum/reagent/blood))
	wanted_types += L

/datum/bounty/item/medical/bloodu //Dosnt work do to how blood is yet*
	name = "U-Type Blood"
	description = "After dealing with a small revolt in a local penal colony, the colony's anemic CMO needs blood, urgently. With his compromised immune system, only the best blood can be used."
	reward = 5500 // Rarer blood
	required_count = 200
	wanted_types = (U,/datum/reagent/blood)
	if(istype(U,/datum/reagent/blood))
	wanted_types += U

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\mining.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\reagent.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\science.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\silly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\slime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\bounties\virus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\civilain_bounty.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\food_wine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\gear.dm. ----------------------
//blanket
//Hats
//Blanket
//Shoes
//Blanket
//Headsets/Ears
//Blanket
//Gloves
//Blanket
//Ties/neck
//Blanket
//masks
//Blanket
//Hardsuits //If you steal/fine more they are worth selling
//Blanket
//Soft Suits
//Blanket
//Glasses
//Blanket
//////////
//UNDER///
//////////
//Amror
///////////////////////////
//Bomb/Rad/Bio Suits/Fire//
///////////////////////////
////////////////////
//Cloaks and Coats//
////////////////////
//////////
//SUITS///
//////////
//////////////////////
//Chameleon Gear//////
//////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\large_objects.dm. ----------------------
//////////////
//Matstatues//
//////////////
////////////
//MECHS/////
////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\manifest.dm. ----------------------
// Approved manifest.
// +200 credits flat.
// Correctly denied manifest.
// Refunds the package cost minus the cost of crate.
// Erroneously approved manifest.
// Substracts the package cost.
// Erroneously denied manifest.
// Substracts the package cost minus the cost of crate.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\materials.dm. ----------------------
// Yes, it's a base type containing export_types.
// But it has no material_id, so any applies_to check will return false, and these types reduce amount of copypasta a lot
// Materials. Selling raw can lead to a big payout but takes a lot of work for miners to get a lot. Best to craft art/rnd gear
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\organs_robotics.dm. ----------------------
// Orgains and Robotics exports. Hearts, new lims, implants, etc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\parts.dm. ----------------------
// Circuit boards, spare parts, etc.
//Board
//Stock Parts
//Cells
//Glass working stuff
// i'd just like to say how i despise the previous coder's fetish for their funny glasswork
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\seeds.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\sheets.dm. ----------------------
// Hides
// Common materials.
// For base materials, see materials.dm
// 1 glass + 0.5 metal, cost is rounded up.
// Weird Stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\tools.dm. ----------------------
// mechanical toolbox:	22cr
// emergency toolbox:	17-20cr
// electrical toolbox:	36cr
// robust: priceless
// Adv tools
// Lights/Eletronic
// Basic tools
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\exports\weapons.dm. ----------------------
// Weapon exports. Stun batons, disablers, etc.
//////////////
//RND Guns////
//////////////
/////////////////
//Ammo and Pins//
/////////////////
/////////////////////////
//Bow and Arrows/////////
/////////////////////////
/////////////////////////
//The Traitor Sell Outs//
/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\armory.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Armory //////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\costumes_toys.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
////////////////////////////////// Toys //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Costumes  //////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\emergency.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Emergency ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\engine.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////// Engine Construction /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\engineering.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
///////////////////////////// Engineering ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\goodies.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\livestock.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
////////////////////////////// Livestock /////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\materials.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
/////////////////////// Canisters & Materials ////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////////// Materials //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////////// Canisters //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// Tanks ////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\medical.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Medical /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// Equipment ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////////// Medical Kits ///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Virology ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\misc.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Miscellaneous ///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////// Paperwork and Writing Supplies //////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Entertainment ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Misc Supplies //////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Misc + Decor ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Lewd Supplies ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///Special supply crate that generates random syndicate gear up to a determined TC value
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Syndicate Packs /////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//Generate assorted uplink items, taking into account the same surplus modifiers used for surplus crates
//(this is exclusively used for the rare variant of the stray cargo event!)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\organic.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Organic /////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Meals ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Raw Ingredients /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Hydroponics /////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// Misc /////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\science.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Science /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////// RAW ANOMALY CORES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\security.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Security ////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\service.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// Service //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Cargo ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////// Chef, Botanist, Bartender ////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// Janitor //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\cargo\packs\vending.dm. ----------------------
//Reminders-
// If you add something to this list, please group it by type and sort it alphabetically instead of just jamming it in like an animal
// cost = 700- Minimum cost, or infinite points are possible.
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// Vending //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///////////////////////// Service, Medical, Sec //////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////// Wardrobe Vendors ////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\chatter\chatter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\client_colour.dm. ----------------------
/*
	Client Colour Priority System By RemieRichards
	A System that gives finer control over which client.colour value to display on screen
	so that the "highest priority" one is always displayed as opposed to the default of
	"whichever was set last is displayed"
*/
/*
	Define subtypes of this datum
*/
/*
	Adds an instance of colour_type to the mob's client_colours list
	colour_type - a typepath (subtyped from /datum/client_colour)
*/
/*
	Removes an instance of colour_type from the mob's client_colours list
	colour_type - a typepath (subtyped from /datum/client_colour)
*/
/*
	Resets the mob's client.color to null, and then sets it to the highest priority
	client_colour datum, if one exists
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\client_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\client_procs.dm. ----------------------
/*
 * Call back proc that should be checked in all paths where a client can send messages
 *
 * Handles checking for duplicate messages and people sending messages too fast
 *
 * The first checks are if you're sending too fast, this is defined as sending
 * SPAM_TRIGGER_AUTOMUTE messages in
 * 5 seconds, this will start supressing your messages,
 * if you send 2* that limit, you also get muted
 *
 * The second checks for the same duplicate message too many times and mutes
 * you for it
 */
//This stops files larger than UPLOAD_LIMIT being sent from client to server via input(), client.Import() etc.
//////////////
//DISCONNECT//
//////////////
//#undef UPLOAD_LIMIT //SPLURT EDIT
//checks if a client is afk
//3000 frames = 5 minutes
/// Send resources to the client.
/// Sends both game resources and browser assets.
//Hook, override it to run code when dir changes
//Like for /atoms, but clients are their own snowflake FUCK
///Redirect proc that makes it easier to call the unlock achievement proc. Achievement type is the typepath to the award, user is the mob getting the award, and value is an optional variable used for leaderboard value increments
///Redirect proc that makes it easier to get the status of an achievement. Achievement type is the typepath to the award.
///Redirect proc that makes it easier to get the status of an achievement. Achievement type is the typepath to the award.
/// compiles a full list of verbs and sends it to the browser
//increment progress for an unlockable loadout item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\client_vpn_detect.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\message.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\player_details.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\preferences.dm. ----------------------
/// Resets the client's keybindings. Asks them for which
/// Does the actual reset
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\preferences_savefile.dm. ----------------------
//This is the lowest supported version, anything below this is completely obsolete and the entire savefile will be wiped.
//This is the current version, anything below this will attempt to update (if it's not obsolete)
//	You do not need to raise this if you are adding new values that have sane defaults.
//	Only raise this value when changing the meaning/format/name/layout of an existing value
//	where you would want the updater procs below to run
/*
SAVEFILE UPDATING/VERSIONING - 'Simplified', or rather, more coder-friendly ~Carn
	This proc checks if the current directory of the savefile S needs updating
	It is to be used by the load_character and load_preferences procs.
	(S.cd=="/" is preferences, S.cd=="/character[integer]" is a character slot, etc)

	if the current directory's version is below SAVEFILE_VERSION_MIN it will simply wipe everything in that directory
	(if we're at root "/" then it'll just wipe the entire savefile, for instance.)

	if its version is below SAVEFILE_VERSION_MAX but above the minimum, it will load data but later call the
	respective update_preferences() or update_character() proc.
	Those procs allow coders to specify format changes so users do not lose their setups and have to redo them again.

	Failing all that, the standard sanity checks are performed. They simply check the data is suitable, reverting to
	initial() values if necessary.
*/
//should these procs get fairly long
//just increase SAVEFILE_VERSION_MIN so it's not as far behind
//SAVEFILE_VERSION_MAX and then delete any obsolete if clauses
//from these procs.
//This only really meant to avoid annoying frequent players
//if your savefile is 3 months out of date, then 'tough shit'.
//DEBUG
//Some crude tools for testing savefiles
//path is the savefile path
//path is the savefile path
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\preferences_toggles.dm. ----------------------
//this works as is to create a single checked item, but has no back end code for toggleing the check yet
//Example usage TOGGLE_CHECKBOX(datum/verbs/menu/Settings/Ghost/chatterbox, toggle_ghost_ears)()
//override because we don't want to save preferences twice.
//toggles
//please be aware that the following two verbs have inverted stat output, so that "Toggle Deathrattle|1" still means you activated it
//Admin Preferences
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\preferences_vr.dm. ----------------------
//File isn't currently being used.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\aooc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\autobunker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\etips.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\looc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\minimap.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\ooc.dm. ----------------------
//Checks admin notice
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\ping.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\suicide.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\client\verbs\who.dm. ----------------------
/*/client/verb/who() Commenting this file out to be overridden in modular_citadel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\chameleon.dm. ----------------------
// Forgive me for my sins...
//starts off as black
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\clothing.dm. ----------------------
//what to toggle when toggled with weldingvisortoggle()
/*
MOVED TO: modular_splurt/code/module/clothing/clothing.dm
/obj/item/clothing/attack(mob/M, mob/user, def_zone)
	if(user.a_intent != INTENT_HARM && isinsect(M))
		var/obj/item/reagent_containers/food/snacks/clothing/clothing_as_food = new
		clothing_as_food.name = name
		if(clothing_as_food.attack(M, user, def_zone))
			take_damage(15, sound_effect=FALSE)
		qdel(clothing_as_food)
	else
		return ..()

	return ..()
*/
// Set the clothing's integrity back to 100%, remove all damage to bodyparts, and generally fix it up
/**
  * take_damage_zone() is used for dealing damage to specific bodyparts on a worn piece of clothing, meant to be called from [/obj/item/bodypart/proc/check_woundings_mods()]
  *
  *	This proc only matters when a bodypart that this clothing is covering is harmed by a direct attack (being on fire or in space need not apply), and only if this clothing covers
  * more than one bodypart to begin with. No point in tracking damage by zone for a hat, and I'm not cruel enough to let you fully break them in a few shots.
  * Also if limb_integrity is 0, then this clothing doesn't have bodypart damage enabled so skip it.
  *
  * Arguments:
  * * def_zone: The bodypart zone in question
  * * damage_amount: Incoming damage
  * * damage_type: BRUTE or BURN
  * * armour_penetration: If the attack had armour_penetration
  */
/**
  * disable_zone() is used to disable a given bodypart's protection on our clothing item, mainly from [/obj/item/clothing/proc/take_damage_zone()]
  *
  * This proc disables all protection on the specified bodypart for this piece of clothing: it'll be as if it doesn't cover it at all anymore (because it won't!)
  * If every possible bodypart has been disabled on the clothing, we put it out of commission entirely and mark it as shredded, whereby it will have to be repaired in
  * order to equip it again. Also note we only consider it damaged if there's more than one bodypart disabled.
  *
  * Arguments:
  * * def_zone: The bodypart zone we're disabling
  * * damage_type: Only really relevant for the verb for describing the breaking, and maybe obj_destruction()
  */
/**
  * Rounds armor_value to nearest 10, divides it by 10 and then expresses it in roman numerals up to 10
  *
  * Rounds armor_value to nearest 10, divides it by 10
  * and then expresses it in roman numerals up to 10
  * Arguments:
  * * armor_value - Number we're converting
  */
//This mostly exists so subtypes can call appriopriate update icon calls on the wearer.
/*
SEE_SELF  // can see self, no matter what
SEE_MOBS  // can see all mobs, no matter what
SEE_OBJS  // can see all objs, no matter what
SEE_TURFS // can see all turfs (and areas), no matter what
SEE_PIXELS// if an object is located on an unlit area, but some of its pixels are
          // in a lit area (via pixel_x,y or smooth movement), can see those pixels
BLIND     // can't see anything
*/
//Species-restricted clothing check. - Thanks Oraclestation, BS13, /vg/station etc.
/// If we're a clothing with at least 1 shredded/disabled zone, give the wearer a periodic heads up letting them know their clothes are damaged
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\ears\_ears.dm. ----------------------
//Ears: currently only used for headsets and earmuffs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\disablerglasses.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\engine_goggles.dm. ----------------------
//Engineering Mesons
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\hud.dm. ----------------------
////////////
//Med Huds//
////////////
///////////////////
//Diagnostic Huds//
///////////////////
////////////
//Sec Huds//
////////////
//Hud Toggle
//Thermal Huds
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\phantomthief.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\prescription_kit.dm. ----------------------
// don't you love single purpose files? i do too.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\glasses\_glasses.dm. ----------------------
//Glasses
//called when thermal glasses are emped.
//Here lies green glasses, so ugly they died. RIP
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\boxing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\color.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\mittens.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\ring.dm. ----------------------
/* /obj/item/clothing/gloves/ring
	name = "gold ring"
	desc = "A tiny gold ring, sized to wrap around a finger."
	gender = NEUTER
	w_class = WEIGHT_CLASS_TINY
	icon = 'icons/obj/ring.dmi'
	icon_state = "ringgold"
	item_state = "gring"
	body_parts_covered = 0
	attack_verb = list("proposed")
	transfer_prints = TRUE
	strip_delay = 40

/obj/item/clothing/gloves/ring/suicide_act(mob/living/carbon/user)
	user.visible_message("<span class='suicide'>\[user] is putting the [src] in [user.p_their()] mouth! It looks like [user] is trying to choke on the [src]!</span>")
	return OXYLOSS


/obj/item/clothing/gloves/ring/diamond
	name = "diamond ring"
	desc = "An expensive ring, studded with a diamond. Cultures have used these rings in courtship for a millenia."
	icon_state = "ringdiamond"
	item_state = "dring"

/obj/item/clothing/gloves/ring/diamond/attack_self(mob/user)
	user.visible_message("<span class='warning'>\The [user] gets down on one knee, presenting \the [src].</span>","<span class='warning'>You get down on one knee, presenting \the [src].</span>")

/obj/item/clothing/gloves/ring/silver
	name = "silver ring"
	desc = "A tiny silver ring, sized to wrap around a finger."
	icon_state = "ringsilver"
	item_state = "sring"

/obj/item/clothing/gloves/ring/custom
	name = "ring"
	desc = "A ring."
	gender = NEUTER
	w_class = WEIGHT_CLASS_TINY
	obj_flags = UNIQUE_RENAME
	icon_state = "ringsilver"
	item_state = "sring"

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\tacklers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\gloves\_gloves.dm. ----------------------
// Called just before an attack_hand(), in mob/UnarmedAttack()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\beanie.dm. ----------------------
//BeanieStation13 Redux
//Striped Beanies have unique sprites
//No dog fashion sprites yet :(  poor Ian can't be dope like the rest of us yet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\collectable.dm. ----------------------
//Hat Station 13
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\hardhat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\helmet.dm. ----------------------
//LightToggle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\jobs.dm. ----------------------
//defines the drill hat's yelling setting
//Chef
//Captain
//Captain: This is no longer space-worthy
//Head of Personnel
//Chaplain
//Detective
//Mime
//Security
//Curator
//Chief Medical Officer
//Medical
//Research Director
//Scientist
//Roboticist
//Chief Engineer
//Atmos
//Engineer
//Quartermaster
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\misc_special.dm. ----------------------
/*
 * Contents:
 *		Welding mask
 *		Cakehat
 *		Ushanka
 *		Pumpkin head
 *		Kitty ears
 *		Cardborg disguise
 *		Wig
 *		Bronze hat
 */
/*
 * Welding mask
 */
/*
 * Cakehat
 */
/*
 * Ushanka
 */
/*
 * Pumpkin head
 */
/*
 * Kitty ears
 */
//The "pocket" for the M1 helmet so you can tuck things into the elastic band
//families
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\soft_caps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\head\_head.dm. ----------------------
///Special throw_impact for hats to frisbee hats at people to place them on their heads.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\boxing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\breath.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\cluwne.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\gasmask.dm. ----------------------
// **** Welding gas mask ****
// ********************************************************************
//Plague Dr suit can be found in clothing/suits/bio.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\hailer.dm. ----------------------
// **** Security gas mask ****
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\miscellaneous.dm. ----------------------
///frog mask - reeee!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\masks\_masks.dm. ----------------------
/**
  * Proc that moves gas/breath masks out of the way, disabling them and allowing pill/food consumption
  * The flavor_details variable is for masks that use this function only to toggle HIDEFACE for identity.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\neck\_neck.dm. ----------------------
///////////
//SCARVES//
///////////
//Striped scarves get their own icons
//The three following scarves don't have the scarf subtype
//This is because Ian can equip anything from that subtype
//However, these 3 don't have corgi versions of their sprites
///////////
//COLLARS//
///////////
//////////////
//DOPE BLING//
//////////////
//////////////////////////////////
//VERY SUPER BADASS NECKERCHIEFS//
//////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\ert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\plasmaman.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\standard.dm. ----------------------
/* /datum/outfit/chrono_agent //Begone skyrat change on sandstorm
	name = "Timeline Eradication Agent"
	uniform = /obj/item/clothing/under/color/white
	suit = /obj/item/clothing/suit/space/chronos
	back = /obj/item/chrono_eraser
	head = /obj/item/clothing/head/helmet/space/chronos
	mask = /obj/item/clothing/mask/breath
	suit_store = /obj/item/tank/internals/oxygen
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\vr.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\outfits\vv_outfit.dm. ----------------------
// This outfit preserves varedits made on the items
// Created from admin helpers.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\bananashoes.dm. ----------------------
//banana flavored chaos and horror ahead
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\cluwne.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\colour.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\magboots.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\miscellaneous.dm. ----------------------
// kevin is into feet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\taeclowndo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\shoes\_shoes.dm. ----------------------
/**
  * adjust_laces adjusts whether our shoes (assuming they can_be_tied) and tied, untied, or knotted
  *
  * In addition to setting the state, it will deal with getting rid of alerts if they exist, as well as registering and unregistering the stepping signals
  *
  * Arguments:
  * *
  * * state: SHOES_UNTIED, SHOES_TIED, or SHOES_KNOTTED, depending on what you want them to become
  * * user: used to check to see if we're the ones unknotting our own laces
  */
/**
  * handle_tying deals with all the actual tying/untying/knotting, inferring your intent from who you are in relation to the state of the laces
  *
  * If you're the wearer, you want them to move towards tied-ness (knotted -> untied -> tied). If you're not, you're pranking them, so you're moving towards knotted-ness (tied -> untied -> knotted)
  *
  * Arguments:
  * *
  * * user: who is the person interacting with the shoes?
  */
///checking to make sure we're still on the person we're supposed to be, for lacing do_after's
///check_trip runs on each step to see if we fall over as a result of our lace status. Knotted laces are a guaranteed trip, while untied shoes are just a chance to stumble
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\chronosuit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\hardsuit.dm. ----------------------
//Elite Syndie suit
//The Owl Hardsuit
/////////////SHIELDED//////////////////////////////////
///////////////Capture the Flag////////////////////
//////Syndicate Version
///SWAT version
/*
			CYDONIAN ARMOR THAT IS RGB AND STUFF WOOOOOOOOOO
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\miscellaneous.dm. ----------------------
//miscellaneous spacesuits
/*
Contains:
 - Captain's spacesuit
 - Death squad's hardsuit
 - SWAT suit
 - Officer's beret/spacesuit
 - NASA Voidsuit
 - Father Christmas' magical clothes
 - Pirate's spacesuit
 - ERT hardsuit: Command, Sec, Engi, Med
 - ERT High Alarm - Command, Sec, Engi, Med
 - EVA spacesuit
 - Radiation Spacesuit
 - Freedom's spacesuit (freedom from vacuum's oppression)
 - Carp hardsuit
*/
//Radiation
//Carpsuit, bestsuit, lovesuit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\plasmamen.dm. ----------------------
//I just want the light feature of the hardsuit helmet
///gets called when receiving the CLEAN_ACT signal from something, i.e soap or a shower. exists to remove any smiley faces drawn on the helmet.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\syndi.dm. ----------------------
//Regular syndicate space suit
//Green syndicate space suit
//Dark green syndicate space suit
//Orange syndicate space suit
//Blue syndicate space suit
//Black syndicate space suit
//Black-red syndicate contract varient
//Black-green syndicate space suit
//Black-blue syndicate space suit
//Black medical syndicate space suit
//Black-orange syndicate space suit
//Black-red syndicate space suit
//Black with yellow/red engineering syndicate space suit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\spacesuits\_spacesuits.dm. ----------------------
//Note: Everything in modules/clothing/spacesuits should have the entire suit grouped together.
//      Meaning the the suit is defined directly after the corrisponding helmet. Just like below!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\armor.dm. ----------------------
//All of the armor below is mostly unused
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\bio.dm. ----------------------
//Biosuit complete with shoes (in the item sprite)
//Standard biosuit, orange stripe
//Virology biosuit, green stripe
//Security biosuit, grey with red stripe across the chest
//Janitor's biosuit, grey with purple arms
//Scientist's biosuit, white with a pink-ish hue
//CMO's biosuit, blue stripe
//Plague Dr mask can be found in clothing/masks/gasmask.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\cloaks.dm. ----------------------
//Cloaks. No, not THAT kind of cloak.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\jobs.dm. ----------------------
/*
 * Job related
 */
//Botanist
//Captain
//Chaplain
//Chef
//Cook
//Detective
//Engineering
//Lawyer
//Mime
//Surgeon
//Curator
//Robotocist
//Paramedic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\labcoat.dm. ----------------------
// Departmental Jackets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\miscellaneous.dm. ----------------------
/*
 * Contains:
 *		Lasertag
 *		Costume
 *		Misc
 */
/*
 * Lasertag
 */
/*
 * Costume
 */
/*
 * Misc
 */
// WINTER COATS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\reactive_armour.dm. ----------------------
//Reactive armor
//When the wearer gets hit, this armor will teleport the user a short distance away (to safety or to more danger, no one knows. That's the fun of it!)
//Fire
//Stealth
//Tesla
//Repulse
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\toggles.dm. ----------------------
//Hoods for winter coats and chaplain hoodie etc
//Toggle exosuits for different aesthetic styles (hoodies, suit jacket buttons, etc)
//Hardsuit toggle code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\utility.dm. ----------------------
/*
 * Contains:
 *		Fire protection
 *		Bomb protection
 *		Radiation protection
 */
/*
 * Fire protection
 */
/*
 * Bomb protection
 */
/*
* Radiation protection
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\wiz_robe.dm. ----------------------
//Stickmemes. VV-friendly.
/**
  * Rallies your army of stickmen to whichever target the user is pointing.
  * Should the user be on harm intent and the target be a living mob that's not the user or a fellow stickman,
  * said target will be added to a list of foes which the stickmen will gladly dispose regardless of faction.
  * This is designed so stickmen will move toward whatever you point at even when you don't want to, that's the downside.
  */
//Shielded Armour
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\suits\_suits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\accessories.dm. ----------------------
//SANDSTORM EDIT
//SANDSTORM EDIT END
//////////////
//Waistcoats//
//////////////
////////////
//Sweaters//
////////////
////////////////
//Suit Jackets//
////////////////
///////////////////////
//Tactical Turtlnecks//
///////////////////////
/////////////////
//Miscellaneous//
/////////////////
//////////
//Medals//
//////////
//Pinning medals on people
////////////
//Armbands//
////////////
//////////////
//OBJECTION!//
//////////////
////////////////
//HA HA! NERD!//
////////////////
////////////////
//OONGA BOONGA//
////////////////
/////////////////////
//Syndie Accessories//
/////////////////////
//necklace
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\cluwne.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\color.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\costume.dm. ----------------------
//Christmas Clothes
// Lunar Clothes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\pants.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\shorts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\skirt_dress.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\suits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\sweaters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\syndicate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\trek.dm. ----------------------
//Just some alt-uniforms themed around Star Trek - Pls don't sue, Mr Roddenberry ;_;
//TOS
//TNG
//ENT
//VOY
//DS9
//Orvilike (Orville-inspired clothing with TOS-like color code)
//Orvilike Extra (Ditto, but expands it for Civilian department with SS13 colors and gives specified command uniform)
//honestly no idea why i added specified comm. uniforms but w/e
//The Motion Picture
//Q
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\_under.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\cargo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\centcom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\command.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\engineering.dm. ----------------------
//Contains: Engineering department jumpsuits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\rnd.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\security.dm. ----------------------
/*
 * Contains:
 *		Security
 *		Detective
 *		Navy uniforms
 */
/*
 * Security
 */
/*
 * Warden
 */
/*
 * Detective
 */
/*
 * Head of Security
 */
/*
 *Spacepol
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\civilian\civilian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\civilian\clown_mime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\civilian\curator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\Plasmaman\civilian_service.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\Plasmaman\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\Plasmaman\medsci.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\clothing\under\jobs\Plasmaman\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\detectivework\detective_work.dm. ----------------------
//CONTAINS: Suit fibers and Detective's Scanning Computer
//Set ignoregloves to add prints irrespective of the mob having gloves on.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\detectivework\evidence.dm. ----------------------
//CONTAINS: Evidence bags
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\detectivework\scanner.dm. ----------------------
//CONTAINS: Detective's Scanner
// TODO: Split everything into easy to manage procs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\economy\account.dm. ----------------------
/**
  * Returns a string with the civilian bounty's description on it.
  */
/**
  * Returns the required item count, or required chemical units required to submit a bounty.
  */
/**
  * Produces the value of the account's civilian bounty reward, if able.
  */
/**
  * Performs house-cleaning on variables when a civilian bounty is replaced, or, when a bounty is claimed.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\economy\paystand.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\economy\_economy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\emoji\emoji_parse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\error_handler\error_handler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\error_handler\error_viewer.dm. ----------------------
// Error viewing datums, responsible for storing error info, notifying admins
// when errors occur, and showing them to admins on demand.
// There are 3 different types used here:
//
// - error_cache keeps track of all error sources, as well as all individually
//   logged errors. Only one instance of this datum should ever exist, and it's
//   right here:
// If debugging is disabled, there's nothing useful to log, so don't bother.
// - error_source datums exist for each line (of code) that generates an error,
//   and keep track of all errors generated by that line.
//
// - error_entry datums exist for each logged error, and keep track of all
//   relevant info about that error.
// Common vars and procs are kept at the error_viewer level
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\abductor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\alien_infestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly_bluespace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly_flux.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly_grav.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly_pyro.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\anomaly_vortex.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\atmos_speed.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\aurora_caelus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\blob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\brain_trauma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\brand_intelligence.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\bureaucratic_error.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\camerafailure.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\carp_migration.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\cat_surgeon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\communications_blackout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\devil.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\disease_outbreak.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\dust.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\electrical_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\fake_virus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\false_alarm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\floorcluwne.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\fugitive_spawning.dm. ----------------------
//after spawning
//security team gets called in after 10 minutes of prep to find the refugees
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\ghost_role.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\grid_check.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\heart_attack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\high_priority_bounty.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\immovable_rod.dm. ----------------------
/*
Immovable rod random event.
The rod will spawn at some location outside the station, and travel in a straight line to the opposite side of the station
Everything solid in the way will be ex_act()'d
In my current plan for it, 'solid' will be defined as anything with density == 1

--NEOFite
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\ion_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\major_dust.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\mass_hallucination.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\meateor_wave.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\meteor_wave.dm. ----------------------
// Normal strength
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\mice_migration.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\nightmare.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\operative.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\pirates.dm. ----------------------
// #define PIRATES_SILVERSCALES "Silverscales"
// #define PIRATES_DUTCHMAN "Flying Dutchman"
//Shuttle equipment
//interrupt_research
//Pad & Pad Terminal
//Attempts to find the thing on station
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\portal_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\prison_break.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\processor_overload.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\radiation_storm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\sentience.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\shuttle_catastrophe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\shuttle_loan.dm. ----------------------
//items that appear only in shuttle loan events
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\spacevine.dm. ----------------------
// SPACE VINES (Note that this code is very similar to Biomass code)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\space_dragon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\space_ninja.dm. ----------------------
//=======//NINJA CREATION PROCS//=======//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\spider_infestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\spontaneous_appendicitis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\stray_cargo.dm. ----------------------
///Spawns a cargo pod containing a random cargo supply pack on a random area of the station
///Spawns a cargo pod containing a random cargo supply pack on a random area of the station
/**
* Tries to find a valid area, throws an error if none are found
* Also randomizes the start timer
*/
///Spawns a random supply pack, puts it in a pod, and spawns it on a random tile of the selected area
///Handles the creation of the pod, in case it needs to be modified beforehand
///Picks an area that wouldn't risk critical damage if hit by a pod explosion
///A rare variant that drops a crate containing syndicate uplink items
///Apply the syndicate pod skin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\supermatter_surge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\supernova.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\travelling_trader.dm. ----------------------
//the actual trader mob
//travelling trader subtypes (the types that can actually spawn)
//so far there's: cook / botanist / bartender / animal hunter / artifact dealer / surgeon (6 types!)
//cook
//botanist
//animal hunter
//bartender
//artifact dealer
//surgeon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\untie_shoes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\vent_clog.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wisdomcow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wormholes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\_event.dm. ----------------------
//this datum is used by the events controller to dictate how it selects events
// Checks if the event can be spawned. Used by event controller and "false alarm" event.
// Admin-created events override this.
/*
Runs the event
* Arguments:
* - random: shows if the event was triggered randomly, or by on purpose by an admin or an item
* - announce_chance_override: if the value is not null, overrides the announcement chance when an admin calls an event
*/
//Special admins setup
//Called first before processing.
//Allows you to setup your event, such as randomly
//setting the start_when and or announce_when variables.
//Only called once.
//EDIT: if there's anything you want to override within the new() call, it will not be overridden by the time this proc is called.
//It will only have been overridden by the time we get to announce() start() tick() or end() (anything but setup basically).
//This is really only for setting defaults which can be overridden later when New() finishes.
//Called when the tick is equal to the start_when variable.
//Allows you to start before announcing or vice versa.
//Only called once.
/**
  * Called after something followable has been spawned by an event
  * Provides ghosts a follow link to an atom if possible
  * Only called once.
  */
//Called when the tick is equal to the announce_when variable.
//Allows you to announce before starting or vice versa.
//Only called once.
//Called on or after the tick counter is equal to start_when.
//You can include code related to your event or add your own
//time stamped events.
//Called more than once.
//Called on or after the tick is equal or more than end_when
//You can include code related to the event ending.
//Do not place spawn() in here, instead use tick() to check for
//the activeFor variable.
//For example: if(activeFor == myOwnVariable + 30) doStuff()
//Only called once.
// Returns threat; used for dynamic. Used for custom stuff, just returns the threat var by default.
//Do not override this proc, instead use the appropiate procs.
//This proc will handle the calls to the appropiate procs.
//Garbage collects the event by removing it from the global events list,
//which should be the only place it's referenced.
//Called when start(), announce() and end() has all been called.
//Sets up the event then adds the event to the the list of running events
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\holiday\halloween.dm. ----------------------
//spooky foods (you can't actually make these when it's not halloween)
//spooky items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\holiday\vday.dm. ----------------------
// Valentine's Day events //
// why are you playing spessmens on valentine's day you wizard //
// valentine / candy heart distribution //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\holiday\xmas.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\aid.dm. ----------------------
//in this file: Various events that directly aid the wizard. This is the "lets entice the wizard to use summon events!" file.
//--//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\blobies.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\curseditems.dm. ----------------------
//Note about adding items to this: Because of how NODROP_1 works if an item spawned to the hands can also be equiped to a slot
//it will be able to be put into that slot from the hand, but then get stuck there. To avoid this make a new subtype of any
//item you want to equip to the hand, and set its slots_flags = null. Only items equiped to hands need do this.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\departmentrevolt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\embeddies.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\fakeexplosion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\ghost.dm. ----------------------
//--//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\greentext.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\imposter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\invincible.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\lava.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\madness.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\magicarp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\petsplosion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\race.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\rpgloot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\shuffle.dm. ----------------------
//---//
//---//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\events\wizard\summons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\fields.dm. ----------------------
//Movable and easily code-modified fields! Allows for custom AOE effects that affect movement and anything inside of them, and can do custom turf effects!
//Supports automatic recalculation/reset on movement.
//If there's any way to make this less CPU intensive than I've managed, gimme a call or do it yourself! - kevinz000
//Field shapes
//Proc to make fields. make_field(field_type, field_params_in_associative_list)
//Gets edge direction/corner, only works with square radius/WDH fields!
//DEBUG FIELDS
//DEBUG FIELD ITEM
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\gravity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\infinite_void.dm. ----------------------
//you don't look quite right, is something the matter?
//let's put some colour back into your cheeks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\peaceborg_dampener.dm. ----------------------
//Projectile dampening field that slows projectiles and lowers their damage for an energy cost deducted every 1/5 second.
//Only use square radius for this!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\timestop.dm. ----------------------
//you don't look quite right, is something the matter?
//let's put some colour back into your cheeks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\fields\turf_objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\flufftext\Dreaming.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\flufftext\Hallucination.dm. ----------------------
//Returns a random turf in a ring around the target mob, useful for sound hallucinations
/*		if("nutrition")
			if(prob(50))
				target.throw_alert(alert_type, /atom/movable/screen/alert/fat, override = TRUE)
			else
				target.throw_alert(alert_type, /atom/movable/screen/alert/starving, override = TRUE)
*/
//hallucination projectile code in code/modules/projectiles/projectile/special.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\autobottler.dm. ----------------------
//Brands - This is just export verson of the booze bottles
//Storge - Just the bottles not booze inside
//Wines - Holds wines later made by Sci nodes
//Beers - Holds beers later made by Sci nodes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////
/// Food.
////////////////////////////////////////////////////////////////////////////////
/// Note: When adding food items with dummy parents, make sure to add
/// the parent to the exclusion list in code/__HELPERS/unsorted.dm's
/// get_random_food proc.
////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\pizzabox.dm. ----------------------
//An anomalous pizza box that, when opened, produces the opener's favorite kind of pizza.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\drinks\drinks.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////
/// Drinks.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// Drinks. END
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////Drinks/////////////////////////////////////////
//Notes by Darem: Drinks are simply containers that start preloaded. Unlike condiments, the contents can be ingested directly
//	rather then having to add it to something else first. They should only contain liquids. They have a default container size of 50.
//	Formatting is the same as food.
//Used by MREs
//////////////////////////drinkingglass and shaker/////////////////////////////////////////////////////////////////////////////////////
//Note by Darem: This code handles the mixing of drinks. New drinks go in three places: In Chemistry-Reagents.dm (for the drink
//	itself), in Chemistry-Recipes.dm (for the reaction that changes the components into the drink), and here (for the drinking glass
//	icon states.
//////////////////////////soda_cans////////////////////////////////////////////////////
//These are in their own group to be used as IED's in /obj/item/grenade/ghettobomb.dm//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\drinks\drinks\bottle.dm. ----------------------
///////////////////////////////////////////////Alchohol bottles! -Agouri //////////////////////////
//Functionally identical to regular drinks. The only difference is that the default bottle size is 100. - Darem
//Bottles now knockdown and break when smashed on people's heads. - Giacom
//Keeping this here for now, I'll ask if I should keep it here.
//////////////////////////JUICES AND STUFF ///////////////////////
////////////////////////// MOLOTOV ///////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\drinks\drinks\drinkingglass.dm. ----------------------
//Shot glasses!//
//  This lets us add shots in here instead of lumping them in with drinks because >logic  //
//  The format for shots is the exact same as iconstates for the drinking glass, except you use a shot glass instead.  //
//  If it's a new drink, remember to add it to Chemistry-Reagents.dm  and Chemistry-Recipes.dm as well.  //
//  You can only mix the ported-over drinks in shot glasses for now (they'll mix in a shaker, but the sprite won't change for glasses). //
//  This is on a case-by-case basis, and you can even make a separate sprite for shot glasses if you want. //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\condiment.dm. ----------------------
///////////////////////////////////////////////Condiments
//Notes by Darem: The condiments food-subtype is for stuff you don't actually eat but you use to modify existing food. They all
//	leave empty containers when used up and can be filled/re-filled with other items. Formatting for first section is identical
//	to mixed-drinks code. If you want an object that starts pre-loaded, you need to make it in addition to the other code.
//Food items that aren't eaten normally and leave an empty container behind.
//Food packs. To easily apply deadly toxi... delicious sauces to your food!
//Ketchup
//Mustard
//Hot sauce
//Other Sauce
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\customizables.dm. ----------------------
//**************************************************************
//
// Customizable Food
//
//**************************************************************
/////////////////////////////////////////////////////////////////////////////
//////////////      Customizable Food Types     /////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// Bowl ////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks.dm. ----------------------
/** # Snacks

Items in the "Snacks" subcategory are food items that people actually eat. The key points are that they are created
already filled with reagents and are destroyed when empty. Additionally, they make a "munching" noise when eaten.

Notes by Darem: Food in the "snacks" subtype can hold a maximum of 50 units. Generally speaking, you don't want to go over 40
total for the item because you want to leave space for extra condiments. If you want effect besides healing, add a reagent for
it. Try to stick to existing reagents when possible (so if you want a stronger healing effect, just use omnizine). On use
effect (such as the old officer eating a donut code) requires a unique reagent (unless you can figure out a better way).

The nutriment reagent and bitesize variable replace the old heal_amt and amount variables. Each unit of nutriment is equal to
2 of the old heal_amt variable. Bitesize is the rate at which the reagents are consumed. So if you have 6 nutriment and a
bitesize of 2, then it'll take 3 bites to eat. Unlike the old system, the contained reagents are evenly spread among all
the bites. No more contained reagents = no more bites.

Food formatting and crafting examples.
```
/obj/item/reagent_containers/food/snacks/saltedcornchips						//Identification path for the object.
	name = "salted corn chips"													//Name that displays when hovered over.
	desc = "Manufactured in a far away factory."								//Description on examine.
	icon_state = "saltychip"													//Refers to an icon, usually in food.dmi
	bitesize = 3																//How many reagents are consumed in each bite.
	list_reagents = list(/datum/reagent/consumable/nutriment = 6,				//What's inside the snack, but only if spawned. For example, from a chemical reaction, vendor, or slime core spawn.
						/datum/reagent/consumable/nutriment/vitamin = 2)
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 1,				//What's -added- to the food, in addition to the reagents contained inside the foods used to craft it. Basically, a reward for cooking.
						/datum/reagent/consumable/nutriment/vitamin = 1)		^^For example. Egg+Egg = 2Egg + Bonus Reagents.
	filling_color = "#F4A460"													//What color it will use if put in a custom food.
	tastes = list("salt" = 1, "oil" = 1)										//Descriptive flavoring displayed when eaten. IE: "You taste a bit of salt and a bit of oil."
	foodtype = GRAIN | JUNKFOOD													//Tag for racial or custom food preferences. IE: Most Lizards cannot have GRAIN.

Crafting Recipe (See files in code/modules/food_and_drinks/recipes/tablecraft/)

/datum/crafting_recipe/food/nachos
	name ="Salted Corn Chips"													//Name that displays in the Crafting UI
	reqs = list(																//The list of ingredients to make the food.
		/obj/item/reagent_containers/food/snacks/tortilla = 1,
		/datum/reagent/consumable/sodiumchloride = 1							//As a note, reagents and non-food items don't get added to the food. If you
	)																			^^want the reagents, make sure the food item has it listed under bonus_reagents.
	result = /obj/item/reagent_containers/food/snacks/saltedcornchips			//Resulting object.
	subcategory = CAT_MISCFOOD													//Subcategory the food falls under in the Food Tab of the crafting menu.
```

All foods are distributed among various categories. Use common sense.
*/
//Called when you finish tablecrafting a snack.
// initialize_cooked_food() is called when microwaving the food
//////////////////////////////////////////Dunking///////////////////////////////////////////
// //////////////////////////////////////////////Store////////////////////////////////////////
/// All the food items that can store an item inside itself, like bread or cake.
// //////////////////////////////////////////////Frying////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_bread.dm. ----------------------
//teleporting tumor bread kills it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_burgers.dm. ----------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_cake.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_egg.dm. ----------------------
////////////////////////////////////////////EGGS////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_frozen.dm. ----------------------
/////////////
//SNOWCONES//
/////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_meat.dm. ----------------------
//Not only meat, actually, but also snacks that are almost meat, such as fish meat or tofu
////////////////////////////////////////////FISH////////////////////////////////////////////
////////////////////////////////////////////MEATS AND ALIKE////////////////////////////////////////////
////////////// Cubes //////////
//Well eggs normally are able to hatch into small birds, this one does not.
//Also in order to have a normal egg hatch you need a hen to lay the egg that is able to hatch, meaning this one is for on-demand hen needs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_other.dm. ----------------------
////////////////////////////////////////////OTHER////////////////////////////////////////////
//Easter Stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_pastry.dm. ----------------------
//Pastry is a food that is made from dough which is made from wheat or rye flour.
//This file contains pastries that don't fit any existing categories.
////////////////////////////////////////////DONUTS////////////////////////////////////////////
/// Returns the sprite of the donut while in a donut box
//////////////////////JELLY DONUTS/////////////////////////
// Jelly donuts don't have holes, but look the same on the outside
//////////////////////////SLIME DONUTS/////////////////////////
////////////////////////////////////////////MUFFINS////////////////////////////////////////////
////////////////////////////////////////////WAFFLES////////////////////////////////////////////
////////////////////////////////////////////OTHER////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_pie.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_pizza.dm. ----------------------
/////////////////////////////////////////////////PIZZA////////////////////////////////////////
// Used by MREs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_salad.dm. ----------------------
//this category is very little but I think that it has great potential to grow
////////////////////////////////////////////SALAD////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_sandwichtoast.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_soup.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_spaghetti.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_sushi.dm. ----------------------
//////////////////////////Sushi Components///////////////////////
//trash = /obj/item/trash/tuna_used //I dont know if I like this idea - A Masked Cat
//////////////////////////Sushi/////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks_vend.dm. ----------------------
////////////////////////////////////////////SNACKS FROM VENDING MACHINES////////////////////////////////////////////
//in other words: junk food
//don't even bother looking for recipes for these
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks\dough.dm. ----------------------
/////////////////// Dough Ingredients ////////////////////////
// Dough + rolling pin = flat dough
// sliceable into 3xdoughslices
// Cake batter + rolling pin = pie dough
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\food\snacks\meat.dm. ----------------------
///////////////////////////////////// HUMAN MEATS //////////////////////////////////////////////////////
////////////////////////////////////// OTHER MEATS ////////////////////////////////////////////////////////
////////////////////////////////////// MEAT STEAKS ///////////////////////////////////////////////////////////
//////////////////////////////// MEAT CUTLETS ///////////////////////////////////////////////////////
//Raw cutlets
//Cooked cutlets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\deep_fryer.dm. ----------------------
/*
April 3rd, 2014 marks the day this machine changed the face of the kitchen on NTStation13
God bless America.
          ___----------___
        _--                ----__
       -                         ---_
      -___    ____---_              --_
  __---_ .-_--   _ O _-                -
 -      -_-       ---                   -
-   __---------___                       -
- _----                                  -
 -     -_                                 _
 `      _-                                 _
       _                           _-_  _-_ _
      _-                   ____    -_  -   --
      -   _-__   _    __---    -------       -
     _- _-   -_-- -_--                        _
     -_-                                       _
    _-                                          _
    -
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\food_cart.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\gibber.dm. ----------------------
//auto-gibs anything that bumps into it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\grill.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\icecream_vat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\microwave.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\monkeyrecycler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\processor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\kitchen_machinery\smartfridge.dm. ----------------------
// -------------------------
//  SmartFridge.  Much todo
// -------------------------
/*******************
*   Item Adding
********************/
///Really simple proc, just moves the object "O" into the hands of mob "M" if able, done so I could modify the proc a little for the organ fridge
// ----------------------------
//  Drying Rack 'smartfridge'
// ----------------------------
// ----------------------------
//  Bar drink smartfridge
// ----------------------------
// ----------------------------
//  Food smartfridge
// ----------------------------
// -------------------------------------
// Xenobiology Slime-Extract Smartfridge
// -------------------------------------
// -------------------------
// Organ Surgery Smartfridge
// -------------------------
//cit specific??????
// -----------------------------
// Chemistry Medical Smartfridge
// -----------------------------
// ----------------------------
// Virology Medical Smartfridge
// ----------------------------
// ----------------------------
// Disk """fridge"""
// ----------------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\drinks_recipes.dm. ----------------------
////////////////////////////////////////// COCKTAILS //////////////////////////////////////
////DRINKS THAT REQUIRED IMPROVED SPRITES BELOW:: -Agouri/////
/*
/datum/chemical_reaction/neurotoxin/FermiFinish(datum/reagents/holder, var/atom/my_atom)
	var/datum/reagent/consumable/ethanol/neurotoxin/Nt = locate(/datum/reagent/consumable/ethanol/neurotoxin) in my_atom.reagents.reagent_list
	var/cached_volume = Nt.volume
	if(Nt.purity < 0.5)
		holder.remove_reagent(type, cached_volume)
		holder.add_reagent(/datum/reagent/consumable/ethanol/neuroweak, cached_volume)
*/
////////////////////////////////////////// Tea  Base Drinks //////////////////////////////////////
////////////////////////////////////////// Race Base Drinks //////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\food_mixtures.dm. ----------------------
//////////////////////////////////////////FOOD MIXTURES////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\processor_recipes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_bread.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////BREAD////////////////////////////////////////////////
////////////////////////////////////////////////TOAST////////////////////////////////////////////////
////////////////////////////////////////////////MISC////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_burger.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////STANDARD BURGS////////////////////////////////////////////////
///////////////EXOTIC//////////////////
////////////MYSTICAL////////////////
////////////COLORED BURGERS//////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_cake.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////FRUIT CAKE////////////////////////////////////////////////
///////////////////////////////////FANCY////////////////////////////////////////////
/////////////SPECIAL////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_donut.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////DONUTS////////////////////////////////////////////////
////////////////////////////////////////////////////JELLY DONUTS///////////////////////////////////////////////////////
////////////////////////////////////////////////////SLIME  DONUTS///////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_egg.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////EGG RECIPE's////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_frozen.dm. ----------------------
/////////////////
//Misc. Frozen.//
/////////////////
//////////////////////////SNOW CONES///////////////////////
/////I don't like seperating the clown and mime.///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_meat.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////KEBABS////////////////////////////////////////////////
// see code/module/crafting/table.dm
////////////////////////////////////////////////MR SPIDER////////////////////////////////////////////////
////////////////////////////////////////////////MISC RECIPE's////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_mexican.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////"MEXICAN"////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_misc.dm. ----------------------
// see code/module/crafting/table.dm
//////////////////Eastern Foods//////////////////////
/////////////////////////////////MISC/////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_pastry.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////MUFFINS////////////////////////////////////////////////
////////////////////////////////////////////CUPCAKES////////////////////////////////////////////
////////////////////////////////////////////COOKIES////////////////////////////////////////////
////////////////////////////////////////////////WAFFLES AND PANCAKES////////////////////////////////////////////////
////////////////////////////////////////////////DONKPOCCKETS////////////////////////////////////////////////
////////////////////////////////////////////OTHER////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_pies_sweets.dm. ----------------------
// see code/module/crafting/table.dm
//////////////////////////////////FRUITS/////////////////////////////////////////
//////////OTHER PIES/////////
//////////////TARTS//////////////
////////////////////////////////////////////SWEETS////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_pizza.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////PIZZA!!!////////////////////////////////////////////////
//////Special Pizzas/////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_salad.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////SALADS////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_sandwich.dm. ----------------------
// see code/datums/recipe.dm
// see code/module/crafting/table.dm
////////////////////////////////////////////////SANDWICHES////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_seafood.dm. ----------------------
// see code/module/crafting/table.dm
///////////////////////Sushi Components///////////////////////////
//////////////////////////Sushi/////////////////////////////////
//////////////////////////////////////////////FISH///////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_soup.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////SOUP////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\food_and_drinks\recipes\tablecraft\recipes_spaghetti.dm. ----------------------
// see code/module/crafting/table.dm
////////////////////////////////////////////////SPAGHETTI////////////////////////////////////////////////
////////////NOODLES///////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\games\cas.dm. ----------------------
// CARDS AGAINST SPESS
// This is a parody of Cards Against Humanity (https://en.wikipedia.org/wiki/Cards_Against_Humanity)
// which is licensed under CC BY-NC-SA 2.0, the full text of which can be found at the following URL:
// https://creativecommons.org/licenses/by-nc-sa/2.0/legalcode
// Original code by Zuhayr, Polaris Station, ported with modifications
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\games\unum.dm. ----------------------
/// A deck of unum cards. Classic.
//Populate the deck.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\dynamic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\easter.dm. ----------------------
//Easter Baskets
//Bunny Suit
//Egg prizes and egg spawns!
/*
Easter Recipes + Food moved to appropriate files.
\code\modules\food_and_drinks\
\code\modules\food_and_drinks\recipes\
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\holidays.dm. ----------------------
// This proc gets run before the game starts when the holiday is activated. Do festive shit here.
// When the round starts, this proc is ran to get a text message to display to everyone to wish them a happy holiday
// Returns special prefixes for the station name on certain days. You wind up with names like "Christmas Object Epsilon". See new_station_name()
// Return 1 if this holidy should be celebrated today
// The actual holidays
/*

This used to be a comment about ramadan but it got deleted because we don't preach false religions here. Long Live the One True God.

*/
//Random citadel thing for halloween species
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\halloween\bartholomew.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\halloween\halloween.dm. ----------------------
///////////////////////////////////////
///////////HALLOWEEN CONTENT///////////
///////////////////////////////////////
//spooky recipes
//////////////////////////////
//Spookoween trapped closets//
//////////////////////////////
//Spookoween variables
//don't spawn in crates
////////////////////
//Spookoween Ghost//
////////////////////
///////////////////////////
//Spookoween Insane Clown//
///////////////////////////
/////////////////////////
// Spooky Uplink Items //
/////////////////////////
/////////////////////////
// Ball map Items      //
/////////////////////////
//Hoooo boy that's some wild code there.
//Damnit LazyBones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holiday\halloween\jacqueen.dm. ----------------------
//Conversation
/////// EVENT
/////// MOBS
//Whacha doing in here like? Yae wan tae ruin ta magicks?
//Ye wee bugger, gerrout of it. Ye've nae tae enjoy reading the code fer mae secrets like.
//Blame Fel
//Christmas car spawner
//Potions
//Candies
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\area_copy.dm. ----------------------
//Vars that will not be copied when using /DuplicateObject
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\computer.dm. ----------------------
/*
	Holodeck Update

	The on-station holodeck area is of type [holodeck_type].
	All subtypes of [program_type] are loaded into the program cache or emag programs list.
	If init_program is null, a random program will be loaded on startup.
	If you don't wish this, set it to the offline program or another of your choosing.

	You can use this to add holodecks with minimal code:
	1) Define new areas for the holodeck programs
	2) Map them
	3) Create a new control console that uses those areas

	Non-mapped areas should be skipped but you should probably comment them out anyway.
	The base of program_type will always be ignored; only subtypes will be loaded.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\holo_effect.dm. ----------------------
/*
	The holodeck activates these shortly after the program loads,
	and deactivates them immediately before changing or disabling the holodeck.

	These remove snowflake code for special holodeck functions.
*/
// Called by the holodeck computer as long as the program is running
// Generates a holodeck-tracked card deck
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\items.dm. ----------------------
/*
	Items, Structures, Machines
*/
//
// Items
//
//BASKETBALL OBJECTS
//
// Structures
//
//
// Machines
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\mobs.dm. ----------------------
/*
	Mobs
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\holodeck\turfs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\biogenerator.dm. ----------------------
/**
  * activate: Activates biomass processing and converts all inserted grown products into biomass
  *
  * Arguments:
  * * user The mob starting the biomass processing
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\fermenting_barrel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\gene_modder.dm. ----------------------
// Gene modder for seed vault ship, built with high tech alien parts.
/*
 *  Plant DNA disk
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown.dm. ----------------------
// ***********************************************************
// Foods that are produced from hydroponics ~~~~~~~~~~
// Data from the seeds carry over to these grown foods
// ***********************************************************
// Base type. Subtypes are found in /grown dir.
// Various gene procs
// For item-containing growns such as eggy or gatfruit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\growninedible.dm. ----------------------
// **********************
// Other harvested materials from plants (that are not food)
// **********************
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\hydroitemdefines.dm. ----------------------
// Plant analyzer
// *************************************
// Hydroponics Tools
// *************************************
// *************************************
// Nutrient defines for hydroponics
// *************************************
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\hydroponics.dm. ----------------------
//Nutrients//////////////////////////////////////////////////////////////
//Photosynthesis/////////////////////////////////////////////////////////
//Water//////////////////////////////////////////////////////////////////
//Toxins/////////////////////////////////////////////////////////////////
//Pests & Weeds//////////////////////////////////////////////////////////
//This is where stability mutations exist now.
//Health & Age///////////////////////////////////////////////////////////
/**
  * Plant Death Proc.
  * Cleans up various stats for the plant upon death, including pests, harvestability, and plant health.
  */
/// Tray Setters - The following procs adjust the tray or plants variables, and make sure that the stat doesn't go out of bounds.///
///////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\hydroponics_chemreact.dm. ----------------------
/**
  *This is NOW the gradual affects that each chemical applies on every process() proc. Nutrients now use a more robust reagent holder in order to apply less insane
  * stat changes as opposed to 271 lines of individual statline effects. Shoutout to the original comments on chems, I just cleaned a few up.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\plant_genes.dm. ----------------------
// Core plant genes store 5 main variables: lifespan, endurance, production, yield, potency
// Reagent genes store reagent ID and reagent ratio. Amount of reagent in the plant = 1 + (potency * rate)
// Various traits affecting the product. Each must be somehow useful.
///This proc triggers when the tray processes and a roll is sucessful, the success chance scales with production.
//Invasive spreading lets the plant jump to other trays, the spreadinhg plant won't replace plants of the same type.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\sample.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\seeds.dm. ----------------------
// ********************************************************
// Here's all the seeds (plants) that can be used in hydro
// ********************************************************
///This proc adds a mutability_flag to a gene
///This proc removes a mutability_flag from a gene
// Harvest procs
/// Setters procs ///
//Directly setting stats
// Checks plants for broken tray icons. Use Advanced Proc Call to activate.
// Maybe some day it would be used as unit test.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\seed_extractor.dm. ----------------------
/**
  * Finds and extracts seeds from an object
  *
  * Checks if the object is such that creates a seed when extracted.  Used by seed
  * extractors or posably anything that would create seeds in some way.  The seeds
  * are dropped either at the extractor, if it exists, or where the original object
  * was and it qdel's the object
  *
  * Arguments:
  * * O - Object containing the seed, can be the loc of the dumping of seeds
  * * t_max - Amount of seed copies to dump, -1 is ranomized
  * * extractor - Seed Extractor, used as the dumping loc for the seeds and seed multiplier
  * * user - checks if we can remove the object from the inventory
  * *
  */
/**
  * Generate seed string
  *
  * Creates a string based of the traits of a seed.  We use this string as a bucket for all
  * seeds that match as well as the key the ui uses to get the seed.  We also use the key
  * for the data shown in the ui.  Javascript parses this string to display
  *
  * Arguments:
  * * O - seed to generate the string from
  */
/** Add Seeds Proc.
  *
  * Adds the seeds to the contents and to an associated list that pregenerates the data
  * needed to go to the ui handler
  *
 **/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\beekeeping\beebox.dm. ----------------------
//Premade apiaries can spawn with a random reagent
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\beekeeping\beekeeper_suit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\beekeeping\honeycomb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\beekeeping\honey_frame.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\ambrosia.dm. ----------------------
// Ambrosia - base type
// Ambrosia Vulgaris
// Ambrosia Deus
//Ambrosia Gaia
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\apple.dm. ----------------------
// Apple
// Gold Apple
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\banana.dm. ----------------------
// Banana
//Banana Peel
// Mimana - invisible sprites are totally a feature!
// Bluespace Banana
//Banana Spider.
// Other
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\beans.dm. ----------------------
// Soybeans
// Koibean
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\berries.dm. ----------------------
// Berries
// Poison Berries
// Death Berries
// Glow Berries
// Cherries
// Blue Cherries
//Cherry Bulbs
// Grapes
// Green Grapes
// Strawberry
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\cannabis.dm. ----------------------
// Cannabis
// ---------------------------------------------------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\cereals.dm. ----------------------
// Wheat
// Oat
// Rice
//Meatwheat - grows into synthetic meat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\chili.dm. ----------------------
// Chili
// Ice Chili
// Ghost Chili
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\citrus.dm. ----------------------
// Citrus - base type
// Lime
// Orange
//3D Orange
// Lemon
// Combustible lemon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\cocoa_vanilla.dm. ----------------------
// Cocoa Pod
// Vanilla Pod
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\corn.dm. ----------------------
// Corn
// Snapcorn
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\cotton.dm. ----------------------
//reinforced mutated variant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\eggplant.dm. ----------------------
// Eggplant
// Egg-Plant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\flowers.dm. ----------------------
// Poppy
// Lily
// Geranium
// Harebell
// Sunflower
// Moonflower
// Novaflower
// Beebalm
// Beebalm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\garlic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\grass_carpet.dm. ----------------------
// Grass
//Fairygrass
// Carpet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\kudzu.dm. ----------------------
// A very special plant, deserving it's own file.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\melon.dm. ----------------------
// Watermelon
// Holymelon
/*
/obj/item/reagent_containers/food/snacks/grown/holymelon/Initialize(mapload)
	. = ..()
	var/uses = 1
	if(seed)
		uses = round(seed.potency / 20)
	AddComponent(/datum/component/anti_magic, TRUE, TRUE, FALSE, ITEM_SLOT_HANDS, uses, TRUE, CALLBACK(src, .proc/block_magic), CALLBACK(src, .proc/expire)) //deliver us from evil o melon god

/obj/item/reagent_containers/food/snacks/grown/holymelon/proc/block_magic(mob/user, major)
	if(major)
		to_chat(user, "<span class='warning'>[src] hums slightly, and seems to decay a bit.</span>")

/obj/item/reagent_containers/food/snacks/grown/holymelon/proc/expire(mob/user)
	to_chat(user, "<span class='warning'>[src] rapidly turns into ash!</span>")
	qdel(src)
	new /obj/effect/decal/cleanable/ash(drop_location())
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\misc.dm. ----------------------
// Starthistle
// Corpse flower
//Galaxy Thistle
// Cabbage
// Sugarcane
// Gatfruit
//Cherry Bombs
// Coconut
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\mushrooms.dm. ----------------------
// Reishi
// Fly Amanita
// Destroying Angel
// Liberty Cap
// Plump Helmet
/*
// Walking Mushroom
/obj/item/seeds/plump/walkingmushroom
	name = "pack of walking mushroom mycelium"
	desc = "This mycelium will grow into huge stuff!"
	icon_state = "mycelium-walkingmushroom"
	species = "walkingmushroom"
	plantname = "Walking Mushrooms"
	product = /obj/item/reagent_containers/food/snacks/grown/mushroom/walkingmushroom
	lifespan = 30
	endurance = 30
	maturation = 5
	yield = 1
	genes = list(/datum/plant_gene/trait/plant_type/fungal_metabolism, /datum/plant_gene/trait/eyes)
	growing_icon = 'icons/obj/hydroponics/growing_mushrooms.dmi'
	mutatelist = list()
	reagents_add = list(/datum/reagent/consumable/nutriment/vitamin = 0.05, /datum/reagent/consumable/nutriment = 0.15)
	rarity = 30

/obj/item/reagent_containers/food/snacks/grown/mushroom/walkingmushroom
	seed = /obj/item/seeds/plump/walkingmushroom
	name = "walking mushroom"
	desc = "<I>Plumus Locomotus</I>: The beginning of the great walk."
	icon_state = "walkingmushroom"
	filling_color = "#9370DB"
	can_distill = FALSE

/obj/item/reagent_containers/food/snacks/grown/mushroom/walkingmushroom/attack_self(mob/user)
	if(isspaceturf(user.loc))
		return
	var/mob/living/simple_animal/hostile/mushroom/M = new /mob/living/simple_animal/hostile/mushroom(user.loc)
	M.maxHealth += round(seed.endurance / 4)
	M.melee_damage_lower += round(seed.potency / 20)
	M.melee_damage_upper += round(seed.potency / 20)
	M.move_to_delay -= round(seed.production / 50)
	M.health = M.maxHealth
	qdel(src)
	to_chat(user, "<span class='notice'>You plant the walking mushroom.</span>")
*/
// Chanterelle
//Jupiter Cup
// Glowshroom
// Glowcap
//Shadowshroom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\nettle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\onion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\peach.dm. ----------------------
// Peach
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\peanuts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\peas.dm. ----------------------
// Finally, peas. Base plant.
// Laughin' Peas
// World Peas - Peace at last, peace at last...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\pineapple.dm. ----------------------
// Pineapple!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\potato.dm. ----------------------
// Potato
// Sweet Potato
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\pumpkin.dm. ----------------------
// Pumpkin
// Blumpkin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\random.dm. ----------------------
//Random seeds; stats, traits, and plant type are randomized for each seed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\replicapod.dm. ----------------------
// A very special plant, deserving it's own file.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\root.dm. ----------------------
// Carrot
// Parsnip
// White-Beet
// Red Beet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\tea_coffee.dm. ----------------------
// Tea
// Tea Astra
// Catnip
// Coffee
// Coffee Robusta
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\tobacco.dm. ----------------------
// Tobacco
// Space Tobacco
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\tomato.dm. ----------------------
// Tomato
// Blood Tomato
// Blue Tomato
// Bluespace Tomato
// Killer Tomato
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\hydroponics\grown\towercap.dm. ----------------------
/////////BONFIRES//////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instruments\item.dm. ----------------------
//copy pasta of the space piano, don't hurt me -Pete
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instruments\stationary.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\brass.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\chromatic_percussion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\fun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\guitar.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\hardcoded.dm. ----------------------
//THESE ARE HARDCODED INSTRUMENT SAMPLES.
//SONGS WILL BE AUTOMATICALLY SWITCHED TO LEGACY MODE IF THEY USE THIS KIND OF INSTRUMENT!
//I'd prefer these stayed. They sound different from the mechanical synthesis of synthed instruments, and I quite like them that way. It's not legacy, it's hardcoded, old style. - kevinz000
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\organ.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\piano.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\synth_tones.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\_instrument_data.dm. ----------------------
/// Get all non admin_only instruments.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\instrument_data\_instrument_key.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\songs\editor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\songs\play_legacy.dm. ----------------------
/**
  * Compiles our lines into "chords" with filenames for legacy playback. This makes there have to be a bit of lag at the beginning of the song, but repeats will not have to parse it again, and overall playback won't be impacted by as much lag.
  */
/**
  * Proc to play a legacy note. Just plays the sound to hearing mobs (and does hearcheck if necessary), no fancy channel/sustain/management.
  *
  * Arguments:
  * * note is a number from 1-7 for A-G
  * * acc is either "b", "n", or "#"
  * * oct is 1-8 (or 9 for C)
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\songs\play_synthesized.dm. ----------------------
/**
  * Compiles our lines into "chords" with numbers. This makes there have to be a bit of lag at the beginning of the song, but repeats will not have to parse it again, and overall playback won't be impacted by as much lag.
  */
/**
  * Plays a specific numerical key from our instrument to anyone who can hear us.
  * Does a hearing check if enough time has passed.
  */
/**
  * Stops all sounds we are "responsible" for. Only works in synthesized mode.
  */
/**
  * Stops all sounds we are responsible for in a given person. Only works in synthesized mode.
  */
/**
  * Pops a channel we have reserved so we don't have to release and re-request them from SSsounds every time we play a note. This is faster.
  */
/**
  * Decays our channels and updates their volumes to mobs who can hear us.
  *
  * Arguments:
  * * wait_ds - the deciseconds we should decay by. This is to compensate for any lag, as otherwise songs would get pretty nasty during high time dilation.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\instruments\songs\_song.dm. ----------------------
/**
  * # Song datum
  *
  * These are the actual backend behind instruments.
  * They attach to an atom and provide the editor + playback functionality.
  */
/**
  * Checks and stores which mobs can hear us. Terminates sounds for mobs that leave our range.
  */
/**
  * Sets our instrument, caching anything necessary for faster accessing. Accepts an ID, typepath, or instantiated instrument datum.
  */
/**
  * Attempts to start playing our song.
  */
/**
  * Stops playing, terminating all sounds if in synthesized mode. Clears hearing_mobs.
  */
/**
  * Processes our song.
  */
/**
  * Converts a tempodiv to ticks to elapse before playing the next chord, taking into account our tempo.
  */
/**
  * Compiles chords.
  */
/**
  * Plays a chord.
  */
/**
  * Checks if we should halt playback.
  */
/**
  * Sanitizes tempo to a value that makes sense and fits the current world.tick_lag.
  */
/**
  * Gets our beats per minute based on our tempo.
  */
/**
  * Sets our tempo from a beats-per-minute, sanitizing it to a valid number first.
  */
/**
  * Updates the window for our users. Override down the line.
  */
/**
  * Updates our cached linear/exponential falloff stuff, saving calculations down the line.
  */
/**
  * Setter for setting output volume.
  */
/**
  * Setter for setting how low the volume has to get before a note is considered "dead" and dropped
  */
/**
  * Setter for setting exponential falloff factor.
  */
/**
  * Setter for setting linear falloff duration.
  */
// subtype for handheld instruments, like violin
// subtype for stationary structures, like pianos
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\analyzer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\assemblies.dm. ----------------------
// Returns true if the circuit made it inside.
// Actually puts the circuit inside, doesn't perform any checks.
// Actually removes the component, doesn't perform any checks.
// Returns true if power was successfully drawn.
// Ditto for giving.
// Returns the object that is supposed to be used in attack messages, location checks, etc.
// Override in children for special behavior.
// Returns the location to be used for dropping items.
// Same as the regular drop_location(), but with checks being run on acting_object if necessary.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\debugger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\detailer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\helpers.dm. ----------------------
// Returns a list of parameters necessary to locate a pin in the assembly: component number, pin type and pin number
// Components list can be supplied from the outside, for use in savefiles
// Locates a pin in the assembly when given component number, pin type and pin number
// Components list can be supplied from the outside, for use in savefiles
// Same as get_pin_ref, but takes in a list of 3 parameters (same format as get_pin_parameters)
// and performs extra sanity checks on parameters list and index numbers
// Used to obfuscate object refs imported/exported as strings.
// Not very secure, but if someone still finds a way to abuse refs, they deserve it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\integrated_circuit.dm. ----------------------
/*
	Integrated circuits are essentially modular machines.  Each circuit has a specific function, and combining them inside Electronic Assemblies allows
a creative player the means to solve many problems.  Circuits are held inside an electronic assembly, and are wired using special tools.
*/
// Can be called via electronic_assembly/attackby()
// This should be used when someone is examining while the case is opened.
// This should be used when someone is examining from an 'outside' perspective, e.g. reading a screen or LED.
// Override this for special behaviour when there's no power left.
// Returns true if there's enough power to work().
// Returns the object that is supposed to be used in attack messages, location checks, etc.
// Returns the location to be used for dropping items.
// Same as the regular drop_location(), but with proc being run on assembly if there is any.
// Checks if the target object is reachable. Useful for various manipulators and manipulator-like objects.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\pins.dm. ----------------------
/*
	Pins both hold data for circuits, as well move data between them.  Some also cause circuits to do their function.  DATA_CHANNEL pins are the data holding/moving kind,
where as PULSE_CHANNEL causes circuits to work() when their pulse hits them.
A visualization of how pins work is below.  Imagine the below image involves an addition circuit.
When the bottom pin, the activator, receives a pulse, all the numbers on the left (input) get added, and the answer goes on the right side (output).
Inputs      Outputs
A [2]\      /[8] result
B [1]-\|++|/
C [4]-/|++|
D [1]/  ||
        ||
     Activator
*/
// Iterates over every linked pin and disconnects them.
// Basically a null check
// This proc asks for the data to write, then writes it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\printer.dm. ----------------------
// FUKKEN UPGRADE DISKS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\saved_circuits.dm. ----------------------
// Helpers for saving/loading integrated circuits.
// Saves type, modified name and modified inputs (if any) to a list
// The list is converted to JSON down the line.
//"Special" is not verified at any point except for by the circuit itself.
// Verifies a list of component parameters
// Returns null on success, error name on failure
// Loads component parameters from a list
// Doesn't verify any of the parameters it loads, this is the job of verify_save()
// Saves type and modified name (if any) to a list
// The list is converted to JSON down the line.
// Verifies a list of assembly parameters
// Returns null on success, error name on failure
// Loads assembly parameters from a list
// Doesn't verify any of the parameters it loads, this is the job of verify_save()
// Attempts to save an assembly into a save file format.
// Returns null if assembly is not complete enough to be saved.
// Checks assembly save and calculates some of the parameters.
// Returns assembly (type: list) if the save is valid.
// Returns error code (type: text) if loading has failed.
// The following parameters area calculated during validation and added to the returned save list:
// "requires_upgrades", "unsupported_circuit", "metal_cost", "complexity", "max_complexity", "used_space", "max_space"
// Loads assembly (in form of list) into an object and returns it.
// No sanity checks are performed, save file is expected to be validated by validate_electronic_assembly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\wirer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\boolean_pin.dm. ----------------------
// These pins only contain 0 or 1.  Null is not allowed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\char_pin.dm. ----------------------
// These pins can only contain a 1 character string or null.
// This makes the text go from "A" to "%".
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\color_pin.dm. ----------------------
// These pins can only contain a color (in the form of #FFFFFF) or null.
// This randomizes the color.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\dir_pin.dm. ----------------------
// These pins can only contain directions (1,2,4,8...) or null.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\index_pin.dm. ----------------------
// These pins can only contain integer numbers between 0 and IC_MAX_LIST_LENGTH. Null is allowed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\list_pin.dm. ----------------------
// These pins contain a list.  Null is not allowed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\number_pin.dm. ----------------------
// These pins can only contain numbers (int and floating point) or null.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\ref_pin.dm. ----------------------
// These pins only contain weakrefs or null.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\selfref_pin.dm. ----------------------
// This pin only contains its own weakref and can't be changed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\core\special_pins\string_pin.dm. ----------------------
// These pins can only contain text and null.
// This makes the text go "from this" to "#G&*!HD$%L"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\passive\passive.dm. ----------------------
// 'Passive' components do not have any pins, and instead contribute in some form to the assembly holding them.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\passive\power.dm. ----------------------
// For calculators.
// For fat machines that need fat power, like drones.
// For really fat machines.
//fuel cell
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\access.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\arithmetic.dm. ----------------------
//These circuits do simple math.
// +Adding+ //
// -Subtracting- //
// *Multiply* //
// /Division/  //
//^ Exponent ^//
// +-Sign-+ //
// Round //
// Absolute //
// Averaging //
// Pi, because why the hell not? //
// Random //
// Square Root //
// % Modulo % //
// -Max- //
// -Min- //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\atmospherics.dm. ----------------------
//Check if the gas container is adjacent and of the right type
//Needed in circuits where source and target types differ
// - gas pump - // **works**
// This proc gets the direction of the gas flow depending on its value, by calling update target
// - volume pump - // **Works**
// - gas vent - // **works**
// - integrated connector - // Can connect and disconnect properly
//Sucks up the gas from the connector
//If the assembly containing this is moved from the tile the connector pipe is in, the connection breaks
// Required for making the connector port script work
// - gas filter - // **works**
// - gas mixer - // **works**
// - integrated tank - // **works**
// - large integrated tank - // **works**
// - freezer tank - // **works**
// - heater tank - // **works**
// - atmospheric cooler - // **works**
// - atmospheric heater - // **works**
// - tank slot - // **works**
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\converters.dm. ----------------------
//These circuits convert one variable to another.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\data_transfer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\input.dm. ----------------------
//This circuit gives information on where the machine is.
//Hippie Ported Code--------------------------------------------------------------------------------------------------------
// -Inputlist- //
// -storage examiner- // **works**
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\lists.dm. ----------------------
//These circuits do things with lists, and use special list pins for stability.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\logic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\manipulation.dm. ----------------------
//Hippie Ported Code--------------------------------------------------------------------------------------------------------
// - inserter circuit - //
// Renamer circuit. Renames the assembly it is in. Useful in cooperation with telecomms-based circuits.
// - redescribing circuit - //
// - repainting circuit - //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\memory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\output.dm. ----------------------
//Hippie Ported Code--------------------------------------------------------------------------------------------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\power.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\reagents.dm. ----------------------
// Hydroponics trays have no reagents holder and handle reagents in their own snowflakey way.
// This is a dirty hack to make injecting reagents into them work.
// TODO: refactor that.
//Time for someone to refactor this. Trays can now hold reagents.
//obj/item/integrated_circuit/reagent/proc/inject_tray(obj/machinery/hydroponics/tray, atom/movable/source, amount)
//Hippie Ported Code--------------------------------------------------------------------------------------------------------
// - Integrated extinguisher - //
//This whole proc is a loop
// - Beaker Connector - //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\smart.dm. ----------------------
//Hippie Ported Code--------------------------------------------------------------------------------------------------------
// - MMI Tank - //
//Brain changes
// - pAI connector circuit - //
//pAI changes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\text.dm. ----------------------
// - Text Replacer - //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\time.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\trig.dm. ----------------------
//These circuits do not-so-simple math.
// Sine //
// Cosine //
// Tangent //
// Cosecant //
// Secant //
// Cotangent //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\integrated_electronics\subtypes\weaponized.dm. ----------------------
// These procs do not relocate the grenade, that's the callers responsibility
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\access.dm. ----------------------
//returns TRUE if this mob has sufficient access to use this object
//Call this before using req_access or req_one_access directly
// Check if an item has access to this object
/// Gets the job title, if the job name is an alt title, locates the original title using a prebuilt cache
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\jobs.dm. ----------------------
//this is necessary because antags happen before job datums are handed out, but NOT before they come into existence
//so I can't simply use job datum.department_head straight from the mind datum, laaaaame.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_exp.dm. ----------------------
// Procs
// todo: port tgui exp
//resets a client's exp to what was in the db.
//updates player db flags
//ALWAYS call this at beginning to any proc touching player flags, or your database admin will probably be mad
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_report.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\ai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\assistant.dm. ----------------------
/*
Assistant
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\atmospheric_technician.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\bartender.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\botanist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\captain.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\cargo_technician.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\chaplain.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\chemist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\chief_engineer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\chief_medical_officer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\clown.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\cook.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\curator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\cyborg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\detective.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\geneticist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\head_of_personnel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\head_of_security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\janitor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\lawyer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\medical_doctor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\mime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\paramedic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\prisoner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\quartermaster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\research_director.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\roboticist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\scientist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\security_officer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\shaft_miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\station_engineer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\virologist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\warden.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\jobs\job_types\_job.dm. ----------------------
/// Should this job be allowed to be picked for the bureaucratic error event?
/**
  * Checks if we should be created on a certain map
  */
/**
  * Processes map specific overrides
  */
//Only override this proc
//H is usually a human unless an /equip override transformed it
//Used for a special check of whether to allow a client to latejoin as this job.
//Don't override this unless the job transforms into a non-human (Silicons do this for example)
//If the configuration option is set to require players to be logged as old enough to play certain jobs, then this proc checks that they are, otherwise it just returns 1
//Warden and regular officers add this result to their get_access()
/// Handles finding and picking a valid roundstart effect landmark spawn point, in case no uncommon different spawning events occur.
/// Finds a valid latejoin spawn point, checking for events and special conditions.
/// Returns an atom where the mob should spawn in.
/**
 * Called after a successful roundstart spawn.
 * Client is not yet in the mob.
 * This happens after after_spawn()
 */
/**
 * Called after a successful latejoin spawn.
 * Client is in the mob.
 * This happens after after_spawn()
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\bindings_atom.dm. ----------------------
// You might be wondering why this isn't client level. If focus is null, we don't want you to move.
// Only way to do that is to tie the behavior into the focus's keyLoop().
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\bindings_client.dm. ----------------------
// Clients aren't datums so we have to define these procs indpendently.
// These verbs are called for all key press and release events
/// Keyup's all keys held down.
// Called every game tick
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\focus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\setup.dm. ----------------------
// removes all the existing macros
// TODO: OVERHAUL ALL OF THIS AGAIN. While this works this is flatout horrid with the "use list but also don't use lists" crap. I hate my life.
/**
  * Updates the keybinds for special keys
  *
  * Handles adding macros for the keys that need it
  * And adding movement keys to the clients movement_keys list
  * At the time of writing this, communication(OOC, Say, IC) require macros
  * Arguments:
  * * direct_prefs - the preference we're going to get keybinds from
  *
  * Returns list of special keybind in key = Mod1Mod2Mod3Key format, NOT Mod1+Mod2+Mod3+Key format.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\admin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\carbon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\client.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\combat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\communication.dm. ----------------------
//indicators
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\living.dm. ----------------------
/// Technically you shouldn't be doing any actions if you were sleeping either but...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\mob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\targeting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\_keybind.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\keybindings\keybind\__defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\aphasia.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\arachnid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\beachbum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\codespeak.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\common.dm. ----------------------
// 'basic' language; spoken by default.
//Syllable Lists
/*
	This list really long, mainly because I can't make up my mind about which mandarin syllables should be removed,
	and the english syllables had to be duplicated so that there is roughly a 50-50 weighting.

	Sources:
	http://www.sttmedia.com/syllablefrequency-english
	http://www.chinahighlights.com/travelguide/learning-chinese/pinyin-syllables.htm
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\draconic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\drone.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\dwarven.dm. ----------------------
// The language of the Dwarves, based on Dwarf Fortress
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\language.dm. ----------------------
/*
	Datum based languages. Easily editable and modular.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\language_holder.dm. ----------------------
/*!Language holders will either exist in an atom/movable or a mind. Creation of language holders happens
automatically when they are needed, for example when something tries to speak.
Where a mind is available, the mind language holder will be the one "in charge". The mind holder
will update its languages based on the atom holder, and will get updated as part of
transformations and other events that cause new languages to become available.
Every language holder has three lists of languages (and sources for each of them):
- understood_languages
- spoken_languages
- blocked_languages
Understood languages let you understand them, spoken languages lets you speak them
(if your tongue is compatible), and blocked languages will let you do neither no matter
what the source of the language is.
Language holders are designed to mostly only ever require the use the helpers in atom/movable
to achieve your goals, but it is also possible to work on them directly if needed. Any adding
and removing of languages and sources should only happen through the procs, as directly changing
these will mess something up somewhere down the line.
All atom movables have the initial_language_holder var which allows you to set the default language
holder to create. For example, /datum/language_holder/alien will give you xenocommon and a block for
galactic common. Human species also have a default language holder var that will be updated on
species change, initial_species_holder.
Key procs
* [grant_language](atom/movable.html#proc/grant_language)
* [remove_language](atom/movable.html#proc/remove_language)
* [add_blocked_language](atom/movable.html#proc/add_blocked_language)
* [remove_blocked_language](atom/movable.html#proc/remove_blocked_language)
* [grant_all_languages](atom/movable.html#proc/grant_all_languages)
* [remove_all_languages](atom/movable.html#proc/remove_all_languages)
* [has_language](atom/movable.html#proc/has_language)
* [can_speak_language](atom/movable.html#proc/can_speak_language)
* [get_selected_language](atom/movable.html#proc/get_selected_language)
* [update_atom_languages](atom/movable.html#proc/update_atom_languages)
*/
/// Initializes, and copies in the languages from the current atom if available.
/// Grants the supplied language.
/// Grants every language to understood and spoken, and gives omnitongue.
/// Removes a single language or source, removing all sources returns the pre-removal state of the language.
/// Removes every language and optionally sets omnitongue false. If a non default source is supplied, only removes that source.
/// Adds a single language or list of languages to the blocked language list.
/// Removes a single language or list of languages from the blocked language list.
/// Checks if you have the language. If spoken is true, only checks if you can speak the language.
/// Checks if you can speak the language. Tongue limitations should be supplied as an argument.
/// Returns selected language if it can be spoken, or decides, sets and returns a new selected language if possible.
/// Gets a random understood language, useful for hallucinations and such.
/// Gets a random spoken language, useful for forced speech and such.
/// Opens a language menu reading from the language holder.
/// Gets the atom, since we some times need to check if the tongue has limitations.
/// Empties out the atom specific languages and updates them according to the supplied atoms language holder.
/// Copies all languages from the supplied atom/language holder. Source should be overridden when you
/// do not want the language overwritten by later atom updates or want to avoid blocked languages.
//************************************************
//*        Specific language holders              *
//*      Use atom language sources only.           *
//************************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\language_menu.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\monkey.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\mushroom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\narsian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\neokanji.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\ratvarian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\signlanguage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\slime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\swarmer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\sylvan.dm. ----------------------
// The language of the vinebings. Yes, it's a shameless ripoff of elvish.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\vampiric.dm. ----------------------
//	BLOODSUCKER LANGUAGE //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\voltaic.dm. ----------------------
// One of these languages will actually work, I'm certain of it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\language\xenocommon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\library\lib_codex_gigas.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\library\lib_items.dm. ----------------------
/* Library Items
 *
 * Contains:
 *		Bookcase
 *		Book
 *		Barcode Scanner
 */
/*
 * Bookcase
 */
/*
 * Book
 */
/*
 * Barcode Scanner
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\library\lib_machines.dm. ----------------------
/* Library Machines
 *
 * Contains:
 *		Borrowbook datum
 *		Library Public Computer
 *		Cachedbook datum
 *		Library Computer
 *		Library Scanner
 *		Book Binder
 */
/*
 * Library Public Computer
 */
/*
 * Borrowbook datum
 */
/*
 * Library Computer
 * After 860 days, it's finally a buildable computer.*
 * * i cannot change maps because you are a buch of fucks who ignore map changes
 */
// TODO: Make this an actual /obj/machinery/computer that can be crafted from circuit boards and such
// It is August 22nd, 2012... This TODO has already been here for months.. I wonder how long it'll last before someone does something about it.
// It's December 25th, 2014, and this is STILL here, and it's STILL relevant. Kill me
/*
 * Library Scanner
 */
/*
 * Book binder
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\library\random_books.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\library\soapstone.dm. ----------------------
/* Persistent engraved messages, etched onto the station turfs to serve
   as instructions and/or memes for the next generation of spessmen.

   Limited in location to station_z only. Can be smashed out or exploded,
   but only permamently removed with the curator's soapstone.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\emissive_blocker.dm. ----------------------
/**
  * Internal atom that copies an appearance on to the blocker plane
  *
  * Copies an appearance vis render_target and render_source on to the emissive blocking plane.
  * This means that the atom in question will block any emissive sprites.
  * This should only be used internally. If you are directly creating more of these, you're
  * almost guaranteed to be doing something wrong.
  */
//Prevents people from moving these after creation, because they shouldn't be.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_area.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_atom.dm. ----------------------
// The proc you should always use to set the light of this atom.
// Nonesensical value for l_color default, so we can detect if it gets set to null.
// Will update the light (duh).
// Creates or destroys it if needed, makes it update values, makes sure it's got the correct source turf...
// If we have opacity, make sure to tell (potentially) affected light sources.
// Should always be used to change the opacity of an atom.
// It notifies (potentially) affected light sources so they can update (if needed).
// Setter for the light power of this atom.
/// Setter for the light range of this atom.
/// Setter for the light color of this atom.
/*
/// Setter for whether or not this atom's light is on.
/atom/proc/set_light_on(new_value)
	if(new_value ==  )
		return
	if(SEND_SIGNAL(src, COMSIG_ATOM_SET_LIGHT_ON, new_value) & COMPONENT_BLOCK_LIGHT_UPDATE)
		return
	. = light_on
	light_on = new_value
	SEND_SIGNAL(src, COMSIG_ATOM_UPDATE_LIGHT_ON, .)

/// Setter for the light flags of this atom.
/atom/proc/set_light_flags(new_value)
	if(new_value == light_flags)
		return
	if(SEND_SIGNAL(src, COMSIG_ATOM_SET_LIGHT_FLAGS, new_value) & COMPONENT_BLOCK_LIGHT_UPDATE)
		return
	. = light_flags
	light_flags = new_value
	SEND_SIGNAL(src, COMSIG_ATOM_UPDATE_LIGHT_FLAGS, .)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_corner.dm. ----------------------
// Because we can control each corner of every lighting object.
// And corners get shared between multiple turfs (unless you're on the corners of the map, then 1 corner doesn't).
// For the record: these should never ever ever be deleted, even if the turf doesn't have dynamic lighting.
// Diagonal is our direction FROM them, not to.
// God that was a mess, now to do the rest of the corner code! Hooray!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_object.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_setup.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_source.dm. ----------------------
// This is where the fun begins.
// These are the main datums that emit light.
// Thanks to Lohikar for flinging this tiny bit of code at me, increasing my brain cell count from 1 to 2 in the process.
// This macro will only offset up to 1 tile, but anything with a greater offset is an outlier and probably should handle its own lighting offsets.
// Anything pixelshifted 16px or more will be considered on the next tile.
// Yes this doesn't align correctly on anything other than 4 width tabs.
// If you want it to go switch everybody to elastic tab stops.
// Actually that'd be great if you could!
// This proc will cause the light source to update the top atom, and add itself to the update queue.
// Will force an update without checking if it's actually needed.
// Will cause the light source to recalculate turfs that were removed or added to visibility only.
// Macro that applies light to a new corner.
// It is a macro in the interest of speed, yet not having to copy paste it.
// If you're wondering what's with the backslashes, the backslashes cause BYOND to not automatically end the line.
// As such this all gets counted as a single line.
// The braces and semicolons are there to be able to do this on a single line.
//Original lighting falloff calculation. This looks the best out of the three. However, this is also the most expensive.
//#define LUM_FALLOFF(C, T) (1 - CLAMP01(sqrt((C.x - T.x) ** 2 + (C.y - T.y) ** 2 + LIGHTING_HEIGHT) / max(1, light_range)))
//Cubic lighting falloff. This has the *exact* same range as the original lighting falloff calculation, down to the exact decimal, but it looks a little unnatural due to the harsher falloff and how it's generally brighter across the board.
//#define LUM_FALLOFF(C, T) (1 - CLAMP01((((C.x - T.x) * (C.x - T.x)) + ((C.y - T.y) * (C.y - T.y)) + LIGHTING_HEIGHT) / max(1, light_range*light_range)))
//Linear lighting falloff. This resembles the original lighting falloff calculation the best, but results in lights having a slightly larger range, which is most noticable with large light sources. This also results in lights being diamond-shaped, fuck. This looks the darkest out of the three due to how lights are brighter closer to the source compared to the original falloff algorithm. This falloff method also does not at all take into account lighting height, as it acts as a flat reduction to light range with this method.
//#define LUM_FALLOFF(C, T) (1 - CLAMP01(((abs(C.x - T.x) + abs(C.y - T.y))) / max(1, light_range+1)))
//Linear lighting falloff but with an octagonal shape in place of a diamond shape. Lummox JR please add pointer support.
// This is the define used to calculate falloff.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\lighting\lighting_turf.dm. ----------------------
// counterclockwisse 0 to 360
// Causes any affecting light sources to be queued for a visibility update, for example a door got opened.
// Builds a lighting object for us, but only if our area is dynamic.
// Used to get a scaled lumcount.
// Returns a boolean whether the turf is on soft lighting.
// Soft lighting being the threshold at which point the overlay considers
// itself as too dark to allow sight and see_in_dark becomes useful.
// So basically if this returns true the tile is unlit black.
// Can't think of a good name, this proc will recalculate the has_opaque_atom variable.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mafia\controller.dm. ----------------------
/**
 * The mafia controller handles the mafia minigame in progress.
 * It is first created when the first ghost signs up to play.
 */
/**
 * Triggers at beginning of the game when there is a confirmed list of valid, ready players.
 * Creates a 100% ready game that has NOT started (no players in bodies)
 * Followed by start game
 *
 * Does the following:
 * * Picks map, and loads it
 * * Grabs landmarks if it is the first time it's loading
 * * Sets up the role list
 * * Puts players in each role randomly
 * Arguments:
 * * setup_list: list of all the datum setups (fancy list of roles) that would work for the game
 * * ready_players: list of filtered, sane players (so not playing or disconnected) for the game to put into roles
 */
/**
 * The game by this point is now all set up, and so we can put people in their bodies and start the first phase.
 *
 * Does the following:
 * * Creates bodies for all of the roles with the first proc
 * * Starts the first day manually (so no timer) with the second proc
 */
/**
 * How every day starts.
 *
 * What players do in this phase:
 * * If day one, just a small starting period to see who is in the game and check role, leading to the night phase.
 * * Otherwise, it's a longer period used to discuss events that happened during the night, leading to the voting phase.
 */
/**
 * Players have finished the discussion period, and now must put up someone to the chopping block.
 *
 * What players do in this phase:
 * * Vote on which player to put up for lynching, leading to the judgement phase.
 * * If no votes are case, the judgement phase is skipped, leading to the night phase.
 */
/**
 * Players have voted someone up, and now the person must defend themselves while the town votes innocent or guilty.
 *
 * What players do in this phase:
 * * Vote innocent or guilty, if they are not on trial.
 * * Defend themselves and wait for judgement, if they are.
 * * Leads to the lynch phase.
 * Arguments:
 * * verbose: boolean, announces whether there were votes or not. after judgement it goes back here with no voting period to end the day.
 */
/**
 * Players have voted innocent or guilty on the person on trial, and that person is now killed or returned home.
 *
 * What players do in this phase:
 * * r/watchpeopledie
 * * If the accused is killed, their true role is revealed to the rest of the players.
 */
/**
 * Teenie helper proc to move players back to their home.
 * Used in the above, but also used in the debug button "send all players home"
 * Arguments:
 * * role: mafia role that is getting sent back to the game.
 */
/**
 * Checks to see if a faction (or solo antagonist) has won.
 *
 * Calculates in this order:
 * * counts up town, mafia, and solo
 * * solos can count as town members for the purposes of mafia winning
 * * sends the amount of living people to the solo antagonists, and see if they won OR block the victory of the teams
 * * checks if solos won from above, then if town, then if mafia
 * * starts the end of the game if a faction won
 * * returns TRUE if someone won the game, halting other procs from continuing in the case of a victory
 */
/**
 * Lets the game award roles with all their checks and sanity, prevents achievements given out for debug games
 *
 * Arguments:
 * * award: path of the award
 * * role: mafia_role datum to reward.
 */
/**
 * The end of the game is in two procs, because we want a bit of time for players to see eachothers roles.
 * Because of how check_victory works, the game is halted in other places by this point.
 *
 * What players do in this phase:
 * * See everyone's role postgame
 * * See who won the game
 * Arguments:
 * * message: string, if non-null it sends it to all players. used to announce team victories while solos are handled in check victory
 */
/**
 * Cleans up the game, resetting variables back to the beginning and removing the map with the generator.
 */
/**
 * After the voting and judgement phases, the game goes to night shutting the windows and beginning night with a proc.
 */
/**
 * Shuts poddoors attached to mafia.
 * Arguments:
 * * close: boolean, the state you want the curtains in.
 */
/**
 * The actual start of night for players. Mostly info is given at the start of the night as the end of the night is when votes and actions are submitted and tried.
 *
 * What players do in this phase:
 * * Mafia are told to begin voting on who to kill
 * * Powers that are picked during the day announce themselves right now
 */
/**
 * The end of the night, and a series of signals for the order of events on a night.
 *
 * Order of events, and what they mean:
 * * Start of resolve (NIGHT_START) is for activating night abilities that MUST go first
 * * Action phase (NIGHT_ACTION_PHASE) is for non-lethal day abilities
 * * Mafia then tallies votes and kills the highest voted person (note: one random voter visits that person for the purposes of roleblocking)
 * * Killing phase (NIGHT_KILL_PHASE) is for lethal night abilities
 * * End of resolve (NIGHT_END) is for cleaning up abilities that went off and i guess doing some that must go last
 * * Finally opens the curtains and calls the start of day phase, completing the cycle until check victory returns TRUE
 */
/**
 * Proc that goes off when players vote for something with their mafia panel.
 *
 * If teams, it hides the tally overlay and only sends the vote messages to the team that is voting
 * Arguments:
 * * voter: the mafia role that is trying to vote for...
 * * target: the mafia role that is getting voted for
 * * vote_type: type of vote submitted (is this the day vote? is this the mafia night vote?)
 * * teams: see mafia team defines for what to put in, makes the messages only send to a specific team (so mafia night votes only sending messages to mafia at night)
 */
/**
 * Clears out the votes of a certain type (day votes, mafia kill votes) while leaving others untouched
 */
/**
 * Returns how many people voted for the role, in whatever vote (day vote, night kill vote)
 * Arguments:
 * * role: the mafia role the proc tries to get the amount of votes for
 * * vote_type: the vote type (getting how many day votes were for the role, or mafia night votes for the role)
 */
/**
 * Returns whichever role got the most votes, in whatever vote (day vote, night kill vote)
 * returns null if no votes
 * Arguments:
 * * vote_type: the vote type (getting the role that got the most day votes, or the role that got the most mafia votes)
 */
/**
 * Returns a random person who voted for whatever vote (day vote, night kill vote)
 * Arguments:
 * * vote_type: vote type (getting a random day voter, or mafia night voter)
 */
/**
 * Adds mutable appearances to people who get publicly voted on (so not night votes) showing how many people are picking them
 * Arguments:
 * * source: the body of the role getting the overlays
 * * overlay_list: signal var passing the overlay list of the mob
 */
/**
 * Called when the game is setting up, AFTER map is loaded but BEFORE the phase timers start. Creates and places each role's body and gives the correct player key
 *
 * Notably:
 * * Toggles godmode so the mafia players cannot kill themselves
 * * Adds signals for voting overlays, see display_votes proc
 * * gives mafia panel
 * * sends the greeting text (goals, role name, etc)
 */
/**
 * Returns a semirandom setup with 12 roles. balance not guaranteed!
 *
 * please check the variables at the top of the proc to see how much of each role types it picks
 */
/**
 * Helper proc that adds a random role of a type to a setup. if it doesn't exist in the setup, it adds the path to the list and otherwise bumps the path in the list up one. unique roles can only get added once.
 */
/**
 * Called when enough players have signed up to fill a setup. DOESN'T NECESSARILY MEAN THE GAME WILL START.
 *
 * Checks for a custom setup, if so gets the required players from that and if not it sets the player requirement to MAFIA_MAX_PLAYER_COUNT and generates one IF basic setup starts a game.
 * Checks if everyone signed up is an observer, and is still connected. If people aren't, they're removed from the list.
 * If there aren't enough players post sanity, it aborts. otherwise, it selects enough people for the game and starts preparing the game for real.
 */
/**
 * Called when someone signs up, and sees if there are enough people in the signup list to begin.
 *
 * Only checks if everyone is actually valid to start (still connected and an observer) if there are enough players (basic_setup)
 */
/**
 * Filters inactive player into a different list until they reconnect, and removes players who are no longer ghosts.
 *
 * If a disconnected player gets a non-ghost mob and reconnects, they will be first put back into mafia_signup then filtered by that.
 */
/**
 * Creates the global datum for playing mafia games, destroys the last if that's required and returns the new.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mafia\map_pieces.dm. ----------------------
//for ghosts/admins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mafia\outfits.dm. ----------------------
//what people wear unrevealed
//town
//mafia
//solo
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mafia\roles.dm. ----------------------
/**
 * Tests if a visitor can actually perform an action on this role. Verbose on purpose!
 *
 * Will return false if: Your visit is roleblocked, they have perished, or your visit was interrupted
 */
/**
 * Tests kill immunities, if nothing prevents the kill, kills this role.
 *
 * Does not count as visiting, see visit proc.
 */
//just helps read better
///MAFIA ROLES/// they're the "anti-town" working to kill off townies to win
//better detective for mafia
///SOLO ROLES/// they range from anomalous factors to deranged killers that try to win alone.
//just helps read better
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mafia\_defines.dm. ----------------------
///how many people can play mafia without issues (running out of spawns, procs not expecting more than this amount of people, etc)
//types of town roles for random setup gen
/// Add this if you don't want a role to be a choice in the selection
/// roles that learn info about others in the game (chaplain, detective, psych)
/// roles that keep other roles safe (doctor, sec officer, and weirdly enough lawyer counts)
/// roles that are only there to kill bad guys.
/// roles that don't fit into anything else (hop)
//other types (mafia team, neutrals)
/// normal vote kill changelings
/// every other changeling role that has extra abilities
/// role that wins solo that nobody likes
/// role that upsets the game aka obsessed, usually worse for town than mafia but they can vote against mafia
//role flags (special status of roles like detection immune)
///to all forms of detection, shows themselves as an assistant.
///has the ability to kill at night and thus, blocks the game from ending with other teams alive.
///can only be one in a randomly generated game
///role is public to all other players in the game.
///can not be defended, protected, or any other form of protection. all kills succeed no matter what.
///cannot perform any actions that night, preselected actions fail
//in order of events + game end
/// when the shutters fall, before the 45 second wait and night event resolution
/// after the 45 second wait, for actions that must go first
/// most night actions now resolve
/// now killing happens from the roles that do that. the reason this is post action phase is to ensure doctors can protect and lawyers can block
/// now undoing states like protection, actions that must happen last, etc. right before shutters raise and the day begins
/// signal sent to roles when the game is confirmed ending
/// list of ghosts who want to play mafia, every time someone enters the list it checks to see if enough are in
/// list of ghosts who want to play mafia that have since disconnected. They are kept in the lobby, but not counted for starting a game.
/// the current global mafia game running.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapexporting\mapexporter.dm. ----------------------
//Map exporter
//Inputting a list of turfs into convert_map_to_tgm() will output a string
//with the turfs and their objects / areas on said turf into the TGM mapping format
//for .dmm files. This file can then be opened in the map editor or imported
//back into the game.
//============================
//This has been made semi-modular so you should be able to use these functions
//elsewhere in code if you ever need to get a file in the .dmm format
//Converts a list of turfs into TGM file format
//Sorts maps in terms of their positions, so scrambled / odd shaped maps can be saved
//vars_to_save = list() to save all vars
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\map_config.dm. ----------------------
//used for holding information about unique properties of maps
//feed it json files that match the datum layout
//defaults to box
//  -Cyberboss
/// badmin moments. Keep up to date with LoadConfig()!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\map_orientation_pattern.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\map_template.dm. ----------------------
//Override for custom behavior
/**
  * Proc to trigger a load at a specific area. Calls on_map_loaded(T.z, loaded_bounds) afterwards.
  *
  * @params
  * * turf/T - Turf to load at
  * * centered - Center at T or load with the bottomright corner being at T
  * * orientation - SOUTH is default, anything else rotates the map to face it with the point of reference being the map itself is facing south by default. Cardinals only, don't be a 4head and put in multiple flags. It won't work or be pretty if you try.
  * * annihilate - Should we destroy stuff in our bounds while loading
  * * force_cache - Should we force the parsed shuttle to cache instead of being GC'd post loading if it wasn't going to be cached by default
  * * rotate_placement_to_orientation - Has no effect if centered. Should we rotate where we load it around the turf we're loading at? Used for stuff like engine submaps when the station is rotated.
  *
  */
//This, get_affected_turfs, and load() calculations for bounds/center can probably be optimized. Later.
//for your ever biggening badminnery kevinz000
//❤ - Cyberboss
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\minimaps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\preloader.dm. ----------------------
// global datum that will preload variables on atoms instanciation
/// Preloader datum
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\reader.dm. ----------------------
///////////////////////////////////////////////////////////////
//SS13 Optimized Map loader
//////////////////////////////////////////////////////////////
/*
 * Notes:
 * This does NOT support map files where more than one Z is in each grid set, as defined in the file.
 * MultiZ map files ARE supported (however very much discouraged), as long as each gridset only contains one z.
 * This assumes that for the most part, map files are properly formed, either DMM or TGM standard formats. If you feed it bad data, expect to crash.
 */
/// Shortcut function to parse a map and apply it to the world.
///
/// - `dmm_file`: A .dmm file to load (Required).
/// - `x_offset`, `y_offset`, `z_offset`: Positions representign where to load the map (Optional).
/// - `cropMap`: When true, the map will be cropped to fit the existing world dimensions (Optional).
/// - `measureOnly`: When true, no changes will be made to the world (Optional).
/// - `no_changeturf`: When true, [turf/AfterChange] won't be called on loaded turfs
/// - `x_lower`, `x_upper`, `y_lower`, `y_upper`: Coordinates (relative to the game world) to crop to (Optional).
/// - `placeOnTop`: Whether to use [turf/PlaceOnTop] rather than [turf/ChangeTurf] (Optional).
/**
  * Parse a map, possibly cropping it.
  * Do not use the crop function unless strictly necessary.
  * WARNING: Crop function crops based on the tiles you'd see in the map editor. If you're planning to load it in in a different orientation later, you better have done the math.
  * It's recommended that you do not crop using this at all.
  */
/// Load the parsed map into the world. See [/proc/load_map] for arguments.
// Do not call except via load() above.
// Lower/upper here refers to the actual map template's parsed coordinates, NOT ACTUAL COORDINATES! Figure it out yourself my head hurts too much to implement that too.
////////////////
//Helpers procs
////////////////
//Instance an atom at (x,y,z) and gives it the variables in attributes
//text trimming (both directions) helper proc
//optionally removes quotes before and after the text (for variable name)
//find the position of the next delimiter,skipping whatever is comprised between opening_escape and closing_escape
//returns 0 if reached the last delimiter
//build a list from variables in text form (e.g {var1="derp"; var2; var3=7} => list(var1="derp", var2, var3=7))
//return the filled list
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\ruins.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\verify.dm. ----------------------
/// An error report generated by [/datum/parsed_map/proc/check_for_errors].
/// Show a rendered version of this report to a client.
/// Check a parsed but not yet loaded map for errors.
///
/// Returns a [/datum/map_report] if there are errors or `FALSE` otherwise.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\mapping_helpers\baseturf.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\mapping_helpers\_mapping_helpers.dm. ----------------------
//Landmarks and other helpers which speed up the mapping process and reduce the number of unique instances/subtypes of items/turf/ect
//airlock helpers
//needs to do its thing before spawn_rivers() is called
//This helper applies components to things on the map directly.
//Late init so everything is likely ready and loaded (no warranty)
// /obj/effect/mapping_helpers/component_injector/areabound
// 	name = "Areabound Injector"
// 	icon_state = "component_areabound"
// 	component_type = /datum/component/areabound
// 	target_type = /atom/movable
//On Ian's birthday, the hop's office is decorated.
//Ian, like most dogs, loves a good new years eve party.
//lets mappers place notes on airlocks with custom info or a pre-made note from a path
//This helper applies traits to things on the map directly.
//Late init so everything is likely ready and loaded (no warranty)
/// Fetches an external dmi and applies to the target object
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\mapping_helpers\network_builder\atmos_pipe.dm. ----------------------
/* Automatically places pipes on init based on any pipes connecting to it and adjacent helpers. Only supports cardinals.
 * Conflicts with ANY PIPE ON ITS LAYER, as well as atmos network build helpers on the same layer, as well as any pipe on all layers. Do those manually.
*/
/// Scans directions, sets network_directions to have every direction that we can link to. If there's another power cable builder detected, make sure they know we're here by adding us to their cable directions list before we're deleted.
/// Directions should only ever have cardinals.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\mapping_helpers\network_builder\power_cables.dm. ----------------------
/// Automatically links on init to power cables and other cable builder helpers. Only supports cardinals.
/// Scans directions, sets network_directions to have every direction that we can link to. If there's another power cable builder detected, make sure they know we're here by adding us to their cable directions list before we're deleted.
/// Directions should only ever have cardinals.
// Red
// White
// Cyan
// Orange
// Pink
// Blue
// Green
// Yellow
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\mapping_helpers\network_builder\_network_builder.dm. ----------------------
//Builds networks like power cables/atmos lines/etc
//Just a holder parent type for now..
/// How this works: On LateInitialize, detect all directions that this should be applicable to, and do what it needs to do, and then inform all network builders in said directions that it's been around since it won't be around afterwards.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\multiz_helpers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\space_level.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\space_reservation.dm. ----------------------
//Yes, they can only be rectangular.
//Yes, I'm sorry.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\space_transition.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\traits.dm. ----------------------
// Look up levels[z].traits[trait]
// Check if levels[z] has any of the specified traits
// Check if levels[z] has all of the specified traits
// Get a list of all z which have the specified trait
// Get a list of all z which have any of the specified traits
// Attempt to get the turf below the provided one according to Z traits
// Attempt to get the turf above the provided one according to Z traits
// Prefer not to use this one too often
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mapping\space_management\zlevel_manager.dm. ----------------------
// Populate the space level list and prepare space transitions
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\abandoned_crates.dm. ----------------------
//Originally coded by ISaidNo, later modified by Kelenius. Ported from Baystation12.
//this helps you not blow up so easily by overriding unlocking which results in an immediate boom.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\aux_base.dm. ----------------------
///Mining Base////
//Serves as a nice mechanic to people get ready for the launch.
//Mining shuttles may not be created equal, so we find the map's shuttle dock and size accordingly.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\aux_base_camera.dm. ----------------------
//Aux base construction console
//Check a loction to see if it is inside the aux base at the station. Camera visbility checks omitted so as to not hinder construction.
//*******************FUNCTIONS*******************
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\fulton.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_processing.dm. ----------------------
/**********************Mineral processing unit console**************************/
/// Gets the turf in the `input_dir` direction adjacent to the machine, and registers signals for ATOM_ENTERED and ATOM_CREATED. Calls the `pickup_item()` proc when it receives these signals.
/// Unregisters signals that are registered the machine's input turf, if it has one.
/**
	Base proc for all `/mineral` subtype machines to use. Place your item pickup behavior in this proc when you override it for your specific machine.

	Called when the COMSIG_ATOM_ENTERED and COMSIG_ATOM_CREATED signals are sent.

	Arguments:
	* source - the turf that is listening for the signals.
	* target - the atom that just moved onto the `source` turf.
	* oldLoc - the old location that `target` was at before moving onto `source`.
*/
/// Generic unloading proc. Takes an atom as an argument and forceMove's it to the turf adjacent to this machine in the `output_dir` direction.
/**********************Mineral processing unit**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_redemption.dm. ----------------------
/**********************Ore Redemption Unit**************************/
//Turns all the various mining machines into a single unit to speed up mining and establish a point system
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_silo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_stacking.dm. ----------------------
/**********************Mineral stacking unit console**************************/
/**********************Mineral stacking unit**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_unloading.dm. ----------------------
/**********************Unloading unit**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\machine_vending.dm. ----------------------
/**********************Mining Equipment Vendor**************************/
/****************Golem Point Vendor**************************/
/**********************Mining Equipment Vendor Items**************************/
/**********************Mining Equipment Voucher**********************/
/**********************Mining Point Card**********************/
//mp = Miner Pointers
//c  =  Cash
//TODO add in cr = Credits for cargo
///Conscript kit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\minebot.dm. ----------------------
/**********************Mining drone**********************/
//Actions for sentient minebots
/**********************Minebot Upgrades**********************/
//Melee
//Health
//AI
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\mine_items.dm. ----------------------
/**********************Light************************/
//this item is intended to give the effect of entering the mine, so that light gradually fades
/**********************Miner Lockers**************************/
/**********************Shuttle Computer**************************/
/**********************Mining car (Crate like thing, not the rail car)**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\money_bag.dm. ----------------------
/*****************************Money bag********************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\ores_coins.dm. ----------------------
/**********************Mineral ores**************************/
/*****************************Coin********************************/
// The coin's value is a value of it's materials.
// Yes, the gold standard makes a come-back!
// This is the only way to make coins that are possible to produce on station actually worth anything.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\point_bank.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\satchel_ore_boxdm.dm. ----------------------
/**********************Ore box**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\shelters.dm. ----------------------
// yes, I COULD make it a seperate object from the surv capsule but the code needed is indeticle soo...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\explorer_gear.dm. ----------------------
/****************Explorer's Suit and Mask****************/
/****************HEVA Suit and Mask****************/
/****************Exo-Suit and Mask****************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\gauntlet_styles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\goliath_hide.dm. ----------------------
/**********************Goliath Hide**********************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\kinetic_crusher.dm. ----------------------
/*********************Mining Hammer****************/
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
//destablizing force
//trophies
//goliath
//watcher
//magmawing watcher
//icewing watcher
//legion
//blood-drunk hunter
//ash drake
//bubblegum
//colossus
//hierophant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\lazarus_injector.dm. ----------------------
/**********************Lazarus Injector**********************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\marker_beacons.dm. ----------------------
/*****************Marker Beacons**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\mineral_scanner.dm. ----------------------
/**********************Mining Scanners**********************/
//Debug item to identify all ore spread quickly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\mining_tools.dm. ----------------------
/*****************Pickaxes & Drills & Shovels****************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\regenerative_core.dm. ----------------------
/*********************Hivelord stabilizer****************/
/************************Hivelord core*******************/
/*
/obj/item/organ/regenerative_core/afterattack(atom/target, mob/user, proximity_flag)
	. = ..()
	if(proximity_flag)
		apply_healing_core(target, user)

/obj/item/organ/regenerative_core/proc/apply_healing_core(atom/target, mob/user)
	if(!user || !ishuman(target))
		return
	var/mob/living/carbon/human/H = target
	if(inert)
		to_chat(user, "<span class='notice'>[src] has decayed and can no longer be used to heal.</span>")
		return
	if(H.stat == DEAD)
		to_chat(user, "<span class='notice'>[src] are useless on the dead.</span>")
		return
	if(H != user)
		H.visible_message("[user] forces [H] to apply [src]... Black tendrils entangle and reinforce [H.p_them()]!")
		SSblackbox.record_feedback("nested tally", "hivelord_core", 1, list("[type]", "used", "other"))
	else
		to_chat(user, "<span class='notice'>You start to smear [src] on yourself. Disgusting tendrils hold you together and allow you to keep moving, but for how long?</span>")
		SSblackbox.record_feedback("nested tally", "hivelord_core", 1, list("[type]", "used", "self"))
	H.apply_status_effect(STATUS_EFFECT_REGENERATIVE_CORE)
	qdel(src)
	user.log_message("[user] used [src] to heal [H == user ? "[H.p_them()]self" : H]! Wake the fuck up, Samurai!", LOG_ATTACK, color="green") //Logging for 'old' style legion core use, when clicking on a sprite of yourself or another.

/obj/item/organ/regenerative_core/attack_self(mob/user) //Knouli's first hack! Allows for the use of the core in hand rather than needing to click on the target, yourself, to selfheal. Its a rip of the proc just above - but skips on distance check and only uses 'user' rather than 'target'
	. = ..()
	apply_healing_core(user, user)
*/
/*************************Legion core********************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\resonator.dm. ----------------------
/**********************Resonator**********************/
//resonance field, crushes rock, damages mobs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\survival_pod.dm. ----------------------
/*****************************Survival Pod********************************/
//Survival Capsule
//Non-default pods
// RBMK reactor beacon so people can create the engine
//Pod objects
//Window
//Door
//Windoor
//Table
//Sleeper
//Lifeform Stasis Unit
//NanoMed
//Computer
//Bed
//Survival Storage Unit
//Fans
//Inivisible, indestructible fans
//Signs
//Fluff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\vendor_items.dm. ----------------------
/**********************Mining Equipment Vendor Items**************************/
//misc stuff you can buy from the vendor that has special code but doesn't really need its own file
/**********************Facehugger toy**********************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\equipment\wormhole_jaunter.dm. ----------------------
/**********************Jaunter**********************/
//jaunter tunnel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\laborcamp\laborshuttle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\laborcamp\laborstacker.dm. ----------------------
/**********************Prisoners' Console**************************/
/**********************Prisoner Collection Unit**************************/
/**********************Point Lookup Console**************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\lavaland\ash_flora.dm. ----------------------
////// LAVALAND FLORA //////
//what you can craft with these things
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\lavaland\ash_tree.dm. ----------------------
//Houses the ash tree, a lava land tree that has been burning for quite some time making a maple like sweetener.
//So we dont lose are bowls, stolen form closet code
//Override is for not revealing the locker electronics when you open the locker, for example
//Proc stolen from Trees
//If you hit it with a sharp force aboe 0 item it chops it down, unlike trees tho it dosnt give wood as its already charcoal
//Also dosnt have a stump
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\lavaland\necropolis_chests.dm. ----------------------
//The chests dropped by mob spawner tendrils. Also contains associated loot.
//KA modkit design discs
//Spooky special loot
//Rod of Asclepius
//Memento Mori
//Just in case
//Wisp Lantern
//Red/Blue Cubes
//Meat Hook
//Immortality Talisman
//Shared Bag
//Book of Babel
//Potion of Flight
// Inherit from unbreakable but don't set ID, to suppress the default Z linkage
///Bosses
//Miniboss Miner
//Dragon
//Blood
//Lava Staff
//Bubblegum
//Colossus
//Hierophant
//Just some minor stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mining\lavaland\ruins\gym.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\clickdelay.dm. ----------------------
/**
  * CLICKDELAY HANDLING SYSTEM
  * How this works is mobs can never do actions until their next_action is at or below world.time, but things can specify extra cooldown
  * to check for either from the time of last_action or from the end of next_action.
  *
  * Clickdelay should always be checked via [CheckActionCooldown()], never manually!
  */
/**
  * Applies a delay to next_action before we can do our next action.
  *
  * @params
  * * amount - Amount to delay by
  * * ignore_mod - ignores next action adjust and mult
  * * considered_action - Defaults to TRUE - If TRUE, sets last_action to world.time.
  * * immediate - defaults to TRUE - if TRUE, writes to cached/last_attack_immediate instead of last_attack. This ensures it can't collide with any delay checks in the actual attack.
  * * flush - defaults to FALSE - Use this while using this proc outside of clickcode to ensure everything is set properly. This should never be set to TRUE if this is called from clickcode.
  */
/**
  * Get estimated time of next attack.
  */
/**
  * Sets our next action to. The difference is DelayNextAction cannot reduce next_action under any circumstances while this can.
  */
/**
  * Checks if we can do another action.
  * Returns TRUE if we can and FALSE if we cannot.
  *
  * @params
  * * cooldown - Time required since last action. Defaults to 0.5
  * * from_next_action - Defaults to FALSE. Should we check from the tail end of next_action instead of last_action?
  * * ignore_mod - Defaults to FALSE. Ignore all adjusts and multipliers. Do not use this unless you know what you are doing and have a good reason.
  * * ignore_next_action - Defaults to FALSE. Ignore next_action and only care about cooldown param and everything else. Generally unused.
  * * immediate - Defaults to FALSE. Checks last action using immediate, used on the head end of an attack. This is to prevent colliding attacks in case of sleep. Not that you should sleep() in an attack but.. y'know.
  */
/**
  * Gets action_cooldown_mod.
  */
/**
  * Gets action_cooldown_adjust
  */
/**
  * Flushes last_action and next_action
  */
/**
  * Discards last_action and next_action
  */
/**
  * Checks if we can resist again.
  */
/**
  * Mark the last resist as now.
  *
  * @params
  * * extra_cooldown - Extra cooldown to apply to next_resist. Defaults to this mob's resist_cooldown.
  * * override - Defaults to FALSE - if TRUE, extra_cooldown will replace the old next_resist even if the old is longer.
  */
/**
  * Checks if a user's clickdelay is met for a standard attack, this is called before an attack happens.
  */
/**
  * Called after a successful attack to set a mob's clickdelay.
  */
/**
  * Get estimated time that a user has to not attack for to use us
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\death.dm. ----------------------
//This is the proc for gibbing a mob. Cannot gib ghosts.
//added different sort of gibs and animations. N
//This is the proc for turning a mob into ash. Mostly a copy of gib code (above).
//Originally created for wizard disintegrate. I've removed the virus code since it's irrelevant here.
//Dusting robots does not eject the MMI, so it's a bit more powerful than gib() /N
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\emote.dm. ----------------------
//The code execution of the emote datum is located at code/datums/emotes.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\innate_abilities.dm. ----------------------
/**
  * Sets an ability property
  */
/**
  * Gets an ability property
  */
/**
  * Grants an ability from a source
  */
/**
  * Removes an ability from a source
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\inventory.dm. ----------------------
//These procs handle putting s tuff in your hands
//as they handle all relevant stuff like adding it to the player's screen and updating their overlays.
//Returns the thing we're currently holding
//Finds the opposite limb for the active one (eg: upper left arm will find the item in upper right arm)
//So we're treating each "pair" of limbs as a team, so "both" refers to them
//Finds the opposite index for the active one (eg: upper left arm will find the item in upper right arm)
//So we're treating each "pair" of limbs as a team, so "both" refers to them
//Odd = left. Even = right
//Check we have an organ for this hand slot (Dismemberment), Only relevant for humans
//Check we have an organ for our active hand slot (Dismemberment),Only relevant for humans
//Finds the first available (null) index OR all available (null) indexes in held_items based on a side.
//Lefts: 1, 3, 5, 7...
//Rights:2, 4, 6, 8...
//Same as the above, but returns the first or ALL held *ITEMS* for the side
///Find number of held items, multihand compatible
//Sad that this will cause some overhead, but the alias seems necessary
//*I* may be happy with a million and one references to "indexes" but others won't be
//Checks if we're holding an item of type: typepath
//Checks if we're holding a tool that has given quality
//Returns the tool that has the best version of this quality
//To appropriately fluff things like "they are holding [I] in their [get_held_index_name(get_held_index_of_item(I))]"
//Can be overridden to pass off the fluff to something else (eg: science allowing people to add extra robotic limbs, and having this proc react to that
// with say "they are holding [I] in their Nanotrasen Brand Utility Arm - Right Edition" or w/e
//Returns if a certain item can be equipped to a certain slot.
// Currently invalid for two-handed items - call obj/item/mob_can_equip() instead.
//Puts the item into the first available left hand if possible and calls all necessary triggers/updates. returns 1 on success.
//Puts the item into the first available right hand if possible and calls all necessary triggers/updates. returns 1 on success.
//Puts the item into our active hand if possible. returns TRUE on success.
//Puts the item into our inactive hand if possible, returns TRUE on success
//Puts the item our active hand if possible. Failing that it tries other hands. Returns TRUE on success.
//If both fail it drops it on the floor and returns FALSE.
//This is probably the main one you need to know :)
//Here lie drop_from_inventory and before_item_take, already forgotten and not missed.
//The following functions are the same save for one small difference
//for when you want the item to end up on the ground
//will force move the item to the ground and call the turf's Entered
//for when the item will be immediately placed in a loc other than the ground
//visibly unequips I but it is NOT MOVED AND REMAINS IN SRC
//item MUST BE FORCEMOVE'D OR QDEL'D
//DO NOT CALL THIS PROC
//use one of the above 3 helper procs
//you may override it, but do not modify the args
//This is a SAFE proc. Use this instead of equip_to_slot()!
//set qdel_on_fail to have it delete W if it fails to equip
//set disable_warning to disable the 'you are unable to equip that' warning.
//unset redraw_mob to prevent the mob from being redrawn at the end.
//This is an UNSAFE proc. It merely handles the actual job of equipping. All the checks on whether you can or can't equip need to be done before! Use mob_can_equip() for that task.
//In most cases you will want to use equip_to_slot_if_possible()
//This is just a commonly used configuration for the equip_to_slot_if_possible() proc, used to equip people when the round starts and when events happen and such.
//Also bypasses equip delay checks, since the mob isn't actually putting it on.
//puts the item "W" into an appropriate slot in a human's inventory
//returns 0 if it cannot, 1 if successful
/**
 * Used to return a list of equipped items on a mob; does not include held items (use get_all_gear)
 *
 * Argument(s):
 * * Optional - include_pockets (TRUE/FALSE), whether or not to include the pockets and suit storage in the returned list
 */
//used in code for items usable by both carbon and drones, this gives the proper back slot for each mob.(defibrillator, backpack watertank, ...)
//Inventory.dm is -kind of- an ok place for this I guess
//This is NOT for dismemberment, as the user still technically has 2 "hands"
//This is for multi-handed mobs, such as a human with a third limb installed
//This is a very rare proc to call (besides admin fuckery) so
//any cost it has isn't a worry
//GetAllContents that is reasonable and not stupid
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\login.dm. ----------------------
/**
 * Run when a client is put in this mob or reconnets to byond and their client was on this mob
 *
 * Things it does:
 * * Adds player to player_list
 * * sets lastKnownIP
 * * sets computer_id
 * * logs the login
 * * tells the world to update it's status (for player count)
 * * create mob huds for the mob if needed
 * * reset next_move to 1
 * * parent call
 * * if the client exists set the perspective to the mob loc
 * * call on_log on the loc (sigh)
 * * reload the huds for the mob
 * * reload all full screen huds attached to this mob
 * * load any global alternate apperances
 * * sync the mind datum via sync_mind()
 * * call any client login callbacks that exist
 * * grant any actions the mob has to the client
 * * calls [auto_deadmin_on_login](mob.html#proc/auto_deadmin_on_login)
 * * send signal COMSIG_MOB_CLIENT_LOGIN
 * * attaches the ash listener element so clients can hear weather
 * client can be deleted mid-execution of this proc, chiefly on parent calls, with lag
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob.dm. ----------------------
/**
  * Generate a visible message from this atom
  *
  * Show a message to all player mobs who sees this atom
  *
  * Show a message to the src mob (if the src is a mob)
  *
  * Use for atoms performing visible actions
  *
  * message is output to anyone who can see, e.g. "The [src] does something!"
  *
  * Vars:
  * * self_message (optional) is what the src mob sees e.g. "You do something!"
  * * blind_message (optional) is what blind people will hear e.g. "You hear something!"
  * * vision_distance (optional) define how many tiles away the message can be seen.
  * * ignored_mobs (optional) doesn't show any message to any given mob in the list.
  * * target (optional) is the other mob involved with the visible message. For example, the attacker in many combat messages.
  * * target_message (optional) is what the target mob will see e.g. "[src] does something to you!"
  * * omni (optional) if TRUE, will show to users no matter what.
  * * runechat_popup (optional) if TRUE, will display a runechat popup using rune_msg if set otherwise it will use message and self_message accordingly.
  * * rune_msg (optional) is the message to display in the runechat popup.
  */
///Adds the functionality to self_message.
/**
  * Show a message to all mobs in earshot of this atom
  *
  * Use for objects performing audible actions
  *
  * vars:
  * * message is the message output to anyone who can hear.
  * * deaf_message (optional) is what deaf people will see.
  * * hearing_distance (optional) is the range, how many tiles away the message can be heard.
  * * ignored_mobs (optional) doesn't show any message to any given mob in the list.
  * * runechat_popup (optional) if TRUE, will display a runechat popup using rune_msg if set otherwise it will use message and self_message accordingly.
  * * rune_msg (optional) is the message to display in the runechat popup.
  */
/**
  * Show a message to all mobs in earshot of this one
  *
  * This would be for audible actions by the src mob
  *
  * vars:
  * * message is the message output to anyone who can hear.
  * * self_message (optional) is what the src mob hears.
  * * deaf_message (optional) is what deaf people will see.
  * * hearing_distance (optional) is the range, how many tiles away the message can be heard.
  * * ignored_mobs (optional) doesn't show any message to any given mob in the list.
  */
//This proc is called whenever someone clicks an inventory ui slot.
/// Checks for slots that are currently obscured by other garments.
// reset_perspective(thing) set the eye to the thing (if it's equal to current default reset to mob perspective)
// reset_perspective() set eye to common default : mob on turf, loc otherwise
//view() but with a signal, to allow blacklisting some of the otherwise visible atoms.
/**
  * Examine a mob
  *
  * mob verbs are faster than object verbs. See
  * [this byond forum post](https://secure.byond.com/forum/?post=1326139&page=2#comment8198716)
  * for why this isn't atom/verb/examine()
  */
/**
  * handle_eye_contact() is called when we examine() something. If we examine an alive mob with a mind who has examined us in the last second within 5 tiles, we make eye contact!
  *
  * Note that if either party has their face obscured, the other won't get the notice about the eye contact
  * Also note that examine_more() doesn't proc this or extend the timer, just because it's simpler this way and doesn't lose much.
  *	The nice part about relying on examining is that we don't bother checking visibility, because we already know they were both visible to each other within the last second, and the one who triggers it is currently seeing them
  */
/**
  * Point at an atom
  *
  * mob verbs are faster than object verbs. See
  * [this byond forum post](https://secure.byond.com/forum/?post=1326139&page=2#comment8198716)
  * for why this isn't atom/verb/pointed()
  *
  * note: ghosts can point, this is intended
  *
  * visible_message will handle invisibility properly
  *
  * overridden here and in /mob/dead/observer for different point span classes and sanity checks
  */
//ambition start
//ambition end
//suppress the .click/dblclick macros so people can't use them to identify the location of items or aimbot
// The src mob is trying to strip an item from someone
// Defined in living.dm
// The src mob is trying to place an item on someone
// Defined in living.dm
/// Adds this list to the output to the stat browser
/// Gets all relevant proc holders for the browser statpenl
/**
  * Convert a list of spells into a displyable list for the statpanel
  *
  * Shows charge and other important info
  */
// facing verbs
//You can buckle on mobs if you're next to them since most are dense
//Default buckling shift visual for mobs
//returns the height in pixel the mob should have when buckled to another mob.
//can the mob be buckled to something by default?
//can the mob be unbuckled from something by default?
//Can the mob interact() with an atom?
//Can the mob use Topic to interact with machines
//This will update a mob's name, real_name, mind.name, GLOB.data_core records, pda, id and traitor text
//Calling this proc without an oldname will only update the mob and skip updating the pda, id and records ~Carn
//Updates GLOB.data_core records with new name , see mob/living/carbon/human
///Adjust the nutrition of a mob
///Force set the mob nutrition
/// Updates the grab state of the mob and updates movespeed
/// Gets the combined speed modification of all worn items
/// Except base mob type doesnt really wear items
/**
  * Mostly called by doUnEquip()
  * Like item dropped() on mob side.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob_defines.dm. ----------------------
/// A mock client, provided by tests and friends
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob_helpers.dm. ----------------------
// see _DEFINES/is_helpers.dm for mob type checks
/**
  * Convert random parts of a passed in message to stars
  *
  * * phrase - the string to convert
  * * probability - probability any character gets changed
  *
  * This proc is dangerously laggy, avoid it or die
  */
/**
  * Makes you speak like you're drunk
  */
/// Makes you talk like you got cult stunned, which is slurring but with some dark messages
//Ratvarian Slurring!
///Adds stuttering to the message passed in
/*
The difference with stutter is that this proc can stutter more than 1 letter
The issue here is that anything that does not have a space is treated as one word (in many instances). For instance, "LOOKING," is a word, including the comma.
It's fairly easy to fix if dealing with single letters but not so much with compounds of letters./N
*/
//change a mob's act-intent. Input the intent as a string such as "help" or use "right"/"left
// Logs a message in a mob's individual log, and in the global logs as well if log_globally is true
//Examine text for traits shared by multiple types. I wish examine was less copypasted.
//gets ID card object from special clothes slot or null.
//Can the mob see reagents inside of containers?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob_lists.dm. ----------------------
///Adds the mob reference to the list and directory of all mobs. Called on Initialize().
///Removes the mob reference from the list and directory of all mobs. Called on Destroy().
///Adds the mob reference to the list of all mobs alive. If mob is cliented, it adds it to the list of all living player-mobs.
///Removes the mob reference from the list of all mobs alive. If mob is cliented, it removes it from the list of all living player-mobs.
///Adds the mob reference to the list of all the dead mobs. If mob is cliented, it adds it to the list of all dead player-mobs.
///Remvoes the mob reference from list of all the dead mobs. If mob is cliented, it adds it to the list of all dead player-mobs.
///Adds the cliented mob reference to the list of all player-mobs, besides to either the of dead or alive player-mob lists, as appropriate. Called on Login().
///Removes the mob reference from the list of all player-mobs, besides from either the of dead or alive player-mob lists, as appropriate. Called on Logout().
///Adds the cliented mob reference to either the list of dead player-mobs or to the list of observers, depending on how they joined the game.
///Removes the mob reference from either the list of dead player-mobs or from the list of observers, depending on how they joined the game.
///Adds the cliented mob reference to the list of living player-mobs. If the mob is an antag, it adds it to the list of living antag player-mobs.
///Removes the mob reference from the list of living player-mobs. If the mob is an antag, it removes it from the list of living antag player-mobs.
///Adds the cliented mob reference to the list of living antag player-mobs.
///Removes the mob reference from the list of living antag player-mobs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob_movement.dm. ----------------------
//DO NOT USE THIS UNLESS YOU ABSOLUTELY HAVE TO. THIS IS BEING PHASED OUT FOR THE MOVESPEED MODIFICATION SYSTEM.
//See mob_movespeed.dm
/// Process_Grab(): checks for grab, attempts to break if so. Return TRUE to prevent movement.
///Process_Incorpmove
///Called by client/Move()
///Allows mobs to run though walls
///Process_Spacemove
///Called by /client/Move()
///For moving in space
///return TRUE for movement 0 for none
//bodypart selection - Cyberboss
//8 toggles through head - eyes - mouth
//4: r-arm 5: chest 6: l-arm
//1: r-leg 2: groin 3: l-leg
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\mob_transformation_simple.dm. ----------------------
//This proc is the most basic of the procs. All it does is make a new mob on the same tile and transfer over a few variables.
//Returns the new mob
//Note that this proc does NOT do MMI related stuff!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\say.dm. ----------------------
//Speech verbs.
// the _keybind verbs uses "as text" versus "as text|null" to force a popup when pressed by a keybind.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\say_readme.dm. ----------------------
/*=============================================================
======================MIAUW'S SAY REWRITE======================
===============================================================

This is a basic explanation of how say() works. Read this if you don't understand something.

The basic "flow" of say() is that a speaker says a message, which is heard by hearers. What appears on screen
is constructed by each hearer separately, and not by the speaker.

This rewrite was needed, but is far from perfect. Report any bugs you come across and feel free to fix things up.
Radio code, while very much related to saycode, is not something I wanted to touch, so the code related to that may be messy.

If you came here to see how to use saycode, all you will ever really need to call is say(message).
To have things react when other things speak around them, add the HEAR_1 flag to their flags variable and
override their Hear() proc.

=======================PROCS & VARIABLES=======================
	Here follows a list of say()-related procs and variables.
global procs
	get_radio_span(freq)
		Returns the span class associated with that frequency.

	get_radio_name(freq)
		Returns the name of that frequency.

	get_hearers_in_view(R, atom/source)
		Self-explanatory. Calls get_hear() and then calls recursive_hear_check on everything that get_hear() returns.

	recursive_hear_check(atom/O)
		Checks for hearers by looping through the contents of O and the contents of the contents of O and etc and checking
		each object for the HEAR_1 flag. Returns a list of objects with the HEAR_1 flag.

	get_hear(range, atom/source)
		Like view(), but ignores luminosity.

	message_spans_start(spans)
		Turns each element of spans into a span class.

	message_spans_end(length)
		Returns lenght times "</span>"

	attach_spans(input, spans)
		Attaches span classes around input.

/atom/movable
	flags
		The HEAR_1 flag determines whether something is a hearer or not.
		Hear() is only called on procs with this flag.

	languages_spoken/languages_understood
		Bitmask variable.
		What languages this object speaks/understands. If the languages of the speaker don't match the languages
		of the hearer, the message will be modified in the hearer's lang_treat().

	verb_say/verb_ask/verb_exclaim/verb_yell
		These determine what the verb is for their respective action. Used in say_quote().

	say(message)
		Say() is the "mother-proc". It calls all the other procs required for speaking, but does little itself.
		At the atom/movable level, say() just calls send_speech.

	Hear(message, atom/movable/speaker, message_langs, raw_message, radio_freq, spans)
		This proc handles hearing. What it does varies. For mobs, it treats the message with hearer-specific things
		like language and deafness, then outputs it to the hearer.

		IMPORTANT NOTE: If radio_freq is not null, the code will assume that the speaker is virtual! (more info on this in the Radios section below)

	send_speech(message, range, source, bubble_type, spans)
		This proc composes a list of hearers (things with the HEAR_1 flag + dead people) and calls Hear() on them.
		Message treatment or composition of output are not done by this proc, these are handled by the rest of
		say() and the hearer respectively.

	lang_treat(message, atom/movable/speaker, message_langs, raw_message, spans, message_mode)
		Modifies the message by comparing the languages of the speaker with the languages of the hearer.
		Called on the hearer.
		Passes message_mode to say_quote.

	say_quote(input, spans, message_mode)
		Adds a verb and quotes to a message. Also attaches span classes to a message. Verbs are determined by verb_say/verb_ask/verb_yell variables. Called on the speaker.

/mob
	say_dead(message)
		Sends a message to all dead people. Does not use Hear().

	compose_message(message, atom/movable/speaker, message_langs, raw_message, radio_freq, spans, message_mode)
		Composes the message mobs see on their screen when they hear something.

	compose_track_href(message, atom/movable/speaker, message_langs, raw_message, radio_freq)
		Composes the href tags used by the AI for tracking. Returns "" for all mobs except AIs.

	compose_job(message, atom/movable/speaker, message_langs, raw_message, radio_freq)
		Composes the job and the end tag for tracking hrefs. Returns "" for all mobs except AIs.

	hivecheck()
		Returns 1 if the mob can hear and talk in the alien hivemind.

	lingcheck()
		Returns 1 if the mob can hear and talk in the changeling hivemind.

/mob/living
	say(message)
		The say() of mob_living is significantly more complex than that of objects.
		Most of the extra code has to do with radios and message treatment.

	send_speech(message, range, source, bubble_type, spans, message_mode)
		mob/living's send_speech allows mobs one tile outside of the defined range to still hear the message,
		but starred with the stars() proc.

	check_emote(message)
		Checks if the message begins with an * and is thus an emote.

	can_speak(message)
		Calls can_speak_basic() and can_speak_vocal()

	can_speak_basic(message)
		Sees if the mob can "think" the message. Does not include vocalization or stat checks.
		Vocalization checks are in can_speak_vocal, stat checks have to be done manually.
		Called right before handle_inherent_channels()

	can_speak_vocal(message)
		Checks if the mob can vocalize their message. This is separate so, for example, muzzles don't block
		hivemind chat.
		Called right after handle_inherent_channels()

	get_message_mode(message)
		Checks the start of the message for a message mode, then returns said message mode.
		DOES NOT TRIM THE MESSAGE. This is done manually.

	handle_inherent_channels(message, message_mode)
		If message_mode is MODE_BINARY, MODE_ALIEN or MODE_CHANGELING (or, for AIs, MODE_HOLOPAD), this will
		handle speaking in those modes. Return 1 to exit say().

	treat_message(message)
		What it says on the tin. Treats the message according to masks, mutantraces, mutations, etc.
		Please try to keep things in a logical order (e.g. don't have masks handled before mutations),
		even if that means you have to call ..() in the middle of the proc.

	radio(message, message_mode, spans)
		Handles talking into radios. Uses a switch to determine what radio to speak into and in which manner to do so.

		Return is a bitflag.
		NOPASS = terminate say() (used for whispers)
		ITALICS = add italics to the message
		REDUCE_RANGE = reduce the message range to one tile.

		Return 0 if no radio was spoken into.
		IMPORTANT: remember to call ..() and check for ..()'s return value properly!

============================RADIOS=============================

I did not want to interfere with radios too much, but I sort of had to.
For future generations, here is how radio code works:
First, talk_into() is called on a radio. This sends a signal datum into the magic machine that is tcomms, which
eventually results in broadcast_message() being called.

Broadcast_message() does NOT call say() on radios, but rather calls Hear() on everyone in range of a radio.
This is because the system does not like repeating says.

Furthermore, I changed radios to not be in the SSradio. Instead, they are in a global list called all_radios.
This is an associative list, and the numbers as strings are the keys. The values are lists of radios that can hear said frequency.

To add a radio, simply use add_radio(radio, frequency). To remove a radio, use remove_radio(radio, frequency).
To remove a radio from ALL frequencies, use remove_radio_all(radio).

VIRTUAL SPEAKERS:
Virtual speakers are simply atom/movables with a few extra variables.
If radio_freq is not null, the code will rely on the fact that the speaker is virtual. This means that several procs will return something:
	(all of these procs are defined at the atom/movable level and return "" at that level.)
	GetJob()
		Returns the job string variable of the virtual speaker.
	GetTrack()
		Returns wether the tracking href should be fake or not.
	GetSource()
		Returns the source of the virtual speaker.
	GetRadio()
		Returns the radio that was spoken through by the source. Needed for AI tracking.

This is fairly hacky, but it means that I can advoid using istypes. It's mainly relevant for AI tracking and AI job display.

That's all, folks!*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\say_vr.dm. ----------------------
//////////////////////////////////////////////////////
////////////////////SUBTLE COMMAND////////////////////
//////////////////////////////////////////////////////
///////////////// EMOTE CODE
// Maybe making this as an emote is less messy?
// It was - ktccd
///////////////// SUBTLE 2: NO GHOST BOOGALOO
///////////////// SUBTLE 3: DARE DICE
///////////////// VERB CODE
///////////////// VERB CODE 2
///////////////// VERB CODE 3
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\status_procs.dm. ----------------------
//Here are the procs used to modify status effects of a mob.
//The effects include: stun, knockdown, unconscious, sleeping, resting, jitteriness, dizziness, ear damage,
// eye damage, eye_blind, eye_blurry, druggy, TRAIT_BLIND trait, and TRAIT_NEARSIGHT trait.
///Set the jitter of a mob
/**
  * Set the dizzyness of a mob to a passed in amount
  *
  * Except if dizziness is already higher in which case it does nothing
  */
///FOrce set the dizzyness of a mob
/**
  * Sets a mob's blindness to an amount if it was not above it already, similar to how status effects work
  */
/**
  * Adjust a mobs blindness by an amount
  *
  * Will apply the blind alerts if needed
  */
/**
  * Force set the blindness of a mob to some level
  */
/// proc that adds and removes blindness overlays when necessary
/**
  * Make the mobs vision blurry
  */
/**
  * Adjust the current blurriness of the mobs vision by amount
  */
///Set the mobs blurriness of vision to an amount
///Adjust the drugginess of a mob
///Set the drugginess of a mob
///Adjust the disgust level of a mob
///Set the disgust level of a mob
///Adjust the body temperature of a mob, with min/max settings
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\transform_procs.dm. ----------------------
//////////////////////////           Humanize               //////////////////////////////
//Could probably be merged with monkeyize but other transformations got their own procs, too
//human -> alien
/* Certain mob types have problems and should not be allowed to be controlled by players.
 *
 * This proc is here to force coders to manually place their mob in this list, hopefully tested.
 * This also gives a place to explain -why- players shouldnt be turn into certain mobs and hopefully someone can fix them.
 */
//Bad mobs! - Remember to add a comment explaining what's wrong with the mob
//Good mobs!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\typing_indicator.dm. ----------------------
/// state = overlay/image/object/type/whatever add_overlay will accept
/// Fetches the typing indicator we'll use from GLOB.typing_indicator_overlays
/// Gets the state we will use for typing indicators. Defaults to src.typing_indicator_state
/// Generates the mutable appearance for typing indicator. Should prevent stuck overlays.
/**
  * Displays typing indicator.
  * @param timeout_override - Sets how long until this will disappear on its own without the user finishing their message or logging out. Defaults to src.typing_indicator_timeout
  * @param state_override - Sets the state that we will fetch. Defaults to src.get_typing_indicator_icon_state()
  * @param force - shows even if src.typing_indcator_enabled is FALSE.
  */
/**
  * Removes typing indicator.
  */
/// Default typing indicator
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\update_icons.dm. ----------------------
//Most of these are defined at this level to reduce on checks elsewhere in the code.
//Having them here also makes for a nice reference list of the various overlay-updating procs available
//skyrat edit
//
//skyrat edit
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\camera\camera.dm. ----------------------
// Camera mob, used by AI camera and blob.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\dead.dm. ----------------------
//Dead mobs can exist whenever. This is needful
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\new_player.dm. ----------------------
///Cooldown for the Reset Lobby Menu HUD verb
//When you cop out of the round (NB: this HAS A SLEEP FOR PLAYER INPUT IN IT)
/*	Used to make sure that a player has a valid job preference setup, used to knock players out of eligibility for anything if their prefs don't make sense.
	A "valid job preference setup" in this situation means at least having one job set to low, or not having "return to lobby" enabled
	Prevents "antag rolling" by setting antag prefs on, all jobs to never, and "return to lobby if preferences not availible"
	Doing so would previously allow you to roll for antag, then send you back to lobby if you didn't get an antag role
	This also does some admin notification and logging as well, as well as some extra logic to make sure things don't go wrong
*/
///Resets the Lobby Menu HUD, recreating and reassigning it to the new player
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\poll.dm. ----------------------
//Returns null on failure, TRUE if already voted, FALSE if not voted yet.
//Returns adminrank for use in polls.
/**
 * Processes vote form data and saves results to the database for an IRV type poll.
 *
 */
/**
 * Processes vote form data and saves results to the database for a multiple choice type poll.
 *
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\preferences_setup.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\alienpeople.dm. ----------------------
/******************************************
*********** Xeno Dorsal Tubes *************
*******************************************/
/******************************************
************* Xeno Tails ******************
*******************************************/
/******************************************
************* Xeno Heads ******************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\arachnid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\body_markings.dm. ----------------------
/******************************************
************ Furry Markings ***************
*******************************************/
// These are all color matrixed and applied per-limb by default. you MUST comply with this if you want to have your markings work --Pooj
// use the HumanScissors tool to break your sprite up into the zones easier.
// Although Byond supposedly doesn't have an icon limit anymore of 512 states after 512.1478, just be careful about too many additions.
// sticking old lizard markings here for now
/******************************************
************* Insect Markings *************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\caps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\Citadel_Snowflake.dm. ----------------------
//Sabresune
//Lunasune
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\ears.dm. ----------------------
/******************************************
*************** Human Ears ****************
*******************************************/
/******************************************
*************** Furry Ears ****************
*******************************************/
/******************************************
*************** Tall Ears *****************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\frills.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\hair_face.dm. ----------------------
/////////////////////////////
// Facial Hair Definitions //
/////////////////////////////
// please make sure they're sorted alphabetically and categorized
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\hair_head.dm. ----------------------
//////////////////////
// Hair Definitions //
//////////////////////
//Donator item - fractious
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\horns.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\ipc_synths.dm. ----------------------
/******************************************
************** IPC SCREENS ****************
*******************************************/
/******************************************
************** IPC Antennas ***************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\legs_and_taurs.dm. ----------------------
/******************************************
***************** Leggy *******************
*******************************************/
/******************************************
************** Taur Bodies ****************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\snouts.dm. ----------------------
//christ this was a mistake, but it's here just in case someone wants to selectively fix -- Pooj
/************* Lizard compatable snoots ***********
/datum/sprite_accessory/snouts/bird
	name = "Beak"
	icon_state = "bird"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/bigbeak
	name = "Big Beak"
	icon_state = "bigbeak"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/bug
	name = "Bug"
	icon_state = "bug"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	extra2 = TRUE
	extra2_color_src = MUTCOLORS3

/datum/sprite_accessory/snouts/elephant
	name = "Elephant"
	icon_state = "elephant"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED
	extra = TRUE
	extra_color_src = MUTCOLORS3

/datum/sprite_accessory/snouts/lcanid
	name = "Mammal, Long"
	icon_state = "lcanid"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/lcanidalt
	name = "Mammal, Long ALT"
	icon_state = "lcanidalt"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/scanid
	name = "Mammal, Short"
	icon_state = "scanid"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/scanidalt
	name = "Mammal, Short ALT"
	icon_state = "scanidalt"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/wolf
	name = "Mammal, Thick"
	icon_state = "wolf"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/wolfalt
	name = "Mammal, Thick ALT"
	icon_state = "wolfalt"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/redpanda
	name = "WahCoon"
	icon_state = "wah"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/rhino
	name = "Horn"
	icon_state = "rhino"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED
	extra = TRUE
	extra = MUTCOLORS3

/datum/sprite_accessory/snouts/rodent
	name = "Rodent"
	icon_state = "rodent"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/husky
	name = "Husky"
	icon_state = "husky"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/otie
	name = "Otie"
	icon_state = "otie"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/pede
	name = "Scolipede"
	icon_state = "pede"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/sergal
	name = "Sergal"
	icon_state = "sergal"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED

/datum/sprite_accessory/snouts/shark
	name = "Shark"
	icon_state = "shark"
	color_src = MATRIXED
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'

/datum/sprite_accessory/snouts/toucan
	name = "Toucan"
	icon_state = "toucan"
	icon = 'modular_citadel/icons/mob/mam_snouts.dmi'
	color_src = MATRIXED
*/
/******************************************
************** Mammal Snouts **************
*******************************************/
/******************************************
**************** Snouts *******************
*************but higher up*****************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\socks.dm. ----------------------
///////////////////////
// Socks Definitions //
///////////////////////
// please make sure they're sorted alphabetically and categorized
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\spines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\synthliz.dm. ----------------------
//Synth snouts (This is the most important part)
//Synth body markings
//Synth tails
//Synth Antennae
//Synth Taurs (Ported from Virgo)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\tails.dm. ----------------------
/******************************************
************* Lizard Tails ****************
*******************************************/
//this goes first regardless of alphabetical order
/******************************************
************** Human Tails ****************
*******************************************/
/******************************************
************** Furry Tails ****************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\undershirt.dm. ----------------------
////////////////////////////
// Undershirt Definitions //
////////////////////////////
// please make sure they're sorted alphabetically and categorized
//feminine accessories from here on
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\underwear.dm. ----------------------
///////////////////////////
// Underwear Definitions //
///////////////////////////
//feminine underwear from here on
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\wings.dm. ----------------------
//Functional Wings
// Decorative wings
//nonmoth wings
//moth wings
//INSECT WINGS
//non insect wings
//moth wings
//insect markings
//DONATOR WINGS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\new_player\sprite_accessories\_sprite_accessories.dm. ----------------------
/*

	Hello and welcome to sprite_accessories: For sprite accessories, such as hair,
	facial hair, and possibly tattoos and stuff somewhere along the line. This file is
	intended to be friendly for people with little to no actual coding experience.
	The process of adding in new hairstyles has been made pain-free and easy to do.
	Enjoy! - Doohl


	Notice: This all gets automatically compiled in a list in dna.dm, so you do not
	have to define any UI values for sprite accessories manually for hair and facial
	hair. Just add in new hair types and the game will naturally adapt.

	!!WARNING!!: changing existing hair information can be VERY hazardous to savefiles,
	to the point where you may completely corrupt a server's savefiles. Please refrain
	from doing this unless you absolutely know what you are doing, and have defined a
	conversion in savefile.dm
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\notificationprefs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\observer.dm. ----------------------
/*
 * This proc will update the icon of the ghost itself, with hair overlays, as well as the ghost image.
 * Please call update_icon(icon_state) from now on when you want to update the icon_state of the ghost,
 * or you might end up with hair on a sprite that's not supposed to get it.
 * Hair will always update its dir, so if your sprite has no dirs the haircut will go all over the place.
 * |- Ricotez
 */
/*
 * Increase the brightness of a color by calculating the average distance between the R, G and B values,
 * and maximum brightness, then adding 30% of that average to R, G and B.
 *
 * I'll make this proc global and move it to its own file in a future update. |- Ricotez
 */
/*
Transfer_mind is there to check if mob is being deleted/not going to have a body.
Works together with spawning an observer, noted above.
*/
/*
This is the proc mobs get to turn into a ghost. Forked from ghostize due to compatibility issues.
*/
// This is the ghost's follow verb with an argument
//this is a mob verb instead of atom for performance reasons
//see /mob/verb/examinate() in mob.dm for more info
//overridden here and in /mob/living for different point span classes and sanity checks
//this is called when a ghost is drag clicked to something.
//We don't want to update the current var
//But we will still carry a mind.
/* So long, Mafia mode, disabled for now
/mob/dead/observer/verb/mafia_game_signup()
	set category = "Ghost"
	set name = "Signup for Mafia"
	set desc = "Sign up for a game of Mafia to pass the time while dead."
	mafia_signup()
*/
// Skyrat change - moved to modular/signals.
/*
/mob/dead/observer/CtrlShiftClick(mob/user)
	if(isobserver(user) && check_rights(R_SPAWN))
		change_mob_type( /mob/living/carbon/human , null, null, TRUE) //always delmob, ghosts shouldn't be left lingering
*/
// Ghosts have no momentum, being massless ectoplasm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\observer_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\orbit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\respawn.dm. ----------------------
// ADMIN VERBS BEGIN
/**
 * Fully returns a player to lobby, allowing them to bypass all respawn restrictions
 * Works on ghosts or new players (lobby players)
 * If a lobby player is selected, their restrictions are removed.
 */
/**
 * Allows a ghost to bypass respawn delay without lifting respawn restrictions
 */
// ADMIN VERBS END
/**
 * Checks if we can latejoin on the currently selected slot, taking into account respawn status.
 */
/**
 * Attempts to respawn.
 */
/**
 * Gets time left until we can respawn. Returns 0 if we can respawn now.
 */
/**
 * Handles respawning
 */
/**
 * Actual proc that removes us and puts us back on lobby
 *
 * Returns the new mob.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\dead\observer\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\blood.dm. ----------------------
/****************************************************
				BLOOD SYSTEM
****************************************************/
// Takes care blood loss and regeneration
//Makes a blood drop, leaking amt units of blood from the mob
/****************************************************
				BLOOD TRANSFERS
****************************************************/
//Gets blood from mob to a container or other mob, preserving all data in it.
//get the id of the substance this mob use as blood.
// This is has more potential uses, and is probably faster than the old proc.
//to add a splatter of blood or other mob liquid.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\bloodcrawl.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\clickdelay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\damage_procs.dm. ----------------------
/**
  * Applies damage to this mob
  *
  * Sends [COMSIG_MOB_APPLY_DAMAGE]
  *
  * Arguuments:
  * * damage - amount of damage
  * * damagetype - one of [BRUTE], [BURN], [TOX], [OXY], [CLONE], [STAMINA]
  * * def_zone - zone that is being hit if any
  * * blocked - armor value applied
  * * forced - bypass hit percentage
  * * spread_damage - used in overrides
  *
  * Returns TRUE if damage applied
  */
//only_robotic and only_organic arg only relevant for carbons
//By default, returns toxins damage no matter what kind of tox damage the target is using.
//Defaults to omni here because setToxLoss is used by very few things that usually want to set all types
//only_robotic and only_organic arg only relevant for carbons
// heal ONE external organ, organ gets randomly selected from damaged ones.
// damage ONE external organ, organ gets randomly selected from damaged ones.
// heal MANY bodyparts, in random order
// damage MANY bodyparts, in random order
//heal up to amount damage, in a given order
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\life.dm. ----------------------
/**
  * Called by SSmobs at an interval of 2 seconds.
  * Splits off into PhysicalLife() and BiologicalLife(). Override those instead of this.
  */
/**
  * Handles biological life processes like chemical metabolism, breathing, etc
  * Returns TRUE or FALSE based on if we were interrupted. This is used by overridden variants to check if they should stop.
  */
/**
  * Handles physical life processes like being on fire. Don't ask why this is considered "Life".
  * Returns TRUE or FALSE based on if we were interrupted. This is used by overridden variants to check if they should stop.
  */
/*
 * this updates some effects: mostly old stuff such as drunkness, druggy, stuttering, etc.
 * that should be converted to status effect datums one day.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living.dm. ----------------------
//Generic Bump(). Override MobBump() and ObjBump() instead of this.
//Called when we bump onto a mob
//Called when we bump onto an obj
//Called when we want to push an atom/movable
// i wish to have a "friendly chat" with whoever made three tail variables instead of one
//mob verbs are a lot faster than object verbs
//for more info on why this is not atom/pull, see examinate() in mob.dm
//same as above
//This proc is used for mobs which are affected by pressure to calculate the amount of pressure that actually
//affects them once clothing is factored in. ~Errorage
// MOB PROCS //END
//Skyrat change start
//Skyrat change stop
/*CIT CHANGE - comments out lay_down proc to be modified in modular_citadel
/mob/living/proc/lay_down()
	set name = "Rest"
	set category = "IC"

	resting = !resting
	to_chat(src, "<span class='notice'>You are now [resting ? "resting" : "getting up"].</span>")
	update_canmove()
*/
//Recursive function to find everything a mob is holding. Really shitty proc tbh.
// Living mobs use can_inject() to make sure that the mob is not syringe-proof in general.
//Proc used to resuscitate a mob, for full_heal see fully_heal()
//proc used to remove all immobilisation effects + reset stamina
//proc used to completely heal a mob.
//proc called by revive(), to check if we can actually ressuscitate the mob (we don't want to revive him and have him instantly die again)
///Returns how much blood we're losing from being dragged a tile, from [mob/living/proc/makeTrail]
/// Resist verb for attempting to get out of whatever is restraining your motion. Gives you resist clickdelay if do_resist() returns true.
/// The actual proc for resisting. Return TRUE to give CLICK_CD_RESIST clickdelay.
/// Proc to resist a grab. moving_resist is TRUE if this began by someone attempting to move. Return FALSE if still grabbed/failed to break out. Use this instead of resist_grab() directly.
/*!
 * Proc that actually does the grab resisting. Return TRUE if successful. Does not check that a grab exists! Use attempt_resist_grab() instead of this in general!
 * Forced is if something other than the user mashing movement keys/pressing resist button did it, silent is if it makes messages (like "attempted to resist" and "broken free").
 * Forced does NOT force success!
 */
// The src mob is trying to strip an item from someone
// Override if a certain type of mob should be behave differently when stripping items (can't, for example)
// The src mob is trying to place an item on someone
// Override if a certain mob should be behave differently when placing items (can't, for example)
//used in datum/reagents/reaction() proc
// Called when we are hit by a bolt of polymorph and changed
// Generally the mob we are currently in is about to be deleted
//Mobs on Fire
//Share fire evenly between the two mobs
//Called in MobBump() and Crossed()
//Mobs on Fire end
// used by secbot and monkeys Crossed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_active_block.dm. ----------------------
// Active directional block system. Shared code is in [living_blocking_parrying.dm]
/// Visual effect setup for starting a directional block
/// Visual effect cleanup for starting a directional block
/**
  * Proc called by keybindings to toggle active blocking.
  */
/**
  * Proc called by keybindings to start active blocking.
  */
/**
  * Gets the first item we can that can block, but if that fails, default to active held item.COMSIG_ENABLE_COMBAT_MODE
  */
/**
  * Proc called by keybindings to stop active blocking.
  */
/**
  * Returns if we can actively block.
  */
/**
  * Calculates FINAL ATTACK DAMAGE after mitigation
  */
/// Amount of stamina from damage blocked. Note that the damage argument is damage_blocked.
/// Apply the stamina damage to our user, notice how damage argument is stamina_amount.
/**
  * Gets the block direction bitflags of what we can block.
  */
/**
  * Checks if we can block from a specific direction from our direction.
  *
  * @params
  * * our_dir - our direction.
  * * their_dir - their direction. Must be a single direction, or NONE for an attack from the same tile. This is incoming direction.
  */
/**
  * can_block_direction but for "compound" directions to check all of them and return the number of directions that were blocked.
  *
  * @params
  * * our_dir - our direction.
  * * their_dirs - list of their directions as we cannot use bitfields here.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_active_parry.dm. ----------------------
// Active parry system goes in here.
/**
  * Determines if we can actively parry.
  */
/**
  * Called from keybindings.
  */
/**
  * Initiates a parrying sequence.
  */
/**
 * Massive snowflake proc for getting something to parry with.
 *
 * @return list of [method, data, tool], where method is the parry method define, data is the block_parry_data var that must be run through return_block_parry_data, and tool is the concept/object/martial art/etc used.
 */
/**
  * Tries to find a backup parry item.
  * Does not look at active held item.
  */
/**
  * Check if we can unarmed parry
  */
/**
  * Called via timer when the parry sequence ends.
  */
/**
  * Handles starting effects for parrying.
  */
/**
  * Handles ending effects for parrying.
  */
/**
  * Gets this item's datum/block_parry_data
  */
//Stubs.
/**
  * Called when an attack is parried using this, whether or not the parry was successful.
  */
/**
  * Called when an attack is parried innately, whether or not the parry was successful.
  */
/**
  * Called when an attack is parried using this, whether or not the parry was successful.
  */
/**
  * Called when an attack is parried and block_parra_data indicates to use a proc to handle counterattack.
  */
/**
  * Called when an attack is parried and block_parra_data indicates to use a proc to handle counterattack.
  */
/**
  * Called when an attack is parried and block_parra_data indicates to use a proc to handle counterattack.
  */
/**
 * Attempts to automatically parry an attacker.
 */
/**
  * Gets the stage of our parry sequence we're currently in.
  */
/**
  * Gets the current decisecond "frame" of an active parry.
  */
/// same return values as normal blocking, called with absolute highest priority in the block "chain".
/// Run counterattack if any
/// Gets the datum/block_parry_data we're going to use to parry.
/// Effects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_block.dm. ----------------------
// This file has a weird name, but it's for anything related to the checks for shields, blocking, dodging,
// and similar "stop this attack before it actually impacts the target" as opposed to "defend once it has hit".
/** The actual proc for block checks. DO NOT USE THIS DIRECTLY UNLESS YOU HAVE VERY GOOD REASON TO. To reduce copypaste for differences between handling for real attacks and virtual checks.
  * Automatically checks all held items for /obj/item/proc/run_block() with the same parameters.
  * @params
  * real_attack - If this attack is real. This one is quirky; If it's real, run_block is called. If it's not, check_block is called and none of the regular checks happen, and this is effectively only useful
  * 	for populating return_list with blocking metadata.
  * object - Whatever /atom is actually hitting us, in essence. For example, projectile if gun, item if melee, structure/whatever if it's a thrown, etc.
  * damage - The nominal damage this would do if it was to hit. Obviously doesn't take into effect explosions/magic/similar things.. unless you implement it to raise the value.
  * attack_text - The text that this attack should show, in the context of something like "[src] blocks [attack_text]!"
  * attack_type - See __DEFINES/combat.dm - Attack types, to distinguish between, for example, someone throwing an item at us vs bashing us with it.
  * armour_penetration - 0-100 value of how effectively armor penetrating the attack should be.
  * attacker - Set to the mob attacking IF KNOWN. Do not expect this to always be set!
  * def_zone - The zone this'll impact.
  * return_list - If something wants to grab things from what items/whatever put into list/block_return on obj/item/run_block and the comsig, pass in a list so you can grab anything put in it after block runs.
  * attack_direction - Direction of the attack. It is highly recommended to put this in, as the automatic guesswork that's done otherwise is quite inaccurate at times.
  */
/// Gets an unsortedlist of objects to run block checks on. List must have associative values for priorities!
/// Runs block and returns flag for do_run_block to process.
/// Returns block information using list/block_return. Used for check_block() on mobs.
// HELPER PROCS
/**
  * Considers a block return_list and calculates damage to use from that.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_blocking_parrying.dm. ----------------------
// yell at me later for file naming
// This file contains stuff relating to the new directional blocking and parry system.
/// Carries data like list data that would be a waste of memory if we initialized the list on every /item as we can cache datums easier.
/**
  * Quirky proc to get average of flags in list that are in attack_type because why is attack_type a flag.
  */
/**
  * Gets the percentage efficiency of our parry.
  *
  * Returns a percentage in normal 0 to 100 scale, but not clamped to just 0 to 100.
  * This is a proc to allow for overriding.
  * @params
  * * attack_type - int, bitfield of the attack type(s)
  * * parry_time - deciseconds since start of the parry.
  */
/**
  * Generates a HTML render of this datum for self-documentation
  * Maybe make this tgui-next someday haha god this is ugly as sin.
  * Does NOT include the popout or title or anything. Just the variables and explanations..
  */
// MOB PROCS
/**
  * Called every life tick to handle blocking/parrying effects.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_defense.dm. ----------------------
//this returns the mob's protection against eye damage (number between -1 and 2) from bright lights
//this returns the mob's protection against ear damage (0:no protection; 1: some ear protection; 2: has no ears)
//proc to upgrade a simple pull into a more aggressive grab.
//Looking for irradiate()? It's been moved to radiation.dm under the rad_act() for mobs.
///As the name suggests, this should be called to apply electric shocks.
//called when the mob receives a bright flash
//called when the mob receives a loud bang
//to damage the clothes worn by a mob
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_mobility.dm. ----------------------
//Stuff like mobility flag updates, resting updates, etc.
//Force-set resting variable, without needing to resist/etc.
//Force mob to rest, does NOT do stamina damage.
//It's really not recommended to use this proc to give feedback, hence why silent is defaulting to true.
//Updates canmove, lying and icons. Could perhaps do with a rename but I can't think of anything to describe it.
//Robots, animals and brains have their own version so don't worry about them
//	var/should_be_lying = !canstand && !HAS_TRAIT(src, TRAIT_MOBILITY_NOREST) //SPLURT edit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_movement.dm. ----------------------
/// whether or not we can slide under another living mob. defaults to if we're not dense. CanPass should check "overriding circumstances" like buckled mobs/having PASSMOB flag, etc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_signals.dm. ----------------------
/// IN THE FUTURE, WE WILL PROBABLY REFACTOR TO LESSEN THE NEED FOR UPDATE_MOBILITY, BUT FOR NOW.. WE CAN START DOING THIS.
/// FOR BLOCKING MOVEMENT, USE TRAIT_MOBILITY_NOMOVE AS MUCH AS POSSIBLE. IT WILL MAKE REFACTORS IN THE FUTURE EASIER.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\living_sprint.dm. ----------------------
// Silicons have snowflake behavior.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\login.dm. ----------------------
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\say.dm. ----------------------
// Skyrat edits
// End of Skyrat edits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\smell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\stamina_buffer.dm. ----------------------
/**
  * Attempts to use an amount of stamina from our stamina buffer.
  * Does not use anything if we don't have enough.
  *
  * Returns TRUE or FALSE based on if we have it.
  */
/**
  * Updates our stamina buffer amount.
  */
/**
  * Boosts our stamina buffer by this much.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\status_procs.dm. ----------------------
// YEEHAW GAMERS STAMINA REWORK PROC GETS TO BE FIRST
// amount = strength
// updating = update mobility etc etc
// ignore_castun = same logic as Paralyze() in general
// override_duration = If this is set, does Paralyze() for this duration.
// override_stam = If this is set, does this amount of stamina damage.
// knocktofloor - whether to knock them to the ground
////////////////////////////// STUN ////////////////////////////////////
///////////////////////////////// KNOCKDOWN /////////////////////////////////////
///////////////////////////////// IMMOBILIZED ////////////////////////////////////
///////////////////////////////// PARALYZED //////////////////////////////////
///////////////////////////////// DAZED ////////////////////////////////////
///////////////////////////////// STAGGERED ////////////////////////////////////
//Blanket
/// Makes sure all 5 of the non-knockout immobilizing status effects are lower or equal to amount.
//////////////////UNCONSCIOUS
/////////////////////////////////// SLEEPING ////////////////////////////////////
///////////////////////////////// OFF BALANCE/SHOVIES ////////////////////////
///////////////////////////////// FROZEN /////////////////////////////////////
///////////////////////////////////// STUN ABSORPTION /////////////////////////////////////
//adds a stun absorption with a key, a duration in deciseconds, its priority, and the messages it makes when you're stun/examined, if any
/////////////////////////////////// DISABILITIES ////////////////////////////////////
/////////////////////////////////// TRAIT PROCS ////////////////////////////////////
///Unignores all slowdowns that lack the IGNORE_NOSLOW flag.
///Ignores all slowdowns that lack the IGNORE_NOSLOW flag.
///Ignores specific slowdowns. Accepts a list of slowdowns.
///Unignores specific slowdowns. Accepts a list of slowdowns.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\taste.dm. ----------------------
// non destructively tastes a reagent container
//FermiChem - How to check pH of a beaker without a meter/pH paper.
//Basically checks the pH of the holder and burns your poor tongue if it's too acidic!
//TRAIT_AGEUSIA players can't taste, unless it's burning them.
//taking sips of a strongly acidic/alkaline substance will burn your tongue.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\update_icons.dm. ----------------------
//IMPORTANT: Multiple animate() calls do not stack well, so try to do them all at once if you can.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\ventcrawling.dm. ----------------------
//VENTCRAWLING
//OOP
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\brain.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\brain_item.dm. ----------------------
//since these people will be dead M != usr
//other types of brains
////////////////////////////////////TRAUMAS////////////////////////////////////////
//Proc to use when directly adding a trauma to the brain, so extra args can be given
//Direct trauma gaining proc. Necessary to assign a trauma to its brain. Avoid using directly.
//Add a random trauma of a certain subtype
//Cure a random trauma of a certain resilience level
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\MMI.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\posibrain.dm. ----------------------
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//Two ways to activate a positronic brain. A clickable link in the ghost notif, or simply clicking the object itself.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\brain\status_procs.dm. ----------------------
//Here are the procs used to modify status effects of a mob.
//The effects include: stun, knockdown, unconscious, sleeping, resting, jitteriness, dizziness
// eye damage, eye_blind, eye_blurry, druggy, TRAIT_BLIND trait, and TRAIT_NEARSIGHT trait.
/////////////////////////////////// EYE_BLIND ////////////////////////////////////
/////////////////////////////////// EYE_BLURRY ////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon.dm. ----------------------
//Throwing stuff
//Updates the mob's health from bodyparts and mob damage variables
//to recalculate and update the mob's total tint from tinted equipment it's wearing.
//this handles hud updates
//called when we get cuffed/uncuffed
// if any of our bodyparts are bleeding
// get our total bleedrate
/**
  * generate_fake_scars()- for when you want to scar someone, but you don't want to hurt them first. These scars don't count for temporal scarring (hence, fake)
  *
  * If you want a specific wound scar, pass that wound type as the second arg, otherwise you can pass a list like WOUND_LIST_SLASH to generate a random cut scar.
  *
  * Arguments:
  * * num_scars- A number for how many scars you want to add
  * * forced_type- Which wound or category of wounds you want to choose from, WOUND_LIST_BLUNT, WOUND_LIST_SLASH, or WOUND_LIST_BURN (or some combination). If passed a list, picks randomly from the listed wounds. Defaults to all 3 types
  */
/**
  * get_biological_state is a helper used to see what kind of wounds we roll for. By default we just assume carbons (read:monkeys) are flesh and bone, but humans rely on their species datums
  *
  * go look at the species def for more info [/datum/species/proc/get_biological_state]
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_active_parry.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_context.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_defense.dm. ----------------------
///Adds to the parent by also adding functionality to propagate shocks through pulling and doing some fluff effects.
///Called slightly after electrocute act to reduce jittering and apply a secondary stun.
/// Check ourselves to see if we've got any shrapnel, return true if we do. This is a much simpler version of what humans do, we only indicate we're checking ourselves if there's actually shrapnel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_defines.dm. ----------------------
//inventory slots
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_sprint.dm. ----------------------
/// Sprint buffer ///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\carbon_stripping.dm. ----------------------
// You shouldn't be able to equip things to handcuff slots.
// You shouldn't be able to equip things to legcuff slots.
/// A strippable item for a hand
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\damage_procs.dm. ----------------------
//These procs fetch a cumulative total damage from all bodyparts
//In both these procs, only_organic / only_robotic are only used for healing, not for damaging. For now at least.
//God save me from spaghettifying this - Syscorrupt damage is not affected by toxlovers.
/** adjustOrganLoss
  * inputs: slot (organ slot, like ORGAN_SLOT_HEART), amount (damage to be done), and maximum (currently an arbitrarily large number, can be set so as to limit damage)
  * outputs:
  * description: If an organ exists in the slot requested, and we are capable of taking damage (we don't have GODMODE on), call the damage proc on that organ.
  */
/** setOrganLoss
  * inputs: slot (organ slot, like ORGAN_SLOT_HEART), amount(damage to be set to)
  * outputs:
  * description: If an organ exists in the slot requested, and we are capable of taking damage (we don't have GODMODE on), call the set damage proc on that organ, which can
  *				 set or clear the failing variable on that organ, making it either cease or start functions again, unlike adjustOrganLoss.
  */
/** getOrganLoss
  * inputs: slot (organ slot, like ORGAN_SLOT_HEART)
  * outputs: organ damage
  * description: If an organ exists in the slot requested, return the amount of damage that organ has
  */
////////////////////////////////////////////
//Returns a list of damaged bodyparts
//Returns a list of damageable bodyparts
//Heals ONE bodypart randomly selected from damaged ones.
//It automatically updates damage overlays if necessary
//It automatically updates health status
//Damages ONE bodypart randomly selected from damagable ones.
//It automatically updates damage overlays if necessary
//It automatically updates health status
//Heal MANY bodyparts, in random order
/// damage MANY bodyparts, in random order
///Returns a list of bodyparts with wounds (in case someone has a wound on an otherwise fully healed limb)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\examine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\handle_corruption.dm. ----------------------
//////////////////////////////////////
//SYSTEM CORRUPTION FOR ROBOT-PEOPLE//
//////////////////////////////////////
//Moved into its own file for easier accessability & less cluttering of carbon/life.dm. Used in BiologicalLife()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\inventory.dm. ----------------------
//This is an UNSAFE proc. Use mob_can_equip() before calling this one! Or rather use equip_to_slot_if_possible() or advanced_equip_to_slot_if_possible()
//handle stuff to update when a mob equips/unequips a mask.
//handle stuff to update when a mob equips/unequips a headgear.
/**
  * Proc called when offering an item to another player
  *
  * This handles creating an alert and adding an overlay to it
  */
/**
  * Proc called when the player clicks the give alert
  *
  * Handles checking if the player taking the item has open slots and is in range of the offerer
  * Also deals with the actual transferring of the item to the players hands
  * Arguments:
  * * offerer - The person giving the original item
  * * I - The item being given by the offerer
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\life.dm. ----------------------
//Procs called while dead
///////////////
// BREATHING //
///////////////
//Start of a breath chain, calls breathe()
//Second link in a breath chain, calls check_breath()
//Third link in a breath chain, calls handle_breath_temperature()
//Fourth and final link in a breath chain
// Make corpses rot, emitting miasma
/*
Alcohol Poisoning Chart
Note that all higher effects of alcohol poisoning will inherit effects for smaller amounts (i.e. light poisoning inherts from slight poisoning)
In addition, severe effects won't always trigger unless the drink is poisonously strong
All effects don't start immediately, but rather get worse over time; the rate is affected by the imbiber's alcohol tolerance

0: Non-alcoholic
1-10: Barely classifiable as alcohol - occassional slurring
11-20: Slight alcohol content - slurring
21-30: Below average - imbiber begins to look slightly drunk
31-40: Just below average - no unique effects
41-50: Average - mild disorientation, imbiber begins to look drunk
51-60: Just above average - disorientation, vomiting, imbiber begins to look heavily drunk
61-70: Above average - small chance of blurry vision, imbiber begins to look smashed
71-80: High alcohol content - blurry vision, imbiber completely shitfaced
81-90: Extremely high alcohol content - light brain damage, passing out
91-100: Dangerously toxic - swift death
*/
//this updates all special effects: stun, sleeping, knockdown, druggy, stuttering, etc..
//used in human and monkey handle_environment()
/////////
//LIVER//
/////////
////////////////
//BRAIN DAMAGE//
////////////////
/////////////////////////////////////
//MONKEYS WITH TOO MUCH CHOLOESTROL//
/////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\status_procs.dm. ----------------------
//Here are the procs used to modify status effects of a mob.
//The effects include: stun, knockdown, unconscious, sleeping, resting, jitteriness, dizziness, ear damage,
// eye damage, eye_blind, eye_blurry, druggy, TRAIT_BLIND trait, TRAIT_NEARSIGHT trait, and TRAIT_HUSK trait.
////////////////////////////////////////TRAUMAS/////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\update_icons.dm. ----------------------
//mob HUD updates for items in our inventory
//update whether handcuffs appears on our hud.
//update whether our head item appears on our hud.
//update whether our mask item appears on our hud.
//update whether our neck item appears on our hud.
//update whether our back item appears on our hud.
/////////////////////
// Limb Icon Cache //
/////////////////////
/*
	Called from update_body_parts() these procs handle the limb icon cache.
	the limb icon cache adds an icon_render_key to a human mob, it represents:
	- skin_tone (if applicable)
	- gender
	- limbs (stores as the limb name and whether it is removed/fine, organic/robotic)
	These procs only store limbs as to increase the number of matching icon_render_keys
	This cache exists because drawing 6/7 icons for humans constantly is quite a waste
	See RemieRichards on irc.rizon.net #coderbus
*/
//produces a key based on the mob's limbs
//change the mob's icon to the one matching its key
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\alien.dm. ----------------------
/*----------------------------------------
Proc: AddInfectionImages()
Des: Gives the client of the alien an image on each infected mob.
----------------------------------------*/
/*----------------------------------------
Proc: RemoveInfectionImages()
Des: Removes all infected images from the alien.
----------------------------------------*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\alien_defense.dm. ----------------------
/*Code for aliens attacking aliens. Because aliens act on a hivemind, I don't see them as very aggressive with each other.
As such, they can either help or harm other aliens. Help works like the human help command while harm is a simple nibble.
In all, this is a lot like the monkey code. /N
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\damage_procs.dm. ----------------------
//aliens are immune to stamina damage.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\organs.dm. ----------------------
//When the alien queen dies, all aliens suffer a penalty as punishment for failing to protect her.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\screen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\status_procs.dm. ----------------------
//Here are the procs used to modify status effects of a mob.
//The effects include: stun, knockdown, unconscious, sleeping, resting, jitteriness, dizziness, ear damage,
// eye damage, eye_blind, eye_blurry, druggy, TRAIT_BLIND trait, and TRAIT_NEARSIGHT trait.
/////////////////////////////////// STUN ////////////////////////////////////
/* CIT CHANGE - removes xeno stun immunity
/mob/living/carbon/alien/Stun(amount, updating = 1, ignore_canstun = 0)
	. = ..()
	if(!.)
		move_delay_add = min(move_delay_add + round(amount / 2), 10) //a maximum delay of 10

/mob/living/carbon/alien/SetStun(amount, updating = 1, ignore_canstun = 0)
	. = ..()
	if(!.)
		move_delay_add = min(move_delay_add + round(amount / 2), 10)

/mob/living/carbon/alien/AdjustStun(amount, updating = 1, ignore_canstun = 0)
	. = ..()
	if(!.)
		move_delay_add = clamp(move_delay_add + round(amount/2), 0, 10)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\update_icons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\alien_powers.dm. ----------------------
/*NOTES:
These are general powers. Specific powers are stored under the appropriate alien creature type.
*/
/*Alien spit now works like a taser shot. It won't home in on the target but will act the same once it does hit.
Doesn't work on other aliens/AI.*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\death.dm. ----------------------
//When the alien queen dies, all others must pay the price for letting her die.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\humanoid.dm. ----------------------
//This is fine right now, if we're adding organ specific damage this needs to be updated
//For alien evolution/promotion/queen finder procs. Checks for an active alien of that type
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\humanoid_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\queen.dm. ----------------------
//Queen verbs
//Button to let queen choose her praetorian.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\update_icons.dm. ----------------------
//Royals have bigger sprites, so inhand things must be handled differently.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\caste\drone.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\caste\hunter.dm. ----------------------
//Hunter verbs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\caste\praetorian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\humanoid\caste\sentinel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\inventory.dm. ----------------------
//can't unequip since it can't equip anything
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\larva.dm. ----------------------
//This is fine right now, if we're adding organ specific damage this needs to be updated
//This needs to be fixed
//can't equip anything
// new damage icon system
// now constructs damage icon for each organ from mask * damage field
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\larva_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\powers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\larva\update_icons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\special\alien_embryo.dm. ----------------------
// This is to replace the previous datum/disease/alien_embryo for slightly improved handling and maintainability
// It functions almost identically (see code/datums/diseases/alien_embryo.dm)
/*----------------------------------------
Proc: AddInfectionImages(C)
Des: Adds the infection image to all aliens for this embryo
----------------------------------------*/
/*----------------------------------------
Proc: RemoveInfectionImage(C)
Des: Removes all images from the mob infected by this embryo
----------------------------------------*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\alien\special\facehugger.dm. ----------------------
//TODO: Make these simple_animals
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\damage_procs.dm. ----------------------
// depending on the species, it will run the corresponding apply_damage code there
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\dummy.dm. ----------------------
/// Provides a dummy that is consistently bald, white, naked, etc.
//Inefficient pooling/caching way.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\emote.dm. ----------------------
//rock paper scissors emote handling
//the actual emotes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\examine.dm. ----------------------
//this is very slightly better than it was because you can use it more places. still can't do \his[src] though.
//END OF CIT CHANGES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human.dm. ----------------------
// called when something steps onto a human
// this could be made more general, but for now just handle mulebot
///////HUDs///////
//Used for new human mobs created by cloning/goleming/podding
//Turns a mob black, flashes a skeleton overlay
//Just like a cartoon!
//src is the user that will be carrying, target is the mob to be carried
/**
 * # `spec_trait_examine_font()`
 *
 * This gets a humanoid's special examine font, which is used to color their species name during examine / health analyzing.
 * The first of these that applies is returned.
 * Returns:
 * * Metallic font if robotic
 * * Cyan if a toxinlover
 * * Purple if plasmaperson
 * * Rock / Brownish if a golem
 * * Green if none of the others apply (aka, generic organic)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_block.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_context.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_defense.dm. ----------------------
///Get all the clothing on a specific body part
///Calculates the siemens coeff based on clothing and species, can also restart hearts.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_defines.dm. ----------------------
/// Unarmed parry data for human
/// Unarmed parry data for pugilists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_helpers.dm. ----------------------
//gets assignment from ID or ID inside PDA or PDA itself
//Useful when player do something with computers
//gets name from ID or ID inside PDA or PDA itself
//Useful when player do something with computers
//repurposed proc. Now it combines get_id_name() and get_face_name() to determine a mob's name variable. Made into a separate proc as it'll be useful elsewhere
//Returns "Unknown" if facially disfigured and real_name if not. Useful for setting name when Fluacided or when updating a human's name variable
//gets name from ID or PDA itself, ID inside PDA doesn't matter
//Useful when player is being seen by other mobs
//gets ID card object from special clothes slot or null.
//Returns the bank account of an ID the user may be holding.
/*
/mob/living/carbon/human/transfer_blood_dna(list/blood_dna)
	..()
	if(blood_dna.len)
		last_bloodtype = blood_dna[blood_dna[blood_dna.len]]//trust me this works
		last_blood_DNA = blood_dna[blood_dna.len]*/
/// For use formatting all of the scars this human has for saving for persistent scarring
/// Takes a single scar from the persistent scar loader and recreates it from the saved data
///copies over clothing preferences like underwear to another human
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_mobility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\human_stripping.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\inventory.dm. ----------------------
/**
 * Used to return a list of equipped items on a human mob; does not include held items (use get_all_gear)
 *
 * Argument(s):
 * * Optional - include_pockets (TRUE/FALSE), whether or not to include the pockets and suit storage in the returned list
 */
// Return the item currently in the slot ID
//This is an UNSAFE proc. Use mob_can_equip() before calling this one! Or rather use equip_to_slot_if_possible() or advanced_equip_to_slot_if_possible()
//delete all equipment without dropping anything
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\life.dm. ----------------------
//NOTE: Breathing happens once per FOUR TICKS, unless the last breath fails. In which case it happens once per ONE TICK! So oxyloss healing is done once per 4 ticks while oxyloss damage is applied once per tick!
// bitflags for the percentual amount of protection a piece of clothing which covers the body part offers.
// Used with human/proc/get_thermal_protection()
// The values here should add up to 1.
// Hands and feet have 2.5%, arms and legs 7.5%, each of the torso parts has 15% and the head has 30%
///FIRE CODE
//END EDIT
//END FIRE CODE
//This proc returns a number made up of the flags for body parts which you are protected on. (such as HEAD, CHEST, GROIN, etc. See setup.dm for the full list)
//See proc/get_heat_protection_flags(temperature) for the description of this proc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\physiology.dm. ----------------------
//Stores several modifiers in a way that isn't cleared by changing species
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species.dm. ----------------------
// This code handles different species in the game.
/**
 * # species datum
 *
 * Datum that handles different species in the game.
 *
 * This datum handles species in the game, such as lizardpeople, mothmen, zombies, skeletons, etc.
 * It is used in [carbon humans][mob/living/carbon/human] to determine various things about them, like their food preferences, if they have biological genders, their damage resistances, and more.
 *
 */
///////////
// PROCS //
///////////
/**
 * Generates species available to choose in character setup at roundstart
 *
 * This proc generates which species are available to pick from in character setup.
 * If there are no available roundstart species, defaults to human.
 */
/**
 * Checks if a species is eligible to be picked at roundstart.
 *
 * Checks the config to see if this species is allowed to be picked in the character setup menu.
 * Used by [/proc/generate_selectable_species].
 */
/**
 * Generates a random name for a carbon.
 *
 * This generates a random unique name based on a human's species and gender.
 * Arguments:
 * * gender - The gender that the name should adhere to. Use MALE for male names, use anything else for female names.
 * * unique - If true, ensures that this new name is not a duplicate of anyone else's name currently on the station.
 * * lastname - Does this species' naming system adhere to the last name system? Set to false if it doesn't.
 */
/**
 * Copies some vars and properties over that should be kept when creating a copy of this species.
 *
 * Used by slimepeople to copy themselves, and by the DNA datum to hardset DNA to a species
 * Arguments:
 * * old_species - The species that the carbon used to be before copying
 */
//Please override this locally if you want to define when what species qualifies for what rank if human authority is enforced.
/**
 * Corrects organs in a carbon, removing ones it doesn't need and adding ones it does.
 *
 * Takes all organ slots, removes organs a species should not have, adds organs a species should have.
 * can use replace_current to refresh all organs, creating an entirely new set.
 *
 * Arguments:
 * * C - carbon, the owner of the species datum AKA whoever we're regenerating organs in
 * * old_species - datum, used when regenerate organs is called in a switching species to remove old mutant organs.
 * * replace_current - boolean, forces all old organs to get deleted whether or not they pass the species' ability to keep that organ
 * * excluded_zones - list, add zone defines to block organs inside of the zones from getting handled. see headless mutation for an example
 */
/**
 * Proc called when a carbon becomes this species.
 *
 * This sets up and adds/changes/removes things, qualities, abilities, and traits so that the transformation is as smooth and bugfree as possible.
 * Produces a [COMSIG_SPECIES_GAIN] signal.
 * Arguments:
 * * C - Carbon, this is whoever became the new species.
 * * old_species - The species that the carbon used to be before becoming this race, used for regenerating organs.
 * * pref_load - Preferences to be loaded from character setup, loads in preferred mutant things like bodyparts, digilegs, skin color, etc.
 */
// EDIT ENDS
// shamelessly inspired by antag_datum.remove_blacklisted_quirks()
// restore any quirks that we removed
/*
 * Equip the outfit required for life. Replaces items currently worn.
 */
/* TODO: Snowflake trail marks
// Impliments different trails for species depending on if they're wearing shoes.
/datum/species/proc/get_move_trail(var/mob/living/carbon/human/H)
	if(H.lying)
		return /obj/effect/decal/cleanable/blood/footprints/tracks/body
	if(H.shoes || (H.wear_suit && (H.wear_suit.body_parts_covered & FEET)))
		var/obj/item/clothing/shoes/shoes = (H.wear_suit && (H.wear_suit.body_parts_covered & FEET)) ? H.wear_suit : H.shoes // suits take priority over shoes
		return shoes.move_trail
	else
		return move_trail */
/////////////
////LIFE////
////////////
/*	switch(H.nutrition)
		if(NUTRITION_LEVEL_FULL to INFINITY)
			H.throw_alert("nutrition", /atom/movable/screen/alert/fat)
		if(NUTRITION_LEVEL_HUNGRY to NUTRITION_LEVEL_FULL)
			H.clear_alert("nutrition")
		if(NUTRITION_LEVEL_STARVING to NUTRITION_LEVEL_HUNGRY)
			H.throw_alert("nutrition", /atom/movable/screen/alert/hungry)
		if(0 to NUTRITION_LEVEL_STARVING)
			H.throw_alert("nutrition", /atom/movable/screen/alert/starving)
*/
//////////////////
// ATTACK PROCS //
//////////////////
/**
  * The human species version of [/mob/living/carbon/proc/get_biological_state]. Depends on the HAS_FLESH and HAS_BONE species traits, having bones lets you have bone wounds, having flesh lets you have burn, slash, and piercing wounds
  */
/////////////
//BREATHING//
/////////////
//////////
// FIRE //
//////////
////////////
//	Stun  //
////////////
//////////////
//Space Move//
//////////////
////////////////
//Blood Stuff///
////////////////
// true = handle blood normally, false = do not (and then handle blood in this proc instead please!!)
////////////////
//Tail Wagging//
////////////////
///////////////
//FLIGHT SHIT//
///////////////
//UNSAFE PROC, should only be called through the Activate or other sources that check for CanFly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\status_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\typing_indicator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\update_icons.dm. ----------------------
/* Keep these comments up-to-date if you -insist- on hurting my code-baby ;_;
This system allows you to update individual mob-overlays, without regenerating them all each time.
When we generate overlays we generate the standing version and then rotate the mob as necessary..

As of the time of writing there are 20 layers within this list. Please try to keep this from increasing. //32 and counting, good job guys
	var/overlays_standing[20]		//For the standing stance

Most of the time we only wish to update one overlay:
	e.g. - we dropped the fireaxe out of our left hand and need to remove its icon from our mob
	e.g.2 - our hair colour has changed, so we need to update our hair icons on our mob
In these cases, instead of updating every overlay using the old behaviour (regenerate_icons), we instead call
the appropriate update_X proc.
	e.g. - update_l_hand()
	e.g.2 - update_hair()

Note: Recent changes by aranclanos+carn:
	update_icons() no longer needs to be called.
	the system is easier to use. update_icons() should not be called unless you absolutely -know- you need it.
	IN ALL OTHER CASES it's better to just call the specific update_X procs.

Note: The defines for layer numbers is now kept exclusvely in __DEFINES/misc.dm instead of being defined there,
	then redefined and undefiend everywhere else. If you need to change the layering of sprites (or add a new layer)
	that's where you should start.

All of this means that this code is more maintainable, faster and still fairly easy to use.

There are several things that need to be remembered:
>	Whenever we do something that should cause an overlay to update (which doesn't use standard procs
	( i.e. you do something like l_hand = /obj/item/something new(src), rather than using the helper procs)
	You will need to call the relevant update_inv_* proc

	All of these are named after the variable they update from. They are defined at the mob/ level like
	update_clothing was, so you won't cause undefined proc runtimes with usr.update_inv_wear_id() if the usr is a
	slime etc. Instead, it'll just return without doing any work. So no harm in calling it for slimes and such.


>	There are also these special cases:
		update_damage_overlays()	//handles damage overlays for brute/burn damage
		update_body()				//Handles updating your mob's body layer and mutant bodyparts
									as well as sprite-accessories that didn't really fit elsewhere (underwear, undershirts, socks, lips, eyes)
									//NOTE: update_mutantrace() is now merged into this!
		update_hair()				//Handles updating your hair overlay (used to be update_face, but mouth and
									eyes were merged into update_body())


*/
//HAIR OVERLAY
//used when putting/removing clothes that hide certain mutant body parts to just update those and not update the whole body.
/* --------------------------------------- */
//For legacy support.
/* --------------------------------------- */
//vvvvvv UPDATE_INV PROCS vvvvvv
// Sandstorm edit
//
// Sandstorm edit
//
//human HUD updates for items in our inventory
//update whether our neck item appears on our hud.
//update whether our back item appears on our hud.
/*
Does everything in relation to building the /mutable_appearance used in the mob's overlays list
covers:
 inhands and any other form of worn item
 centering large appearances
 layering appearances on custom layers
 building appearances from custom icon files

By Remie Richards (yes I'm taking credit because this just removed 90% of the copypaste in update_icons())

override_state: A string to use as the state, otherwise item_state or icon_state will be used.

default_layer: The layer to draw this on if no other layer is specified

default_icon_file: The icon file to draw states from if no other icon file is specified

isinhands: If true then mob_overlay_icon is skipped so that default_icon_file is used,
in this situation default_icon_file is expected to match either the lefthand_ or righthand_ file var

femalueuniform: A value matching a uniform item's fitted var, if this is anything but NO_FEMALE_UNIFORM, we
generate/load female uniform sprites matching all previously decided variables

style_flags: mutant race appearance flags, mostly used for worn_overlays()

alpha_mask: a text string or list of text, the actual icons are stored in a global list and associated with said text string(s).

use_mob_overlay_icon: if FALSE, it will always use the default_icon_file even if mob_overlay_icon is present.

*/
//Can't think of a better way to do this, sadly
//produces a key based on the human's limbs
// Only renders the head of the human
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\innate_abilities\blobform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\innate_abilities\coiling.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\innate_abilities\customization.dm. ----------------------
///////
/////// NOTICE: This currently doens't support skin tone - if anyone wants to add this to non slimes, it's up to YOU to do this.
////// (someone should also add genital color switching, more mutant color selection)
///// maybe just make this entire thing tgui based. maybe.
///////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\innate_abilities\limb_regeneration.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\abductor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\android.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\anthropomorph.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\arachnid.dm. ----------------------
/*
	This took me far too long to figure out so I'm gonna document it here.
	1) Create an innate action for the species
	2) Have that action trigger a RegisterSignal for mob clicking
	3) Trigger the cocoonAtom proc on that signal
	4) Validate the target then start spinning
	5) if you're not interrupted, force move the target to the cocoon created at their location.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\bugmen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\corporate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\dwarves.dm. ----------------------
//Dwarf Name stuff
//Dwarf Speech handling - Basically a filter/forces them to say things. The IC helper
//This mostly exists because my testdwarf's liver died while trying to also not die due to no alcohol.
//alcohol gland
//Handles the dwarf alcohol cycle tied to on_life, it ticks in dwarf_cycle_ticker.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\ethereal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\felinid.dm. ----------------------
//Subtype of human
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\flypeople.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\golems.dm. ----------------------
//The suicide bombers of golemkind
//Harder to hurt
//Faster but softer and less armoured
//Heavier, thus higher chance of stunning when punching
//Harder to stun, deals more damage, but it's even slower
//Immune to ash storms
//Immune to ash storms and lava
//Fast and regenerates... but can only speak like an abductor
//Regenerates because self-repairing super-advanced alien tech
//Since this will usually be created from a collaboration between podpeople and free golems, wood golems are a mix between the two races
//Radioactive
//Immune to physical bullets and resistant to brute, but very vulnerable to burn damage. Dusts on death.
//Reflects lasers and resistant to burn damage, but very vulnerable to brute damage. Shatters on death.
//Teleports when hit or when it wants to
//honk
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\humans.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\ipc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\jellypeople.dm. ----------------------
////////////////////////////////////////////////////////SLIMEPEOPLE///////////////////////////////////////////////////////////////////
//Slime people are able to split like slimes, retaining a single mind that can swap between bodies at will, even after death.
//If you're cloned you get your body pool back
////////////////////////////////////////////////////////Round Start Slimes///////////////////////////////////////////////////////////////////
///////////////////////////////////LUMINESCENTS//////////////////////////////////////////
//Luminescents are able to consume and use slime extracts, without them decaying.
///////////////////////////////////STARGAZERS//////////////////////////////////////////
//Stargazers are the telepathic branch of jellypeople, able to project psychic messages and to link minds with willing participants.
//Species datums don't normally implement destroy, but JELLIES SUCK ASS OUT OF A STEEL STRAW ~LemonInTheDark, Tsurupeta
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\lizardpeople.dm. ----------------------
/*
 Lizard subspecies: ASHWALKERS
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\mushpeople.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\plasmamen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\podpeople.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\shadowpeople.dm. ----------------------
//Organs
//Weapon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\skeletons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\synthliz.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\synths.dm. ----------------------
//Proc redirects:
//Passing procs onto the fake_species, to ensure we look as much like them as possible
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\vampire.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\xeno.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\human\species_types\zombies.dm. ----------------------
//Congrats you somehow died so hard you stopped being a zombie
// Your skin falls off
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\combat.dm. ----------------------
// blocks
// taken from /mob/living/carbon/human/interactive/
// taken from /mob/living/carbon/human/interactive/
// attack using a held weapon otherwise bite the enemy, then if we are angry there is a chance we might calm down a little
// get angry are a mob
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\inventory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\monkey.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\monkey_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\punpun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\carbon\monkey\update_icons.dm. ----------------------
////////
//monkey HUD updates for items in our inventory
//update whether our head item appears on our hud.
//update whether our mask item appears on our hud.
//update whether our neck item appears on our hud.
//update whether our back item appears on our hud.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\custom_holoform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\damage_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\examine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\laws.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\silicon.dm. ----------------------
// The src mob is trying to place an item on someone
// But the src mob is a silicon!!  Disable.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\silicon_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\silicon_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\ai.dm. ----------------------
//Not sure why this is necessary...
// AIs are immobile
//Replaces /mob/living/silicon/ai/verb/change_network() in ai.dm & camera.dm
//Adds in /mob/living/silicon/ai/proc/ai_network_change() instead
//Addition by Mord_Sith to define AI's network change ability
//End of code by Mord_Sith
//I am the icon meister. Bow fefore me.	//>fefore
//AI_CAMERA_LUMINOSITY
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\ai_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\ai_portrait_picker.dm. ----------------------
//Portrait picker! It's a tgui window that lets you look through all the portraits, and choose one as your AI.
//very similar to centcom_podlauncher in terms of how this is coded, so i kept a lot of comments from it
//^ wow! it's the second time i've said this! i'm a real coder now, copying my statement of copying other people's stuff.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\examine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\laws.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\life.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\multicam.dm. ----------------------
//Picture in picture
//Turf, area, and landmark for the viewing room
//Dummy camera eyes
//AI procs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\robot_control.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\say.dm. ----------------------
//For holopads only. Usable by AI.
//For status displays only. Usable by AI.
// Make sure that the code compiles with AI_VOX undefined
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\vox_sounds.dm. ----------------------
// List is required to compile the resources into the game when it loads.
// Dynamically loading it has bad results with sounds overtaking each other, even with the wait variable.
// Regex for collecting a list of ogg files
// (([a-zA-Z,.]+)\.ogg)
// For vim
// :%s/\(\(.*\)\.ogg\)/"\2" = 'sound\/vox_fem\/\1',/g
//for vim
// :%s/\(\(.*\)\.ogg\)/"\2" = 'sound\/vox\/\1',/g
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\freelook\cameranet.dm. ----------------------
// CAMERA NET
//
// The datum containing all the chunks.
// Checks if a chunk has been Generated in x, y, z.
// Returns the chunk in the x, y, z.
// If there is no chunk, it creates a new chunk and returns that.
// Updates what the aiEye can see. It is recommended you use this when the aiEye moves or it's location is set.
// Updates the chunks that the turf is located in. Use this when obstacles are destroyed or	when doors open.
// Removes a camera from a chunk.
// Add a camera to a chunk.
// Used for Cyborg cameras. Since portable cameras can be in ANY chunk.
// Never access this proc directly!!!!
// This will update the chunk and all the surrounding chunks.
// It will also add the atom to the cameras list if you set the choice to 1.
// Setting the choice to 0 will remove the camera from the chunks.
// If you want to update the chunks around an object, without adding/removing a camera, use choice 2.
// Will check if a mob is on a viewable turf. Returns 1 if it is, otherwise returns 0.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\freelook\chunk.dm. ----------------------
// CAMERA CHUNK
//
// A 16x16 grid of the map with a list of turfs that can be seen, are visible and are dimmed.
// Allows the AI Eye to stream these chunks and know what it can and cannot see.
// Add an AI eye to the chunk, then update if changed.
// Remove an AI eye from the chunk, then update if changed.
// Called when a chunk has changed. I.E: A wall was deleted.
// Updates the chunk, makes sure that it doesn't update too much. If the chunk isn't being watched it will
// instead be flagged to update the next time an AI Eye moves near it.
// The actual updating. It gathers the visible turfs from cameras and puts them into the appropiate lists.
// Create a new camera chunk, since the chunks are made as they are needed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\freelook\eye.dm. ----------------------
// AI EYE
//
// An invisible (no icon) mob that the AI controls to look around the station with.
// It streams chunks as it moves around, which will show it what the AI can and cannot see.
// Use this when setting the aiEye's location.
// It will also stream the chunk that the new loc is in.
//it uses setLoc not forceMove, talks to the sillycone and not the camera mob
// This will move the AIEye. It will also cause lights near the eye to light up, if toggled.
// This is handled in the proc below this one.
// Return to the Core.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\ai\freelook\read_me.dm. ----------------------
// CREDITS
/*
 Initial code credit for this goes to Uristqwerty.
 Debugging, functionality, all comments and porting by Giacom.

 Everything about freelook (or what we can put in here) will be stored here.


 WHAT IS THIS?

 This is a replacement for the current camera movement system, of the AI. Before this, the AI had to move between cameras and could
 only see what the cameras could see. Not only this but the cameras could see through walls, which created problems.
 With this, the AI controls an "AI Eye" mob, which moves just like a ghost; such as moving through walls and being invisible to players.
 The AI's eye is set to this mob and then we use a system (explained below) to determine what the cameras around the AI Eye can and
 cannot see. If the camera cannot see a turf, it will black it out, otherwise it won't and the AI will be able to see it.
 This creates several features, such as.. no more see-through-wall cameras, easier to control camera movement, easier tracking,
 the AI only being able to track mobs which are visible to a camera, only trackable mobs appearing on the mob list and many more.


 HOW IT WORKS

 It works by first creating a camera network datum. Inside of this camera network are "chunks" (which will be
 explained later) and "cameras". The cameras list is kept up to date by obj/machinery/camera/New() and Del().

 Next the camera network has chunks. These chunks are a 16x16 tile block of turfs and cameras contained inside the chunk.
 These turfs are then sorted out based on what the cameras can and cannot see. If none of the cameras can see the turf, inside
 the 16x16 block, it is listed as an "obscured" turf. Meaning the AI won't be able to see it.


 HOW IT UPDATES

 The camera network uses a streaming method in order to effeciently update chunks. Since the server will have doors opening, doors closing,
 turf being destroyed and other lag inducing stuff, we want to update it under certain conditions and not every tick.

 The chunks are not created straight away, only when an AI eye moves into it's area is when it gets created.
 One a chunk is created, when a non glass door opens/closes or an opacity turf is destroyed, we check to see if an AI Eye is looking in the area.
 We do this with the "seenby" list, which updates everytime an AI is near a chunk. If there is an AI eye inside the area, we update the chunk
 that the changed atom is inside and all surrounding chunks, since a camera's vision could leak onto another chunk. If there is no AI Eye, we instead
 flag the chunk to update whenever it is loaded by an AI Eye. This is basically how the chunks update and keep it in sync. We then add some lag reducing
 measures, such as an UPDATE_BUFFER which stops a chunk from updating too many times in a certain time-frame, only updating if the changed atom was blocking
 sight; for example, we don't update glass airlocks or floors.


 WHERE IS EVERYTHING?

 cameranet.dm	=	Everything about the cameranet datum.
 chunk.dm		=	Everything about the chunk datum.
 eye.dm			=	Everything about the AI and the AIEye.
 updating.dm	=	Everything about triggers that will update chunks.

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\pai.dm. ----------------------
// Various software-specific vars
// See software.dm for Topic()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\pai_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\pai_shell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\personality.dm. ----------------------
/*
		name
		key
		description
		role
		comments
		ready = 0
*/
// loads the savefile corresponding to the mob's ckey
// if silent=true, report incompatible savefiles
// returns 1 if loaded (or file was incompatible)
// returns 0 if savefile did not exist
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\software.dm. ----------------------
// TODO:
//	- Additional radio modules
//	- Potentially roll HUDs and Records into one
//	- Shock collar/lock system for prisoner pAIs?
//  - Put cable in user's hand instead of on the ground
//  - Camera jack
// MENUS
// -=-=-=-= Software =-=-=-=-=- //
//Remote Signaller
// Crew Manifest
// Medical Records
// Security Records
// Encryption Keys
// Encryption kets
// Universal Translator
// Security HUD
// Medical HUD
// Atmospheric Scanner
// Camera Jack - Clearly not finished
// Door Jack
// Door Jack - supporting proc
// Digital Messenger
// Loudness Booster
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\pai\update_icon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\examine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\inventory.dm. ----------------------
//These procs handle putting stuff in your hand. It's probably best to use these rather than setting stuff manually
//as they handle all relevant stuff like adding it to the player's screen and such
/**
 * Returns the thing in our active hand (whatever is in our active module-slot, in this case)
 *
 * Arguments
 * * get_gripper - If the active module is a gripper, should we return the gripper or the contained item? (if the gripper contains nothing, returns the gripper anyways)
 */
/**
 * Parent proc - triggers when an item/module is unequipped from a cyborg.
 */
/**
 * Finds the first available slot and attemps to put item item_module in it.
 *
 * Arguments
 * * item_module - the item being equipped to a slot.
 */
/**
 * Is passed an item and a module slot. Equips the item to that borg slot.
 *
 * Arguments
 * * item_module - the item being equipped to a slot
 * * module_num - the slot number being equipped to.
 */
/**
 * Unequips item item_module from slot module_num. Deletes it if delete_after = TRUE.
 *
 * Arguments
 * * item_module - the item being unequipped
 * * module_num - the slot number being unequipped.
 */
/**
 * Breaks the slot number, changing the icon.
 *
 * Arguments
 * * module_num - the slot number being repaired.
 */
/**
 * Breaks all of a cyborg's slots.
 */
/**
 * Repairs the slot number, updating the icon.
 *
 * Arguments
 * * module_num - the module number being repaired.
 */
/**
 * Repairs all slots. Unbroken slots are unaffected.
 */
/**
 * Updates the observers's screens with cyborg itemss.
 * Arguments
 * * item_module - the item being added or removed from the screen
 * * add - whether or not the item is being added, or removed.
 */
/**
 * Unequips the active held item, if there is one.
 *
 * Will always consider dropping gripper contents first.
 */
/**
 * Unequips all held items.
 */
/**
 * Checks if the item is currently in a slot.
 *
 * If the item is found in a slot, this returns TRUE. Otherwise, it returns FALSE
 * Modified to accept items inside of grippers, used for `code\modules\tgui\states\hands.dm:27`
 * Arguments
 * * item_module - the item being checked
 */
/**
 * Checks if the provided module number is a valid number.
 *
 * If the number is between 1 and 3 (if check_all_slots is true) or between 1 and the number of disabled
 * modules (if check_all_slots is false), then it returns FALSE. Otherwise, it returns TRUE.
 * Arguments
 * * module_num - the passed module num that is checked for validity.
 * * check_all_slots - TRUE = the proc checks all slots | FALSE = the proc only checks un-disabled slots
 */
/**
 * Returns the slot number of the selected module, or zero if no modules are selected.
 */
/**
 * Selects the module in the slot module_num.
 * Arguments
 * * module_num - the slot number being selected
 */
/**
 * Deselects the module in the slot module_num.
 * Arguments
 * * module_num - the slot number being de-selected
 */
/**
 * Toggles selection of the module in the slot module_num.
 * Arguments
 * * module_num - the slot number being toggled
 */
/**
 * Cycles through the list of enabled modules, deselecting the current one and selecting the next one.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\laws.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\life.dm. ----------------------
//Robots on fire
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot.dm. ----------------------
//If there's an MMI in the robot, have it ejected when the mob goes away. --NEO
// /mob/living/silicon/robot/Topic(href, href_list)
// 	. = ..()
// 	//Show alerts window if user clicked on "Show alerts" in chat
// 	if (href_list["showalerts"])
// 		robot_alerts()
/**
 * Handles headlamp smashing
 *
 * When called (such as by the shadowperson lighteater's attack), this proc will break the borg's headlamp
 * and then call toggle_headlamp to disable the light. It also plays a sound effect of glass breaking, and
 * tells the borg what happened to its chat. Broken lights can be repaired by using a flashlight on the borg.
 */
/**
 * Handles headlamp toggling, disabling, and color setting.
 *
 * The initial if statment is a bit long, but the gist of it is that should the lamp be on AND the update_color
 * arg be true, we should simply change the color of the lamp but not disable it. Otherwise, should the turn_off
 * arg be true, the lamp already be enabled, any of the normal reasons the lamp would turn off happen, or the
 * update_color arg be passed with the lamp not on, we should set the lamp off. The update_color arg is only
 * ever true when this proc is called from the borg tablet, when the color selection feature is used.
 *
 * Arguments:
 * * arg1 - turn_off, if enabled will force the lamp into an off state (rather than toggling it if possible)
 * * arg2 - update_color, if enabled, will adjust the behavior of the proc to change the color of the light if it is already on.
 */
///This is the subtype that gets created by robot suits. It's needed so that those kind of borgs don't have a useless cell in them
/**
	*Checking Exited() to detect if a hat gets up and walks off.
	*Drones and pAIs might do this, after all.
*/
///Use this to add upgrades to robots. It'll register signals for when the upgrade is moved or deleted, if not single use.
///Called when an upgrade is moved outside the robot. So don't call this directly, use forceMove etc.
///Called when an applied upgrade is deleted.
/**
 * make_shell: Makes an AI shell out of a cyborg unit
 *
 * Arguments:
 * * board - B.O.R.I.S. module board used for transforming the cyborg into AI shell
 */
/**
 * revert_shell: Reverts AI shell back into a normal cyborg unit
 */
/**
 * deploy_init: Deploys AI unit into AI shell
 *
 * Arguments:
 * * AI - AI unit that initiated the deployment into the AI shell
 */
/**
 * Records an IC event log entry in the cyborg's internal tablet.
 *
 * Creates an entry in the borglog list of the cyborg's internal tablet, listing the current
 * in-game time followed by the message given. These logs can be seen by the cyborg in their
 * BorgUI tablet app. By design, logging fails if the cyborg is dead.
 *
 * Arguments:
 * arg1: a string containing the message to log.
 */
//This isn't even used normally, but if that ever changes, just uncomment this
/*	var/obj/item/borg_chameleon/chameleon = locate() in src
	if(!chameleon)
		chameleon = locate() in src.module
	if(chameleon?.active)
		borg_type = "Engineering"
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_defines.dm. ----------------------
//Hud stuff
//3 Modules can be activated at any one time.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_mobility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_modules.dm. ----------------------
/* /obj/item/robot_module/proc/add_module(obj/item/I, nonstandard, requires_rebuild)
	rad_flags |= RAD_NO_CONTAMINATE
	if(istype(I, /obj/item/stack))
		var/obj/item/stack/S = I

		if(is_type_in_list(S, list(/obj/item/stack/sheet/metal, /obj/item/stack/rods, /obj/item/stack/tile/plasteel)))
			if(S.custom_materials?.len && S.custom_materials[SSmaterials.GetMaterialRef(/datum/material/iron)])
				S.cost = S.custom_materials[SSmaterials.GetMaterialRef(/datum/material/iron)] * 0.25
			S.source = get_or_create_estorage(/datum/robot_energy_storage/metal)

		else if(istype(S, /obj/item/stack/sheet/glass))
			S.cost = 500
			S.source = get_or_create_estorage(/datum/robot_energy_storage/glass)

		else if(istype(S, /obj/item/stack/sheet/rglass/cyborg))
			var/obj/item/stack/sheet/rglass/cyborg/G = S
			G.source = get_or_create_estorage(/datum/robot_energy_storage/metal)
			G.glasource = get_or_create_estorage(/datum/robot_energy_storage/glass)

		else if(istype(S, /obj/item/stack/medical))
			S.cost = 250
			S.source = get_or_create_estorage(/datum/robot_energy_storage/medical)

		else if(istype(S, /obj/item/stack/cable_coil))
			S.cost = 1
			S.source = get_or_create_estorage(/datum/robot_energy_storage/wire)

		else if(istype(S, /obj/item/stack/marker_beacon))
			S.cost = 1
			S.source = get_or_create_estorage(/datum/robot_energy_storage/beacon)

		else if(istype(S, /obj/item/stack/packageWrap))
			S.cost = 1
			S.source = get_or_create_estorage(/datum/robot_energy_storage/wrapping_paper)

		if(S && S.source)
			S.set_custom_materials(null)
			S.is_cyborg = 1

	if(I.loc != src)
		I.forceMove(src)
	modules += I
	ADD_TRAIT(I, TRAIT_NODROP, CYBORG_ITEM_TRAIT)
	I.mouse_opacity = MOUSE_OPACITY_OPAQUE
	if(nonstandard)
		added_modules += I
	if(requires_rebuild)
		rebuild_modules()
	return I
*/ //replaced by the one in modular_sand
//Adds flavoursome dogborg items to dogborg variants optionally without mechanical benefits
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  */
//Janitor module combined with Service module
/*
/obj/item/robot_module/janitor
	name = "Janitor"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/screwdriver/cyborg,
		/obj/item/crowbar/cyborg,
		/obj/item/stack/tile/plasteel/cyborg,
		/obj/item/soap/nanotrasen,
		/obj/item/storage/bag/trash/cyborg,
		/obj/item/extinguisher/mini,
		/obj/item/mop/cyborg,
		/obj/item/lightreplacer/cyborg,
		/obj/item/holosign_creator,
		/obj/item/reagent_containers/spray/cyborg_drying)
	emag_modules = list(/obj/item/reagent_containers/spray/cyborg_lube)
	ratvar_modules = list(
		/obj/item/clockwork/slab/cyborg/janitor,
		/obj/item/clockwork/replica_fabricator/cyborg)
	cyborg_base_icon = "janitor"
	moduleselect_icon = "janitor"
	hat_offset = -5
	clean_on_move = TRUE
	*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\robot_sprint.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\silicon\robot\update_icons.dm. ----------------------
/// this is bad code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\animal_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\astral.dm. ----------------------
//Delete the mob if there's no mind! Pay that mob no mind.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\constructs.dm. ----------------------
/////////////////Juggernaut///////////////
////////////////////////Wraith/////////////////////////////////////////////
/////////////////////////////Artificer/////////////////////////
/////////////////////////////Non-cult Artificer/////////////////////////
/////////////////////////////Harvester/////////////////////////
///////////////////////Master-Tracker///////////////////////
/////////////////////////////ui stuff/////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\corpse.dm. ----------------------
//Meant for simple animals to drop lootable human bodies.
//If someone can do this in a neater way, be my guest-Kor
//This has to be separate from the Away Mission corpses, because New() doesn't work for those, and initialize() doesn't work for these.
//To do: Allow corpses to appear mangled, bloody, etc. Allow customizing the bodies appearance (they're all bald and white right now).
//List of different corpse types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\damage_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\eldritch_demons.dm. ----------------------
/**
  * Add_spells
  *
  * Goes through spells_to_add and adds each spell to the mind.
  */
//I tried Initalize but it didnt work, like at all. This proc just wouldnt fire if it was Initalize instead of New
//we are literally a vessel of otherworldly destruction, we bring our own gravity unto this plane
///Updates chain links to force move onto a single tile
///Updates the next mob in the chain to move to our last location, fixed the worm if somehow broken.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\parrot.dm. ----------------------
/* Parrots!
 * Contains
 * 		Defines
 *		Inventory (headset stuff)
 *		Attack responces
 *		AI
 *		Procs / Verbs (usable by players)
 *		Sub-types
 *		Hear & say (the things we do for gimmicks)
 */
/*
 * Defines
 */
//Only a maximum of one action and one intent should be active at any given time.
//Actions
//Intents
// There is no delay for putting a headset on a parrot.
/*
 * Attack responces
 */
//Humans, monkeys, aliens
//Simple animals
//Mobs with objects
//Bullets
/*
 * AI - Not really intelligent, but I'm calling it AI anyway.
 */
//-----SPEECH
//-----SLEEPING
//-----WANDERING - This is basically a 'I dont know what to do yet' state
//-----STEALING
//-----RETURNING TO PERCH
//-----FLEEING
//-----ATTACKING
//-----STATE MISHAP
/*
 * Procs
 */
//This proc was made to save on doing two 'in view' loops seperatly
/*
 * Verbs - These are actually procs, but can be used as verbs by player-controlled parrots.
 */
//parrots will eat crackers instead of dropping them
/*
 * Sub-types
 */
// Different Parrot Breeds
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\pickle.dm. ----------------------
//funniest shit i've ever seen
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\shade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\simplemob_vore_values.dm. ----------------------
//CARBON MOBS
/*
	REFER TO code/modules/mob/living/simple_animal/simple_animal_vr.dm for Var information!
*/
//NUETRAL MOBS
//STATION PETS
//HOSTILE MOBS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\simple_animal.dm. ----------------------
//ANIMAL RIDING
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\simple_animal_vr.dm. ----------------------
// Release belly contents before being gc'd!
// Update fullness based on size & quantity of belly contents
// Simple animals have only one belly.  This creates it (if it isn't already set up)
//
// Simple proc for animals to have their digestion toggled on/off externally
//
//
// Simple nom proc for if you get ckey'd into a simple_animal mob! Avoids grabs.
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\status_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\bot.dm. ----------------------
// AI (i.e. game AI, not the AI player) controlled bots
/**
  * Returns a status string about the bot's current status, if it's moving, manually controlled, or idle.
  */
//This access is so bots can be immediately set to patrol and leave Robotics, instead of having to be let out first.
//Generalized behavior code, override where needed!
/*
scan() will search for a given type (such as turfs, human mobs, or objects) in the bot's view range, and return a single result.
Arguments: The object type to be searched (such as "/mob/living/carbon/human"), the old scan result to be ignored, if one exists,
and the view range, which defaults to 7 (full screen) if an override is not passed.
If the bot maintains an ignore list, it is also checked here.

Example usage: patient = scan(/mob/living/carbon/human, oldpatient, 1)
The proc would return a human next to the bot to be set to the patient var.
Pass the desired type path itself, declaring a temporary var beforehand is not required.
*/
//When the scan finds a target, run bot specific processing to select it for the next step. Empty by default.
/*
Movement proc for stepping a bot through a path generated through A-star.
Pass a positive integer as an argument to override a bot's default speed.
*/
//Handles the bot's movement during a call.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Patrol and summon code!
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// perform a single patrol step
// finds the nearest beacon to self
//PDA control. Some bots, especially MULEs, may have more parameters.
//
// calculates a path to the current destination
// given an optional turf to avoid
// Variables sent to TGUI
// Actions received from TGUI
// Machinery to simplify topic and access calls
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\cleanbot.dm. ----------------------
//Cleanbot
// Variables sent to TGUI
// Actions received from TGUI
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\construction.dm. ----------------------
//Bot Construction
//Cleanbot assembly
//Edbot Assembly
//Floorbot assemblies
//Medbot Assembly
//Honkbot Assembly
//Secbot Assembly
//Firebot Assembly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\ed209bot.dm. ----------------------
// Variables sent to TGUI
// Actions received from TGUI
// look for a criminal in view of the bot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\firebot.dm. ----------------------
//Firebot
// Variables sent to TGUI
// Actions received from TGUI
//Look for burning people or turfs around the bot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\floorbot.dm. ----------------------
//Floorbot
// Variables sent to TGUI
// Actions received from TGUI
//Floorbots, having several functions, need sort out special conditions here.
/**
  * Checks a given turf to see if another floorbot is there, working as well.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\honkbot.dm. ----------------------
//honkbots react with sounds.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\medbot.dm. ----------------------
//MEDBOT
//MEDBOT PATHFINDING
//MEDBOT ASSEMBLY
// Variables sent to TGUI
// Actions received from TGUI
// if someone tipped us over, check whether we should ask for help or just right ourselves eventually
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\mulebot.dm. ----------------------
// Mulebot - carries crates around for Quartermaster
// Navigates via floor navbeacons
// Remote Controlled from QM's PDA
// returns true if the bot has power
// mousedrop a crate to load the bot
// can load anything if hacked
// called to load a crate
// called to unload the bot
// argument is optional direction to unload
// if zero, unload at bot's location
// calculates a path to the current destination
// given an optional turf to avoid
// sets the current destination
// signals all beacons matching the delivery code
// beacons will return a signal giving their locations
// starts bot moving to current destination
// starts bot moving to home
// sends a beacon query to find
// called when bot reaches current target
// called when bot bumps into anything
// called from mob/living/carbon/human/Crossed()
// when mulebot is in the same loc
// player on mulebot attempted to move
//Update navigation data. Called when commanded to deliver, return home, or a route update is needed...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\secbot.dm. ----------------------
// Variables sent to TGUI
// Actions received from TGUI
// look for a criminal in view of the bot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\bot\SuperBeepsky.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\bumbles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\butterfly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\cat.dm. ----------------------
//Cat
//RUNTIME IS ALIVE! SQUEEEEEEEE~
//Cat made
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\cockroach.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\crab.dm. ----------------------
//Look Sir, free crabs!
//COFFEE! SQUEEEEEEEEE!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\dog.dm. ----------------------
//Dogs.
//Corgis and pugs are now under one dog subtype
//Corgis are supposed to be simpler, so only a select few objects can actually be put
//to be compatible with them. The objects are below.
//Many  hats added, Some will probably be removed, just want to see which ones are popular.
// > some will probably be removed
//IAN! SQUEEEEEEEEE~
//puppies cannot wear anything.
//LISA! SQUEEEEEEEEE~
//Lisa already has a cute bow!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\farm_animals.dm. ----------------------
//goat
//cow
//a cow that produces a random reagent in its udder
//Wisdom cow, speaks and bestows great wisdoms
// Space kiwis, ergo quite a copypasta of chickens.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\fox.dm. ----------------------
//Foxxy
//Captain fox
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\gondola.dm. ----------------------
//Gondolas
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\lizard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\mouse.dm. ----------------------
/**
  *Checks the mouse cap, if it's above the cap, doesn't spawn a mouse. If below, spawns a mouse and adds it to cheeserats.
  */
/**
  *Spawns a new regal rat, says some good jazz, and if sentient, transfers the relivant mind.
  */
/*
	var/mob/living/simple_animal/hostile/plaguerat = new /mob/living/simple_animal/hostile/plaguerat(loc)
	visible_message("<span class='warning'>[src] devours the food! He rots into something worse!</span>")
	if(mind)
		mind.transfer_to(plaguerat)
	qdel(src)
*/
/*
 * Mouse types
 */
//TOM IS ALIVE! SQUEEEEEEEE~K :)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\panda.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\penguin.dm. ----------------------
//Penguins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\pet.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\plushie.dm. ----------------------
//simplemob plushie that can be controlled by players
//shell that lets people turn into the plush or poll for ghosts
//attacking yourself transfers your mind into the plush!
//low regen over time
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\possum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\sloth.dm. ----------------------
//Cargo Sloth
//Cargo Sloth 2
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\snake.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\drones_as_items.dm. ----------------------
///////////////////
//DRONES AS ITEMS//
///////////////////
//Drone shells
//DRONE SHELL
//ATTACK GHOST IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\extra_drone_types.dm. ----------------------
////////////////////
//MORE DRONE TYPES//
////////////////////
//Drones with custom laws
//Drones with custom shells
//Drones with overridden procs
//Drones with camogear for hat related memes
//Drone type for use with polymorph (no preloaded items, random appearance)
//More types of drones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\interaction.dm. ----------------------
/////////////////////
//DRONE INTERACTION//
/////////////////////
//How drones interact with the world
//How the world interacts with drones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\inventory.dm. ----------------------
///////////////////
//DRONE INVENTORY//
///////////////////
//Drone inventory
//Drone hands
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\say.dm. ----------------------
//Base proc for anything to call
//Wrapper for drones to handle factions
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\verbs.dm. ----------------------
///////////////
//DRONE VERBS//
///////////////
//Drone verbs that appear in the Drone tab and on buttons
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\visuals_icons.dm. ----------------------
/////////////////
//DRONE VISUALS//
/////////////////
//Drone overlays
//Drone visuals
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\friendly\drone\_drone.dm. ----------------------
///This isn't currently needed since drones do jack shit with cameras. I hate this code so much
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\gremlin\gremlin.dm. ----------------------
//Gremlins
//Small monsters that don't attack humans or other animals. Instead they mess with electronics, computers and machinery
//List of objects that gremlins can't tamper with (because nobody coded an interaction for it)
//List starts out empty. Whenever a gremlin finds a machine that it couldn't tamper with, the machine's type is added here, and all machines of such type are ignored from then on (NOT SUBTYPES)
//This allows player-controlled gremlins to tamper with machinery
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\gremlin\gremlin_act.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\gremlin\gremlin_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\guardian.dm. ----------------------
//HAND HANDLING
//MANIFEST, RECALL, TOGGLE MODE/LIGHT, SHOW TYPE
//COMMUNICATION
//FORCE RECALL/RESET
////////parasite tracking/finding procs
////////Creation
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\assassin.dm. ----------------------
//Assassin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\charger.dm. ----------------------
//Charger
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\dextrous.dm. ----------------------
//Dextrous
//SLOT HANDLING BULLSHIT FOR INTERNAL STORAGE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\explosive.dm. ----------------------
//Bomb
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\fire.dm. ----------------------
//Fire
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\gravitokinetic.dm. ----------------------
//gravitokinetic
///Removes gravity from affected mobs upon guardian death to prevent permanent effects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\lightning.dm. ----------------------
//Beam
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\protector.dm. ----------------------
//Protector
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\ranged.dm. ----------------------
//Ranged
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\standard.dm. ----------------------
//Standard
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\guardian\types\support.dm. ----------------------
//Healer
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\alien.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\banana_spider.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\bear.dm. ----------------------
//Space bears!
//SPACE BEARS! SQUEEEEEEEE~     OW! FUCK! IT BIT MY HAND OFF!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\bees.dm. ----------------------
//We don't attack beekeepers/people dressed as bees//Todo: bee costume
//the Queen doesn't leave the box on her own, and she CERTAINLY doesn't pollinate by herself
//leave pollination for the peasent bees
//PEASENT BEES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\bread.dm. ----------------------
//funny reference to the video 'Expiration Date'
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\carp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\cat_butcher.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\dark_wizard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\eyeballs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\faithless.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\floor_cluwne.dm. ----------------------
//manifestation animation
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\giant_spider.dm. ----------------------
//basic spider mob, these generally guard nests
//nursemaids - these create webs and eggs
//hunters have the most poison and move the fastest, so they can find prey
//vipers are the rare variant of the hunter, no IMMEDIATE damage but so much poison medical care will be needed fast.
//tarantulas are really tanky, regenerating (maybe), hulky monster but are also extremely slow, so.
//midwives are the queen of the spiders, can send messages to all them and web faster. That rare round where you get a queen spider and turn your 'for honor' players into 'r6siege' players will be a fun one.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\goose.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\headcrab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\hivebot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\hostile.dm. ----------------------
//These vars are related to how mobs locate and target
//////////////HOSTILE MOB TARGETTING AND AGGRESSION////////////
// Please do not add one-off mob AIs here, but override this function for your mob
//What we do after closing in
//////////////END HOSTILE MOB TARGETTING AND AGGRESSION////////////
////// AI Status ///////
//These two procs handle losing our target if we've failed to attack them for
//more than lose_patience_timeout deciseconds, which probably means we're stuck
//These two procs handle losing and regaining search_objects when attacked by a mob
/**
  * Proc that handles a charge attack windup for a mob.
  */
/**
  * Proc that throws the mob at the target after the windup.
  */
/**
  * Proc that handles a charge attack after it's concluded.
  */
/**
  * Proc that handles the charge impact of the charging mob.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\illusion.dm. ----------------------
///////Actual Types/////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\killertomato.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mecha_pilot.dm. ----------------------
/*
 Mecha Pilots!
 by Remie Richards

 Mecha pilot mobs are able to pilot Mecha to a rudimentary level
 This allows for certain mobs to be more of a threat (Because they're in a MECH)

 Mecha Pilots can either spawn with one, or steal one!

 (Inherits from syndicate just to avoid copy-paste)

 Featuring:
 * Mecha piloting skills
 * Uses Mecha equipment
 * Uses Mecha special abilities in specific situations
 * Pure Evil Incarnate

*/
//Checks if a mecha is valid for theft
//Pick a ranged weapon/tool
//Fire it
//Yes they actually try and pull this shit
//~simple animals~
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mimic.dm. ----------------------
// Aggro when you try to open them. Will also pickup loot when spawns and drop it when dies.
// Pickup loot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mushroom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\nanotrasen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\netherworld.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\pirate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\plaguerat.dm. ----------------------
/**
  *Checks the mouse cap, if it's above the cap, doesn't spawn a mouse. If below, spawns a mouse and adds it to cheeserats.
  */
/**
  *Creates a chance to spawn more trash or gibs to repopulate.  Otherwise, spawns a corpse or dirt.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\regalrat.dm. ----------------------
/**
  *This action creates trash, money, dirt, and cheese.
  */
/**
  *This action checks all nearby mice, and converts them into hostile rats. If no mice are nearby, creates a new one.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\russian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\sharks.dm. ----------------------
//shameless copies of carps.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\skeleton.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\space_dragon.dm. ----------------------
/// The carp rift is currently charging.
/// The carp rift is currently charging and has output a final warning.
/// The carp rift is now fully charged.
/// The darkness threshold for space dragon when choosing a color
/**
 * # Space Dragon
 *
 * A space-faring leviathan-esque monster which breathes fire and summons carp.  Spawned during its respective midround antagonist event.
 *
 * A space-faring monstrosity who has the ability to breathe dangerous fire breath and uses its powerful wings to knock foes away.
 * Normally spawned as an antagonist during the Space Dragon event, Space Dragon's main goal is to open three rifts from which to pull a great tide of carp onto the station.
 * Space Dragon can summon only one rift at a time, and can do so anywhere a blob is allowed to spawn.  In order to trigger his victory condition, Space Dragon must summon and defend three rifts while they charge.
 * Space Dragon, when spawned, has five minutes to summon the first rift.  Failing to do so will cause Space Dragon to return from whence he came.
 * When the rift spawns, ghosts can interact with it to spawn in as space carp to help complete the mission.  One carp is granted when the rift is first summoned, with an extra one every 30 seconds.
 * Once the victory condition is met, all current rifts become invulnerable to damage, are allowed to spawn infinite sentient space carp, and Space Dragon gets unlimited rage.
 * Alternatively, if the shuttle arrives while Space Dragon is still active, their victory condition will automatically be met and all the rifts will immediately become fully charged.
 * If a charging rift is destroyed, Space Dragon will be incredibly slowed, and the endlag on his gust attack is greatly increased on each use.
 * Space Dragon has the following abilities to assist him with his objective:
 * - Can shoot fire in straight line, dealing 30 burn damage and setting those suseptible on fire.
 * - Can use his wings to temporarily stun and knock back any nearby mobs.  This attack has no cooldown, but instead has endlag after the attack where Space Dragon cannot act.  This endlag's time decreases over time, but is added to every time he uses the move.
 * - Can swallow mob corpses to heal for half their max health.  Any corpses swallowed are stored within him, and will be regurgitated on death.
 * - Can tear through any type of wall.  This takes 4 seconds for most walls, and 12 seconds for reinforced walls.
 */
/**
  * Allows space dragon to choose its own name.
  *
  * Prompts the space dragon to choose a name, which it will then apply to itself.
  * If the name is invalid, will re-prompt the dragon until a proper name is chosen.
  */
/**
  * Allows space dragon to choose a color for itself.
  *
  * Prompts the space dragon to choose a color, from which it will then apply to itself.
  * If an invalid color is given, will re-prompt the dragon until a proper color is chosen.
  */
/**
  * Adds the proper overlay to the space dragon.
  *
  * Clears the current overlay on space dragon and adds a proper one for whatever animation he's in.
  */
/**
  * Determines a line of turfs from sources's position to the target with length range.
  *
  * Determines a line of turfs from the source's position to the target with length range.
  * The line will extend on past the target if the range is large enough, and not reach the target if range is small enough.
  * Arguments:
  * * offset - whether or not to aim slightly to the left or right of the target
  * * range - how many turfs should we go out for
  * * atom/at - The target
  */
/**
  * Spawns fire at each position in a line from the source to the target.
  *
  * Spawns fire at each position in a line from the source to the target.
  * Stops if it comes into contact with a solid wall, a window, or a door.
  * Delays the spawning of each fire by 1.5 deciseconds.
  * Arguments:
  * * atom/at - The target
  */
/**
  * What occurs on each tile to actually create the fire.
  *
  * Creates a fire on the given turf.
  * It creates a hotspot on the given turf, damages any living mob with 30 burn damage, and damages mechs by 50.
  * It can only hit any given target once.
  * Arguments:
  * * turf/T - The turf to trigger the effects on.
  */
/**
  * Handles consuming and storing consumed things inside Space Dragon
  *
  * Plays a sound and then stores the consumed thing inside Space Dragon.
  * Used in AttackingTarget(), paired with a heal should it succeed.
  * Arguments:
  * * atom/movable/A - The thing being consumed
  */
/**
  * Disperses the contents of the mob on the surrounding tiles.
  *
  * Randomly places the contents of the mob onto surrounding tiles.
  * Has a 10% chance to place on the same tile as the mob.
  */
/**
  * Resets Space Dragon's status after using wing gust.
  *
  * Resets Space Dragon's status after using wing gust.
  * If it isn't dead by the time it calls this method, reset the sprite back to the normal living sprite.
  * Also sets the using_special variable to FALSE, allowing Space Dragon to move and attack freely again.
  */
/**
 * Handles Space Dragon's temporary empowerment after boosting a rift.
 *
 * Empowers and depowers Space Dragon after a successful rift charge.
 * Empowered, Space Dragon regains all his health and becomes temporarily faster for 30 seconds, along with being tinted red.
 */
/**
 * Gives Space Dragon their the rift speed buff permanantly.
 *
 * Gives Space Dragon the enraged speed buff from charging rifts permanantly.
 * Only happens in circumstances where Space Dragon completes their objective.
 */
/**
 * Removes Space Dragon's rift speed buff.
 *
 * Removes Space Dragon's speed buff from charging a rift.  This is only called
 * in rift_empower, which uses a timer to call this after 30 seconds.  Also
 * removes the red glow from Space Dragon which is synonymous with the speed buff.
 */
/**
 * Destroys all of Space Dragon's current rifts.
 *
 * QDeletes all the current rifts after removing their references to other objects.
 * Currently, the only reference they have is to the Dragon which created them, so we clear that before deleting them.
 * Currently used when Space Dragon dies or one of his rifts is destroyed.
 */
/**
  * Handles wing gust from the windup all the way to the endlag at the end.
  *
  * Handles the wing gust attack from start to finish, based on the timer.
  * When intially triggered, starts at 0.  Until the timer reaches 10, increase Space Dragon's y position by 2 and call back to the function in 1.5 deciseconds.
  * When the timer is at 10, trigger the attack.  Change Space Dragon's sprite. reset his y position, and push all living creatures back in a 3 tile radius and stun them for 5 seconds.
  * Stay in the ending state for how much our tiredness dictates and add to our tiredness.
  * Arguments:
  * * timer - The timer used for the windup.
  */
/**
  * Sets up Space Dragon's victory for completing the objectives.
  *
  * Triggers when Space Dragon completes his objective.
  * Calls the shuttle with a coefficient of 3, making it impossible to recall.
  * Sets all of his rifts to allow for infinite sentient carp spawns
  * Also plays appropiate sounds and CENTCOM messages.
  */
/**
  * # Carp Rift
  *
  * The portals Space Dragon summons to bring carp onto the station.
  *
  * The portals Space Dragon summons to bring carp onto the station.  His main objective is to summon 3 of them and protect them from being destroyed.
  * The portals can summon sentient space carp in limited amounts.  The portal also changes color based on whether or not a carp spawn is available.
  * Once it is fully charged, it becomes indestructible, and intermitently spawns non-sentient carp.  It is still destroyed if Space Dragon dies.
  */
/**
 * Does a series of checks based on the portal's status.
 *
 * Performs a number of checks based on the current charge of the portal, and triggers various effects accordingly.
 * If the current charge is a multiple of carp_interval, add an extra carp spawn.
 * If we're halfway charged, announce to the crew our location in a CENTCOM announcement.
 * If we're fully charged, tell the crew we are, change our color to yellow, become invulnerable, and give Space Dragon the ability to make another rift, if he hasn't summoned 3 total.
 */
/**
  * Used to create carp controlled by ghosts when the option is available.
  *
  * Creates a carp for the ghost to control if we have a carp spawn available.
  * Gives them prompt to control a carp, and if our circumstances still allow if when they hit yes, spawn them in as a carp.
  * Also add them to the list of carps in Space Dragon's antgonist datum, so they'll be displayed as having assisted him on round end.
  * Arguments:
  * * mob/user - The ghost which will take control of the carp.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\statue.dm. ----------------------
// A mob which only moves when it isn't being watched by living beings.
// No movement while seen code.
// Cannot talk
// Turn to dust when gibbed
// Stop attacking clientless mobs
// Don't attack your creator if there is one
// Statue powers
// Flicker lights
//Blind AOE
//Toggle Night Vision
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\stickman.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\syndicate.dm. ----------------------
/*
	CONTENTS
	LINE 10  - BASE MOB
	LINE 52  - SWORD AND SHIELD
	LINE 164 - GUNS
	LINE 267 - MISC
*/
///////////////Base mob////////////
///////////////Melee////////////
///////////////Guns////////////
///////////////Misc////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\tree.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\venus_human_trap.dm. ----------------------
/**
  * Kudzu Flower Bud
  *
  * A flower created by flowering kudzu which spawns a venus human trap after a certain amount of time has passed.
  *
  * A flower created by kudzu with the flowering mutation.  Spawns a venus human trap after 2 minutes under normal circumstances.
  * Also spawns 4 vines going out in diagonal directions from the bud.  Any living creature not aligned with plants is damaged by these vines.
  * Once it grows a venus human trap, the bud itself will destroy itself.
  *
  */
/**
  * Spawns a venus human trap, then qdels itself.
  *
  * Displays a message, spawns a human venus trap, then qdels itself.
  */
/**
  * Venus Human Trap
  *
  * The result of a kudzu flower bud, these enemies use vines to drag prey close to them for attack.
  *
  * A carnivorious plant which uses vines to catch and ensnare prey.  Spawns from kudzu flower buds.
  * Each one has a maximum of four vines, which can be attached to a variety of things.  Carbons are stunned when a vine is attached to them, and movable entities are pulled closer over time.
  * Attempting to attach a vine to something with a vine already attached to it will pull all movable targets closer on command.
  * Once the prey is in melee range, melee attacks from the venus human trap heals itself for 10% of its max health, assuming the target is alive.
  * Akin to certain spiders, venus human traps can also be possessed and controlled by ghosts.
  *
  */
/**
  * Sets a ghost to control the plant if the plant is eligible
  *
  * Asks the interacting ghost if they would like to control the plant.
  * If they answer yes, and another ghost hasn't taken control, sets the ghost to control the plant.
  * Arguments:
  * * mob/user - The ghost to possibly control the plant
  */
/**
  * Manages how the vines should affect the things they're attached to.
  *
  * Pulls all movable targets of the vines closer to the plant
  * If the target is on the same tile as the plant, destroy the vine
  * Removes any QDELETED vines from the vines list.
  */
/**
  * Removes a vine from the list.
  *
  * Removes the vine from our list.
  * Called specifically when the vine is about to be destroyed, so we don't have any null references.
  * Arguments:
  * * datum/beam/vine - The vine to be removed from the list.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\wizard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\wumborian_fugu.dm. ----------------------
//A fragile mob that becomes temporarily invincible and large to attack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\zombie.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\bosses\boss.dm. ----------------------
//Action datum for bosses
//Override Trigger() as shown below to do things
//Example:
/*
/datum/action/boss/selfgib/Trigger()
	if(..())
		boss.gib()
*/
//Designed for boss mobs only
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\bosses\paperwizard.dm. ----------------------
//Paper Wizard Boss
//Summon Ability
//Lets the wizard summon his art to fight for him
//Mimic Ability
//Summons mimics of himself with magical papercraft
//Hitting a decoy hurts nearby people excluding the wizard himself
//Hitting the wizard himself destroys all decoys
//Hit a fake? eat pain!
//Hit the real guy? copies go bai-bai
//fancy effects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\gorilla\emotes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\gorilla\gorilla.dm. ----------------------
// Gorillas like to dismember limbs from unconcious mobs.
// Returns null when the target is not an unconcious carbon mob; a list of limbs (possibly empty) otherwise.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\gorilla\visuals_icons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\jungle\leaper.dm. ----------------------
//Huge, carnivorous toads that spit an immobilizing toxin at its victims before leaping onto them.
//It has no melee attack, and its damage comes from the toxin in its bubbles and its crushing leap.
//Its eyes will turn red to signal an imminent attack!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\jungle\mega_arachnid.dm. ----------------------
//Large and powerful, but timid. It won't engage anything above 50 health, or anything without legcuffs.
//It can fire fleshy snares that legcuff anyone that it hits, making them look especially tasty to the arachnid.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\jungle\mook.dm. ----------------------
//Fragile but highly aggressive wanderers that pose a large threat in numbers.
//They'll attempt to leap at their target from afar using their hatchets.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\jungle\seedling.dm. ----------------------
//A plant rooted in the ground that forfeits its melee attack in favor of ranged barrages.
//It will fire flurries of solar energy, and occasionally charge up a powerful blast that makes it vulnerable to attack.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\jungle\_jungle_mobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\blood_drunk_miner.dm. ----------------------
/*
BLOOD-DRUNK MINER
Effectively a highly aggressive miner, the blood-drunk miner has very few attacks but compensates by being highly aggressive.
The blood-drunk miner's attacks are as follows
- If not in KA range, it will rapidly dash at its target
- If in KA range, it will fire its kinetic accelerator
- If in melee range, will rapidly attack, akin to an actual player
- After any of these attacks, may transform its cleaving saw:
	Untransformed, it attacks very rapidly for smaller amounts of damage
	Transformed, it attacks at normal speed for higher damage and cleaves enemies hit
When the blood-drunk miner dies, it leaves behind the cleaving saw it was using and its kinetic accelerator.
Difficulty: Medium
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\bubblegum.dm. ----------------------
/*

BUBBLEGUM

Bubblegum spawns randomly wherever a lavaland creature is able to spawn. It is the most powerful slaughter demon in existence.
Bubblegum's footsteps are heralded by shaking booms, proving its tremendous size.

It acts as a melee creature, chasing down and attacking its target while also using different attacks to augment its power that increase as it takes damage.

It often charges, dealing massive damage to anything unfortunate enough to be standing where it's aiming.
Whenever it isn't chasing something down, it will sink into nearby blood pools (if possible) and springs out of the closest one to its target.
To make this possible, it sprays streams of blood at random.
From these blood pools Bubblegum may summon slaughterlings - weak, low-damage minions designed to impede the target's progress.

When Bubblegum dies, it leaves behind a H.E.C.K. suit+helmet as well as a chest that can contain three things:
 1. A spellblade that can slice off limbs at range
 2. A bottle that, when activated, drives everyone nearby into a frenzy
 3. A super double-barrel shotgun that shoots both shells at the same time.

Difficulty: Hard

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\colossus.dm. ----------------------
/*

COLOSSUS

The colossus spawns randomly wherever a lavaland creature is able to spawn. It is powerful, ancient, and extremely deadly.
The colossus has a degree of sentience, proving this in speech during its attacks.

It acts as a melee creature, chasing down and attacking its target while also using different attacks to augment its power that increase as it takes damage.

The colossus' true danger lies in its ranged capabilities. It fires immensely damaging death bolts that penetrate all armor in a variety of ways:
 1. The colossus fires death bolts in alternating patterns: the cardinal directions and the diagonal directions.
 2. The colossus fires death bolts in a shotgun-like pattern, instantly downing anything unfortunate enough to be hit by all of them.
 3. The colossus fires a spiral of death bolts.
At 33% health, the colossus gains an additional attack:
 4. The colossus fires two spirals of death bolts, spinning in opposite directions.

When a colossus dies, it leaves behind an anomalous crystal structure. This crystal can be activated in one of multiple ways and has an effect randomly chosen from a list.
It also drops its vocal cords, which, when inserted into someone's mouth, allow them to activate some specific phrases that cause effects, such as sleeping to people nearby.

Difficulty: Very Hard

*/
//Black Box
//in it's own proc to avoid issues with items that nolonger exist in the code base.
//try catch doesn't always prevent byond runtimes from halting a proc,
//No taking it apart
///Anomolous Crystal///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\demonic_frost_miner.dm. ----------------------
/*
Difficulty: Extremely Hard
*/
/// Shoots out homing frost orbs that explode into ice blast projectiles after a couple seconds
/// Called when the orb is exploding, shoots out projectiles
/// Shoots out snowballs with a random spread
/// Shoots out ice blasts in a shotgun like pattern
/// Checks if the demonic frost miner is ready to be enraged
/// Resurrects the target when they die by cloning them into a new duplicate body and transferring their mind to the clone on a safe station turf
/// Blocks movement from the status effect owner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\dragon_vore.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\drake.dm. ----------------------
/*

ASH DRAKE

Ash drakes spawn randomly wherever a lavaland creature is able to spawn. They are the draconic guardians of the Necropolis.

It acts as a melee creature, chasing down and attacking its target while also using different attacks to augment its power that increase as it takes damage.

Whenever possible, the drake will breathe fire in the four cardinal directions, igniting and heavily damaging anything caught in the blast.
It also often causes fire to rain from the sky - many nearby turfs will flash red as a fireball crashes into them, dealing damage to anything on the turfs.
The drake also utilizes its wings to fly into the sky, flying after its target and attempting to slam down on them. Anything near when it slams down takes huge damage.
 - Sometimes it will chain these swooping attacks over and over, making swiftness a necessity.
 - Sometimes, it will spew fire while flying at its target.

When an ash drake dies, it leaves behind a chest that can contain four things:
 1. A spectral blade that allows its wielder to call ghosts to it, enhancing its power
 2. A lava staff that allows its wielder to create lava
 3. A spellbook and wand of fireballs
 4. A bottle of dragon's blood with several effects, including turning its imbiber into a drake themselves.

When butchered, they leave behind diamonds, sinew, bone, and ash drake hide. Ash drake hide can be used to create a hooded cloak that protects its wearer from ash storms.

Difficulty: Medium

*/
//fire line keeps going even if dragon is deleted
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\hierophant.dm. ----------------------
/*

The Hierophant

The Hierophant spawns in its arena, which makes fighting it challenging but not impossible.

The text this boss speaks is ROT4, use ROT22 to decode

The Hierophant's attacks are as follows;
- These attacks happen at a random, increasing chance:
	If target is at least 2 tiles away; Blinks to the target after a very brief delay, damaging everything near the start and end points.
		As above, but does so multiple times if below half health.
	Rapidly creates cardinal and diagonal Cross Blasts under a target.
	If chasers are off cooldown, creates 4 chasers.

- IF TARGET IS OUTSIDE THE ARENA: Creates an arena around the target for 10 seconds, blinking to the target if not in the created arena.
	The arena has a 20 second cooldown, giving people a small window to get the fuck out.

- If no chasers exist, creates a chaser that will seek its target, leaving a trail of blasts.
	Is more likely to create a second, slower, chaser if hurt.
- If the target is at least 2 tiles away, may Blink to the target after a very brief delay, damaging everything near the start and end points.
- Creates a cardinal or diagonal blast(Cross Blast) under its target, exploding after a short time.
	If below half health, the created Cross Blast may fire in all directions.
- Creates an expanding AoE burst.

- IF ATTACKING IN MELEE: Creates an expanding AoE burst.

Cross Blasts and the AoE burst gain additional range as Hierophant loses health, while Chasers gain additional speed.

When Hierophant dies, it stops trying to murder you and shrinks into a small form, which, while much weaker, is still quite effective.
- The smaller club can place a teleport beacon, allowing the user to teleport themself and their allies to the beacon.

Difficulty: Normal

*/
//Hierophant overlays
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\legion.dm. ----------------------
/*

LEGION

Legion spawns from the necropolis gate in the far north of lavaland. It is the guardian of the Necropolis and emerges from within whenever an intruder tries to enter through its gate.
Whenever Legion emerges, everything in lavaland will receive a notice via color, audio, and text. This is because Legion is powerful enough to slaughter the entirety of lavaland with little effort. LOL

It has three attacks.
Spawn Skull. Most of the time it will use this attack. Spawns a single legion skull.
Spawn Sentinel. The legion will spawn up to three sentinels, depending on its size.
CHARGE! The legion starts spinning and tries to melee the player. It will try to flick itself towards the player, dealing some damage if it hits.

When Legion dies, it will split into three smaller skulls up to three times.
If you kill all of the smaller ones it drops a staff of storms, which allows its wielder to call and disperse ash storms at will and functions as a powerful melee weapon.

Difficulty: Medium

SHITCODE AHEAD. BE ADVISED. Also comment extravaganza

*/
//SKULLS
///Attack proc. Spawns a singular legion skull.
//CHARGE
///Attack proc. Gives legion some movespeed buffs and switches the AI to melee. At lower sizes, this also throws the skull at the player.
///This is the proc that actually does the throwing. Charge only adds a timer for this.
///Deals some extra damage on throw impact.
//TURRETS
///Attack proc. Creates up to three legion turrets on suitable turfs nearby.
///This makes sure that the legion door opens on taking damage, so you can't cheese this boss.
///In addition to parent functionality, this will also turn the target into a small legion if they are unconcious.
///Resets the charge buffs.
///Special snowflake death() here. Can only die if size is 1 or lower and HP is 0 or below.
///Splits legion into smaller skulls.
///Sets the variables for new legion skulls. Usually called after splitting.
//Loot
///A basic turret that shoots at nearby mobs. Intended to be used for the legion megafauna.
///Handles an extremely basic AI
///Called when attacking a target. Shoots a projectile at the turf underneath the target.
///Called shot_delay after the turret shot the tracer. Shoots a projectile into the same direction.
///Used for the legion turret.
///Used for the legion turret tracer.
///Used for the legion turret beam.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\megafauna.dm. ----------------------
/// Sets the next time the megafauna can use a melee or ranged attack, in deciseconds
/// Grants medals and achievements to surrounding players
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\swarmer.dm. ----------------------
/*

Swarmer Beacon

A strange machine appears anywhere a normal lavaland mob can it produces a swarmer at a rate of
1/15 seconds, until there are GetTotalAISwarmerCap()/2 swarmers, after this it is up to the swarmers themselves to
increase their population (it will repopulate them should they fall under GetTotalAISwarmerCap()/2 again)

tl;dr A million of the little hellraisers spawn (controlled by AI) and try to eat mining

Loot: Not much, besides a shit load of artificial bluespace crystals, Oh and mining doesn't get eaten
that's a plus I suppose.

Difficulty: Special

*/
//returns a type of AI swarmer that is NOT at max cap
//type order is shuffled, to prevent bias
//Total of all subtype caps
//SWARMER AI
//AI versions of the swarmer mini-antag
//This is an Abstract Base, it re-enables AI, but does not give the swarmer any goals/targets
//RESOURCE SWARMER:
//Similar to the original Player-Swarmers, these dismantle things to obtain the metal inside
//They then use this medal to produce more swarmers or traps/barricades
//This handles viable things to eat/attack
//Place specific cases of AI derpiness here
//Most can be left to the automatic Gain/LosePatience() system
//So swarmers can learn what is and isn't food
//RANGED SWARMER
//MELEE SWARMER
//SWARMER CATWALKS
//Used so they can survive lavaland better
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\megafauna\wendigo.dm. ----------------------
/*
Difficulty: Hard
*/
/// Slams the ground around the wendigo throwing back enemies caught nearby
/// Larger but slower ground stomp
/// Teleports to a location 4 turfs away from the enemy in view
/// Shakes all nearby enemies screens and animates the wendigo shaking up and down
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\basilisk.dm. ----------------------
//A beast that fire freezing blasts.
//Watcher
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\curse_blob.dm. ----------------------
//if it's not our target, we ignore it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\goldgrub.dm. ----------------------
//An ore-devouring but easily scared creature
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\goliath.dm. ----------------------
//A slow but strong beast that tries to stun using its tentacles
//Lavaland Goliath
//tentacles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\gutlunch.dm. ----------------------
//Gutlunches, passive mods that devour blood and gibs
//Male gutlunch. They're smaller and more colorful!
//Lady gutlunch. They make the babby.
//Gutlunch udder
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\hivelord.dm. ----------------------
//A fragile but rapidly produced creature
//Legion
//Legion skull
//Advanced Legion is slightly tougher to kill and can raise corpses (revive other legions)
//Legion that spawns Legions
//Tendril-spawned Legion remains, the charred skeletons of those whose bodies sank into laval or fell into chasms.
//Legion infested mobs
// Snow Legion
// Snow Legion skull
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\ice_demon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\ice_whelp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\lobsterosity.dm. ----------------------
/**
  *	Lobstrosities, the poster boy of charging AI mobs. Drops crab meat and bones.
  * Outside of charging, it's intended behavior is that it is generally slow moving, but makes up for that with a knockdown attack to score additional hits.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\mining_mobs.dm. ----------------------
//the base mining mob
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\polarbear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\wolf.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\elite.dm. ----------------------
//Elite mining mobs
//Gives player-controlled variants the ability to swap attacks
//Prevents elites from attacking members of their faction (can't hurt themselves either) and lets them mine rock with an attack despite not being able to smash walls.
//Elites can't talk (normally)!
/*Basic setup for elite attacks, based on Whoneedspace's megafauna attack setup.
While using this makes the system rely on OnFire, it still gives options for timers not tied to OnFire, and it makes using attacks consistent accross the board for player-controlled elites.*/
//The Pulsing Tumor, the actual "spawn-point" of elites, handles the spawning, arena, and procs for dealing with basic scenarios.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\goliath_broodmother.dm. ----------------------
/**
  * # Goliath Broodmother
  *
  * A stronger, faster variation of the goliath.  Has the ability to spawn baby goliaths, which it can later detonate at will.
  * When it's health is below half, tendrils will spawn randomly around it.  When it is below a quarter of health, this effect is doubled.
  * It's attacks are as follows:
  * - Spawns a 3x3/plus shape of tentacles on the target location
  * - Spawns 2 baby goliaths on its tile, up to a max of 8.  Children blow up when they die.
  * - The broodmother lets out a noise, and is able to move faster for 6.5 seconds.
  * - Summons your children around you.
  * The broodmother is a fight revolving around stage control, as the activator has to manage the baby goliaths and the broodmother herself, along with all the tendrils.
  */
//The goliath's children.  Pretty weak, simple mobs which are able to put a single tentacle under their target when at range.
//Tentacles have less stun time compared to regular variant, to balance being able to use them much more often.  Also, 10 more damage.
// Broodmother's loot: Broodmother Tongue
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\herald.dm. ----------------------
/**
  * # Herald
  *
  * A slow-moving projectile user with a few tricks up it's sleeve.  Less unga-bunga than Colossus, with more cleverness in it's fighting style.
  * As it's health gets lower, the amount of projectiles fired per-attack increases.
  * It's attacks are as follows:
  * - Fires three projectiles in a a given direction.
  * - Fires a spread in every cardinal and diagonal direction at once, then does it again after a bit.
  * - Shoots a single, golden bolt.  Wherever it lands, the herald will be teleported to the location.
  * - Spawns a mirror which reflects projectiles directly at the target.
  * Herald is a more concentrated variation of the Colossus fight, having less projectiles overall, but more focused attacks.
  */
//Herald's loot: Cloak of the Prophet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\legionnaire.dm. ----------------------
/**
  * # Legionnaire
  *
  * A towering skeleton, embodying the power of Legion.
  * As it's health gets lower, the head does more damage.
  * It's attacks are as follows:
  * - Charges at the target after a telegraph, throwing them across the arena should it connect.
  * - Legionnaire's head detaches, attacking as it's own entity.  Has abilities of it's own later into the fight.  Once dead, regenerates after a brief period.  If the skill is used while the head is off, it will be killed.
  * - Leaves a pile of bones at your location.  Upon using this skill again, you'll swap locations with the bone pile.
  * - Spews a cloud of smoke from it's maw, wherever said maw is.
  * A unique fight incorporating the head mechanic of legion into a whole new beast.  Combatants will need to make sure the tag-team of head and body don't lure them into a deadly trap.
  */
//The legionnaire's head.  Basically the same as any legion head, but we have to tell our creator when we die so they can generate another head.
//The legionnaire's bonfire, which can be swapped positions with.  Also sets flammable living beings on fire when they walk over it.
//The visual effect which appears in front of legionnaire when he goes to charge.
// Legionnaire's loot: Legionnaire Spine
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\pandora.dm. ----------------------
/**
  * # Pandora
  *
  * A box with a similar design to the Hierophant which trades large, single attacks for more frequent smaller ones.
  * As it's health gets lower, the time between it's attacks decrease.
  * It's attacks are as follows:
  * - Fires hierophant blasts in a straight line.  Can only fire in a straight line in 8 directions, being the diagonals and cardinals.
  * - Creates a box of hierophant blasts around the target.  If they try to run away to avoid it, they'll very likely get hit.
  * - Teleports the pandora from one location to another, almost identical to Hierophant.
  * - Spawns a 5x5 AOE at the location of choice, spreading out from the center.
  * Pandora's fight mirrors Hierophant's closely, but has stark differences in attack effects.  Instead of long-winded dodge times and long cooldowns, Pandora constantly attacks the opponent, but leaves itself open for attack.
  */
//The specific version of hiero's squares pandora uses
//Pandora's loot: Hope
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\bat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\clown.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\frog.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\ghost.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\retaliate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\hostile\retaliate\spaceman.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\death.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\life.dm. ----------------------
// Unlike most of the simple animals, slimes support UNCONSCIOUS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\powers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\slime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\slime_mobility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mob\living\simple_animal\slime\subtypes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_actions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_activation.dm. ----------------------
/// Creates a radial menu from which the user chooses parts of the suit to deploy/retract. Repeats until all parts are extended or retracted.
/// Deploys a part of the suit onto the user.
/// Retract a part of the suit from the user
/// Starts the activation sequence, where parts of the suit activate one by one until the whole suit is on
///Seals or unseals the given part
/// Finishes the suit's activation, starts processing
/// Quickly deploys all the suit parts and if successful, seals them and turns on the suit. Intended mostly for outfits.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_ai.dm. ----------------------
/**
 * Simple proc to insert the pAI into the MODsuit.
 *
 * user - The person trying to put the pAI into the MODsuit.
 * card - The pAI card we're slotting in the MODsuit.
 */
/**
 * Simple proc to extract the pAI from the MODsuit. It's the proc to call if you want to take it out,
 * remove_pai() is there so atom_destruction() doesn't have any risk of sleeping.
 *
 * user - The person trying to take out the pAI from the MODsuit.
 * forced - Whether or not we skip the checks and just eject the pAI. Defaults to FALSE.
 * feedback - Whether to give feedback via balloon alerts or not. Defaults to TRUE.
 */
/**
 * Simple proc that handles the safe removal of the pAI from a MOD control unit.
 *
 * Arguments:
 * * feedback - Whether or not we want to give balloon alert feedback to the ai. Defaults to FALSE.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_clothes.dm. ----------------------
/// Replaces these gloves on the wearer with the overslot ones
/// Replaces these shoes on the wearer with the overslot ones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_construction.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_control.dm. ----------------------
/// MODsuits, trade-off between armor and utility
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_paint.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_theme.dm. ----------------------
/// Global proc that sets up all MOD themes as singletons in a list and returns it.
/// MODsuit theme, instanced once and then used by MODsuits to grab various statistics.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_types.dm. ----------------------
//these exist for the prefs menu
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\mod_ui.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules.dm. ----------------------
//	module_type = MODULE_ACTIVE
//	complexity = 3
//	use_power_cost = DEFAULT_CHARGE_DRAIN*3
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_engineering.dm. ----------------------
//Engineering modules for MODsuits
///Welding Protection - Makes the helmet protect from flashes and welding.
///T-Ray Scan - Scans the terrain for undertile objects.
///Magnetic Stability - Gives the user a slowdown but makes them negate gravity and be immune to slips.
///Emergency Tether - Shoots a grappling hook projectile in 0g that throws the user towards it.
///Radiation Protection - Protects the user from radiation, gives them a geiger counter and rad info in the panel.
///Constructor - Lets you build quicker and create RCD holograms.
///Mister - Sprays water over an area.
///Resin Mister - Sprays resin over an area.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_general.dm. ----------------------
//General modules for MODsuits
///Storage - Adds a storage component to the suit.
///Ion Jetpack - Lets the user fly freely through space using battery charge.
///Eating Apparatus - Lets the user eat/drink with the suit on.
///EMP Shield - Protects the suit from EMPs.
///Flashlight - Gives the suit a customizable flashlight.
///Dispenser - Dispenses an item after a time passes.
///Longfall
///Thermal Regulator - Naw.
///DNA Lock - Prevents people without the set DNA from activating the suit.
///Sign Language Translator - I want, but no
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_maint.dm. ----------------------
//Maint modules for MODsuits
///Springlock Mechanism - allows your modsuit to activate faster, but reagents are very dangerous.
///Signal fired when wearer is exposed to reagents
///Signal fired when wearer attempts to activate/deactivate suits
///Delayed death proc of the suit after the wearer is exposed to reagents
///Rave Visor - Pointless
///Tanner - Maybe another time
///Balloon Blower - Blows a balloon.
///Paper Dispenser - Dispenses (sometimes burning) paper sheets.
///Stamper - Extends a stamp that can switch between accept/deny modes.
///Atrocinator - Perhaps another time
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_medical.dm. ----------------------
//Medical modules for MODsuits
///Health Analyzer - Gives the user a ranged health analyzer and their health status in the panel.
///Quick Carry - Lets the user carry bodies quicker.
///Injector - No piercing syringes, replace another time
///Organ Thrower
///Patrient Transport
///Defibrillator - Gives the suit an extendable pair of shock paddles.
///Thread Ripper
///Surgical Processor - Lets you do advanced surgeries portably.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_science.dm. ----------------------
//Science modules for MODsuits
///Reagent Scanner - Lets the user scan reagents.
///Anti-Gravity - Makes the user weightless.
///Teleporter - Lets the user teleport to a nearby location.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_security.dm. ----------------------
//Security modules for MODsuits
///Cloaking - Lowers the user's visibility, can be interrupted by being touched or attacked.
///Magnetic Harness - Automatically puts guns in your suit storage when you drop them.
///Pepper Shoulders
///Holster - Instantly holsters any not huge gun.
///Megaphone - Lets you speak loud.
///Criminal Capture
///Mirage grenade dispenser
///Projectile Dampener
///Active Sonar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_service.dm. ----------------------
//Service modules for MODsuits
///Bike Horn - Plays a bike horn sound.
///Microwave Beam - Microwaves items instantly.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_supply.dm. ----------------------
//Supply modules for MODsuits
///Internal GPS - Extends a GPS you can use.
///Hydraulic Clamp - Lets you pick up and drop crates.
///Drill - Lets you dig through rock and basalt.
// Ash accretion looks cool, but can't be arsed to implement
// Same with sphere transformation
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\modules_visor.dm. ----------------------
//Visor modules for MODsuits
///Base Visor - Adds a specific HUD and traits to you.
//Medical Visor - Gives you a medical HUD.
//Diagnostic Visor - Gives you a diagnostic HUD.
//Security Visor - Gives you a security HUD.
//Meson Visor - Gives you meson vision.
//Thermal Visor - Gives you thermal vision.
//Night Visor - Gives you night vision.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\mod\modules\_module.dm. ----------------------
/// Called from MODsuit's install() proc, so when the module is installed.
/// Called from MODsuit's uninstall() proc, so when the module is uninstalled.
/// Called when the MODsuit is activated
/// Called when the MODsuit is deactivated
/// Called when the MODsuit is equipped
/// Called when the MODsuit is unequipped
/// Called when the module is selected from the TGUI
/// Called when the module is activated
/// Called when the module is deactivated
/// Called when the module is used
/// Called when an activated module without a device is used
/// Called when an activated module without a device is active and the user alt/middle-clicks
/// Called on the MODsuit's process
/// Called on the MODsuit's process if it is an active module
/// Drains power from the suit cell
/// Adds additional things to the MODsuit ui_data()
/// Creates a list of configuring options for this module
/// Generates an element of the get_configuration list with a display name, type and value
/// Receives configure edits from the TGUI and edits the vars
/// Called when the device moves to a different place on active modules
/// Called when the device gets deleted on active modules
/// Generates an icon to be used for the suit's worn overlays
/// Updates the signal used by active modules to be activated
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\laptop_vendor.dm. ----------------------
// A vendor machine for modular computer portable devices - Laptops and Tablets
// Removes all traces of old order and allows you to begin configuration from scratch.
// Recalculates the price and optionally even fabricates the device.
// Simplified payment processing, returns 1 on success.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\_modular_computer_shared.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\computer.dm. ----------------------
// This is the base type that does all the hardware stuff.
// Other types expand it - tablets use a direct subtypes, and
// consoles and laptops use "procssor" item that is held inside machinery piece
/**
 * Plays a ping sound.
 *
 * Timers runtime if you try to make them call playsound. Yep.
 */
// Gets IDs/access levels from card slot. Would be useful when/if PDAs would become modular PCs.
// On-click handling. Turns on the computer if it's off and opens the GUI.
// Process currently calls handle_power(), may be expanded in future if more things are added.
/**
 * Displays notification text alongside a soundbeep when requested to by a program.
 *
 * After checking tha the requesting program is allowed to send an alert, creates
 * a visible message of the requested text alongside a soundbeep. This proc adds
 * text to indicate that the message is coming from this device and the program
 * on it, so the supplied text should be the exact message and ending punctuation.
 *
 * Arguments:
 * The program calling this proc.
 * The message that the program wishes to display.
 */
// Function used by NanoUI's to obtain data for header. All relevant entries begin with "PC_"
// Relays kill program request to currently active program. Use this to quit current program.
// Returns 0 for No Signal, 1 for Low Signal and 2 for Good Signal. 3 is for wired connection (always-on)
/**
 * Toggles the computer's flashlight, if it has one.
 *
 * Called from ui_act(), does as the name implies.
 * It is seperated from ui_act() to be overwritten as needed.
*/
/**
 * Sets the computer's light color, if it has a light.
 *
 * Called from ui_act(), this proc takes a color string and applies it.
 * It is seperated from ui_act() to be overwritten as needed.
 * Arguments:
 ** color is the string that holds the color value that we should use. Proc auto-fails if this is null.
*/
// Used by processor to relay qdel() to machinery type.
// Perform adjacency checks on our physical counterpart, if any.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\computer_components.dm. ----------------------
// Installs component.
// Uninstalls component.
// Checks all hardware pieces to determine if name matches, if yes, returns the hardware piece, otherwise returns null
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\computer_damage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\computer_power.dm. ----------------------
// Tries to draw power from charger or, if no operational charger is present, from power cell.
// Used in following function to reduce copypaste
// Handles power-related things, such as battery interaction, recharging, shutdown when it's discharged
// Used by child types if they have other power source than battery or recharger
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\computer_ui.dm. ----------------------
// Operates TGUI
// Handles user's GUI input
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\laptop.dm. ----------------------
// Laptop frame, starts empty and closed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\laptop_presets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\processor.dm. ----------------------
// Held by /obj/machinery/modular_computer to reduce amount of copy-pasted code.
//TODO: REFACTOR THIS SPAGHETTI CODE, MAKE IT A COMPUTER_HARDWARE COMPONENT OR REMOVE IT
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\tablet.dm. ----------------------
/// Given to Nuke Ops members.
/// Borg Built-in tablet interface
/**
 * Returns a ref to the RoboTact app, creating the app if need be.
 *
 * The RoboTact app is important for borgs, and so should always be available.
 * This proc will look for it in the tablet's robotact var, then check the
 * hard drive if the robotact var is unset, and finally attempt to create a new
 * copy if the hard drive does not contain the app. If the hard drive rejects
 * the new copy (such as due to lack of space), the proc will crash with an error.
 * RoboTact is supposed to be undeletable, so these will create runtime messages.
 */
//Makes the light settings reflect the borg's headlamp settings
//Makes the flashlight button affect the borg rather than the tablet
//Makes the flashlight color setting affect the borg rather than the tablet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\item\tablet_presets.dm. ----------------------
// This is literally the worst possible cheap tablet
// Alternative version, an average one, for higher ranked positions mostly
/// Given by the syndicate as part of the contract uplink bundle - loads in the Contractor Uplink.
/// Given to Nuke Ops members.
//Borg Built-in tablet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\machinery\console_presets.dm. ----------------------
// Override in child types to install preset-specific programs.
// ===== ENGINEERING CONSOLE =====
// ===== RESEARCH CONSOLE =====
// ===== COMMAND CONSOLE =====
// ===== IDENTIFICATION CONSOLE =====
// ===== CIVILIAN CONSOLE =====
// curator
// ===== CARGO CHAT CONSOLES =====
//ONE PER MAP PLEASE, IT MAKES A CARGOBUS FOR EACH ONE OF THESE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\machinery\modular_computer.dm. ----------------------
// Modular Computer - device that runs various programs and operates with hardware
// DO NOT SPAWN THIS TYPE. Use /laptop/ or /console/ instead.
/// Eats the "source" arg because update_icon actually expects args now.
//ATTACK HAND IGNORING PARENT RETURN VALUE
// On-click handling. Turns on the computer if it's off and opens the GUI.
// Process currently calls handle_power(), may be expanded in future if more things are added.
// Used in following function to reduce copypaste
// Modular computers can have battery in them, we handle power in previous proc, so prevent this from messing it up for us.
// Stronger explosions cause serious damage to internal components
// Minor explosions are mostly mitigitated by casing.
// EMPs are similar to explosions, but don't cause physical damage to the casing. Instead they screw up the components
// "Stun" weapons can cause minor damage to components (short-circuits?)
// "Burn" damage is equally strong against internal components and exterior casing
// "Brute" damage mostly damages the casing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\computers\machinery\modular_console.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\computer_file.dm. ----------------------
// Returns independent copy of this file.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\data.dm. ----------------------
// /data/ files store data in string format.
// They don't contain other logic for now.
// Calculates file size from amount of characters in saved string
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\program.dm. ----------------------
// /program/ files are executable programs that do things.
// Relays icon update to the computer.
// Attempts to create a log in global ntnet datum. Returns 1 on success, 0 on fail.
/**
 *Runs when the device is used to attack an atom in non-combat mode.
 *
 *Simulates using the device to read or scan something. Tap is called by the computer during pre_attack
 *and sends us all of the related info. If we return TRUE, the computer will stop the attack process
 *there. What we do with the info is up to us, but we should only return TRUE if we actually perform
 *an action of some sort.
 *Arguments:
 *A is the atom being tapped
 *user is the person making the attack action
 *params is anything the pre_attack() proc had in the same-named variable.
*/
// Called by Process() on device that runs us, once every tick.
/**
 *Check if the user can run program. Only humans can operate computer. Automatically called in run_program()
 *ID must be inserted into a card slot to be read. If the program is not currently installed (as is the case when
 *NT Software Hub is checking available software), a list can be given to be used instead.
 *Arguments:
 *user is a ref of the mob using the device.
 *loud is a bool deciding if this proc should use to_chats
 *access_to_check is an access level that will be checked against the ID
 *transfer, if TRUE and access_to_check is null, will tell this proc to use the program's transfer_access in place of access_to_check
 *access can contain a list of access numbers to check against. If access is not empty, it will be used istead of checking any inserted ID.
*/
// This attempts to retrieve header data for UIs. If implementing completely new device of different type than existing ones
// always include the device here in this proc. This proc basically relays the request to whatever is running the program.
// This is performed on program startup. May be overridden to add extra logic. Remember to include ..() call. Return 1 on success, 0 on failure.
// When implementing new program based device, use this to run the program.
/**
 *
 *Called by the device when it is emagged.
 *
 *Emagging the device allows certain programs to unlock new functions. However, the program will
 *need to be downloaded first, and then handle the unlock on their own in their run_emag() proc.
 *The device will allow an emag to be run multiple times, so the user can re-emag to run the
 *override again, should they download something new. The run_emag() proc should return TRUE if
 *the emagging affected anything, and FALSE if no change was made (already emagged, or has no
 *emag functions).
**/
// Use this proc to kill the program. Designed to be implemented by each program if it requires on-quit logic, such as the NTNRC client.
// CONVENTIONS, READ THIS WHEN CREATING NEW PROGRAM AND OVERRIDING THIS PROC:
// Topic calls are automagically forwarded from NanoModule this program contains.
// Calls beginning with "PRG_" are reserved for programs handling.
// Calls beginning with "PC_" are reserved for computer handling (by whatever runs the program)
// ALWAYS INCLUDE PARENT CALL ..() OR DIE IN FIRE.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\program_events.dm. ----------------------
// Events are sent to the program by the computer.
// Always include a parent call when overriding an event.
// Called when the ID card is removed from computer. ID is removed AFTER this proc.
// Called when the computer fails due to power loss. Override when program wants to specifically react to power loss.
// Called when the network connectivity fails. Computer does necessary checks and only calls this when requires_ntnet_feature and similar variables are not met.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\airestorer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\alarm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\arcade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\atmosscan.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\borg_monitor.dm. ----------------------
///This proc is used to determin if a borg should be shown in the list (based on the borg's scrambledcodes var). Syndicate version overrides this to show only syndicate borgs.
///Gets the ID's name, if one is inserted into the device. This is a seperate proc solely to be overridden by the syndicate version of the app.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\bounty_board.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\budgetordering.dm. ----------------------
//Otherwise static data, that is being applied in ui_data as the crates visible and buyable are not static, and are determined by inserted ID.
//Data regarding the User's capability to buy things.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\card.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\cargoship.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\configurator.dm. ----------------------
// This is special hardware configuration program.
// It is to be used only with modular computers.
// It allows you to toggle components of your device.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\crewmanifest.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\file_browser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\jobmanagement.dm. ----------------------
/// The time since the last job opening was created
// GLOBAL_VAR_INIT(time_last_changed_position, 0)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\ntdownloader.dm. ----------------------
////////////////////////
//Syndicate Downloader//
////////////////////////
/// This app only lists programs normally found in the emagged section of the normal downloader app
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\ntmonitor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\ntnrc_client.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\portrait_printer.dm. ----------------------
///how much paper it takes from the printer to create a canvas.
/**
 * ## portrait printer!
 *
 * Program that lets the curator browse all of the portraits in the database
 * They are free to print them out as they please.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\powermonitor.dm. ----------------------
//normal computer version is located in code\modules\power\monitor.dm, /obj/machinery/computer/monitor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\radar.dm. ----------------------
/**
 *Updates tracking information of the selected target.
 *
 *The track() proc updates the entire set of information about the location
 *of the target, including whether the Ntos window should use a pinpointer
 *crosshair over the up/down arrows, or none in favor of a rotating arrow
 *for far away targets. This information is returned in the form of a list.
 *
*/
/**
 *
 *Checks the trackability of the selected target.
 *
 *If the target is on the computer's Z level, or both are on station Z
 *levels, and the target isn't untrackable, return TRUE.
 *Arguments:
 **arg1 is the atom being evaluated.
*/
/**
 *
 *Runs a scan of all the trackable atoms.
 *
 *Checks each entry in the GLOB of the specific trackable atoms against
 *the track() proc, and fill the objects list with lists containing the
 *atoms' names and REFs. The objects list is handed to the tgui screen
 *for displaying to, and being selected by, the user. A two second
 *sleep is used to delay the scan, both for thematical reasons as well
 *as to limit the load players may place on the server using these
 *somewhat costly loops.
*/
/**
 *
 *Finds the atom in the appropriate list that the `selected` var indicates
 *
 *The `selected` var holds a REF, which is a string. A mob REF may be
 *something like "mob_209". In order to find the actual atom, we need
 *to search the appropriate list for the REF string. This is dependant
 *on the program (Lifeline uses GLOB.human_list, while Fission360 uses
 *GLOB.poi_list), but the result will be the same; evaluate the string and
 *return an atom reference.
*/
//We use SSfastprocess for the program icon state because it runs faster than process_tick() does.
//We can use process_tick to restart fast processing, since the computer will be running this constantly either way.
///////////////////
//Suit Sensor App//
///////////////////
///A program that tracks crew members via suit sensors
////////////////////////
//Nuke Disk Finder App//
////////////////////////
///A program that tracks nukes and nuclear accessories
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\robocontrol.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\robotact.dm. ----------------------
/**
 * Forces a full update of the UI, if currently open.
 *
 * Forces an update that includes refreshing ui_static_data. Called by
 * law changes and borg log additions.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\secureye.dm. ----------------------
// Returns the list of cameras accessible from this computer
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\signaler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\sm_monitor.dm. ----------------------
// Refreshes list of active supermatter crystals
/**
 * Sets up the signal listener for Supermatter delaminations.
 *
 * Unregisters any old listners for SM delams, and then registers one for the SM refered
 * to in the `active` variable. This proc is also used with no active SM to simply clear
 * the signal and exit.
 */
/**
 * Removes the signal listener for Supermatter delaminations from the selected supermatter.
 *
 * Pretty much does what it says.
 */
/**
 * Sends an SM delam alert to the computer.
 *
 * Triggered by a signal from the selected supermatter, this proc sends a notification
 * to the computer if the program is either closed or minimized. We do not send these
 * notifications to the comptuer if we're the active program, because engineers fixing
 * the supermatter probably don't need constant beeping to distract them.
 */
/**
 * Sends an SM delam start alert to the computer.
 *
 * Triggered by a signal from the selected supermatter at the start of a delamination,
 * this proc sends a notification to the computer if this program is the active one.
 * We do this so that people carrying a tablet with NT CIMS open but with the NTOS window
 * closed will still get one audio alert. This is not sent to computers with the program
 * minimized or closed to avoid double-notifications.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\antagonist\contract_uplink.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\antagonist\dos.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\file_system\programs\antagonist\revelation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\ai_slot.dm. ----------------------
///What happens when the intellicard is removed (or deleted) from the module, through try_eject() or not.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\battery_module.dm. ----------------------
///What happens when the battery is removed (or deleted) from the module, through try_eject() or not.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\card_slot.dm. ----------------------
///What happens when the ID card is removed (or deleted) from the module, through try_eject() or not.
/**
 *Swaps the card_slot hardware between using the dedicated card slot bay on a computer, and using an expansion bay.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\CPU.dm. ----------------------
// CPU that allows the computer to run programs.
// Better CPUs are obtainable via research and can run more programs on background.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\hard_drive.dm. ----------------------
// Use this proc to add file to the drive. Returns 1 on success and 0 on failure. Contains necessary sanity checks.
// Use this proc to remove file from the drive. Returns 1 on success and 0 on failure. Contains necessary sanity checks.
// Loops through all stored files and recalculates used_capacity of this drive
// Checks whether file can be stored on the hard drive. We can only store unique files, so this checks whether we wouldn't get a duplicity by adding a file.
// Tries to find the file by filename. Returns null on failure
// For tablets, etc. - highly power efficient.
// For borg integrated tablets. No downloader.
// Syndicate variant - very slight better
/// For tablets given to nuke ops
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\network_card.dm. ----------------------
// Returns a string identifier of this network card
// 0 - No signal, 1 - Low signal, 2 - High signal. 3 - Wired Connection
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\portable_disk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\printer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\recharger.dm. ----------------------
/// This recharger exists only in borg built-in tablets. I would have tied it to the borg's cell but
/// the program that displays laws should always be usable, and the exceptions were starting to pile.
// This is not intended to be obtainable in-game. Intended for adminbus and debugging purposes.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\sensor_package.dm. ----------------------
//This item doesn't do much on its own, but is required by apps such as AtmoZphere.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\hardware\_hardware.dm. ----------------------
// Maximal damage level.
// Called on multitool click, prints diagnostic information to the user.
// Handles damage checks
// Component-side compatibility check.
// Called when component is installed into PC.
// Called when component is removed from PC.
// Called when someone tries to insert something in it - paper in printer, card in card reader, etc.
/**
 * Implement this when your hardware contains an object that the user can eject.
 *
 * Examples include ejecting cells from battery modules, ejecting an ID card from a card reader
 * or ejecting an Intellicard from an AI card slot.
 * Arguments:
 * * user - The mob requesting the eject.
 * * forced - Whether this action should be forced in some way.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\modular_computers\NTNet\NTNRC\conversation.dm. ----------------------
//Clear all of our references to a client, used for client deletion
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\_movespeed_modifier.dm. ----------------------
/*! Movespeed modification datums.

	How move speed for mobs works

Move speed is now calculated by using modifier datums which are added to mobs. Some of them (nonvariable ones) are globally cached, the variable ones are instanced and changed based on need.

This gives us the ability to have multiple sources of movespeed, reliabily keep them applied and remove them when they should be

THey can have unique sources and a bunch of extra fancy flags that control behaviour

Previously trying to update move speed was a shot in the dark that usually meant mobs got stuck going faster or slower

Movespeed modification list is a simple key = datum system. Key will be the datum's ID if it is overridden to not be null, or type if it is not.

DO NOT override datum IDs unless you are going to have multiple types that must overwrite each other. It's more efficient to use types, ID functionality is only kept for cases where dynamic creation of modifiers need to be done.

When update movespeed is called, the list of items is iterated, according to flags priority and a bunch of conditions
this spits out a final calculated value which is used as a modifer to last_move + modifier for calculating when a mob
can next move

Key procs
* [add_movespeed_modifier](mob.html#proc/add_movespeed_modifier)
* [remove_movespeed_modifier](mob.html#proc/remove_movespeed_modifier)
* [has_movespeed_modifier](mob.html#proc/has_movespeed_modifier)
* [update_movespeed](mob.html#proc/update_movespeed)
*/
/**
  * Returns new multiplicative movespeed after modification.
  */
/// Grabs a STATIC MODIFIER datum from cache. YOU MUST NEVER EDIT THESE DATUMS, OR IT WILL AFFECT ANYTHING ELSE USING IT TOO!
///Add a move speed modifier to a mob. If a variable subtype is passed in as the first argument, it will make a new datum. If ID conflicts, it will overwrite the old ID.
/// Remove a move speed modifier from a mob, whether static or variable.
/*! Used for variable slowdowns like hunger/health loss/etc, works somewhat like the old list-based modification adds. Returns the modifier datum if successful
	How this SHOULD work is:
	1. Ensures type_id_datum one way or another refers to a /variable datum. This makes sure it can't be cached. This includes if it's already in the modification list.
	2. Instantiate a new datum if type_id_datum isn't already instantiated + in the list, using the type. Obviously, wouldn't work for ID only.
	3. Add the datum if necessary using the regular add proc
	4. If any of the rest of the args are not null (see: multiplicative slowdown), modify the datum
	5. Update if necessary
*/
/// Handles the special case of editing the movement var
///Is there a movespeed modifier for this mob
/// Set or update the global movespeed config on a mob
/// Get the global config movespeed of a mob by type
/// Go through the list of movespeed modifiers and calculate a final movespeed. ANY ADD/REMOVE DONE IN UPDATE_MOVESPEED MUST HAVE THE UPDATE ARGUMENT SET AS FALSE!
/// Get the move speed modifiers list of the mob
/// Calculate the total slowdown of all movespeed modifiers
/**
  * Gets the movespeed modifier datum of a modifier on a mob. Returns null if not found.
  * DANGER: IT IS UP TO THE PERSON USING THIS TO MAKE SURE THE MODIFIER IS NOT MODIFIED IF IT HAPPENS TO BE GLOBAL/CACHED.
  */
/// Checks if a move speed modifier is valid and not missing any data
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\components.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\innate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\mobs.dm. ----------------------
/// for speed reasons this is sorta copypasty.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\movespeed\modifiers\status_effects.dm. ----------------------
//no comment.
//this shouldn't even exist.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\feed_channel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\feed_comment.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\feed_message.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\ghostread.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\newscaster_machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\newspaper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\news_network.dm. ----------------------
/// Contains all the news datum of a newscaster system.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\wanted_message.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\newscaster\_news.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\energy_katana.dm. ----------------------
/**
  * # Energy Katana
  *
  * The space ninja's katana.
  *
  * The katana that only space ninja spawns with.  Comes with 30 force and throwforce, along with a signature special jaunting system.
  * Upon clicking on a tile with the dash on, the user will teleport to that tile, assuming their target was not dense.
  * The katana has 3 dashes stored at maximum, and upon using the dash, it will return 20 seconds after it was used.
  * It also has a special feature where if it is tossed at a space ninja who owns it (determined by the ninja suit), the ninja will catch the katana instead of being hit by it.
  *
  */
//If we hit the Ninja who owns this Katana, they catch it.
//Works for if the Ninja throws it or it throws itself or someone tries
//To throw it at the ninja
/**
  * Proc called when the katana is recalled to its space ninja.
  *
  * Proc called when space ninja is hit with its suit's katana or the recall ability is used.
  * Arguments:
  * * user - To whom the katana is returning to.
  * * doSpark - whether or not the katana will spark when it returns.
  * * caught - boolean for whether or not the katana was caught or was teleported back.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\ninja_explosive.dm. ----------------------
/**
 * # Spider Charge
 *
 * A unique version of c4 possessed only by the space ninja.  Has a stronger blast radius.
 * Can only be detonated by space ninjas with the bombing objective.  Can only be set up where the objective says it can.
 * When it primes, the space ninja responsible will have their objective set to complete.
 *
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\outfit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\__ninjaDefines.dm. ----------------------
//ninjacost() specificCheck defines
//ninjaDrainAct() defines for non numerical returns
//Tells whether or not someone is a space ninja
//Defines for the suit's unique abilities
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\gloves.dm. ----------------------
/**
  * # Ninja Gloves
  *
  * Space ninja's gloves.  Gives access to a number of special interactions.
  *
  * Gloves only found from space ninjas.  Allows the wearer to access special interactions with various objects.
  * These interactions are detailed in ninjaDrainAct.dm in the suit file.
  * These interactions are toggled by an action tied to the gloves.  The interactions will not activate if the user is also not wearing a ninja suit.
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\head.dm. ----------------------
/**
  * # Ninja Hood
  *
  * Space ninja's hood.  Provides armor and blocks AI tracking.
  *
  * A hood that only exists as a part of space ninja's starting kit.  Provides armor equal of space ninja's suit and disallows an AI to track the wearer.
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\mask.dm. ----------------------
/**
  * # Ninja Mask
  *
  * Space ninja's mask.  Makes you sound like a real anime girl.  Barely able to be considered a real upside.
  *
  * A mask which only spawns as a part of space ninja's starting kit.  Functions as a gas mask.
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninjaDrainAct.dm. ----------------------
/**
  * Atom level proc for space ninja's glove interactions.
  *
  * Proc which only occurs when space ninja uses his gloves on an atom.
  * Does nothing by default, but effects will vary.
  * Arguments:
  * * ninja_suit - The offending space ninja's suit.
  * * ninja - The human mob wearing the suit.
  * * ninja_gloves - The offending space ninja's gloves.
  */
//APC//
//SMES//
//CELL//
//RDCONSOLE//
//RD SERVER//
//obj/machinery/rnd/server/ninjadrain_act(obj/item/clothing/suit/space/space_ninja/ninja_suit, mob/living/carbon/human/ninja, obj/item/clothing/gloves/space_ninja/ninja_gloves)
//SECURITY CONSOLE//
//COMMUNICATIONS CONSOLE//
//AIRLOCK//
//WIRE//
//BORG//
//CARBON MOBS//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\shoes.dm. ----------------------
/**
  * # Ninja Shoes
  *
  * Space ninja's shoes.  Gives him armor on his feet.
  *
  * Space ninja's ninja shoes.  How mousey.  Gives him slip protection and protection against attacks.
  * Also are temperature resistant.
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\suit.dm. ----------------------
/**
  * # Ninja Suit
  *
  * Space ninja's suit.  Provides him with most of his powers.
  *
  * Space ninja's suit.  Gives space ninja all his iconic powers, which are mostly kept in
  * the folder ninja_equipment_actions.  Has a lot of unique stuff going on, so make sure to check
  * the variables.  Check suit_attackby to see radium interaction, disk copying, and cell replacement.
  *
  */
// Power usage
/**
  * Proc called to lock the important gear pieces onto space ninja's body.
  *
  * Called during the suit startup to lock all gear pieces onto space ninja.
  * Terminates if a gear piece is not being worn.  Also gives the ninja the inability to use firearms.
  * If the person in the suit isn't a ninja when this is called, this proc just gibs them instead.
  * Arguments:
  * * ninja - The person wearing the suit.
  * * Returns false if the locking fails due to lack of all suit parts, and true if it succeeds.
  */
/**
  * Proc called to unlock all the gear off space ninja's body.
  *
  * Proc which is essentially the opposite of lock_suit.  Lets you take off all the suit parts.
  * Also gets rid of the objection to using firearms from the wearer.
  * Arguments:
  * * ninja - The person wearing the suit.
  */
/**
  * Proc used to delete all the attachments and itself.
  *
  * Can be called to entire rid of the suit pieces and the suit itself.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\suit_attackby.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\energy_net_nets.dm. ----------------------
/**
 * # Energy Net
 *
 * Energy net which ensnares prey until it is destroyed.  Used by space ninjas.
 *
 * Energy net which keeps its target from moving until it is destroyed.  Used to send
 * players to a holding area in which they could never leave, but such feature has since
 * been removed.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_adrenaline.dm. ----------------------
//Wakes the user so they are able to do their thing. Also injects a decent dose of radium.
//Movement impairing would indicate drugs and the like.
/**
 * Proc called to activate space ninja's adrenaline.
 *
 * Proc called to use space ninja's adrenaline.  Gets the ninja out of almost any stun.
 * Also makes them shout MGS references when used.  After a bit, it injects the user with
 * radium by calling a different proc.
 */
/**
 * Proc called to inject the ninja with radium.
 *
 * Used after 7 seconds of using the ninja's adrenaline.
 * Injects the user with how much radium the suit needs to refill an adrenaline boost.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_cost_check.dm. ----------------------
/**
 * Proc called to check if the ninja can afford an ability's cost.
 *
 * Proc which determine whether or not a space ninja can afford to use a specific ability.
 * It can also cancel stealth if the ability requested it.
 * Arguments:
 * * cost - the energy cost of the ability
 * * specificCheck - Determines if the check is a normal one, an adrenaline one, or a stealth cancel check.
 * * Returns TRUE or the current cooldown timer if we can't perform the ability, and FALSE if we can.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_empulse.dm. ----------------------
//Disables nearby tech equipment.
/**
 * Proc called to allow the ninja to EMP the nearby area.
 *
 * Proc called to allow the ninja to EMP the nearby area.  By default, costs 500E, which is half of the default battery's max charge.
 * Also affects the ninja as well.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_glove_toggle.dm. ----------------------
/**
 * Proc called to toggle the ninja glove's special abilities.
 *
 * Used to toggle whether or not the ninja glove's abilities will activate on touch.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_net.dm. ----------------------
/**
 * Proc called to ensnare a person in a energy net.
 *
 * Used to ensnare a target in an energy net, preventing them from moving until the net is broken.
 * Costs 40E, which is 40% of the default battery's max charge.  Intended as a means of reliably locking down an opponent when ninja stars won't suffice.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_stars.dm. ----------------------
/**
 * Proc called to create a ninja star in the ninja's hands.
 *
 * Called to create a ninja star in the wearer's hand.  The ninja
 * star doesn't do much up-front damage, but deals stamina damage
 * as the target moves around, forcing a finish or flee scenario.
 */
/**
 * # Ninja Throwing Star
 *
 * a throwing star which specifically makes sure you know it came from a real ninja.
 *
 * The most important item in the entire codebase, as without it we would all cease to exist.
 * Inherits everything that makes it interesting the stamina throwing star, but the most
 * important change made is that its name specifically has the prefix, 'ninja' in it.
 * This provides the detective role with information to play off of by ensuring that his
 * assumption that a space ninja is aboard the ship to be true when he find 20 of these in
 * the captain's back.  Along with this, its throwforce is 10 instead of the 5 of the stamina
 * throwing star, meaning it'll do a little more damage than the stamina throwing star does as well.
 * Changes to this item need to be approved by all maintainers, so if you do change it, make sure
 * you go through the proper channels, lest you get permabanned.  Do I make myself clear?
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_status_read.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_stealth.dm. ----------------------
/**
 * Proc called to toggle ninja stealth.
 *
 * Proc called to toggle whether or not the ninja is in stealth mode.
 * If cancelling, calls a separate proc in case something else needs to quickly cancel stealth.
 */
/**
 * Proc called to cancel stealth.
 *
 * Called to cancel the stealth effect if it is ongoing.
 * Does nothing otherwise.
 * Arguments:
 * * Returns false if either the ninja no longer exists or is already visible, returns true if we successfully made the ninja visible.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_suit_initialisation.dm. ----------------------
/**
 * Toggles the ninja suit on/off
 *
 * Attempts to initialize or deinitialize the ninja suit
 */
/**
 * Initializes the ninja suit
 *
 * Initializes the ninja suit through seven phases, each of which calls this proc with an incremented phase
 * Arguments:
 * * delay - The delay between each phase of initialization
 * * ninja - The human who is being affected by the suit
 * * phase - The phase of initialization
 */
/**
 * Deinitializes the ninja suit
 *
 * Deinitializes the ninja suit through eight phases, each of which calls this proc with an incremented phase
 * Arguments:
 * * delay - The delay between each phase of deinitialization
 * * ninja - The human who is being affected by the suit
 * * phase - The phase of deinitialization
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ninja\suit\ninja_equipment_actions\ninja_sword_recall.dm. ----------------------
/**
 * Proc called to recall the ninja's sword.
 *
 * Called to summon the ninja's katana back to them
 * If the katana can see the ninja, it will throw itself towards them.
 * If not, the katana will teleport itself to the ninja.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\NTNet\netdata.dm. ----------------------
// Process data before sending it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\NTNet\network.dm. ----------------------
// If new NTNet datum is spawned, it replaces the old one.
// Simplified logging: Adds a log. log_string is mandatory parameter, source is optional.
// Checks whether NTNet operates. If parameter is passed checks whether specific function is enabled.
// Builds lists that contain downloadable software.
// Attempts to find a downloadable file according to filename var
// Resets the IDS alarm
// Removes all logs
// Updates maximal amount of stored logs. Use this instead of setting the number, it performs required checks.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\NTNet\relays.dm. ----------------------
// Relays don't handle any actual communication. Global NTNet datum does that, relays only tell the datum if it should or shouldn't work.
// TODO: Implement more logic here. For now it's only a placeholder.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\NTNet\services\_service.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\carbonpaper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\clipboard.dm. ----------------------
/**
 * Clipboard
 */
/// Take out the topmost paper
/**
 * This is a simple proc to handle calling update_icon() upon receiving the top paper's `COMSIG_ATOM_UPDATE_APPEARANCE`.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\contract.dm. ----------------------
/* For employment contracts and infernal contracts */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\filingcabinet.dm. ----------------------
/* Filing cabinets!
 * Contains:
 * Filing Cabinets
 * Security Record Cabinets
 * Medical Record Cabinets
 * Employment Contract Cabinets
 */
/*
 * Filing Cabinets
 */
/*
 * Security Record Cabinets
 */
/*
 * Medical Record Cabinets
 */
//ATTACK HAND IGNORING PARENT RETURN VALUE
/*
 * Employment contract Cabinets
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\folders.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\handlabeler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\paper.dm. ----------------------
/**
 * Paper
 * also scraps of paper
 *
 * lipstick wiping is in code/game/objects/items/weapons/cosmetics.dm!
 */
/**
 * Paper is now using markdown (like in github pull notes) for ALL rendering
 * so we do loose a bit of functionality but we gain in easy of use of
 * paper and getting rid of that crashing bug
 */
/**
 * This proc copies this sheet of paper to a new
 * sheet. Used by carbon papers and the photocopier machine.
 */
/**
 * This proc sets the text of the paper and updates the
 * icons.  You can modify the pen_color after if need
 * be.
 */
/**
 * Construction paper
 */
/**
 * Natural paper
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\paperbin.dm. ----------------------
//ATTACK HAND IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\paperplane.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\paper_cutter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\paper_premade.dm. ----------------------
/*
 * Premade paper
 */
//////////// Job guides n' fluff
/////////// Cogstation.
/////////// CentCom
/////////// Lavaland
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\pen.dm. ----------------------
/* Pens!
 * Contains:
 * Pens
 * Sleepy Pens
 * Parapens
 * Edaggers
 */
/*
 * Pens
 */
/*
 * Sleepypens
 */
/*
 * (Alan) Edaggers
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\photocopier.dm. ----------------------
/// For use with the `color_mode` var. Photos will be printed in greyscale while the var has this value.
/// For use with the `color_mode` var. Photos will be printed in full color while the var has this value.
/// How much toner is used for making a copy of a paper.
/// How much toner is used for making a copy of a photo.
/// How much toner is used for making a copy of a document.
/// How much toner is used for making a copy of an ass.
/// The maximum amount of copies you can make with one press of the copy button.
/**
 * Determines if the photocopier has enough toner to create `num_copies` amount of copies of the currently inserted item.
 */
/**
 * Will invoke the passed in `copy_cb` callback in 1 second intervals, and charge the user 5 credits for each copy made.
 *
 * Arguments:
 * * copy_cb - a callback for which proc to call. Should only be one of the `make_x_copy()` procs, such as `make_paper_copy()`.
 * * user - the mob who clicked copy.
 */
/**
 * Sets busy to `FALSE`. Created as a proc so it can be used in callbacks.
 */
/**
 * Gives items a random x and y pixel offset, between -10 and 10 for each.
 *
 * This is done that when someone prints multiple papers, we dont have them all appear to be stacked in the same exact location.
 *
 * Arguments:
 * * copied_item - The paper, document, or photo that was just spawned on top of the printer.
 */
/**
 * Handles the copying of devil contract paper. Transfers all the text, stamps and so on from the old paper, to the copy.
 *
 * Checks first if `paper_copy` exists. Since this proc is called from a timer, it's possible that it was removed.
 * Does not check if it has enough toner because devil contracts cost no toner to print.
 */
/**
 * Handles the copying of paper. Transfers all the text, stamps and so on from the old paper, to the copy.
 *
 * Checks first if `paper_copy` exists. Since this proc is called from a timer, it's possible that it was removed.
 */
/**
 * Handles the copying of photos, which can be printed in either color or greyscale.
 *
 * Checks first if `photo_copy` exists. Since this proc is called from a timer, it's possible that it was removed.
 */
/**
 * Handles the copying of documents.
 *
 * Checks first if `document_copy` exists. Since this proc is called from a timer, it's possible that it was removed.
 */
/**
 * Handles the copying of an ass photo.
 *
 * Calls `check_ass()` first to make sure that `ass` exists, among other conditions. Since this proc is called from a timer, it's possible that it was removed.
 * Additionally checks that the mob has their clothes off.
 */
/**
 * Inserts the item into the copier. Called in `attackby()` after a human mob clicked on the copier with a paper, photo, or document.
 *
 * Arugments:
 * * object - the object that got inserted.
 * * user - the mob that inserted the object.
 */
/**
 * Called when someone hits the "remove item" button on the copier UI.
 *
 * If the user is a silicon, it drops the object at the location of the copier. If the user is not a silicon, it tries to put the object in their hands first.
 * Sets `busy` to `FALSE` because if the inserted item is removed, the copier should halt copying.
 *
 * Arguments:
 * * object - the item we're trying to remove.
 * * user - the user removing the item.
 */
/**
 * Checks the living mob `ass` exists and its location is the same as the photocopier.
 *
 * Returns FALSE if `ass` doesn't exist or is not at the copier's location. Returns TRUE otherwise.
 */
/**
 * Checks if the copier is deleted, or has something dense at its location. Called in `MouseDrop_T()`
 */
/**
 * Checks if there is an item inserted into the copier or a mob sitting on top of it.
 *
 * Return `FALSE` is the copier has something inside of it. Returns `TRUE` if it doesn't.
 */
/*
 * Toner cartridge
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\stamps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\paperwork\ticketmachine.dm. ----------------------
//Bureaucracy machine!
//Simply set this up in the hopline and you can serve people based on ticket numbers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\_pictures.dm. ----------------------
//BE VERY CAREFUL WITH THIS PROC, TO AVOID DUPLICATION.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\camera\camera.dm. ----------------------
//user can be atom or mob
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\camera\camera_image_capturing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\camera\film.dm. ----------------------
/*
 * Film
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\camera\other.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\camera\silicon_camera.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\photos\album.dm. ----------------------
/*
 * Photo album
 */
//Manual loading, DO NOT USE FOR HARDCODED/MAPPED IN ALBUMS. This is for if an album needs to be loaded mid-round from an ID.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\photos\frame.dm. ----------------------
// Picture frames
//Put default persistent frame defines here!
//Manual loading, DO NOT USE FOR HARDCODED/MAPPED IN ALBUMS. This is for if an album needs to be loaded mid-round from an ID.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\photography\photos\photo.dm. ----------------------
/*
 * Photo
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\ducts.dm. ----------------------
/*
All the important duct code:
/code/datums/components/plumbing/plumbing.dm
/code/datums/ductnet.dm
*/
///start looking around us for stuff to connect to
///see if whatever we found can be connected to
///connect to a duct
///connect to a plumbing object
///we disconnect ourself from our neighbours. we also destroy our ductnet and tell our neighbours to make a new one
///''''''''''''''''optimized''''''''''''''''' proc for quickly reconnecting after a duct net was destroyed
///Special proc to draw a new connect frame based on neighbours. not the norm so we can support multiple duct kinds
///create a new duct datum
///add a duct as neighbour. this means we're connected and will connect again if we ever regenerate
///remove all our neighbours, and remove us from our neighbours aswell
///add a connect direction
///remove a connect direction
///remove our connects
///get a list of the ducts we can connect to if we are dumb
///update the layer we are on
///collection of all the sanity checks to prevent us from stacking ducts that shouldn't be stacked
///has a total of 5 layers and doesnt give a shit about color. its also dumb so doesnt autoconnect.
///don't connect to other multilayered stuff because honestly it shouldn't be done and I dont wanna deal with it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\acclimator.dm. ----------------------
//we cant use defines in tgui, so use a string instead of magic numbers
///this the plumbing version of a heater/freezer.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\autohydro.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\bottler.dm. ----------------------
///changes the tile array
///changing input ammount with a window
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\destroyer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\fermenter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\filter.dm. ----------------------
///chemical plumbing filter. If it's not filtered by left and right, it goes straight.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\grinder_chemical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\medipenrefill.dm. ----------------------
///  handles the messages and animation, calls refill to end the animation
/// refills the medipen
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\pill_press.dm. ----------------------
///We take a constant input of reagents, and produce a pill once a set volume is reached
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\pumps.dm. ----------------------
///We pump liquids from activated(plungerated) geysers to a plumbing outlet. We don't need to be wired.
///please note that the component has a hook in the parent call, wich handles activating and deactivating
///pump up that sweet geyser nectar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\reaction_chamber.dm. ----------------------
///a reaction chamber for plumbing. pretty much everything can react, but this one keeps the reagents seperated and only reacts under your given terms
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\splitters.dm. ----------------------
///it splits the reagents however you want. So you can "every 60 units, 45 goes left and 15 goes straight". The side direction is EAST, you can change this in the component
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\synthesizer.dm. ----------------------
///A single machine that produces a single chem. Can be placed in unison with others through plumbing to create chemical factories
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\plumbing\plumbers\_plumb_machinery.dm. ----------------------
/**Basic plumbing object.
* It doesn't really hold anything special, YET.
* Objects that are plumbing but not a subtype are as of writing liquid pumps and the reagent_dispenser tank
* Also please note that the plumbing component is toggled on and off by the component using a signal from default_unfasten_wrench, so dont worry about it
*/
///We can empty beakers in here and everything
///We can fill beakers in here and everything. we dont inheret from input because it has nothing that we need
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_controller.dm. ----------------------
//Originally stolen from paradise. Credits to tigercat2000.
//Modified a lot by Kokojo and Tortellini Tony for hippiestation.
//Heavily refactored by tgstation
//procs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_drain.dm. ----------------------
// This should probably start using move force sometime in the future but I'm lazy.
/// dangerous proc don't fuck with, admins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_effects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_main.dm. ----------------------
// Mousedrop hook to normal turfs to get out of pools.
// Exit check
// Exited logic
// Entered logic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_noodles.dm. ----------------------
//Pool noodles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_structures.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\pool\pool_wires.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\apc.dm. ----------------------
// APC electronics status:
/// There are no electronics in the APC.
/// The electronics are installed but not secured.
/// The electronics are installed and secured.
// APC cover status:
/// The APCs cover is closed.
/// The APCs cover is open.
/// The APCs cover is missing.
// APC charging status:
/// The APC is not charging.
/// The APC is charging.
/// The APC is fully charged.
// APC channel status:
/// The APCs power channel is manually set off.
/// The APCs power channel is automatically off.
/// The APCs power channel is manually set on.
/// The APCs power channel is automatically on.
// APC autoset enums:
/// The APC turns automated and manual power channels off.
/// The APC turns automated power channels off.
/// The APC turns automated power channels on.
// External power status:
/// The APC either isn't attached to a powernet or there is no power on the external powernet.
/// The APCs external powernet does not have enough power to charge the APC.
/// The APCs external powernet has enough power to charge the APC.
// Ethereals:
/// How long it takes an ethereal to drain or charge APCs. Also used as a spam limiter.
/// How much power ethereals gain/drain from APCs.
// Wires & EMPs:
/// The wire value used to reset the APCs wires after one's EMPed.
// update_state
// Bitshifts: (If you change the status values to be something other than an int or able to exceed 3 you will need to change these too)
/// The bit shift for the APCs cover status.
// Bitflags:
/// The APC has a power cell.
/// The APC is broken or damaged.
/// The APC is undergoing maintenance.
/// The APC is emagged or malfed.
/// The APCs wires are exposed.
// update_overlay
// Bitflags:
/// Bitflag indicating that the APCs operating status overlay should be shown.
/// Bitflag indicating that the APCs locked status overlay should be shown.
// Bitshifts: (If you change the status values to be something other than an int or able to exceed 3 you will need to change these too)
/// Bit shift for the charging status of the APC.
/// Bit shift for the equipment status of the APC.
/// Bit shift for the lighting channel status of the APC.
/// Bit shift for the environment channel status of the APC.
///Update for hijack overlays
// the Area Power Controller (APC), formerly Power Distribution Unit (PDU)
// one per area, needs wire connection to power network through a terminal
// controls power to devices in that area
// may be opened to change power cell
// three different channels (lighting/equipment/environ) - may each be set to on, off, or auto
// update the APC icon to show the three base states
// also add overlays for indicator lights
// update the APC icon to show the three base states
// also add overlays for indicator lights
/// Checks for what icon updates we will need to handle
// Used in process so it doesn't update the icon too much
//attack with an item - open/close cover, insert cell, or (un)lock interface
// attack with hand - remove cell (if cover open) or interact with the APC
/**
 * Returns the new status value for an APC channel.
 *
 * // val 0=off, 1=off(auto) 2=on 3=on(auto)
 * // on 0=off, 1=on, 2=autooff
 * TODO: Make this use bitflags instead. It should take at most three lines, but it's out of scope for now.
 *
 * Arguments:
 * - val: The current status of the power channel.
 *   - [APC_CHANNEL_OFF]: The APCs channel has been manually set to off. This channel will not automatically change.
 *   - [APC_CHANNEL_AUTO_OFF]: The APCs channel is running on automatic and is currently off. Can be automatically set to [APC_CHANNEL_AUTO_ON].
 *   - [APC_CHANNEL_ON]: The APCs channel has been manually set to on. This will be automatically changed only if the APC runs completely out of power or is disabled.
 *   - [APC_CHANNEL_AUTO_ON]: The APCs channel is running on automatic and is currently on. Can be automatically set to [APC_CHANNEL_AUTO_OFF].
 * - on: An enum dictating how to change the channel's status.
 *   - [AUTOSET_FORCE_OFF]: The APC forces the channel to turn off. This includes manually set channels.
 *   - [AUTOSET_ON]: The APC allows automatic channels to turn back on.
 *   - [AUTOSET_OFF]: The APC turns automatic channels off.
 */
/**
 * Used by external forces to set the APCs channel status's.
 *
 * Arguments:
 * - val: The desired value of the subsystem:
 *   - 1: Manually sets the APCs channel to be [APC_CHANNEL_OFF].
 *   - 2: Manually sets the APCs channel to be [APC_CHANNEL_AUTO_ON]. If the APC doesn't have any power this defaults to [APC_CHANNEL_OFF] instead.
 *   - 3: Sets the APCs channel to be [APC_CHANNEL_AUTO_ON]. If the APC doesn't have enough power this defaults to [APC_CHANNEL_AUTO_OFF] instead.
 */
// damage and destruction acts
// overload all the lights in this APC area
// update_state
//update_overlay
/*Power module, used for APC construction*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\cable.dm. ----------------------
///////////////////////////////
//CABLE STRUCTURE
///////////////////////////////
////////////////////////////////
// Definitions
////////////////////////////////
/* Cable directions (d1 and d2)


  9   1   5
	\ | /
  8 - 0 - 4
	/ | \
  10  2   6

If d1 = 0 and d2 = 0, there's no cable
If d1 = 0 and d2 = dir, it's a O-X cable, getting from the center of the tile to dir (knot cable)
If d1 = dir1 and d2 = dir2, it's a full X-X cable, getting from dir1 to dir2
By design, d1 is the smallest direction and d2 is the highest
*/
// the power cable object
///////////////////////////////////
// General procedures
///////////////////////////////////
//If underfloor, hide the cable
// Items usable on a cable :
//   - Wirecutters : cut it duh !
//   - Cable coil : merge cables
//   - Multitool : get the power currently passing through the cable
//
// shock the user with probability prb
////////////////////////////////////////////
// Power related
///////////////////////////////////////////
// All power generation handled in add_avail()
// Machines should use add_load(), surplus(), avail()
// Non-machines should use add_delayedload(), delayed_surplus(), newavail()
/////////////////////////////////////////////////
// Cable laying helpers
////////////////////////////////////////////////
//handles merging diagonally matching cables
//for info : direction^3 is flipping horizontally, direction^12 is flipping vertically
// merge with the powernets of power objects in the given direction
// merge with the powernets of power objects in the source turf
//////////////////////////////////////////////
// Powernets handling helpers
//////////////////////////////////////////////
//if powernetless_only = 1, will only get connections without powernet
//should be called after placing a cable which extends another cable, creating a "smooth" cable that no longer terminates in the centre of a turf.
//needed as this can, unlike other placements, disconnect cables
// cut the cable's powernet at this cable and updates the powergrid
///////////////////////////////////////////////
// The cable coil object, used for laying cable
///////////////////////////////////////////////
////////////////////////////////
// Definitions
////////////////////////////////
///////////////////////////////////
// General procedures
///////////////////////////////////
//you can use wires to heal robotics
//add cables to the stack
///////////////////////////////////////////////
// Cable laying procedures
//////////////////////////////////////////////
// called when cable_coil is clicked on a turf
// called when cable_coil is click on an installed obj/cable
// or click on a turf that already contains a "node" cable
//////////////////////////////
// Misc.
/////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\cell.dm. ----------------------
// use power from a cell
// recharge the cell
/* Cell variants*/
//found inside the inducers ordered from cargo.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\floodlight.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\generator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\gravitygenerator.dm. ----------------------
//
// Gravity Generator
//
//
// Abstract Generator
//
// You aren't allowed to move.
//
// Part generator which is mostly there for looks
//
/// Used to eat args
//
// Generator which spawns with the station.
//
//
// Generator an admin can spawn
//
//
// Main Generator with the main code
//
// Interaction
// Fixing the gravity generator.
// Power and Icon States
// Set the charging state based on power/breaker.
// Set the state of the gravity.
// Charge/Discharge and turn on/off gravity when you reach 0/100 percent.
// Also emit radiation and handle the overlays.
// Shake everyone on the z level to let them know that gravity was enagaged/disenagaged.
// Misc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\lighting.dm. ----------------------
// The lighting system
//
// consists of light fixtures (/obj/machinery/light) and light tube/bulb items (/obj/item/light)
// status values shared between lighting fixtures and items
// the standard tube light fixture
// the smaller bulb light fixture
// create a new lighting fixture
//		A.update_lights()
// update the icon_state and luminosity of the light depending on its state
// attempt to set the light's on/off status
// will not switch on if broken/burned/empty
// examine verb
// attack with item - insert light (if right type), otherwise try to break the light
// returns if the light has power /but/ is manually turned off
// if a light is turned off, it won't activate emergency power
// returns whether this light has power
// true if area has power and lightswitch is on
// returns whether this light has emergency power
// can also return if it has access to a certain amount of that power
// attempts to use power from the installed emergency cell, returns true if it does and false if it doesn't
// ai attack - make lights flicker, because why not
// attack with hand - remove tube/bulb
// if hands aren't protected and the light is on, burn the player
// break the light and make sparks if was on
// called when area power state changes
// called when on fire
// explode the light
// the light item
// can be tube or bulb subtypes
// will fit into empty /obj/machinery/light of the corresponding type
// update the icon state and description of the light
// attack bulb/tube with object
// if a syringe, can inject plasma to make it explode
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\monitor.dm. ----------------------
//modular computer program version is located in code\modules\modular_computers\file_system\programs\powermonitor.dm, /datum/computer_file/program/power_monitor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\multiz.dm. ----------------------
///Allows you to scan the relay with a multitool to see stats.
///Handles re-acquiring + merging powernets found by find_relays()
///Locates relays that are above and below this object
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\port_gen.dm. ----------------------
//Baseline portable generator. Has all the default handling. Not intended to be used on it's own (since it generates unlimited power).
/////////////////
// P.A.C.M.A.N //
/////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\power.dm. ----------------------
//////////////////////////////
// POWER MACHINERY BASE CLASS
//////////////////////////////
/////////////////////////////
// Definitions
/////////////////////////////
///////////////////////////////
// General procedures
//////////////////////////////
// common helper procs for all power machines
// All power generation handled in add_avail()
// Machines should use add_load(), surplus(), avail()
// Non-machines should use add_delayedload(), delayed_surplus(), newavail()
// returns true if the area has power on given channel (or doesn't require power).
// defaults to power_channel
// increment the power usage stats for an area
// connect the machine to a powernet if a node cable is present on the turf
// remove and disconnect the machine from its current powernet
// attach a wire to a power machine - leads from the turf you are standing on
//almost never called, overwritten by all power machines but terminal and generator
///////////////////////////////////////////
// Powernet handling helpers
//////////////////////////////////////////
//returns all the cables WITHOUT a powernet in neighbors turfs,
//pointing towards the turf the machine is located at
//returns all the cables in neighbors turfs,
//pointing towards the turf the machine is located at
//returns all the NODES (O-X) cables WITHOUT a powernet in the turf the machine is located at
///////////////////////////////////////////
// GLOBAL PROCS for powernets handling
//////////////////////////////////////////
// returns a list of all power-related objects (nodes, cable, junctions) in turf,
// excluding source, that match the direction d
// if unmarked==1, only return those with no powernet
//remove the old powernet and replace it with a new one throughout the network.
//Merge two powernets, the bigger (in cable length term) absorbing the other
//Determines how strong could be shock, deals damage to mob, uses power.
//M is a mob who touched wire/whatever
//power_source is a source of electricity, can be powercell, area, apc, cable, powernet or null
//source is an object caused electrocuting (airlock, grille, etc)
//siemens_coeff - layman's terms, conductivity
//dist_check - set to only shock mobs within 1 of source (vendors, airlocks, etc.)
//No animations will be performed by this proc.
////////////////////////////////////////////////
// Misc.
///////////////////////////////////////////////
// return a knot cable (O-X) if one is present in the turf
// null if there's none
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\powernet.dm. ----------------------
////////////////////////////////////////////
// POWERNET DATUM
// each contiguous network of cables & nodes
/////////////////////////////////////
//remove a cable from the current powernet
//if the powernet is then empty, delete it
//Warning : this proc DON'T check if the cable exists
//add a cable to the current powernet
//Warning : this proc DON'T check if the cable exists
//remove a power machine from the current powernet
//if the powernet is then empty, delete it
//Warning : this proc DON'T check if the machine exists
//add a power machine to the current powernet
//Warning : this proc DON'T check if the machine exists
//handles the power changes in the powernet
//called every ticks by the powernet controller
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\rtg.dm. ----------------------
// Radioisotope Thermoelectric Generator (RTG)
// Simple power generator that would replace "magic SMES" on various derelicts.
// Void Core, power source for Abductor ships and bases.
// Provides a lot of power, but tends to explode when mistreated.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\smes.dm. ----------------------
// the SMES
// stores power
//Cache defines
// create a terminal object pointing towards the SMES
// wires will attach to this
// called after all power processes are finished
// restores charge level to smes if there was excess this ptick
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\solar.dm. ----------------------
//set the control of the panel to a given computer
//set the control of the panel to null and removes it from the control list of the previous control computer if needed
///trace towards sun to see if we're in shadow
///calculates the fraction of the sunlight that the panel receives
//Bit of a hack but this whole type is a hack
//
// Solar Assembly - For construction of solar arrays.
//
// Give back the glass type we were supplied with
//
// Solar Control Computer
//
//search for unconnected panels and trackers in the computer powernet and connect them
///Ran every time the sun updates.
///Rotates the panel to the passed angles
//
// MISC
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\terminal.dm. ----------------------
// the underfloor wiring terminal for the APC
// autogenerated when an APC is placed
// all conduit connects go to this object instead of the APC
// using this solves the problem of having the APC in a wall yet also inside an area
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\tracker.dm. ----------------------
//Solar tracker
//Machine that tracks the sun and reports its direction to the solar controllers
//As long as this is working, solar panels on same powernet will track automatically
//set the control of the tracker to null and removes it from the previous control computer if needed
///Tell the controller to turn the solar panels
// Tracker Electronic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\turbine.dm. ----------------------
// TURBINE v2 AKA rev4407 Engine reborn!
// How to use it? - Mappers
//
// This is a very good power generating mechanism. All you need is a blast furnace with soaring flames and output.
// Not everything is included yet so the turbine can run out of fuel quiet quickly. The best thing about the turbine is that even
// though something is on fire that passes through it, it won't be on fire as it passes out of it. So the exhaust fumes can still
// containt unreacted fuel - plasma and oxygen that needs to be filtered out and re-routed back. This of course requires smart piping
// For a computer to work with the turbine the compressor requires a comp_id matching with the turbine computer's id. This will be
// subjected to a change in the near future mind you. Right now this method of generating power is a good backup but don't expect it
// become a main power source unless some work is done. Have fun. At 50k RPM it generates 60k power. So more than one turbine is needed!
//
// - Numbers
//
// Example setup	 S - sparker
//					 B - Blast doors into space for venting
// *BBB****BBB*		 C - Compressor
// S    CT    *		 T - Turbine
// * ^ *  * V *		 D - Doors with firedoor
// **|***D**|**      ^ - Fuel feed (Not vent, but a gas outlet)
//   |      |        V - Suction vent (Like the ones in atmos
//
// the inlet stage of the gas turbine electricity generator
// RPM function to include compression friction - be advised that too low/high of a compfriction value can make things screwy
// These are crucial to working of a turbine - the stats modify the power output. TurbGenQ modifies how much raw energy can you get from
// rpms, TurbGenG modifies the shape of the curve - the lower the value the less straight the curve is.
// The outlet is pointed at the direction of the turbine component
// If it works, put an overlay that it works!
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// COMPUTER NEEDS A SERIOUS REWRITE.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\antimatter\containment_jar.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\antimatter\control.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\antimatter\shielding.dm. ----------------------
//like orange but only checks north/south/east/west for one step
//Call this to link a detected shilding unit to the controller
//Scans cards for shields or the control unit and if all there it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\reactor\fuel_rods.dm. ----------------------
// This proc will try to convert your fuel rod if you don't override this proc
// So, ideally, you should write an override of this for every fuel rod you want to create
// Master type for material optional (or requiring, wyci) and/or producing rods
// Called when the rod is fully harvested
// Basic checks for material rods
// The actual growth
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\reactor\rbmk.dm. ----------------------
//For my sanity :))
//Math. Lame.
//Reference: Heaters go up to 500K.
//Hot plasmaburn: 14164.95 C.
/**
What is this?
Moderators list (Not gonna keep this accurate forever):
Fuel Type:
Oxygen: Power production multiplier. Allows you to run a low plasma, high oxy mix, and still get a lot of power.
Plasma: Power production gas. More plasma -> more power, but it enriches your fuel and makes the reactor much, much harder to control.
Tritium: Extremely efficient power production gas. Will cause chernobyl if used improperly.
Moderation Type:
N2: Helps you regain control of the reaction by increasing control rod effectiveness, will massively boost the rad production of the reactor.
CO2: Super effective shutdown gas for runaway reactions. MASSIVE RADIATION PENALTY!
Pluoxium: Same as N2, but no cancer-rads!
Permeability Type:
BZ: Increases your reactor's ability to transfer its heat to the coolant, thus letting you cool it down faster (but your output will get hotter)
Water Vapour: More efficient permeability modifier
Hyper Noblium: Extremely efficient permeability increase. (10x as efficient as bz)
Depletion type:
Nitryl: When you need weapons grade plutonium yesterday. Causes your fuel to deplete much, much faster. Not a huge amount of use outside of sabotage.
Sabotage:
Meltdown:
Flood reactor moderator with plasma, they won't be able to mitigate the reaction with control rods.
Shut off coolant entirely. Raise control rods.
Swap all fuel out with spent fuel, as it's way stronger.
Blowout:
Shut off exit valve for quick overpressure.
Cause a pipefire in the coolant line (LETHAL).
Tack heater onto coolant line (can also cause straight meltdown)
Tips:
Be careful to not exhaust your plasma supply. I recommend you DON'T max out the moderator input when youre running plasma + o2, or you're at a tangible risk of running out of those gasses from atmos.
The reactor CHEWS through moderator. It does not do this slowly. Be very careful with that!
*/
//Remember kids. If the reactor itself is not physically powered by an APC, it cannot shove coolant in!
//Use this in your maps if you want everything to be preset.
//Admin procs to mess with the reaction environment.
//Method to handle sound effects, reactor warnings, all that jazz.
//Failure condition 1: Meltdown. Achieved by having heat go over tolerances. This is less devastating because it's easier to achieve.
//Results: Engineering becomes unusable and your engine irreparable
//Failure condition 2: Blowout. Achieved by reactor going over-pressured. This is a round-ender because it requires more fuckery to achieve.
//Startup, shutdown
//Shuts off the fuel rods, ambience, etc. Keep in mind that your temperature may still go up!
//Controlling the reactor.
//Preset pumps for mappers. You can also set the id tags yourself.
//Preset subtypes for mappers
//Monitoring program.
//Procs shamelessly taken from machinery/power
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\reactor\reactor_cargo.dm. ----------------------
// modular shitcode but it works:tm:
// Cargo variants can be wrenched down and don't start linked to the default RMBK reactor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\collector.dm. ----------------------
// stored_power += (pulse_strength-RAD_COLLECTOR_EFFICIENCY)*RAD_COLLECTOR_COEFFICIENT
//	use_power = NO_POWER_USE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\containment_field.dm. ----------------------
// Abstract Field Class
// Used for overriding certain procs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\emitter.dm. ----------------------
//emitter construction defines
//BUCKLE HOOKS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\field_generator.dm. ----------------------
/*
field_generator power level display
   The icon used for the field_generator need to have 'num_power_levels' number of icon states
   named 'Field_Gen +p[num]' where 'num' ranges from 1 to 'num_power_levels'

   The power level is displayed using overlays. The current displayed power level is stored in 'powerlevel'.
   The overlay in use and the powerlevel variable must be kept in sync.  A powerlevel equal to 0 means that
   no power level overlay is currently in the overlays list.
   -Aygar
*/
//field generator construction defines
//This could likely be better, it tends to start loopin if you have a complex generator loop setup.  Still works well enough to run the engine fields will likely recode the field gens and fields sometime -Mport
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\generator.dm. ----------------------
/////SINGULARITY SPAWNER
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\investigate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\narsie.dm. ----------------------
//ATTACK GHOST IGNORING PARENT RETURN VALUE
//Wizard narsie
//	if(defer_powernet_rebuild != 2)
//		defer_powernet_rebuild = 1
//	if(defer_powernet_rebuild != 2)
//		defer_powernet_rebuild = 0
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\singularity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\particle_accelerator\particle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\particle_accelerator\particle_accelerator.dm. ----------------------
/*Composed of 7 parts :

 3 Particle Emitters
 1 Power Box
 1 Fuel Chamber
 1 End Cap
 1 Control computer

 Setup map

   |EC|
 CC|FC|
   |PB|
 PE|PE|PE

*/
///////////
// PARTS //
///////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\particle_accelerator\particle_control.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\singularity\particle_accelerator\particle_emitter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\supermatter\supermatter.dm. ----------------------
//Ported from /vg/station13, which was in turn forked from baystation12;
//Please do not bother them with bugs from this port, however, as it has been modified quite a bit.
//Modifications include removing the world-ending full supermatter variation, and leaving only the shard.
//Zap constants, speeds up targeting
//Along with damage_penalty_point, makes flux anomalies.
//These would be what you would get at point blank, decreases with distance
//If integrity percent remaining is less than these values, the monitor sets off the relevant alarm.
///to prevent accent sounds from layering
// SupermatterMonitor UI for ghosts only. Inherited attack_ghost will call this.
//this is here to eat arguments
//		var/freonbonus = (gas_comp[/datum/gas/freon] <= 0.03) //Let's just yeet power output if this shit is high
//Do not blow up our internal radio
// When you wanna make a supermatter shard for the dramatic effect, but
// don't want it exploding suddenly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\tesla\coil.dm. ----------------------
// Tesla R&D researcher
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\tesla\energy_ball.dm. ----------------------
//Zap constants, speeds up targeting
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\power\tesla\generator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerator.dm. ----------------------
//clusterCheckFlags defines
//All based on clusterMin and clusterMax as guides
//Individual defines
//Combined defines
//All
//Defines the region the map represents, sets map
//Returns the map
//Defines the region the map represents, as a CIRCLE!, sets map
//Returns the map
//Empties the map list, he's dead jim.
//Checks for and Rejects bad region coordinates
//Returns 1/0
//Requests the mapGeneratorModule(s) to (re)generate
//Requests the mapGeneratorModule(s) to (re)generate this one turf
//Replaces all paths in the module list with actual module datums
//Sync mapGeneratorModule(s) to mapGenerator
///////////////////////////
// HERE BE DEBUG DRAGONS //
///////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGeneratorModule.dm. ----------------------
//Syncs the module up with its mother
//Generates its spawnable atoms and turfs
//Place a spawnable atom or turf on this turf
//Checks and Rejects dense turfs
///////////////////////////////////////////////////////////
//                 PREMADE BASE TEMPLATES                //
//           Appropriate settings for usable types       //
// Not usable types themselves, use them as parent types //
// Seriously, don't use these on their own, just parents //
///////////////////////////////////////////////////////////
//The /atom and /turf examples are just so these compile, replace those with your typepaths in your subtypes.
//Settings appropriate for a turf that covers the entire map region, eg a fill colour on a bottom layer in a graphics program.
//Should only have one of these in your mapGenerator unless you want to waste CPU
//Settings appropriate for turfs/atoms that cover SOME of the map region, sometimes referred to as a splatter layer.
//Settings appropriate for turfs/atoms that cover a lot of the map region, eg a dense forest.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGeneratorObj.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGeneratorReadme.dm. ----------------------
/*
by RemieRichards

//////////////////////////////
// CODER INFORMATIVE README //
//////////////////////////////
(See below for Mapper Friendly Readme)

mapGenerator:
	Desc: a mapGenerator is a master datum that collects
	and syncs all mapGeneratorModules in it's modules list

	defineRegion(var/turf/Start, var/turf/End, var/replace = 0)
		Example: defineRegion(locate(1,1,1),locate(5,5,5),0)
		Desc: Sets the bounds of the mapGenerator's "map"

	defineCircularRegion(var/turf/Start, var/turf/End, var/replace = 0)
		Example: defineCircularRegion(locate(1,1,1),locate(5,5,5),0)
		Desc: Sets the mapGenerator's "map" as a circle, with center in the middle of Start and End's X,Y,Z coordinates

	undefineRegion()
		Example: undefineRegion()
		Desc: Empties the map generator list

	checkRegion(var/turf/Start, var/turf/End)
		Example: checkRegion(locate(1,1,1), locate(5,5,5))
		Desc: Checks if a rectangle between Start's coords and End's coords is valid
		Existing Calls: mapGenerator/defineRegion(), mapGenerator/defineCircularRegion()

	generate()
		Example: generate()
		Desc: Orders all mapGeneratorModules in the modules list to generate()

	generateOneTurf(var/turf/T)
		Example: generateOneTurf(locate(1,1,1))
		Desc: Orders all mapGeneratorModules in the modules list to place(T) on this turf

	initialiseModules()
		Example: initialiseModules()
		Desc: Replaces all typepaths in the modules list with actual /datum/mapGenerator/Module types
		Existing Calls: mapGenerator/New()

	syncModules()
		Example: syncModules()
		Desc: Sets the Mother variable on all mapGeneratorModules in the modules list to this mapGenerator
		Existing Calls: initialiseModules(),generate(),generateOneTurf()


mapGeneratorModule
	Desc: a mapGeneratorModule has spawnableAtoms and spawnableTurfs lists
	which it will generate on turfs in it's mother's map based on cluster variables

	sync(var/datum/mapGenerator/mum)
		Example: sync(a_mapGenerator_as_a_variable)
		Desc: Sets the Mother variable to the mum argument
		Existing Calls: mapGenerator/syncModules()

	generate()
		Example: generate()
		Desc: Calls place(T) on all turfs in it's mother's map
		Existing Calls: mapGenerator/generate()

	place(var/turf/T)
		Example: place(locate(1,1,1))
		Desc: Run this mapGeneratorModule's effects on this turf (Spawning atoms, Changing turfs)
		Existing Calls: mapGenerator/generate(), mapGenerator/generateOneTurf()

	checkPlaceAtom(var/turf/T)
		Example: checkPlace(locate(1,1,1))
		Desc: Checks if the turf is valid for placing atoms
		Existing Calls: place()



////////////////////////////
// MAPPER FRIENDLY README //
////////////////////////////

Simple Workflow:

	1. Define a/some mapGeneratorModule(s) to your liking, choosing atoms and turfs to spawn
	 #Note: I chose to split Turfs and Atoms off into separate modules, but this is NOT required.
	 #Note: A mapGeneratorModule may have turfs AND atoms, so long as each is in it's appropriate list

	2. Define a mapGenerator type who's modules list contains the typepath(s) of all the module(s) you wish to use
	 #Note: The order of the typepaths in the modules list is the order they will happen in, this is important for clusterCheckFlags.

	3. Take notes of the Bottom Left and Top Right turfs of your rectangular "map"'s coordinates
	 #Note: X,Y AND Z, Yes you can created 3D "maps" by having differing Z coords

	4. Create the mapGenerator type you created

	5. Call yourMapGeneratorType.defineRegion(locate(X,Y,Z), locate(X,Y,Z))
	 #Note: The above X/Y/Zs are the coordinates of the start and end turfs, the locate() simply finds the turf for the code

	6. Call yourMapGeneratorType.generate(), this will cause all the modules in the generator to build within the map bounds

Option Suggestions:

	* Have separate modules for Turfs and Atoms, this is not enforced, but it is how I have structured my nature example.
	* If your map doesn't look quite to your liking, simply jiggle with the variables on your modules and the type probabilities
	* You can mix and map premade areas with the procedural generation, for example mapping an entire flat land but having code generate just the grass tufts


Using the Modules list

	Simply think of it like each module is a layer in a graphics editing program!
	To help you do this templates such as /mapGeneratorModule/bottomLayer have been provided with appropriate default settings.
	These are located near the bottom of mapGeneratorModule.dm
	you would order your list left to right, top to bottom, e.g:
	modules = list(bottomLayer,nextLayer,nextNextLayer) etc.


Variable Breakdown (For Mappers):

	mapGenerator
		map - INTERNAL, do not touch
		modules - A list of typepaths of mapGeneratorModules

	mapGeneratorModule
		mother - INTERNAL, do not touch
		spawnableAtoms - A list of typepaths and their probability to spawn, eg: spawnableAtoms = list(/obj/structure/flora/tree/pine = 30)
		spawnableTurfs - A list of typepaths and their probability to spawn, eg: spawnableTurfs = list(/turf/unsimulated/floor/grass = 100)
		clusterMax - The max range to check for something being "too close" for this atom/turf to spawn, the true value is random between clusterMin and clusterMax
		clusterMin - The min range to check for something being "too close" for this atom/turf to spawn, the true value is random between clusterMin and clusterMax
		clusterCheckFlags - A Bitfield that controls how the cluster checks work, All based on clusterMin and clusterMax guides
		allowAtomsOnSpace - A Boolean for if we allow atoms to spawn on space tiles

		clusterCheckFlags flags:
			CLUSTER_CHECK_NONE	0 			   //No checks are done, cluster as much as possible
			CLUSTER_CHECK_DIFFERENT_TURFS	2  //Don't let turfs of DIFFERENT types cluster
			CLUSTER_CHECK_DIFFERENT_ATOMS	4  //Don't let atoms of DIFFERENT types cluster
			CLUSTER_CHECK_SAME_TURFS		8  //Don't let turfs of the SAME type cluster
			CLUSTER_CHECK_SAME_ATOMS		16 //Don't let atoms of the SAME type cluster

			CLUSTER_CHECK_SAMES				24 //Don't let any of the same type cluster
			CLUSTER_CHECK_DIFFERENTS		6  //Don't let any different types cluster
			CLUSTER_CHECK_ALL_TURFS			10 //Don't let ANY turfs cluster same and different types
			CLUSTER_CHECK_ALL_ATOMS			20 //Don't let ANY atoms cluster same and different types

			CLUSTER_CHECK_ALL				30 //Don't let anything cluster, like, at all



*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGeneratorModules\helpers.dm. ----------------------
//Helper Modules
// Helper to repressurize the area in case it was run in space
//Only places atoms/turfs on area borders
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGeneratorModules\nature.dm. ----------------------
//Contents exist primarily for the nature generator test type.
//Pine Trees
//Dead Trees
//Random assortment of bushes
//Random assortment of rocks and rockpiles
//Grass turfs
//Grass tufts with a high spawn chance
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\asteroid.dm. ----------------------
//Asteroid turfs
//Border walls
//Random walls
//Monsters
// GENERATORS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\cellular.dm. ----------------------
// Very Simple Cellular Automata generators
// Mostly for better caves
// Should probably move these up and refactor modules so these can be mixed with other ones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\cult.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\lavaland.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\lava_river.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\nature.dm. ----------------------
//Exists primarily as a test type.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\repair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\shuttle.dm. ----------------------
// Generators
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\procedural_mapping\mapGenerators\syndicate.dm. ----------------------
// Modules
// Generators
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\gun.dm. ----------------------
//called after the gun has successfully fired its chambered ammo.
//check if there's enough ammo/energy/whatever to shoot one time
//i.e if clicking would make it shoot
/**
 * Swaps the gun's seclight, dropping the old seclight if it has not been qdel'd.
 *
 * Returns the former gun_light that has now been replaced by this proc.
 * Arguments:
 * * new_light - The new light to attach to the weapon. Can be null, which will mean the old light is removed with no replacement.
 */
//Happens before the actual projectile creation
/////////////
// ZOOMING //
/////////////
/*
	if(inaccuracy_modifier == 0)
		return bonus_spread
	var/base_inaccuracy = weapon_weight * 25 * inaccuracy_modifier
	var/aiming_delay = 0 //Otherwise aiming would be meaningless for slower guns such as sniper rifles and launchers.
	if(fire_delay)
		var/penalty = (last_fire + GUN_AIMING_TIME + fire_delay) - world.time
		if(penalty > 0) //Yet we only penalize users firing it multiple times in a haste. fire_delay isn't necessarily cumbersomeness.
			aiming_delay = penalty
	if(SEND_SIGNAL(user, COMSIG_COMBAT_MODE_CHECK, COMBAT_MODE_ACTIVE) || HAS_TRAIT(user, TRAIT_INSANE_AIM)) //To be removed in favor of something less tactless later.
		base_inaccuracy /= 1.5
	if(stamloss > STAMINA_NEAR_SOFTCRIT) //This can null out the above bonus.
		base_inaccuracy *= 1 + (stamloss - STAMINA_NEAR_SOFTCRIT)/(STAMINA_NEAR_CRIT - STAMINA_NEAR_SOFTCRIT)*0.5
	if(HAS_TRAIT(user, TRAIT_POOR_AIM)) //nice shootin' tex
		if(!HAS_TRAIT(user, TRAIT_INSANE_AIM))
			bonus_spread += 25
		else
			//you have both poor aim and insane aim, why?
			bonus_spread += rand(0,50)
	var/mult = max((GUN_AIMING_TIME + aiming_delay + user.last_click_move - world.time)/GUN_AIMING_TIME, -0.5) //Yes, there is a bonus for taking time aiming.
	if(mult < 0) //accurate weapons should provide a proper bonus with negative inaccuracy. the opposite is true too.
		mult *= 1/inaccuracy_modifier
	return max(bonus_spread + (base_inaccuracy * mult), 0) //no negative spread.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\pins.dm. ----------------------
// Test pin, works only near firing range.
// Implant pin, checks for implant
// Honk pin, clown's joke item.
// Can replace other pins. Replace a pin in cap's laser for extra fun!
// Ultra-honk pin, clown's deadly joke item.
// A gun with ultra-honk pin is useful for clown and useless for everyone else.
// Now two times deadlier!
// DNA-keyed pin.
// When you want to keep your toys for yourself.
// Laser tag pins
// Explorer Firing Pin- Prevents use on station Z-Level, so it's justifiable to give Explorers guns that don't suck.
// This checks that the user isn't on the station Z-level.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile.dm. ----------------------
/// Minimum projectile pixels to move before it animate()S, below this it's a direct set.
/// Pixels to instantly travel on firing.
/**
  * Artificially modified to be called at around every world.icon_size pixels of movement.
  * WARNING: Range() can only be called once per pixel_increment_amount pixels.
  */
//to get the correct limb (if any) for the projectile hit message
/**
 * Called when the projectile hits something
 * This can either be from it bumping something,
 * or it passing over a turf/being crossed and scanning that there is infact
 * a valid target it needs to hit.
 * This target isn't however necessarily WHAT it hits
 * that is determined by process_hit and select_target.
 *
 * Furthermore, this proc shouldn't check can_hit_target - this should only be called if can hit target is already checked.
 * Also, we select_target to find what to process_hit first.
 */
/**
 * The primary workhorse proc of projectile impacts.
 * This is a RECURSIVE call - process_hit is called on the first selected target, and then repeatedly called if the projectile still hasn't been deleted.
 *
 * Order of operations:
 * 1. Checks if we are deleted, or if we're somehow trying to hit a null, in which case, bail out
 * 2. Adds the thing we're hitting to impacted so we can make sure we don't doublehit
 * 3. Checks piercing - stores this.
 * Afterwards:
 * Hit and delete, hit without deleting and pass through, pass through without hitting, or delete without hitting depending on result
 * If we're going through without hitting, find something else to hit if possible and recurse, set unstoppable movement to true
 * If we're deleting without hitting, delete and return
 * Otherwise, send signal of COMSIG_PROJECTILE_PREHIT to target
 * Then, hit, deleting ourselves if necessary.
 * @params
 * T - Turf we're on/supposedly hitting
 * target - target we're hitting
 * bumped - target we originally bumped. it's here to ensure that if something blocks our projectile by means of Cross() failure, we hit it
 * even if it is not dense.
 * hit_something - only should be set by recursive calling by this proc - tracks if we hit something already
 *
 * Returns if we hit something.
 * - Silly-Cons
 */
/**
 * Selects a target to hit from a turf
 *
 * @params
 * T - The turf
 * target - The "preferred" atom to hit, usually what we Bumped() first.
 * bumped - used to track if something is the reason we impacted in the first place.
 * If set, this atom is always treated as dense by can_hit_target.

 * Priority:
 * 0. Anything that is already in impacted is ignored no matter what. Furthermore, in any bracket, if the target atom parameter is in it, that's hit first.
 * 	Furthermore, can_hit_target is always checked. This (entire proc) is PERFORMANCE OVERHEAD!! But, it shouldn't be ""too"" bad and I frankly don't have a better *generic non snowflakey* way that I can think of right now at 3 AM.
 *		FURTHERMORE, mobs/objs have a density check from can_hit_target - to hit non dense objects over a turf, you must click on them, same for mobs that usually wouldn't get hit.
 * 1. The thing originally aimed at/clicked on
 * 2. Mobs - picks lowest buckled mob to prevent scarp piggybacking memes
 * 3. Objs
 * 4. Turf
 * 5. Nothing
 */
//Returns true if the target atom is on our current turf and above the right layer
//If direct target is true it's the originally clicked target.
/**
 * Scan if we should hit something and hit it if we need to
 * The difference between this and handling in Impact is
 * In this we strictly check if we need to Impact() something in specific
 * If we do, we do
 * We don't even check if it got hit already - Impact() does that
 * In impact there's more code for selecting WHAT to hit
 * So this proc is more of checking if we should hit something at all BY having an atom cross us.
 */
/**
 * Scans if we should hit something on the turf we just moved to if we haven't already
 *
 * This proc is a little high in overhead but allows us to not snowflake CanPass in living and other things.
 */
/**
 * Projectile crossed: When something enters a projectile's tile, make sure the projectile hits it if it should be hitting it.
 */
/**
 * Projectile can pass through
 * Used to not even attempt to Bump() or fail to Cross() anything we already hit.
 */
/**
 * Projectile moved:
 *
 * If not fired yet, do not do anything. Else,
 *
 * If temporary unstoppable movement used for piercing through things we already hit (impacted list) is set, unset it.
 * Scan turf we're now in for anything we can/should hit. This is useful for hitting non dense objects the user
 * directly clicks on, as well as for PHASING projectiles to be able to hit things at all as they don't ever Bump().
 */
/**
 * Checks if we should pierce something.
 *
 * NOT meant to be a pure proc, since this replaces prehit() which was used to do things.
 * Return PROJECTILE_DELETE_WITHOUT_HITTING to delete projectile without hitting at all!
 */
/// one move is a tile.
/**
  * The proc to make the projectile go, using a simulated pixel movement line trace.
  * Note: deciseconds_equivalent is currently only used for homing, times is the number of times to move pixel_increment_amount.
  * Trajectory multiplier directly modifies the factor of pixel_increment_amount to go per time.
  * It's complicated, so probably just don't mess with this unless you know what you're doing.
  */
//Spread is FORCED!
/////// MISC HELPERS ////////
/// Is this atom reflectable with ""standardized"" reflection methods like you know eshields and deswords and similar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\_ammunition.dm. ----------------------
//proc to magically refill a casing with a new projectile
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\_firing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\lmg.dm. ----------------------
// 7.12x82mm (SAW)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\pistol.dm. ----------------------
// 10mm (Stechkin)
// 9mm (Stechkin APS)
// .50AE (Desert Eagle)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\revolver.dm. ----------------------
// .357 (Syndie Revolver)
// 7.62x38mmR (Nagant Revolver)
// .38 (Detective's Gun)
//.45-70 GOVT (Gunslinger's Derringer)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\rifle.dm. ----------------------
// 7.62 (Nagant Rifle)
// 5.56mm (M-90gl Carbine)
// 40mm (Grenade Launcher)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\shotgun.dm. ----------------------
// Shotgun
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\smg.dm. ----------------------
// 4.6x30mm (Autorifles)
// .45 (M1911 + C20r)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\ballistic\sniper.dm. ----------------------
// .50 (Sniper)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\arrow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\ferromagnetic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\foam.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\rocket.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\caseless\_caseless.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\ebow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\gravity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\laser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\lmg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\plasma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\plasma_cit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\portal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\stun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\energy\_energy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\special\magic.dm. ----------------------
//Spell book ammo casing
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\ammunition\special\syringe.dm. ----------------------
//Smart dart version of reagent launcher.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\ammo_boxes.dm. ----------------------
//Shotgun clips
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\_box_magazine.dm. ----------------------
//Boxes of ammo
//Behavior for magazines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\grenade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\lmg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\magweapon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\pistol.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\rechargable.dm. ----------------------
// MWS Magazine //
// MWS Batteries //
// Specific batteries //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\rifle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\shotgun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\smg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\sniper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\external\toy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\bow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\derringer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\grenade.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\revolver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\rifle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\shotgun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\toy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\_cylinder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\boxes_magazines\internal\_internal.dm. ----------------------
//internals magazines are accessible, so replace spent ammo if full when trying to put a live one in
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic.dm. ----------------------
/// is something supposed to happen here?
// Sawing guns related proc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy.dm. ----------------------
/*
 * Energy guns that draw from a cell to fire.
 *
 * This is a bit weird but this is how it currently works:
 * When switching shots, it clears the chamber, and loads the correct energy ammo casing if there is enough energy to fire it.
 * If there's no projectile in the casing, it creates it now.
 * Otherwise the chamber stays null.
 * After firing, it actually deducts the energy and then clears the chamber and does the above again.
 * It detects if a successful fire is done by checking if the chambered energy ammo casing still has its projectile intact.
 *
 * It might be good in the future to move away from ammo casinsgs and instead use a datum-firemode system, but that would make handling firing,
 * which the casing does as of now, a little interesting to implement.
 */
// ATTACK SELF IGNORING PARENT RETURN VALUE
// Firemodes/Ammotypes
/// This is the proc used in general for when a user switches firemodes. Just goes to next firemode by default.
///Used by update_icon_state() and update_overlays()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\magic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\automatic.dm. ----------------------
/*
/obj/item/gun/ballistic/automatic/m90/burst_select()
	var/mob/living/carbon/human/user = usr
	switch(select)
		if(0)
			select = 1
			burst_size = initial(burst_size)
			to_chat(user, "<span class='notice'>You switch to [burst_size]-rnd burst.</span>")
		if(1)
			select = 2
			to_chat(user, "<span class='notice'>You switch to grenades.</span>")
		if(2)
			select = 0
			burst_size = 1
			to_chat(user, "<span class='notice'>You switch to semi-auto.</span>")
	playsound(user, 'sound/weapons/empty.ogg', 100, 1)
	update_icon()
	return
*/
// Bulldog shotgun //
// L6 SAW //
// SNIPER //
// Old Semi-Auto Rifle //
// Laser rifle (rechargeable magazine) //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\bow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\derringer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\launchers.dm. ----------------------
//KEEP IN MIND: These are different from gun/grenadelauncher. These are designed to shoot premade rocket and grenade projectiles, not flashbangs or chemistry casings etc.
//Put handheld rocket launchers here if someone ever decides to make something so hilarious ~Paprika
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\magweapon.dm. ----------------------
///magpistol///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\pistol.dm. ----------------------
//(reskinnable stetchkin)
////////////Anti Tank Pistol////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\revolver.dm. ----------------------
// A gun to play Russian Roulette!
// You can spin the chamber to randomize the position of the bullet.
/////////////////////////////
// DOUBLE BARRELED SHOTGUN //
/////////////////////////////
/////////////////////////////
//   IMPROVISED SHOTGUN    //
/////////////////////////////
// -------------- HoS Modular Weapon System -------------
// ---------- Code originally from VoreStation ----------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\shotgun.dm. ----------------------
// RIOT SHOTGUN //
///////////////////////
// BOLT ACTION RIFLE //
///////////////////////
// Automatic Shotguns//
//Dual Feed Shotgun
//due to code weirdness, and the fact that a refactor is coming soon anyway, the barman's shotgun and maint shotgun are in revolver.dm
// hey you kids like
// LEVER GUNS?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\ballistic\toy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\dueling.dm. ----------------------
//paper rock scissors
//Casing
//Projectile
//Storage case.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\energy_gun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\kinetic_accelerator.dm. ----------------------
//Casing
//Projectiles
//Modkits
//use this one for effects you want to trigger before any damage is done at all and before damage is decreased by pressure
//use this one for effects you want to trigger before mods that do damage
//and this one for things that don't need to trigger before other damage-dealing mods
//Range
//Damage
//Cooldown
//AoE blasts
//Minebot passthrough
//Tendril-unique modules
//Indoors
//Trigger Guard
//Cosmetic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\laser.dm. ----------------------
///Laser Cannon
////////Laser Tag////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\laser_gatling.dm. ----------------------
//The ammo/gun is stored in a back slot item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\megabuster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\mounted.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\plasma_cit.dm. ----------------------
//Laser rifles, technically lazer, but w/e
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\pulse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\special.dm. ----------------------
// Tool procs, in case plasma cutter is used as welder
//Sci guns
/* 3d printer 'pseudo guns' for borgs */
//Emitter Gun
//the pickle ray
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\energy\stun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\magic\motivation.dm. ----------------------
//to get this to toggle correctly
//lets the user know that their judgement cuts are recharging
//action button to toggle judgement cuts on/off
//lets the user know that you toggled them on/off
//Prevents "firing" the judgement cuts if toggled off and lets the user know
//adds/removes judgement cut and judgement cut end upon pickup/drop
//A parry tight enough to stagger, but not to counter attack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\magic\spell_book.dm. ----------------------
//////////////////////
//Spell Book - SPARK//
//////////////////////
//////////////////////
//Spell Book - PAGE///
//////////////////////
//////////////////////
//Spell Book - SHOCK//
//////////////////////
////////////////////////
//Spell Book - HEALING//
////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\magic\staff.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\magic\wand.dm. ----------------------
/////////////////////////////////////
//WAND OF DEATH
/////////////////////////////////////
/////////////////////////////////////
//WAND OF HEALING
/////////////////////////////////////
/////////////////////////////////////
//WAND OF POLYMORPH
/////////////////////////////////////
/////////////////////////////////////
//WAND OF TELEPORTATION
/////////////////////////////////////
/////////////////////////////////////
//WAND OF DOOR CREATION
/////////////////////////////////////
/////////////////////////////////////
//WAND OF FIREBALL
/////////////////////////////////////
/////////////////////////////////////
//WAND OF ARCANE MISSILE
/////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\beam_rifle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\blastcannon.dm. ----------------------
//returns the third value of a bomb blast
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\chameleon.dm. ----------------------
// this is all shitcode never ever add it to the game it's for debugging only.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\chem_gun.dm. ----------------------
//his isn't a subtype of the syringe gun because the syringegun subtype is made to hold syringes
//this is meant to hold reagents/obj/item/gun/syringe
//bunch of hypospray copy paste
//Smart dart version of the reagent launcher
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\grenade_launcher.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\medbeam.dm. ----------------------
//////////////////////////////Mech Version///////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\guns\misc\syringe_gun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\beams.dm. ----------------------
//overclocked laser, does a bit more damage but has much higher wound power (-0 vs -20)
//a shrink ray that shrinks stuff, which grows back after a short while.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\magic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\megabuster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\plasma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\dart_syringe.dm. ----------------------
//I am in a mess of my own making
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\dnainjector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\ferromagnetic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\grenade.dm. ----------------------
// 40mm (Grenade Launcher
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\lmg.dm. ----------------------
// C3D (Borgs)
// Mech LMG
// Mech FNX-99
// Turrets
// 7.12x82mm (SAW)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\pistol.dm. ----------------------
// 9mm (Stechkin APS)
// 10mm (Stechkin)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\revolver.dm. ----------------------
// 7.62x38mmR (Nagant Revolver)
// .50AE (Desert Eagle)
// .38 (Detective's Gun)
// premium .38 ammo from cargo, weak against armor, lower base damage, but excellent at embedding and causing slice wounds at close range
// .357 (Syndie Revolver)
// admin only really, for ocelot memes
//.45-70 GOVT (Gunslinger's Derringer)
//0bserver here. For all that is holy, do me a flavor, and do NOT allow people easy access to this ammo. This is meant for extremely lucky traitors, and nuclear operatives.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\rifle.dm. ----------------------
// 5.56mm (M-90gl Carbine)
// 7.62 (Nagant Rifle)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\shotgun.dm. ----------------------
// Mech Scattershots
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\smg.dm. ----------------------
// .45 (M1911 & C20r)
// 4.6x30mm (Autorifles)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\sniper.dm. ----------------------
// .50 (Sniper)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\special.dm. ----------------------
// Honker
// Mime
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\bullets\_incendiary.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\ebow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\net_snare.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\nuclear_particle.dm. ----------------------
//Nuclear particle projectile - a deadly side effect of fusion
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\stun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\tesla.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\energy\_energy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\magic\spellcard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\reusable\arrow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\reusable\foam_dart.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\reusable\magspear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\reusable\_reusable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\curse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\floral.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\gravity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\hallucination.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\ion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\judgement_cut.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\meteor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\mindflayer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\neurotoxin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\plasma.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\rocket.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\temperature.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\projectiles\projectile\special\wormhole.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chem_splash.dm. ----------------------
// Replaces chemgrenade stuff, allowing reagent explosions to be called from anywhere.
// It should be called using a location, the range, and a list of reagents involved.
// Threatscale is a multiplier for the 'threat' of the grenade. If you're increasing the affected range drastically, you might want to improve this.
// Extra heat affects the temperature of the mixture, and may cause it to react in different ways.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chem_wiki_render.dm. ----------------------
//Generates a markdown txt file for use with the wiki
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generate the big list of reagent based reactions.
//Generate the big list of reaction based reactions.
//|Name | Reagents | Reaction vars | Description | Chem properties
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers.dm. ----------------------
//melts plastic beakers
//melts plastic beakers
//melts glass beakers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_dispenser.dm. ----------------------
///////////////
//Water Tanks//
///////////////
//////////////
//Fuel Tanks//
//////////////
///////////////////
//Misc Dispenders//
///////////////////
////////
//Kegs//
////////
//kegs given by the travelling trader's bartender subtype
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\colors.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\holder.dm. ----------------------
///////////////////////////////////////////////////////////////////////////////////
// Used in attack logs for reagents in pills and such
/**
 * Triggers metabolizing for all the reagents in this holder
 *
 * Arguments:
 * * mob/living/carbon/carbon - The mob to metabolize in, if null it uses [/datum/reagents/var/my_atom]
 * * delta_time - the time in server seconds between proc calls (when performing normally it will be 2)
 * * times_fired - the number of times the owner's life() tick has been called aka The number of times SSmobs has fired
 * * can_overdose - Allows overdosing
 * * liverless - Stops reagents that aren't set as [/datum/reagent/var/self_consuming] from metabolizing
 */
/*
 * Metabolises a single reagent for a target owner carbon mob. See above.
 *
 * Arguments:
 * * mob/living/carbon/owner - The mob to metabolize in, if null it uses [/datum/reagents/var/my_atom]
 * * delta_time - the time in server seconds between proc calls (when performing normally it will be 2)
 * * times_fired - the number of times the owner's life() tick has been called aka The number of times SSmobs has fired
 * * can_overdose - Allows overdosing
 * * liverless - Stops reagents that aren't set as [/datum/reagent/var/self_consuming] from metabolizing
 */
/// Signals that metabolization has stopped, triggering the end of trait-based effects
//Currently calculates it irrespective of required reagents at the start
//Returns the average specific heat for all reagents currently in this holder.
//two helper functions to preserve data across reactions (needed for xenoarch)
///
// Should be ran after using copy_data. Calls the reagent's post_copy_data, which usually does nothing.
///////////////////////////////////////////////////////////////////////////////////
// Convenience proc to create a reagents holder for an atom
// Max vol is maximum volume of holder
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents.dm. ----------------------
//Various reagents
//Toxin & acid reagents
//Hydroponics stuff
//Called when an reagent is incompatible with its processing carbon (e.g. robot carbon and reagent with only organic processing)
//called when a mob processes chems when dead.
// Called when this reagent is first added to a mob
// Called when this reagent is removed while inside a mob
// Called when this reagent first starts being metabolized by a liver
// Called when this reagent stops being metabolized by a liver
// Called after add_reagents creates a new reagent.
// Called when two reagents of the same are mixing.
//Ran by a reagent holder on a specific reagent after copying its data.
// Called when the reagent container is hit by an explosion
// Called if the reagent has passed the overdose threshold and is set to be triggering overdose effects
/**
  * New, standardized method for chemicals to affect hydroponics trays.
  * Defined on a per-chem level as opposed to by the tray.
  * Can affect plant's health, stats, or cause the plant to react in certain ways.
  */
//For easy bloodsucker disgusting and blood removal
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\chem_dispenser.dm. ----------------------
///An unique, less efficient model found in the medbay apothecary room.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\chem_heater.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\chem_master.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\chem_synthesizer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\pandemic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\reagentgrinder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\machinery\smoke_machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\alcohol_reagents.dm. ----------------------
////////////// I don't know who made this header before I refactored alcohols but I'm going to fucking strangle them because it was so ugly, holy Christ
// ALCOHOLS //
//////////////
/*
Boozepwr Chart
Note that all higher effects of alcohol poisoning will inherit effects for smaller amounts (i.e. light poisoning inherts from slight poisoning)
In addition, severe effects won't always trigger unless the drink is poisonously strong
All effects don't start immediately, but rather get worse over time; the rate is affected by the imbiber's alcohol tolerance

0: Non-alcoholic
1-10: Barely classifiable as alcohol - occassional slurring
11-20: Slight alcohol content - slurring
21-30: Below average - imbiber begins to look slightly drunk
31-40: Just below average - no unique effects
41-50: Average - mild disorientation, imbiber begins to look drunk
51-60: Just above average - disorientation, vomiting, imbiber begins to look heavily drunk
61-70: Above average - small chance of blurry vision, imbiber begins to look smashed
71-80: High alcohol content - blurry vision, imbiber completely shitfaced
81-90: Extremely high alcohol content - heavy toxin damage, passing out
91-100: Dangerously toxic - swift death
*/
//Another reference. Heals those in critical condition extremely quickly.
//Bugs should not drink Bug spray.
////////////////////
//Race-Base-Drinks//
////////////////////
///////////////
//Barrel Wine//
///////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\drink_reagents.dm. ----------------------
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////DRINKS BELOW, Beer is up there though, along with cola. Cap'n Pete's Cuban Spiced Rum//////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// i googled "natural coagulant" and a couple of results came up for banana peels, so after precisely 30 more seconds of research, i now dub grinding banana peels good for your blood
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\drug_reagents.dm. ----------------------
//Nicotine is used as a pesticide IRL.
//aphrodisiac & anaphrodisiac
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\food_reagents.dm. ----------------------
///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
// Part of the food code. Also is where all the food
// 	condiments, additives, and such go.
// Plants should not have sugar, they can't use it and it prevents them getting water/ nutients, it is good for mold though...
// Compost for EVERYTHING
////Lavaland Flora Reagents////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\impure_reagents.dm. ----------------------
//Reagents produced by metabolising/reacting fermichems inoptimally, i.e. inverse_chems or impure_chems
//Inverse = Splitting
//Invert = Whole conversion
//I'm concerned this is too weak, but I also don't want deathmixes.
//TODO: liver damage, 100+ heart
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\medicine_reagents.dm. ----------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// where all the reagents related to medicine go.
// The best stuff there is. For testing/debugging.
// Healing
//Goon Chems. Ported mainly from Goonstation. Easily mixable (or not so easily) and provide a variety of effects.
// FEED ME SEYMOUR
//Trek Chems, used primarily by medibots. Only heals a specific damage type, but is very efficient.
// Antitoxin binds plants pretty well. So the tox goes significantly down
//Earthsblood is still a wonderdrug. Just... don't expect to be able to mutate something that makes plants so healthy.
//used for changeling's adrenaline power
// helps bleeding wounds clot faster
// can be synthesized on station rather than bought. made by grinding a banana peel, heating it up, then mixing the banana peel powder with salglu
//Sloowly heals system corruption in robotic organisms. Causes mild toxins damage in nonrobots.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\other_reagents.dm. ----------------------
// FEED ME,SEYMOUR!
/*
 *	Water reaction to turf
 */
/*
 *	Water reaction to an object
 */
/*
 *	Water reaction to a mob
 */
///For weird backwards situations where water manages to get added to trays nutrients, as opposed to being snowflaked away like usual.
//We only get 30u to start with...
///Stronger kind of lube. Applies TURF_WET_SUPERLUBE.
//Citadel Races
//BLACKLISTED RACES
//DANGEROUS RACES
// You're an idiot for thinking that one of the most corrosive and deadly gasses would be beneficial
// You're an idiot for thinking that one of the most corrosive and deadly gasses would be beneficial
//Mutagenic chem side-effects.
// This is more bad ass, and pests get hurt by the corrosive nature of it, not the plant. The new trade off is it culls stability.
/////////////////////////Coloured Crayon Powder////////////////////////////
//For colouring in /proc/mix_color_from_reagents
//////////////////////////////////Hydroponics stuff///////////////////////////////
// GOON OTHERS
// Ash is also used IRL in gardening, as a fertilizer enhancer and weed killer
// Saltpetre is used for gardening IRL, to simplify highly, it speeds up growth and strengthens plants
// Liquid Carpets
// Virology virus food chems.
// Bee chemicals
//Misc reagents
///turn an object into a special material
//body bluids
//Nerdy card reagents
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\pyrotechnic_reagents.dm. ----------------------
//It has stable IN THE NAME. IT WAS MADE FOR THIS MOMENT.
// Smells like victory...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\reagents\toxin_reagents.dm. ----------------------
//////////////////////////Poison stuff (Toxins & Acids)///////////////////////
// Are you a bad enough dude to poison your own plants?
//Weed Spray
//Pest Spray
/*
	if(M.hud_used)
		if(current_cycle >= 20 && current_cycle%20 == 0)
			var/list/screens = list(M.hud_used.plane_masters["[FLOOR_PLANE]"], M.hud_used.plane_masters["[GAME_PLANE]"],
									M.hud_used.plane_masters["[LIGHTING_PLANE]"], M.hud_used.plane_masters["[WALL_PLANE]"],
									M.hud_used.plane_masters["[ABOVE_WALL_PLANE]"])
			var/rotation = min(round(current_cycle/20), 89) // By this point the player is probably puking and quitting anyway
			for(var/whole_screen in screens)
				animate(whole_screen, transform = matrix(rotation, MATRIX_ROTATE), time = 5, easing = QUAD_EASING, loop = -1)
				animate(transform = matrix(-rotation, MATRIX_ROTATE), time = 5, easing = QUAD_EASING)
	return ..()

/datum/reagent/toxin/rotatium/on_mob_end_metabolize(mob/living/M)
	if(M && M.hud_used)
		var/list/screens = list(M.hud_used.plane_masters["[FLOOR_PLANE]"], M.hud_used.plane_masters["[GAME_PLANE]"], M.hud_used.plane_masters["[LIGHTING_PLANE]"])
		for(var/whole_screen in screens)
			animate(whole_screen, transform = matrix(), time = 5, easing = QUAD_EASING)
	..()
*/
//ACID
// Sure, go ahead and pour acid on your precious plants. What's the worst that could happen?
// ACID II: UNHEEDED WARNINGS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\drugs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\medicine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\others.dm. ----------------------
//Technically a mutation toxin
////////////////////////////////// VIROLOGY //////////////////////////////////////////
////////////////////////////////// foam and foam precursor ///////////////////////////////////////////////////
/////////////////////////////// Cleaning and hydroponics /////////////////////////////////////////////////
//////////////////////////////////// Other goon stuff ///////////////////////////////////////////
//This is missing, I'm adding it back (see tgwiki). Not sure why we don't have it.
// Liquid Carpets
//////////////////////////////////// Glitter ///////////////////////////////////////////
//////////////////////////////////// Synthblood ///////////////////////////////////////////
//Nerdy card shit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\pyrotechnics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\slime_extracts.dm. ----------------------
//Grey
//Green
//Metal
//Gold
//Silver
//Blue
//Dark Blue
//Orange
//Yellow
//Purple
//Dark Purple
//Red
//Pink
//Black
//Oil
//Light Pink
//Adamantine
//Bluespace
//Cerulean
//Sepia
//Pyrite
//Rainbow :o)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\chemistry\recipes\toxins.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\blood_pack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\borghypo.dm. ----------------------
/*
Contains:
Borg Hypospray
Borg Shaker
Nothing to do with hydroponics in here. Sorry to dissapoint you.
*/
/*
Borg Hypospray
*/
// Use this to add more chemicals for the borghypo to produce.
/*
Borg Shaker
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\bottle.dm. ----------------------
//Not to be confused with /obj/item/reagent_containers/food/drinks/bottle
// Viro bottles
//Oldstation.dmm chemical storage bottles
//Ichors
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\chem_pack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\dropper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\glass.dm. ----------------------
//Mortar & Pestle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\hypospray.dm. ----------------------
//MediPens
//A vial-loaded hypospray. Cartridge-based!
// Gunna allow this for now, still really don't approve - Pooj
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\hypovial.dm. ----------------------
//hypovials used with the MkII hypospray. See hypospray.dm.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\maunamug.dm. ----------------------
//	fill_icon_state = "maunafilling"
//	fill_icon_thresholds = list(25)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\medspray.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\patch.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\pill.dm. ----------------------
///////////////////////////////////////// this pill is used only in a legion mob drop
//////////////////////////////////////// drugs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\rags.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\sleeper_buffer.dm. ----------------------
//Created if a sleeper is deconstructed, to contain the reagents within it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\spray.dm. ----------------------
//space cleaner
//Drying Agent
//spray tan
//pepperspray
// Fix pepperspraying yourself
//water flower
///Subtype used for the lavaland clown ruin.
//chemsprayer
// Plant-B-Gone
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\reagents\reagent_containers\syringes.dm. ----------------------
///Used by update_icon() and update_overlays()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\conveyor2.dm. ----------------------
//conveyor2 is pretty much like the original, except it supports corners, but not diverters.
//note that corner pieces transfer stuff clockwise when running forward, and anti-clockwise backwards.
// Auto conveyour is always on unless unpowered
// create a conveyor
// attack with item, place item on conveyor
// attack with hand, move pulled object onto conveyor
// make the conveyor broken
// also propagate inoperability to any connected conveyor with the same ID
//set the operable var if ID matches, propagating in the given direction
// the conveyor control switch
//
//
// update the icon depending on the position
// timed process
// if the switch changed, update the linked conveyors
// attack with hand, switch position
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\conveyor_sorter.dm. ----------------------
// credits to jjpark-kb, see Skyrat-SS13/Skyrat-tg#8790 and related files
// - hatterhat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\sortingmachinery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\bin.dm. ----------------------
// Disposal bin and Delivery chute.
//mouse drop another mob or self
// resist to escape the bin
// leave the disposal
// monkeys and xenos can only pull the flush lever
// eject the contents of the disposal unit
// called when area power changes
// called when holder is expelled from a disposal
//How disposal handles getting a storage dump from a storage object
// Disposal bin
// Holds items for disposal into pipe system
// Draws air from turf, gradually charges internal reservoir
// Once full (~1 atm), uses air resv to flush items into the pipes
// Automatically recharges air (unless off), will flush when ready if pre-set
// Can hold items and human size things, no other draggables
// attack by item places it in to disposal
// handle machine interaction
//timed process
//charge the gas reservoir and perform flush if ready
//Delivery Chute
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\construction.dm. ----------------------
// Disposal pipe construction
// This is the pipe that you drag around, not the attached ones.
// update iconstate and dpdir due to dir and type
// hide called by levelupdate if turf intact status changes
// change visibility status and force update of icon
// construction/deconstruction
// wrench: (un)anchor
// weldingtool: convert to real pipe
//helper proc that makes sure you can place the construct (i.e no dense objects stacking)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\eject.dm. ----------------------
// called when movable is expelled from a disposal pipe or outlet
// by default does nothing, override for special behaviour
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\holder.dm. ----------------------
// virtual disposal object
// travels through pipes in lieu of actual items
// contents will be items flushed by the disposal
// this allows the gas flushed to be tracked
// initialize a holder from the contents of a disposal unit
// start the movement process
// argument is the disposal unit the holder started in
// movement process, persists while holder is moving through pipes
// find the turf which should contain the next pipe
// find a matching pipe on a turf
// merge two holder objects
// used when a holder meets a stuck holder
// called when player tries to move while in a pipe
// called to vent all gas in holder to a location
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\multiz.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\outlet.dm. ----------------------
// the disposal outlet machine
// expel the contents of the holder object, then delete it
// called when the holder exits the outlet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\pipe.dm. ----------------------
// Disposal pipes
// pipe is deleted
// ensure if holder is present, it is expelled
// returns the direction of the next pipe object, given the entrance dir
// by default, returns the bitmask of remaining directions
// transfer the holder through this pipe segment
// overridden for special behaviour
// update the icon_state to reflect hidden status
// hide called by levelupdate if turf intact status changes
// change visibility status and force update of icon
// expel the held objects into a turf
// called when there is a break in the pipe
// pipe affected by explosion
//welding tool: unfasten and convert to obj/disposalconstruct
//checks if something is blocking the deconstruction (e.g. trunk with a bin still linked to it)
// called when pipe is cut with welder
// Straight/bent pipe segment
// A three-way junction with dir being the dominant direction
// next direction to move
// if coming in from secondary dirs, then next is primary dir
// if coming in from primary dir, then next is equal chance of other dirs
//a trunk joining to a disposal bin or outlet on the same turf
// would transfer to next pipe segment, but we are in a trunk
// if not entering from disposal bin,
// transfer to linked object (outlet or bin)
// a broken pipe
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\recycling\disposal\pipe_sorting.dm. ----------------------
// A three-way junction that sorts objects based on check_sorting(H) proc
// This is a base type, use subtypes on the map.
// Sorting check, to be overridden in subtypes
// Mail sorting junction, uses package tags to sort objects.
// Wrap sorting junction, sorts objects destined for the mail office mail table (tomail = 1)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\bepis.dm. ----------------------
//This system is designed to act as an in-between for cargo and science, and the first major money sink in the game outside of just buying things from cargo (As of 10/9/19, anyway).
//economics defined values, subject to change should anything be too high or low in practice.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs.dm. ----------------------
/***************************************************************
**						Design Datums						  **
**	All the data for building stuff.						  **
***************************************************************/
/*
For the materials datum, it assumes you need reagents unless specified otherwise. To designate a material that isn't a reagent,
you use one of the material IDs below. These are NOT ids in the usual sense (they aren't defined in the object or part of a datum),
they are simply references used as part of a "has materials?" type proc. They all start with a $ to denote that they aren't reagents.
The currently supporting non-reagent materials. All material amounts are set as the define MINERAL_MATERIAL_AMOUNT, which defaults to 2000

Don't add new keyword/IDs if they are made from an existing one (such as rods which are made from metal). Only add raw materials.

Design Guidelines
- When adding new designs, check rdreadme.dm to see what kind of things have already been made and where new stuff is needed.
- A single sheet of anything is 2000 units of material. Materials besides metal/glass require help from other jobs (mining for
other types of metals and chemistry for reagents).
- Add the AUTOLATHE tag to
*/
//DESIGNS ARE GLOBAL. DO NOT CREATE OR DESTROY THEM AT RUNTIME OUTSIDE OF INIT, JUST REFERENCE THEM TO WHATEVER YOU'RE DOING! //why are you yelling?
//DO NOT REFERENCE OUTSIDE OF SSRESEARCH. USE THE PROCS IN SSRESEARCH TO OBTAIN A REFERENCE.
////////////////////////////////////////
//Disks for transporting design datums//
////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\destructive_analyzer.dm. ----------------------
/*
Destructive Analyzer

It is used to destroy hand-held objects and advance technological research. Controls are in the linked R&D console.

Note: Must be placed within 3 tiles of the R&D Console
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\experimentor.dm. ----------------------
//this is designed to replace the destructive analyzer
//NEEDS MAJOR CODE CLEANUP
//////////////////////////////////SPECIAL ITEMS////////////////////////////////////////
//////////////// RELIC PROCS /////////////////////////////
//Admin Warning proc for relics
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\rdconsole.dm. ----------------------
/*
Research and Development (R&D) Console

This is the main work horse of the R&D system. It contains the menus/controls for the Destructive Analyzer, Protolathe, and Circuit
imprinter.

Basic use: When it first is created, it will attempt to link up to related devices within 3 squares. It'll only link up if they
aren't already linked to another console. Any consoles it cannot link up with (either because all of a certain type are already
linked or there aren't any in range), you'll just not have access to that menu. In the settings menu, there are menu options that
allow a player to attempt to re-sync with nearby consoles. You can also force it to disconnect from a specific console.

The only thing that requires toxins access is locking and unlocking the console on the settings menu.
Nothing else in the console has ID requirements.

*/
//Fuck TGUI.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\rdmachines.dm. ----------------------
//All devices that link into the R&D console fall into thise type for easy identification and some shared procs.
//to disconnect the machine from the r&d console it's linked to
//proc used to handle inserting items or reagents into rnd machines
//whether the machine can have an item inserted in its current state.
//we eject the loaded item when deconstructing the machine
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\research_disk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\server.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\stock_parts.dm. ----------------------
/*Power cells are in code\modules\power\cell.dm

If you create T5+ please take a pass at gene_modder.dm [L40]. Max_values MUST fit with the clamp to not confuse the user or cause possible exploits.*/
//Rating 1
//Rating 2
//Rating 3
//Rating 4
// Subspace stock parts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\anomaly\anomaly_core.dm. ----------------------
// Embedded signaller used in anomalies.
//Anomaly cores
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\anomaly\explosive_compressor.dm. ----------------------
/**
  * # Explosive compressor machines
  *
  * The explosive compressor machine used in anomaly core production.
  *
  * Uses the standard toxins/tank explosion scaling to compress raw anomaly cores into completed ones. The required explosion radius increases as more cores of that type are created.
  */
/**
  * Says (no, literally) the data of required explosive power for a certain anomaly type.
  */
/**
  * Determines how much explosive power (last value, so light impact theoretical radius) is required to make a certain anomaly type.
  *
  * Returns null if the max amount has already been reached.
  *
  * Arguments:
  * * anomaly_type - anomaly type define
  */
/**
  * The ""explosion"" proc.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\anomaly\raw_anomaly.dm. ----------------------
/**
  * # Raw Anomaly Cores
  *
  * The current precursor to anomaly cores, these are manufactured into 'finished' anomaly cores for use in research, items, and more.
  *
  * The current amounts created is stored in SSresearch.created_anomaly_types[ANOMALY_CORE_TYPE_DEFINE] = amount
  * The hard limits are in code/__DEFINES/anomalies.dm
  */
/**
  * Created the resulting core after being "made" into it.
  *
  * Arguments:
  * * newloc - Where the new core will be created
  * * del_self - should we qdel(src)
  * * count_towards_limit - should we increment the amount of created cores on SSresearch
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\AI_module_designs.dm. ----------------------
///////////////////////////////////
//////////AI Module Disks//////////
///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autobotter_designs.dm. ----------------------
///////////////////////////////////
//////////AutoBottler Designs//////
///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autoylathe_designs.dm. ----------------------
//because why not make a boxed kit with all of the lastag shit?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\biogenerator_designs.dm. ----------------------
///////////////////////////////////
///////Biogenerator Designs ///////
///////////////////////////////////
//Please be wary to not add inorganic items to the results such as generic glass bottles and metal.
//as they kind of defeat the design of this feature.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\bluespace_designs.dm. ----------------------
/////////////////////////////////////////
//////////////Blue Space/////////////////
/////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\computer_part_designs.dm. ----------------------
////////////////////////////////////////
///////////Computer Parts///////////////
////////////////////////////////////////
// Network cards
// Data disks
// Card slot
// Intellicard slot
// Mini printer
// APC Link
// Batteries
// Processor unit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\electronics_designs.dm. ----------------------
///////////////////////////////////
/////Non-Board Computer Stuff//////
///////////////////////////////////
///////////////////////////////////
//////////Nanite Devices///////////
///////////////////////////////////
////////////////////////////////////////
//////////Disk Construction Disks///////
////////////////////////////////////////
//CIT ADDITIONS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\equipment_designs.dm. ----------------------
/*
/datum/design/flightsuit
	name = "Flight Suit"
	desc = "A specialized hardsuit that is able to attach a flightpack and accessories.."
	id = "flightsuit"
	build_type = PROTOLATHE
	build_path = /obj/item/clothing/suit/space/hardsuit/flightsuit
	materials = list(/datum/material/iron=16000, /datum/material/glass = 8000, /datum/material/diamond = 200, /datum/material/gold = 3000, /datum/material/silver = 3000, /datum/material/titanium = 16000)	//This expensive enough for you?
	construction_time = 250
	category = list("Misc")
	departmental_flags = DEPARTMENTAL_FLAG_ENGINEERING

/datum/design/flightpack
	name = "Flight Pack"
	desc = "An advanced back-worn system that has dual ion engines powerful enough to grant a humanoid flight. Contains an internal self-recharging high-current capacitor for short, powerful boosts."
	id = "flightpack"
	build_type = PROTOLATHE
	build_path = /obj/item/flightpack
	materials = list(/datum/material/iron=16000, /datum/material/glass = 8000, /datum/material/diamond = 4000, /datum/material/gold = 12000, /datum/material/silver = 12000, /datum/material/uranium = 20000, /datum/material/plasma = 16000, /datum/material/titanium = 16000)	//This expensive enough for you?
	construction_time = 250
	category = list("Misc")
	departmental_flags = DEPARTMENTAL_FLAG_ENGINEERING

/datum/design/flightshoes
	name = "Flight Shoes"
	desc = "Flight shoes, attachable to a flight suit to provide additional functions."
	id = "flightshoes"
	build_type = PROTOLATHE
	build_path = /obj/item/clothing/shoes/flightshoes
	materials = list(/datum/material/iron = 5000, /datum/material/glass = 5000, /datum/material/gold = 1500, /datum/material/silver = 1500, /datum/material/plasma = 2000, /datum/material/titanium = 2000)
	construction_time = 100
	category = list("Misc")
	departmental_flags = DEPARTMENTAL_FLAG_ENGINEERING */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\limbgrower_designs.dm. ----------------------
/////////////////////////////////////
//////////Limb Grower Designs ///////
/////////////////////////////////////
//Extra limbs
//Organs
//genitals
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\mecha_designs.dm. ----------------------
///////////////////////////////////
//////////Mecha Module Disks///////
///////////////////////////////////
////////////////////////////////////////
/////////// Mecha Equpment /////////////
////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\mechfabricator_designs.dm. ----------------------
//Cyborg
//Ripley
//firefighter subtype
//Odysseus
//Gygax
//Medical Gygax
//Durand
//H.O.N.K
//Phazon
//Exosuit Equipment
/////////////////////////////////////////
//////////////Borg Upgrades//////////////
/////////////////////////////////////////
/* moved to modular_sand
/datum/design/borg_upgrade_expand
	name = "Cyborg Upgrade (Expand)"
	id = "borg_upgrade_expand"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/expand
	materials = list(/datum/material/iron=200000, /datum/material/titanium=5000)
	construction_time = 120
	category = list("Cyborg Upgrade Modules")
*/
//Misc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\medical_designs.dm. ----------------------
/////////////////////////////////////////
////////////Medical Tools////////////////
/////////////////////////////////////////
////////////////////////////////////////
//////////Body Bags/////////////////////
////////////////////////////////////////
////////////////////////////////////////
//////////Defibrillator Tech////////////
////////////////////////////////////////
/////////////////////////////////////////
//////////Cybernetic Implants////////////
/////////////////////////////////////////
/////////////////////////////////////////
////////////Regular Implants/////////////
/////////////////////////////////////////
//Cybernetic organs
/////////////////////
/////Synth Organs////
/////////////////////
/////////////////////
///Surgery Designs///
/////////////////////
/////////////////////////////////////////
////////////Medical Prosthetics//////////
/////////////////////////////////////////
/////////////////////////////////////////
////////////     Plumbing      //////////
/////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\mining_designs.dm. ----------------------
/////////////////////////////////////////
/////////////////Mining//////////////////
/////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\misc_designs.dm. ----------------------
/////////////////////////////////////////
/////////////////HUDs////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
//////////////////Misc///////////////////
/////////////////////////////////////////
/////////////////////////////////////////
////////////Janitor Designs//////////////
/////////////////////////////////////////
/////////////////////////////////////////
////////////Holosign Designs/////////////
/////////////////////////////////////////
/*
/datum/design/holosignfirelock
	name = "ATMOS Holofirelock Projector"
	desc = "A holographic projector that creates holographic barriers that prevent changes in temperature conditions."
	id = "holosignfirelock"
	build_type = PROTOLATHE
	materials = list(/datum/material/iron = 5000, /datum/material/glass = 1000, /datum/material/gold = 1000, /datum/material/silver = 1000)
	build_path = /obj/item/holosign_creator/firelock
	category = list("Tool Designs")
	departmental_flags = DEPARTMENTAL_FLAG_ENGINEERING
*/
///////////////////////////////
////////////Tools//////////////
///////////////////////////////
/////////////////////////////////////////
/////////////////Armour//////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////Security////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////Meteors/////////////////
/////////////////////////////////////////
/////////////////////////////////////////
////////////Tackle Gloves////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////Internal Tanks//////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////Tape////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////Shuttle Upgrades////////
/////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\mod_designs.dm. ----------------------
//MODsuit construction
//MODsuit modules
//MODsuit anomalock modules
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\nanite_designs.dm. ----------------------
////////////////////UTILITY NANITES//////////////////////////////////////
//new era add
////////////////////MEDICAL NANITES//////////////////////////////////////
////////////////////AUGMENTATION NANITES//////////////////////////////////////
////////////////////DEFECTIVE NANITES//////////////////////////////////////
////////////////////WEAPONIZED NANITES/////////////////////////////////////
////////////////////SUPPRESSION NANITES//////////////////////////////////////
////////////////////SENSOR NANITES//////////////////////////////////////
////////////////////NANITE PROTOCOLS//////////////////////////////////////
//Note about the category name: The UI cuts the last 8 characters from the category name to remove the " Nanites" in the other categories
//Because of this, Protocols was getting cut down to "P", so i had to add some padding
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\power_designs.dm. ----------------------
////////////////////////////////////////
//////////////////Power/////////////////
////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\smelting_designs.dm. ----------------------
///////SMELTABLE ALLOYS///////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\stock_parts_designs.dm. ----------------------
////////////////////////////////////////
/////////////Stock Parts////////////////
////////////////////////////////////////
//Capacitors
//Scanning modules
//Maipulators
//Micro-lasers
// Matter Bins
//T-Comms devices
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\telecomms_designs.dm. ----------------------
///////////////////////////////////
/////Subspace Telecomms////////////
///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\tool_designs.dm. ----------------------
/////////////////////////////////////////
/////////////////Tools///////////////////
/////////////////////////////////////////
/////////////////////////////////////////
//////////////Alien Tools////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////Alien Surgical Tools////////////
/////////////////////////////////////////
//////////////////////
//Adv. Surgery Tools//
//////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\weapon_designs.dm. ----------------------
///////////////////////////////
///////Weapons & Ammo//////////
///////////////////////////////
//////////////
//Ammo Boxes//
//////////////
//////////////////
//Mag-Rifle Mags//
//////////////////
//////////////
//WT550 Mags//
//////////////
//////////////
//Ammo Shells/
//////////////
//////////////
//Firing Pins/
//////////////
//////////////
//Guns////////
//////////////
///////////
//Grenades/
///////////
///////////
//Shields//
///////////
//////////
//MISC////
//////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_construction.dm. ----------------------
///////////////////////////////////
//////////Autolathe Designs////////
///////////////////////////////////
//////////////////
///Construction///
//////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_electronics.dm. ----------------------
///////////////////////////////////
//////////Autolathe Designs ///////
///////////////////////////////////
////////////////
///Electronics//
////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_medical_and_dinnerware.dm. ----------------------
///////////////////////////////////
//////////Autolathe Designs ///////
///////////////////////////////////
////////////////
////Dinnerware//
////////////////
////////////
///Medical//
////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_sec_and_hacked.dm. ----------------------
///////////////////////////////////
//////////Autolathe Designs ///////
///////////////////////////////////
/////////////
////Secgear//
/////////////
/////////////////
///Hacked Gear //
/////////////////
/////////////////
//   Bullets   //
/////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_tcomms_and_misc.dm. ----------------------
///////////////////////////////////
//////////Autolathe Designs ///////
///////////////////////////////////
/////////////
////T-Comms//
/////////////
/////////////
////MISC/////
/////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\autolathe_desings\autolathe_designs_tools.dm. ----------------------
///////////////////////////////////
/////////Autolathe Designs/////////
///////////////////////////////////
///////////
///Tools///
///////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_all_misc.dm. ----------------------
///////////////////Computer Boards///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_cargo.dm. ----------------------
///////////////////
///CARGO Boards////
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_engi.dm. ----------------------
///////////////////
///ENGINE Boards///
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_medical.dm. ----------------------
///////////////////
///MEDICAL Boards//
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_sci.dm. ----------------------
///////////////////
///SCI Boards//////
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\comp_board_designs\comp_board_designs_sec.dm. ----------------------
///////////////////
///SECURITY Boards/
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_all_misc.dm. ----------------------
////////////////////////////////////////
//////////////MISC Boards///////////////
////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_cargo.dm. ----------------------
///////////////////
///CARGO Boards//
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_engi.dm. ----------------------
///////////////////
///ENGINE Boards///
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_medical.dm. ----------------------
///////////////////
///MEDICAL Boards//
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_sci.dm. ----------------------
///////////////////
///SCI Boards//////
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\designs\machine_desings\machine_designs_service.dm. ----------------------
///////////////////
///CIV Boards///
///////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\circuit_imprinter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\departmental_circuit_imprinter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\departmental_protolathe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\departmental_techfab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\protolathe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\techfab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\machinery\_production.dm. ----------------------
//we eject the materials upon deconstruction.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_chamber.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_chamber_computer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_cloud_controller.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_misc_items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programmer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs.dm. ----------------------
/**
  * Checks if we're a permanent program
  */
///Register extra settings by overriding this.
///extra_settings[name] = new typepath() for each extra setting
///You can override this if you need to have special behavior after setting certain settings.
///You probably shouldn't be overriding this one, but I'm not a cop.
///Used for getting information about the extra settings to the frontend
///Copy of the list instead of direct reference for obvious reasons
//If false, disables active, passive effects, and triggers without consuming nanites
//Can be used to avoid consuming nanites for nothing
//Constantly procs as long as the program is active
//Procs once when the program activates
//Procs once when the program deactivates
//Checks conditions then fires the nanite trigger effect
//Nanite trigger effect, requires can_trigger to be used
/**
  * Attempts to destroy ourselves
  */
///A nanite program containing a behaviour protocol. Only one protocol of each class can be active at once.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_program_hub.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_remote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\program_disks.dm. ----------------------
//Names are intentionally all the same - track your nanites, or use a hand labeler
//This also means that you can give flesh melting nanites to your victims if you feel like it
//new era add
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\public_chamber.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\rules.dm. ----------------------
//TODO allow inversion
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\extra_settings\boolean.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\extra_settings\number.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\extra_settings\text.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\extra_settings\type.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\extra_settings\_extra_setting.dm. ----------------------
//I made the choice to send the name as part of the parameter instead of storing it directly on
//this datum as a way of avoiding duplication of data between the containing assoc list
//and this datum.
//Also make sure to double wrap the list when implementing this as
//+= is interpreted as a combine on lists, so the outer list gets unwrapped
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\buffing.dm. ----------------------
//Programs that buff the host in generally passive ways.
//TODO on_hit effect that turns skin grey for a moment
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\healing.dm. ----------------------
//Programs that heal the host in some way.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\protocols.dm. ----------------------
//Replication Protocols
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\rogue.dm. ----------------------
//Programs generated through degradation of other complex programs.
//They generally cause minor damage or annoyance.
//Last stop of the error train
//Generic body-affecting programs will decay into this
//Programs that don't directly interact with the body will decay into this
//Generic blood-affecting programs will decay into this
//Generic brain-affecting programs will decay into this
//Generic brain-affecting programs can also decay into this
//Generic skin-affecting programs will decay into this
//Generic nerve-affecting programs will decay into this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\sensor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\suppression.dm. ----------------------
//Programs that are generally useful for population control and non-harmful suppression.
//Can receive transmissions from a nanite communication remote for customized messages
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\utility.dm. ----------------------
//Programs that interact with other programs or nanites directly, or have other special purposes.
//Syncs the nanites with the cumulative current mob's access level. Can potentially wipe existing access.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\nanites\nanite_programs\weapon.dm. ----------------------
//Programs specifically engineered to cause harm to either the user or its surroundings (as opposed to ones that only do it due to broken programming)
//Very dangerous!
//TODO make it defuse if triggered again
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\_techweb.dm. ----------------------
//Used \n[\s]*origin_tech[\s]*=[\s]*"[\S]+" to delete all origin techs.
//Or \n[\s]*origin_tech[\s]*=[\s]list\([A-Z_\s=0-9,]*\)
//Used \n[\s]*req_tech[\s]*=[\s]*list\(["a-z\s=0-9,]*\) to delete all req_techs.
//Techweb datums are meant to store unlocked research, being able to be stored on research consoles, servers, and disks. They are NOT global.
//Laggy procs to do specific checks, just in case. Don't use them if you can just use the vars that already store all this!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\_techweb_node.dm. ----------------------
//Techweb nodes are GLOBAL, there should only be one instance of them in the game. Persistant changes should never be made to them in-game.
//USE SSRESEARCH PROCS TO OBTAIN REFERENCES. DO NOT REFERENCE OUTSIDE OF SSRESEARCH OR YOU WILL FUCK UP GC.
//Base Nodes, everything starts from here.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\__techweb_helpers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\alien_nodes.dm. ----------------------
////////////////////////Alien technology////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\bepis_nodes.dm. ----------------------
////////////////////////B.E.P.I.S. Locked Techs////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\biotech_nodes.dm. ----------------------
/////////////////////////Biotech/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\bluespace_nodes.dm. ----------------------
/////////////////////////Bluespace tech/////////////////////////
/////////////////////////shuttle tech/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\computer_hud_nodes.dm. ----------------------
////////////////////////Computer tech////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\engineering_nodes.dm. ----------------------
/////////////////////////engineering tech/////////////////////////
/*
/datum/techweb_node/basic_meteor_defense
	id = "basic_meteor_defense"
	display_name = "Meteor Defense Research"
	description = "Unlock the potential of the mysterious of why CC decided to not build these around the station themselves."
	prereq_ids = list("adv_engi", "high_efficiency")
	design_ids = list("meteor_defence", "meteor_console")

/datum/techweb_node/adv_meteor_defense
	id = "adv_meteor_defense"
	display_name = "Meteor Defense Research"
	description = "New and improved coding and lock on tech for meteor defence!"
	prereq_ids = list("basic_meteor_defense", "adv_datatheory", "emp_adv")
	design_ids = list("meteor_disk")
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\export_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\mecha_nodes.dm. ----------------------
////////////////////////mech technology////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\medical_nodes.dm. ----------------------
////////////////////////Medical////////////////////////
//////////////////////Cybernetics/////////////////////
/////////////////////////Advanced Surgery/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\misc_nodes.dm. ----------------------
/////////////////////////data theory tech/////////////////////////
/////////////////////////plasma tech/////////////////////////
/////////////////////////EMP tech/////////////////////////
/////////////////////////Clown tech/////////////////////////
////////////////////////Tape tech////////////////////////////
// now a BEPIS locked thing
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\mod_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\nanites_nodes.dm. ----------------------
/////////////////////////Nanites/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\robotics_nodes.dm. ----------------------
/////////////////////////robotics tech/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\syndicate_nodes.dm. ----------------------
//Helpers for debugging/balancing the techweb in its entirety!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\tools_nodes.dm. ----------------------
////////////////////////Tools////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\techweb\nodes\weaponry_nodes.dm. ----------------------
/////////////////////////weaponry tech/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\xenobiology.dm. ----------------------
/// Slime Extracts ///
//Effect when activated by a Luminescent. Separated into a minor and major effect. Returns cooldown in deciseconds.
//Core-crossing: Feeding adult slimes extracts to obtain a much more powerful, single extract.
////Slime-derived potions///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\xenobio_camera.dm. ----------------------
//Xenobio control console
//Demodularized Code
//Xenobio Hotkeys Port
//
// Alternate clicks for slime, monkey and open turf if using a xenobio console
// Scans slime
//Feeds a potion to slime
//Picks up slime
//Place slimes
//Place monkey
//Pick up monkey
// Scans slime
//Feeds a potion to slime
//Picks up slime
//Place slimes
//Place monkey
//Pick up monkey
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\burning.dm. ----------------------
/*
Burning extracts:
	Have a unique, primarily offensive effect when
	filled with 10u plasma and activated in-hand.
*/
//Misc. things added
//Rewind camera - I'm already Burning Sepia
//Timefreeze camera - Old Burning Sepia result. Kept in case admins want to spawn it
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\charged.dm. ----------------------
/*
Charged extracts:
	Have a unique, effect when filled with
	10u plasma and activated in-hand, related to their
	normal extract effect.
*/
////////////Unique things.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\chilling.dm. ----------------------
/*
Chilling extracts:
	Have a unique, primarily defensive effect when
	filled with 10u plasma and activated in-hand.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\consuming.dm. ----------------------
/*
Consuming extracts:
	Can eat food items.
	After consuming enough, produces special cookies.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\industrial.dm. ----------------------
/*
Industrial extracts:
	Slowly consume plasma, produce items with it.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\prismatic.dm. ----------------------
/*
Prismatic extracts:
	Becomes an infinite-use paintbrush.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\recurring.dm. ----------------------
/*
Recurring extracts:
	Generates a new charge every few seconds.
	If depleted of its' last charge, stops working.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\regenerative.dm. ----------------------
/*
Regenerative extracts:
	Work like a legion regenerative core.
	Has a unique additional effect.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\reproductive.dm. ----------------------
/*
Reproductive extracts:
	When fed three monkey cubes, produces between
	1 and 4 normal slime extracts of the same colour.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\selfsustaining.dm. ----------------------
/*
Self-sustaining extracts:
	Produces 4 extracts that do not need reagents.
*/
//Just divides into the actual item.
//Different types.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\stabilized.dm. ----------------------
/*
Stabilized extracts:
	Provides a passive buff to the holder.
*/
//To add: Create an effect in crossbreeding/_status_effects.dm with the name "/datum/status_effect/stabilized/[color]"
//Status effect will automatically be applied while held, and lost on drop.
//Colors and subtypes:
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\_clothing.dm. ----------------------
/*
Slimecrossing Armor
	Armor added by the slimecrossing system.
	Collected here for clarity.
*/
//Rebreather mask - Chilling Blue
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\_misc.dm. ----------------------
//Barrier cube - Chilling Grey
//Slime barricade - Chilling Grey
//Melting Gel Wall - Chilling Metal
//Rainbow barrier - Chilling Rainbow
//Ration pack - Chilling Silver
//Ice stasis block - Chilling Dark Blue
//Gold capture device - Chilling Gold
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\_mobs.dm. ----------------------
//Slime corgi - Chilling Pink
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\_status_effects.dm. ----------------------
///////////////////////////////////////////////////////
//////////////////CONSUMING EXTRACTS///////////////////
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
//////////////////STABILIZED EXTRACTS//////////////////
///////////////////////////////////////////////////////
//Stabilized effects start below.
//Bluespace has an icon because it's kinda active.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\_weapons.dm. ----------------------
//Bloodchiller - Chilling Green
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\research\xenobiology\crossbreeding\__corecross.dm. ----------------------
//////////////////////////////////////////////
//////////     SLIME CROSSBREEDS    //////////
//////////////////////////////////////////////
// A system of combining two extract types. //
// Performed by feeding a slime 20 of an    //
// extract color.                           //
//////////////////////////////////////////////
/*==========================================*\
To add a crossbreed:
	The file name is automatically selected
	by the crossbreeding effect, which uses
	the format slimecross/[modifier]/[color].

	If a crossbreed doesn't exist, don't
	worry. If no file is found at that
	location, it will simple display that
	the crossbreed was too unstable.

	As a result, do not feel the need to
	try to add all of the crossbred
	effects at once, if you're here and
	trying to make a new slime type. Just
	get your slimetype in the codebase and
	get around to the crossbreeds eventually!
\*==========================================*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavaland_ruin_code.dm. ----------------------
//If you're looking for spawners like ash walker eggs, check ghost_role_spawners.dm
///Wizard tower item
//lavaland_surface_seed_vault.dmm
//Seed Vault
//Free Golems
//made with xenobiology, the golem obeys its creator
///Syndicate Listening Post
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\icemoonruin_code\hotsprings.dm. ----------------------
/**
  * Turns whoever enters into a mob
  *
  * If mob is chosen, turns the person into a random animal type
  * Once the spring is used, it cannot be used by the same mind ever again
  * After usage, teleports the user back to a random safe turf (so mobs are not killed by ice moon atmosphere)
  *
  */
/**
  * Deletes minds from the cursed minds list after their deletion
  *
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\icemoonruin_code\library.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\alien_nest.dm. ----------------------
//Aliens for the alien nest space ruin.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\biodome_clown_planet.dm. ----------------------
//////lavaland clown planet papers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\elephantgraveyard.dm. ----------------------
//******Decoration objects
//***Bone statues and giant skeleton parts.
//***Wasteland floor and rock turfs here.
//***Oil well puddles.
//***Grave mounds.
//***Fluff items for lore/intrigue
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\pizzaparty.dm. ----------------------
//lavaland_surface_pizzaparty.dmm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\puzzle.dm. ----------------------
//Gets the turf where the tile with given id should be
//swap two tiles in same row
//Set the full image on the turf and delete yourself
//Admin abuse version so you can pick the icon before it sets up
//Ruin version
//Prison cube version
//Some armor so it's harder to kill someone by mistake.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\sloth.dm. ----------------------
///////////	lavaland slot ruin items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\surface.dm. ----------------------
//////lavaland surface papers
//ratvar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\lavalandruin_code\syndicate_base.dm. ----------------------
//lavaland_surface_syndicate_base1.dmm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\objects_and_mobs\ash_walker_den.dm. ----------------------
//The ash walker den consumes corpses or unconscious mobs to create ash walker eggs. For more info on those, check ghost_role_spawners.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\objects_and_mobs\necropolis_gate.dm. ----------------------
//The necropolis gate is used to call forth Legion from the Necropolis.
//stone tiles for boss arenas
//cracked stone tiles
//burnt stone tiles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\objects_and_mobs\sin_ruins.dm. ----------------------
//These objects are used in the cardinal sin-themed ruins (i.e. Gluttony, Pride...)
//can't be bothered to do sloth right now, will make later
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\asteroid4.dm. ----------------------
///////////	asteroid4 items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\bigderelict1.dm. ----------------------
///////////	bigderelict1 items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\caravanambush.dm. ----------------------
//caravan ambush
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\clericsden.dm. ----------------------
///////////	cleric's den items.
//Primary reward: the cleric's mace design disk.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\cloning_lab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\crashedclownship.dm. ----------------------
///////////	crashedclownship items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\crashedship.dm. ----------------------
//	crashedship / packer ship
//Areas
//	crashedship items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\deepstorage.dm. ----------------------
///////////	deepstorage items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\DJstation.dm. ----------------------
///////////	djstation items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\hilbertshotel.dm. ----------------------
/// This is a BLOCKING OPERATION. Note the room load call, and the block reservation calls.
//Template Stuff
//Turfs and Areas
//If only this could be simplified...
//Space Ruin stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\listeningstation.dm. ----------------------
///////////	listening station
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\miracle.dm. ----------------------
///////////	miracle ruin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\oldstation.dm. ----------------------
///////////	Oldstation items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\originalcontent.dm. ----------------------
///////////	originalcontent items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\skelter.dm. ----------------------
///////////	skelter items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\spacehotel.dm. ----------------------
///////////	spacehotel items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\TheDerelict.dm. ----------------------
///////////	thederelict items
/// Vault controller for use on the derelict/KS13.
//Checks for cable connection, charges if possible.
///Looks for a cable connection beneath the machine.
///Initializes airlock links.
///Tries to charge from powernet excess, no upper limit except max charge.
///Handles the doors closing
///Handles the doors opening
///Attempts to lock the vault doors
///Attempts to unlock the vault doors
///Attempts to lock/unlock vault doors, if machine is charged.
///Airlock that can't be deconstructed, broken or hacked.
///Overrides screwdriver attack to prevent all deconstruction and hacking.
// So drones can teach borgs and AI dronespeak. For best effect, combine with mother drone lawset.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\ruins\spaceruin_code\whiteshipruin_box.dm. ----------------------
///////////	ruined whiteship
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\security_levels\keycard_authentication.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\security_levels\security_levels.dm. ----------------------
//SEC_LEVEL_GREEN = code green
//SEC_LEVEL_BLUE = code blue
//SEC_LEVEL_AMBER = code amber
//SEC_LEVEL_RED = code red
//SEC_LEVEL_DELTA = code delta
//config.alert_desc_blue_downto
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shielding\helpers.dm. ----------------------
//////// HELPER FILE FOR SHIELDING /////////
// HULL SHIELD GENERATION HELPERS
/**
  * Gets hull exterior adjacent tiles of a certain area
  * Area method.
  * EXPENSIVE.
  * If the area itself is already considered exterior, it'll find all tiles inside it that's next to an interior area.
  */
/**
  * Gets hull adjacent exterior tiles of an entire zlevel
  * EXPENSIVE.
  * Gets the tiles in the exterior area touching to a non-exterior area
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\arrivals.dm. ----------------------
//If this proc is high on the profiler add a cooldown to the stuff after this line
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\assault_pod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\computer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\custom_shuttle.dm. ----------------------
//Custom shuttle docker locations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\docking.dm. ----------------------
/// This is the main proc. It instantly moves our mobile port to stationary port `new_dock`.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\elevator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\emergency.dm. ----------------------
/**
 * Signal handler for checking if we should lock or unlock escape pods accordingly to a newly set security level
 *
 * Arguments:
 * * source The datum source of the signal
 * * new_level The new security level that is in effect
 */
//Pod suits/pickaxes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\ferry.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\manipulator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\monastery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\navigation_computer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\on_move.dm. ----------------------
/*
All ShuttleMove procs go here
*/
/************************************Base procs************************************/
// Called on every turf in the shuttle region, returns a bitflag for allowed movements of that turf
// returns the new move_mode (based on the old)
// Called from the new turf before anything has been moved
// Only gets called if fromShuttleMove returns true first
// returns the new move_mode (based on the old)
// Called on the old turf to move the turf data
// Called on the new turf after everything has been moved
/////////////////////////////////////////////////////////////////////////////////////
// Called on every atom in shuttle turf contents before anything has been moved
// returns the new move_mode (based on the old)
// WARNING: Do not leave turf contents in beforeShuttleMove or dock() will runtime
// Called on atoms to move the atom to the new location
// Called on atoms after everything has been moved
/////////////////////////////////////////////////////////////////////////////////////
// Called on areas before anything has been moved
// returns the new move_mode (based on the old)
// Called on areas to move their turf between areas
// Called on areas after everything has been moved
/************************************Turf move procs************************************/
/************************************Area move procs************************************/
/************************************Machinery move procs************************************/
/************************************Item move procs************************************/
/************************************Mob move procs************************************/
/************************************Structure move procs************************************/
/************************************Misc move procs************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\ripple.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle.dm. ----------------------
//use this define to highlight docking port bounding boxes (ONLY FOR DEBUG USE)
//NORTH default dir
///returns a list(x0,y0, x1,y1) where points 0 and 1 are bounding corners of the projected rectangle
///returns turfs within our projected rectangle in no particular order
///returns turfs within our projected rectangle in a specific order.this ensures that turfs are copied over in the same order, regardless of any rotation
//Debug proc used to highlight bounding area
//return first-found touching dockingport
// Return id of the docked docking_port
// Say that A in the absolute (rectangular) bounds of this shuttle or no.
//returns first-found touching shuttleport
// Called after the shuttle is loaded from template
//this is a hook for custom behaviour. Maybe at some point we could add checks to see if engines are intact
//this is to check if this shuttle can physically dock at dock S
//call the shuttle to destination S
//recall the shuttle to where it was previously
// Never move the shuttle import landmark, otherwise things get WEIRD
//used by shuttle subsystem to check timers
//returns timeLeft
// returns 3-letter mode string, used by status screens and mob status panel
// returns 5-letter timer string, used by status screens and mob status panel
/**
 * Gets shuttle location status in a form of string for tgui interfaces
 */
// attempts to locate /obj/machinery/computer/shuttle with matching ID inside the shuttle
// Losing all initial engines should get you 2
// Adding another set of engines at 0.5 time
// Double initial engines to get to 0.5 minimum
// Lose all initial engines to get to 2
//For 0 engine shuttles like BYOS 5 engines to get to doublespeed
//Called when emergency shuttle leaves the station
//Called when emergency shuttle docks at centcom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_rotate.dm. ----------------------
/*
All shuttleRotate procs go here

If ever any of these procs are useful for non-shuttles, rename it to proc/rotate and move it to be a generic atom proc
*/
/************************************Base proc************************************/
/************************************Turf rotate procs************************************/
/************************************Mob rotate procs************************************/
//override to avoid rotating pixel_xy on mobs
/************************************Structure rotate procs************************************/
//Fixes dpdir on shuttle rotation
/************************************Machine rotate procs************************************/
//prevents shuttles attempting to rotate this since it messes up sprites
//prevents shuttles attempting to rotate this since it messes up sprites
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\snaxi.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\spaceship_navigation_beacon.dm. ----------------------
// update the icon_state
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\special.dm. ----------------------
// Special objects for shuttle templates go here if nowhere else
// Wabbajack statue, a sleeping frog statue that shoots bolts of change if
// living carbons are put on its altar/tables
// Bar staff, GODMODE mobs that just want to make sure people have drinks
// and a good time.
// Bar table, a wooden table that kicks you in a direction if you're not
// barstaff (defined as someone who was a roundstart bartender or someone
// with CENTCOM_BARSTAFF)
//Luxury Shuttle Blockers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\supply.dm. ----------------------
/// How many goody orders we can fit in a lockbox before we upgrade to a crate
/// How much to charge oversized goody orders
// fuc off
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\syndicate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\white_ship.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_creator.dm. ----------------------
//============ Shuttle Creator Object ============
//=========== shuttle designation actions ============
//Go through all the all_turfs and check which direction doesn't have the shuttle
//Checks an area to ensure that the turfs provided are valid to be made into a shuttle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_creator_actions.dm. ----------------------
//============ Actions ============
//Add an area
//Add a single turf
//Clear a single entire area
//Clear the entire area
//Finish the shuttle
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_creator_console.dm. ----------------------
//============The internal camera console used for designating the area=============
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_creator_eye.dm. ----------------------
//===============Camera Eye================
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_creator_overlay.dm. ----------------------
/*
 * Manages the overlays for the shuttle creator drone.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\shuttle\shuttle_creation\shuttle_upgrades.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\smithing\anvil.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\smithing\finished_items.dm. ----------------------
///////////////////////////
//        Mining         //
///////////////////////////
///////////////////////////
//        Spears         //
///////////////////////////
//////////////////////////
//      Other Melee     //
///////////////////////////
//unique hammers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\smithing\furnace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\smithing\smithed_items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell.dm. ----------------------
/**
  * can_target: Checks if we are allowed to cast the spell on a target.
  *
  * Arguments:
  * * target The atom that is being targeted by the spell.
  * * user The mob using the spell.
  * * silent If the checks should not give any feedback messages.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\aimed.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\area_teleport.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\bloodcrawl.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\charge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\cluwnecurse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\cone_spells.dm. ----------------------
///This proc creates a list of turfs that are hit by the cone
///This proc does obj, mob and turf cone effects on all targets in a list
///This proc deterimines how the spell will affect turfs.
///This proc deterimines how the spell will affect objects.
///This proc deterimines how the spell will affect mobs.
///This proc adjusts the cones width depending on the level.
///This type of cone gradually affects each level of the cone instead of affecting the entire area at once.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\conjure.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\construct_spells.dm. ----------------------
//////////////////////////////Construct Spells/////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\curse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\devil.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\devil_boons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\dumbfire.dm. ----------------------
//NEEDS MAJOR CODE CLEANUP
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\emplosion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\ethereal_jaunt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\explosion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\forcewall.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\genetic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\godhand.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\infinite_guns.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\inflict_handler.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\knock.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\lichdom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\lightning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\mime.dm. ----------------------
// These spells can only be gotten from the "Guide for Advanced Mimery series" for Mime Traitors.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\projectile.dm. ----------------------
//NEEDS MAJOR CODE CLEANUP.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\rightandwrong.dm. ----------------------
//In this file: Summon Magic/Summon Guns/Summon Events
// 1 in 50 chance of getting something really special.
// If true, it's the probability of triggering "survivor" antag.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\rod_form.dm. ----------------------
//Wizard Version of the Immovable Rod
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\santa.dm. ----------------------
//Santa spells!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\shadow_walk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\shapeshift.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\spacetime_distortion.dm. ----------------------
//ATTACK HAND IGNORING PARENT RETURN VALUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\summonitem.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\taeclowndo.dm. ----------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\telepathy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\the_traps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\togglebuff.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\touch_attacks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\trigger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\turf_teleport.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\voice_of_god.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\wizard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\pointed\barnyard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\pointed\blind.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\pointed\mind_transfer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\spells\spell_types\pointed\pointed.dm. ----------------------
/**
  * on_activation: What happens upon pointed spell activation.
  *
  * Arguments:
  * * user The mob interacting owning the spell.
  */
/**
  * on_activation: What happens upon pointed spell deactivation.
  *
  * Arguments:
  * * user The mob interacting owning the spell.
  */
/**
  * intercept_check: Specific spell checks for InterceptClickOn() targets.
  *
  * Arguments:
  * * user The mob using the ranged spell via intercept.
  * * target The atom that is being targeted by the spell via intercept.
  * * silent If the checks should produce not any feedback messages for the user.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\station_goals\bsa.dm. ----------------------
// Crew has to build a bluespace cannon
// Cargo orders part for high price
// Requires high amount of power
// Requires high level stock parts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\station_goals\dna_vault.dm. ----------------------
//Crew has to create dna vault
// Cargo can order DNA samplers + DNA vault boards
// DNA vault requires x animals ,y plants, z human dna
// DNA vaults require high tier stock parts and cold
// After completion each crewmember can receive single upgrade chosen out of 2 for the mob.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\station_goals\shield.dm. ----------------------
//Station Shield
// A chain of satellites encircles the station
// Satellites be actived to generate a shield that will block unorganic matter from passing it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\station_goals\station_goal.dm. ----------------------
//TODO
// Admin button to override with your own
// Sabotage objective for tators
// Multiple goals with less impact but more department focused
/*
//Crew has to create alien intelligence detector
// Requires a lot of minerals
// Dish requires a lot of power
// Needs five? AI's for decoding purposes
/datum/station_goal/seti
	name = "SETI Project"

//Crew Sweep
//Blood samples and special scans of amount of people on roundstart manifest.
//Should keep sec busy.
//Maybe after completion you'll get some ling detecting gear or some station wide DNA scan ?

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\amputation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bone_mending.dm. ----------------------
/////BONE FIXING SURGERIES//////
///// Repair Hairline Fracture (Severe)
///// Repair Compound Fracture (Critical)
//SURGERY STEPS
///// Repair Hairline Fracture (Severe)
///// Reset Compound Fracture (Crticial)
///// Repair Compound Fracture (Crticial)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\brain_surgery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\burn_dressing.dm. ----------------------
/////BURN FIXING SURGERIES//////
///// Debride burnt flesh
//SURGERY STEPS
///// Debride
///// Dressing burns
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\cavity_implant.dm. ----------------------
//handle cavity
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\core_removal.dm. ----------------------
//extract brain
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\coronary_bypass.dm. ----------------------
//an incision but with greater bleed, and a 90% base success chance
//grafts a coronary bypass onto the individual's heart, success chance is 90% base again
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\dental_implant.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\embalming.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\emergency_cardioversion_recovery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\emergency_reboot.dm. ----------------------
//Emergency Reboot: A surgery that allows for revival of Synthetics without the need for a defib. Doesn't all all the organs like the Revival surgery though.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\experimental_dissection.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\eye_surgery.dm. ----------------------
//fix eyes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\graft_synthtissue.dm. ----------------------
//Organ reconstruction, limited to the chest region as most organs in the head have their own repair method (eyes/brain). We require synthflesh for these
//steps since fixing internal organs aren't as simple as mending exterior flesh, though in the future it would be neat to add more chems to the viable list.
//TBD: Add heart damage, have heart reconstruction seperate from organ reconstruction, and find a better name for this. I can imagine people getting it confused with manipulation.
//repair organs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\healing.dm. ----------------------
/***************************BRUTE***************************/
/********************BRUTE STEPS********************/
/***************************BURN***************************/
/********************BURN STEPS********************/
/***************************COMBO***************************/
/********************COMBO STEPS********************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\helpers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\implant_removal.dm. ----------------------
//extract implant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\limb_augmentation.dm. ----------------------
/////AUGMENTATION SURGERIES//////
//SURGERY STEPS
//ACTUAL SURGERIES
//The augmentation surgery for synthetic limbs
//SURGERY STEP SUCCESSES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\lipoplasty.dm. ----------------------
//cut fat
//remove fat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\lobectomy.dm. ----------------------
//lobectomy, removes the most damaged lung lobe with a 95% base success chance
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\mechanic_steps.dm. ----------------------
//open shell
//close shell
//prepare electronics
//unwrench
//wrench
//open hatch
//cut wires
//pry off plating
//weld plating
//replace wires
//add plating
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\nutcracker.dm. ----------------------
//It's a bit of a clusterfuck, but if someone wants, it can be easily repurposed to work on other limbs too.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organic_steps.dm. ----------------------
//make incision
//clamp bleeders
//retract skin
//close incision
//saw bone
//drill bone
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organ_manipulation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\plastic_surgery.dm. ----------------------
//reshape_face
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\prosthetic_replacement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\purge_corruption.dm. ----------------------
/*
Timeconsuming but highly effective surgery that purges any system corruption currently present, only works on robotic organisms.
Has a version for organic people and robotic/synthetic ones, considering robotic limbs and robotic organism isn't neccessarily linked and, say, someone could surgery a synthetic's brain into a nonsynthetic head.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\remove_embedded_object.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\repair_puncture.dm. ----------------------
/////PUNCTURE FIXING SURGERIES//////
//the step numbers of each of these two, we only currently use the first to switch back and forth due to advancing after finishing steps anyway
///// Repair puncture wounds
//SURGERY STEPS
///// realign the blood vessels so we can reweld them
///// Sealing the vessels back together
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\robot_brain_surgery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\robot_healing.dm. ----------------------
//Almost copypaste of tend wounds, with some changes
/***************************STEPS***************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\surgery.dm. ----------------------
//INFO
//Check /mob/living/carbon/attackby for how surgery progresses, and also /mob/living/carbon/attack_hand.
//As of Feb 21 2013 they are in code/modules/mob/living/carbon/carbon.dm, lines 459 and 51 respectively.
//Other important variables are var/list/surgeries (/mob/living) and var/list/internal_organs (/mob/living/carbon)
// var/list/bodyparts (/mob/living/carbon/human) is the LIMBS of a Mob.
//Surgical procedures are initiated by attempt_initiate_surgery(), which is called by surgical drapes and bedsheets.
//TODO
//specific steps for some surgeries (fluff text)
//more interesting failure options
//randomised complications
//more surgeries!
//add a probability modifier for the state of the surgeon- health, twitching, etc. blindness, god forbid.
//helper for converting a zone_sel.selecting to body part (for damage)
//RESOLVED ISSUES //"Todo" jobs that have been completed
//combine hands/feet into the arms - Hands/feet were removed - RR
//surgeries (not steps) that can be initiated on any body part (corresponding with damage locations) - Call this one done, see possible_locs var - c0
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\surgery_step.dm. ----------------------
//Replaces visible_message during operations so only people looking over the surgeon can tell what they're doing, allowing for shenanigans.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\tools.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\brainwashing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\lobotomy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\necrotic_revival.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\pacification.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\revival.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\robot_brainwashing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\toxichealing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\viral_bonding.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\bioware.dm. ----------------------
//Bioware
//Body modifications applied through surgery. They generally affect physiology.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\bioware_surgery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\ligament_hook.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\ligament_reinforcement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\muscled_veins.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\nerve_grounding.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\nerve_splicing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\advanced\bioware\vein_threading.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\dismemberment.dm. ----------------------
//Dismember a limb
//limb removal. The "special" argument is used for swapping a limb with a new one without the effects of losing a limb kicking in.
/**
  * get_mangled_state() is relevant for flesh and bone bodyparts, and returns whether this bodypart has mangled skin, mangled bone, or both (or neither i guess)
  *
  * Dismemberment for flesh and bone requires the victim to have the skin on their bodypart destroyed (either a critical cut or piercing wound), and at least a hairline fracture
  * (severe bone), at which point we can start rolling for dismembering. The attack must also deal at least 10 damage, and must be a brute attack of some kind (sorry for now, cakehat, maybe later)
  *
  * Returns: BODYPART_MANGLED_NONE if we're fine, BODYPART_MANGLED_FLESH if our skin is broken, BODYPART_MANGLED_BONE if our bone is broken, or BODYPART_MANGLED_BOTH if both are broken and we're up for dismembering
  */
/**
  * try_dismember() is used, once we've confirmed that a flesh and bone bodypart has both the skin and bone mangled, to actually roll for it
  *
  * Mangling is described in the above proc, [/obj/item/bodypart/proc/get_mangled_state()]. This simply makes the roll for whether we actually dismember or not
  * using how damaged the limb already is, and how much damage this blow was for. If we have a critical bone wound instead of just a severe, we add +10% to the roll.
  * Lastly, we choose which kind of dismember we want based on the wounding type we hit with. Note we don't care about all the normal mods or armor for this
  *
  * Arguments:
  * * wounding_type: Either WOUND_BLUNT, WOUND_SLASH, or WOUND_PIERCE, basically only matters for the dismember message
  * * wounding_dmg: The damage of the strike that prompted this roll, higher damage = higher chance
  * * wound_bonus: Not actually used right now, but maybe someday
  * * bare_wound_bonus: ditto above
  */
//when a limb is dropped, the internal organs are removed from the mob and put into the limb
//Attach a limb to a human and drop any existing limb of that type.
//Regenerates all limbs. Returns amount of limbs regenerated
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\head.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\helpers.dm. ----------------------
///Get the bodypart for whatever hand we have active, Only relevant for carbons
//Limb numbers
//sometimes we want to ignore that we don't have the required amount of arms.
//sometimes we want to ignore that we don't have the required amount of legs.
///Remove a specific embedded item from the carbon mob
///Remove all embedded objects from all limbs on the carbon mob
//Helper for quickly creating a new limb - used by augment code in species.dm spec_attacked_by
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\parts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\robot_bodyparts.dm. ----------------------
//For ye whom may venture here, split up arm / hand sprites are formatted as "l_hand" & "l_arm".
//The complete sprite (displayed when the limb is on the ground) should be named "borg_l_arm".
//Failure to follow this pattern will cause the hand's icons to be missing due to the way get_limb_icon() works to generate the mob's icons using the aux_zone var.
// Surplus lims
// Upgraded Surplus lims - Better then robotic limbs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\bodyparts\_bodyparts.dm. ----------------------
//empties the bodypart from its organs and other things inside it
///since organs aren't actually stored in the bodypart themselves while attached to a person, we have to query the owner for what we should have
//Return TRUE to get whatever mob this is in to update health.
//Applies brute and burn damage to the organ. Returns 1 if the damage-icon states changed at all.
//Damage will not exceed max_damage using this proc
//Cannot apply negative damage
/// Allows us to roll for and apply a wound without actually dealing damage. Used for aggregate wounding power with pellet clouds
/**
  * check_wounding() is where we handle rolling for, selecting, and applying a wound if we meet the criteria
  *
  * We generate a "score" for how woundable the attack was based on the damage and other factors discussed in [/obj/item/bodypart/proc/check_wounding_mods], then go down the list from most severe to least severe wounds in that category.
  * We can promote a wound from a lesser to a higher severity this way, but we give up if we have a wound of the given type and fail to roll a higher severity, so no sidegrades/downgrades
  *
  * Arguments:
  * * woundtype- Either WOUND_BLUNT, WOUND_SLASH, WOUND_PIERCE, or WOUND_BURN based on the attack type.
  * * damage- How much damage is tied to this attack, since wounding potential scales with damage in an attack (see: WOUND_DAMAGE_EXPONENT)
  * * wound_bonus- The wound_bonus of an attack
  * * bare_wound_bonus- The bare_wound_bonus of an attack
  */
// try forcing a specific wound, but only if there isn't already a wound of that severity or greater for that type on this bodypart
/**
  * check_wounding_mods() is where we handle the various modifiers of a wound roll
  *
  * A short list of things we consider: any armor a human target may be wearing, and if they have no wound armor on the limb, if we have a bare_wound_bonus to apply, plus the plain wound_bonus
  * We also flick through all of the wounds we currently have on this limb and add their threshold penalties, so that having lots of bad wounds makes you more liable to get hurt worse
  * Lastly, we add the inherent wound_resistance variable the bodypart has (heads and chests are slightly harder to wound), and a small bonus if the limb is already disabled
  *
  * Arguments:
  * * It's the same ones on [receive_damage]
  */
//Heals brute and burn damage for the organ. Returns 1 if the damage-icon states changed at all.
//Damage cannot go below zero.
//Cannot remove negative damage (i.e. apply damage)
//Returns total damage.
//Checks disabled status thresholds
//Checks disabled status thresholds
/**
 * Gets the damage at which point we're disabled.
 */
//Updates an organ's brute/burn states for use by update_damage_overlays()
//Returns 1 if we need to update overlays. 0 otherwise.
//Change organ status
//we inform the bodypart of the changes that happened to the owner, or give it the informations from a source mob.
//to update the bodypart's icon when not attached to a mob
//Gives you a proper icon appearance for the dismembered limb
/// Get whatever wound of the given type is currently attached to this limb, if any
/**
  * update_wounds() is called whenever a wound is gained or lost on this bodypart, as well as if there's a change of some kind on a bone wound possibly changing disabled status
  *
  * Covers tabulating the damage multipliers we have from wounds (burn specifically), as well as deleting our gauze wrapping if we don't have any wounds that can use bandaging
  *
  * Arguments:
  * * replaced- If true, this is being called from the remove_wound() of a wound that's being replaced, so the bandage that already existed is still relevant, but the new wound hasn't been added yet
  */
/**
  * apply_gauze() is used to- well, apply gauze to a bodypart
  *
  * As of the Wounds 2 PR, all bleeding is now bodypart based rather than the old bleedstacks system, and 90% of standard bleeding comes from flesh wounds (the exception is embedded weapons).
  * The same way bleeding is totaled up by bodyparts, gauze now applies to all wounds on the same part. Thus, having a slash wound, a pierce wound, and a broken bone wound would have the gauze
  * applying blood staunching to the first two wounds, while also acting as a sling for the third one. Once enough blood has been absorbed or all wounds with the ACCEPTS_GAUZE flag have been cleared,
  * the gauze falls off.
  *
  * Arguments:
  * * gauze- Just the gauze stack we're taking a sheet from to apply here
  */
/**
  * seep_gauze() is for when a gauze wrapping absorbs blood or pus from wounds, lowering its absorption capacity.
  *
  * The passed amount of seepage is deducted from the bandage's absorption capacity, and if we reach a negative absorption capacity, the bandages fall off and we're left with nothing.
  *
  * Arguments:
  * * seep_amt - How much absorption capacity we're removing from our current bandages (think, how much blood or pus are we soaking up this tick?)
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\appendix.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\augments_arms.dm. ----------------------
///////////////
//Tools  Arms//
///////////////
///////////////
//Combat Arms//
///////////////
/////////////////
//IPC/Synth Arm//
/////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\augments_chest.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\augments_eyes.dm. ----------------------
// HUD implants
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\augments_internal.dm. ----------------------
//[[[[BRAIN]]]]
//[[[[MOUTH]]]]
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\autosurgeon.dm. ----------------------
//BOX O' IMPLANTS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\ears.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\eyes.dm. ----------------------
///Robotic
// Welding shield implant
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\heart.dm. ----------------------
//You are now brea- pumping blood manually
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\helpers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\liver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\lungs.dm. ----------------------
//TODO: lung health affects lung function
//TODO: add lung damage = less oxygen gains
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\organ_internal.dm. ----------------------
//Special is for instant replacement like autosurgeons
//Sources; life.dm process_organs
//Applys the slow damage over time decay
//Checks to see if the organ is frozen from temperature
///Adjusts an organ's damage by the amount "d", up to a maximum amount, which is by default max damage
///SETS an organ's damage to the amount "d", and in doing so clears or sets the failing flag, good for when you have an effect that should fix an organ if broken
/** check_damage_thresholds
  * input: M (a mob, the owner of the organ we call the proc on)
  * output: returns a message should get displayed.
  * description: By checking our current damage against our previous damage, we can decide whether we've passed an organ threshold.
  *				 If we have, send the corresponding threshold message to the owner, if such a message exists.
  */
//Runs some code on the organ when damage is taken/healed
//Runs some code on the organ when damage is taken/healed
//Looking for brains?
//Try code/modules/mob/living/carbon/brain/brain_item.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\stomach.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\tails.dm. ----------------------
// Note: tails only work in humans. They use human-specific parameters and rely on human code for displaying.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\tongue.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\surgery\organs\vocal_cords.dm. ----------------------
/// anything above this requires adminbus, to prevent a cultist from stacking chaplain + cult + specific listener = 8x, which is enough to instantly kill someone with damage.
/// max damage we can do in one "blast" to a listener
/// max healing we can do in one "blast" to a listener
//Colossus drop, forces the listeners to obey certain commands
//////////////////////////////////////
///////////VOICE OF GOD///////////////
//////////////////////////////////////
/// get special role multiplier for voice of god. No double dipping.
//////////////////////////////////////
///////ENTHRAL VELVET CHORDS//////////
//////////////////////////////////////
//Heavily modified voice of god code
//////////////////////////////////////
///////////FermiChem//////////////////
//////////////////////////////////////
//Removed span_list from input arguments.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tcg\cards.dm. ----------------------
/*Uncomment if you want to make the game automatic

/datum/tcg_card/proc/Use(datum/tcg_card/affected_card, mob/living/user)
	if(card_type == "Equipment")
		affected_card.health += health
		affected_card.attack += attack
		to_chat(user, "<span class ='notice'>You use [card] on [affected_card.card], upgrading it's stats.</span>")
		user.emote("uses [card] on [affected_card.card], upgrading it's stats.") //To get that visible emote. Useful if you want nice gameplay
	else if (card_type == "Unit")
		affected_card.health -= attack
		health -= affected_card.attack
		var/flavortext = "."
		if(affected_card.health <= 0)
			flavortext = ", killing [affected_card.card]!"
			if(health <= 0)
				flavortext = ", killing both [affected_card.card] and [card]!"
		else
			flavortext = ", killing [card] in the process!"
		to_chat(user, "<span class ='notice'>You attack [affected_card.card] with [card][flavortext]</span>")
		user.emote("attacks [affected_card.card] with [card][flavortext]")

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tcg\pack_1.dm. ----------------------
//COMMAND
//COMMAND END
//SILICONS
//SILICONS END
//CIVILIANS
//CIVILIAN END
//SECURITY
//SECURITY END
//RESEARCH AND DEVELOPMENT
//SCIENCE END
//MEDICAL
//MEDICAL END
//ENGINEERING
//ENGINEERING END
//CARGO
//CARGO END
//CENTCOM
//CENTCOM END
//ANTAGONISTS
//ANTAGONISTS END
//SPELLS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tcg\pack_nuclear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tcg\pack_star.dm. ----------------------
//Ultimate Exodia cards. I really, really doubt that someone will ever find them.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgchat\message.dm. ----------------------
/**
 * Message-related procs
 *
 * Message format (/list):
 * - type - Message type, must be one of defines in `code/__DEFINES/chat.dm`
 * - text - Plain message text
 * - html - HTML message text
 * - Optional metadata, can be any key/value pair.
 *
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgchat\to_chat.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * Circumvents the message queue and sends the message
 * to the recipient (target) as soon as possible.
 */
/**
 * Sends the message to the recipient (target).
 *
 * Recommended way to write to_chat calls:
 * ```
 * to_chat(client,
 *     type = MESSAGE_TYPE_INFO,
 *     html = "You have found <strong>[object]</strong>")
 * ```
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\includes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\core\core.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\core\datum.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\core\tgs_version.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\core\_definitions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v3210\api.dm. ----------------------
//nothing to do for v3
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v3210\commands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v4\api.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v4\commands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\api.dm. ----------------------
// Common proc b/c it's used by the V3/V4 APIs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\bridge.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\chunking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\commands.dm. ----------------------
// Common proc b/c it's used by the V3/V4 APIs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\serializers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\topic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\undefs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgs\v5\__interop_version.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\external.dm. ----------------------
/*!
 * External tgui definitions, such as src_object APIs.
 *
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * public
 *
 * Used to open and update UIs.
 * If this proc is not implemented properly, the UI will not update correctly.
 *
 * required user mob The mob who opened/is using the UI.
 * optional ui datum/tgui The UI to be updated, if it exists.
 */
/**
 * public
 *
 * Data to be sent to the UI.
 * This must be implemented for a UI to work.
 *
 * required user mob The mob interacting with the UI.
 *
 * return list Data to be sent to the UI.
 */
/**
 * public
 *
 * Static Data to be sent to the UI.
 *
 * Static data differs from normal data in that it's large data that should be
 * sent infrequently. This is implemented optionally for heavy uis that would
 * be sending a lot of redundant data frequently. Gets squished into one
 * object on the frontend side, but the static part is cached.
 *
 * required user mob The mob interacting with the UI.
 *
 * return list Statuic Data to be sent to the UI.
 */
/**
 * public
 *
 * Forces an update on static data. Should be done manually whenever something
 * happens to change static data.
 *
 * required user the mob currently interacting with the ui
 * optional ui ui to be updated
 */
/**
 * public
 *
 * Called on a UI when the UI receieves a href.
 * Think of this as Topic().
 *
 * required action string The action/button that has been invoked by the user.
 * required params list A list of parameters attached to the button.
 *
 * return bool If the user's input has been handled and the UI should update.
 */
/**
 * public
 *
 * Called on a UI when the UI crashed.
 *
 * required payload list A list of the payload supposed to be set on the regular UI.
 */
/**
 * public
 *
 * Called on an object when a tgui object is being created, allowing you to
 * push various assets to tgui, for examples spritesheets.
 *
 * return list List of asset datums or file paths.
 */
/**
 * private
 *
 * The UI's host object (usually src_object).
 * This allows modules/datums to have the UI attached to them,
 * and be a part of another object.
 */
/**
 * private
 *
 * The UI's state controller to be used for created uis
 * This is a proc over a var for memory reasons
 */
/**
 * global
 *
 * Associative list of JSON-encoded shared states that were set by
 * tgui clients.
 */
/**
 * global
 *
 * Tracks open UIs for a user.
 */
/**
 * global
 *
 * Tracks open windows for a user.
 */
/**
 * global
 *
 * TRUE if cache was reloaded by tgui dev server at least once.
 */
/**
 * public
 *
 * Called on a UI's object when the UI is closed, not to be confused with
 * client/verb/uiclose(), which closes the ui window
 */
/**
 * verb
 *
 * Called by UIs when they are closed.
 * Must be a verb so winset() can call it.
 *
 * required uiref ref The UI that was closed.
 */
/**
 * Middleware for /client/Topic.
 *
 * return bool If TRUE, prevents propagation of the topic call.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states.dm. ----------------------
/*!
 * Base state and helpers for states. Just does some sanity checks,
 * implement a proper state for in-depth checks.
 *
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * public
 *
 * Checks the UI state for a mob.
 *
 * required user mob The mob who opened/is using the UI.
 * required state datum/ui_state The state to check.
 *
 * return UI_state The state of the UI.
 */
/**
 * private
 *
 * Checks if a user can use src_object's UI, and returns the state.
 * Can call a mob proc, which allows overrides for each mob.
 *
 * required src_object datum The object/datum which owns the UI.
 * required user mob The mob who opened/is using the UI.
 *
 * return UI_state The state of the UI.
 */
/**
 * public
 *
 * Standard interaction/sanity checks. Different mob types may have overrides.
 *
 * return UI_state The state of the UI.
 */
/**
 * public
 *
 * Distance versus interaction check.
 *
 * required src_object atom/movable The object which owns the UI.
 *
 * return UI_state The state of the UI.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\status_composers.dm. ----------------------
/// The sane defaults for a UI such as a computer or a machine.
/// Returns a UI status such that users adjacent to source will be able to interact,
/// far away users will be able to see, and anyone farther won't see anything.
/// Dead users will receive updates no matter what, though you likely want to add
/// a [`ui_status_only_living`] check for finer observer interactions.
/// Returns a UI status such that the dead will be able to watch, but not interact.
/// Returns a UI status such that users with debilitating conditions, such as
/// being dead or not having power for silicons, will not be able to interact.
/// Being dead will disable UI, being incapacitated will continue updating it,
/// and anything else will make it interactive.
/// Returns a UI status such that those without blocked hands will be able to interact,
/// but everyone else can only watch.
/// Returns a UI status such that advanced tool users will be able to interact,
/// but everyone else can only watch.
/// Returns a UI status such that silicons will be able to interact with whatever
/// they would have access to if this was a machine. For example, AIs can
/// interact if there's cameras with wireless control is enabled.
/// Returns a UI status representing this silicon's capability to access
/// the given source. Called by `ui_status_silicon_has_access`.
/// Returns UI_INTERACTIVE if the user is conscious and lying down.
/// Returns UI_UPDATE otherwise.
/// Return UI_INTERACTIVE if the user is strictly adjacent to the target atom, whether they can see it or not.
/// Return UI_CLOSE otherwise.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\tgui.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui datum (represents a UI).
 */
/**
 * public
 *
 * Create a new UI.
 *
 * required user mob The mob who opened/is using the UI.
 * required src_object datum The object or datum which owns the UI.
 * required interface string The interface used to render the UI.
 * optional title string The title of the UI.
 * optional ui_x int Deprecated: Window width.
 * optional ui_y int Deprecated: Window height.
 *
 * return datum/tgui The requested UI.
 */
/**
 * public
 *
 * Open this UI (and initialize it with data).
 *
 * return bool - TRUE if a new pooled window is opened, FALSE in all other situations including if a new pooled window didn't open because one already exists.
 */
/**
 * public
 *
 * Close the UI.
 *
 * optional can_be_suspended bool
 */
/**
 * public
 *
 * Enable/disable auto-updating of the UI.
 *
 * required value bool Enable/disable auto-updating.
 */
/**
 * public
 *
 * Replace current ui.state with a new one.
 *
 * required state datum/ui_state/state Next state
 */
/**
 * public
 *
 * Makes an asset available to use in tgui.
 *
 * required asset datum/asset
 *
 * return bool - true if an asset was actually sent
 */
/**
 * public
 *
 * Send a full update to the client (includes static data).
 *
 * optional custom_data list Custom data to send instead of ui_data.
 * optional force bool Send an update even if UI is not interactive.
 */
/**
 * public
 *
 * Send a partial update to the client (excludes static data).
 *
 * optional custom_data list Custom data to send instead of ui_data.
 * optional force bool Send an update even if UI is not interactive.
 */
/**
 * private
 *
 * Package the data to send to the UI, as JSON.
 *
 * return list
 */
/**
 * private
 *
 * Run an update cycle for this UI. Called internally by SStgui
 * every second or so.
 */
/**
 * private
 *
 * Updates the status, and returns TRUE if status has changed.
 */
/**
 * private
 *
 * Callback for handling incoming tgui messages.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\tgui_window.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * public
 *
 * Create a new tgui window.
 *
 * required client /client
 * required id string A unique window identifier.
 */
/**
 * public
 *
 * Initializes the window with a fresh page. Puts window into the "loading"
 * state. You can begin sending messages right after initializing. Messages
 * will be put into the queue until the window finishes loading.
 *
 * optional inline_assets list List of assets to inline into the html.
 * optional inline_html string Custom HTML to inject.
 * optional fancy bool If TRUE, will hide the window titlebar.
 */
/**
 * public
 *
 * Checks if the window is ready to receive data.
 *
 * return bool
 */
/**
 * public
 *
 * Checks if the window can be sanely suspended.
 *
 * return bool
 */
/**
 * public
 *
 * Acquire the window lock. Pool will not be able to provide this window
 * to other UIs for the duration of the lock.
 *
 * Can be given an optional tgui datum, which will be automatically
 * subscribed to incoming messages via the on_message proc.
 *
 * optional ui /datum/tgui
 */
/**
 * public
 *
 * Release the window lock.
 */
/**
 * public
 *
 * Subscribes the datum to consume window messages on a specified proc.
 *
 * Note, that this supports only one subscriber, because code for that
 * is simpler and therefore faster. If necessary, this can be rewritten
 * to support multiple subscribers.
 */
/**
 * public
 *
 * Unsubscribes the datum. Do not forget to call this when cleaning up.
 */
/**
 * public
 *
 * Close the UI.
 *
 * optional can_be_suspended bool
 */
/**
 * public
 *
 * Sends a message to tgui window.
 *
 * required type string Message type
 * required payload list Message payload
 * optional force bool Send regardless of the ready status.
 */
/**
 * public
 *
 * Sends a raw payload to tgui window.
 *
 * required message string JSON+urlencoded blob to send.
 * optional force bool Send regardless of the ready status.
 */
/**
 * public
 *
 * Makes an asset available to use in tgui.
 *
 * required asset datum/asset
 *
 * return bool - TRUE if any assets had to be sent to the client
 */
/**
 * private
 *
 * Sends queued messages if the queue wasn't empty.
 */
/**
 * private
 *
 * Callback for handling incoming tgui messages.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\admin.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: admin_state
 *
 * Checks that the user is an admin, end-of-story.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\always.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: always_state
 *
 * Always grants the user UI_INTERACTIVE. Period.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\conscious.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: conscious_state
 *
 * Only checks if the user is conscious.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\contained.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: contained_state
 *
 * Checks that the user is inside the src_object.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\debug.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\deep_inventory.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: deep_inventory_state
 *
 * Checks that the src_object is in the user's deep
 * (backpack, box, toolbox, etc) inventory.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\default.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: default_state
 *
 * Checks a number of things -- mostly physical distance for humans
 * and view for robots.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\fun.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: fun_state
 *
 * Checks that the user has the fun privilige.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\hands.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: hands_state
 *
 * Checks that the src_object is in the user's hands.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\human_adjacent.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: human_adjacent_state
 *
 * In addition to default checks, only allows interaction for a
 * human adjacent user.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\inventory.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: inventory_state
 *
 * Checks that the src_object is in the user's top-level
 * (hand, ear, pocket, belt, etc) inventory.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\language_menu.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: language_menu_state
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\never.dm. ----------------------
/*!
 * Copyright (c) 2021 Arm A. Hammer
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: never_state
 *
 * Always closes the UI, no matter what. See the ui_state in religious_tool.dm to see an example
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\new_player.dm. ----------------------
/**
 * tgui state: new_player_state
 *
 * Checks that the user is a new_player, or if user is an admin
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\notcontained.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: notcontained_state
 *
 * Checks that the user is not inside src_object, and then makes the
 * default checks.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\not_incapacitated.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: not_incapacitated_state
 *
 * Checks that the user isn't incapacitated
 */
/**
 * tgui state: not_incapacitated_turf_state
 *
 * Checks that the user isn't incapacitated and that their loc is a turf
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\observer.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: observer_state
 *
 * Checks that the user is an observer/ghost.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\physical.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: physical_state
 *
 * Short-circuits the default state to only check physical distance.
 */
/**
 * tgui state: physical_obscured_state
 *
 * Short-circuits the default state to only check physical distance, being in view doesn't matter
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\self.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: self_state
 *
 * Only checks that the user and src_object are the same.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\vorepanel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui\states\zlevel.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui state: z_state
 *
 * Only checks that the Z-level of the user and src_object are the same.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_input\alert.dm. ----------------------
/**
 * Creates a TGUI alert window and returns the user's response.
 *
 * This proc should be used to create alerts that the caller will wait for a response from.
 * Arguments:
 * * user - The user to show the alert to.
 * * message - The content of the alert, shown in the body of the TGUI window.
 * * title - The of the alert modal, shown on the top of the TGUI window.
 * * buttons - The options that can be chosen by the user, each string is assigned a button on the UI.
 * * timeout - The timeout of the alert, after which the modal will close and qdel itself. Set to zero for no timeout.
 * * autofocus - The bool that controls if this alert should grab window focus.
 */
/**
 * # tgui_alert
 *
 * Datum used for instantiating and using a TGUI-controlled modal that prompts the user with
 * a message and has buttons for responses.
 */
/**
 * Waits for a user's response to the tgui_modal's prompt before returning. Returns early if
 * the window was closed by the user.
 */
/**
 * Creates an asynchronous TGUI alert window with an associated callback.
 *
 * This proc should be used to create alerts that invoke a callback with the user's chosen option.
 * Arguments:
 * * user - The user to show the alert to.
 * * message - The content of the alert, shown in the body of the TGUI window.
 * * title - The of the alert modal, shown on the top of the TGUI window.
 * * buttons - The options that can be chosen by the user, each string is assigned a button on the UI.
 * * callback - The callback to be invoked when a choice is made.
 * * timeout - The timeout of the alert, after which the modal will close and qdel itself. Disabled by default, can be set to seconds otherwise.
 */
/**
 * # async tgui_modal
 *
 * An asynchronous version of tgui_modal to be used with callbacks instead of waiting on user responses.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_input\list.dm. ----------------------
/**
 * Creates a TGUI input list window and returns the user's response.
 *
 * This proc should be used to create alerts that the caller will wait for a response from.
 * Arguments:
 * * user - The user to show the input box to.
 * * message - The content of the input box, shown in the body of the TGUI window.
 * * title - The title of the input box, shown on the top of the TGUI window.
 * * items - The options that can be chosen by the user, each string is assigned a button on the UI.
 * * default - The option with this value will be selected on first paint of the TGUI window.
 * * timeout - The timeout of the input box, after which the input box will close and qdel itself. Set to zero for no timeout.
 * * strict_modern - Disabled the preference check of the input box, only allowing the TGUI window to show.
 */
/**
 * # tgui_list_input
 *
 * Datum used for instantiating and using a TGUI-controlled list input that prompts the user with
 * a message and shows a list of selectable options
 */
/**
 * Waits for a user's response to the tgui_list_input's prompt before returning. Returns early if
 * the window was closed by the user.
 */
/**
 * Creates an asynchronous TGUI input list window with an associated callback.
 *
 * This proc should be used to create inputs that invoke a callback with the user's chosen option.
 * Arguments:
 * * user - The user to show the input box to.
 * * message - The content of the input box, shown in the body of the TGUI window.
 * * title - The title of the input box, shown on the top of the TGUI window.
 * * items - The options that can be chosen by the user, each string is assigned a button on the UI.
 * * default - The option with this value will be selected on first paint of the TGUI window.
 * * callback - The callback to be invoked when a choice is made.
 * * timeout - The timeout of the input box, after which the menu will close and qdel itself. Set to zero for no timeout.
 */
/**
 * # async tgui_list_input
 *
 * An asynchronous version of tgui_list_input to be used with callbacks instead of waiting on user responses.
 */
///datum/tgui_list_input/async/tgui_close(mob/user)
//	. = ..()
//	qdel(src)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_input\number.dm. ----------------------
/**
 * Creates a TGUI window with a number input. Returns the user's response as num | null.
 *
 * This proc should be used to create windows for number entry that the caller will wait for a response from.
 * If tgui fancy chat is turned off: Will return a normal input. If a max or min value is specified, will
 * validate the input inside the UI and ui_act.
 *
 * Arguments:
 * * user - The user to show the number input to.
 * * message - The content of the number input, shown in the body of the TGUI window.
 * * title - The title of the number input modal, shown on the top of the TGUI window.
 * * default - The default (or current) value, shown as a placeholder. Users can press refresh with this.
 * * max_value - Specifies a maximum value. If none is set, any number can be entered. Pressing "max" defaults to 1000.
 * * min_value - Specifies a minimum value. Often 0.
 * * timeout - The timeout of the number input, after which the modal will close and qdel itself. Set to zero for no timeout.
 * * round_value - whether the inputted number is rounded down into an integer.
 */
/**
 * # tgui_input_number
 *
 * Datum used for instantiating and using a TGUI-controlled number input that prompts the user with
 * a message and has an input for number entry.
 */
/**
 * Waits for a user's response to the tgui_input_number's prompt before returning. Returns early if
 * the window was closed by the user.
 */
/**
 * Creates an asynchronous TGUI input num window with an associated callback.
 *
 * This proc should be used to create inputs that invoke a callback with the user's chosen option.
 * Arguments:
 * * user - The user to show the input box to.
 * * message - The content of the input box, shown in the body of the TGUI window.
 * * title - The title of the input box, shown on the top of the TGUI window.
 * * default - The default value pre-populated in the input box.
 * * callback - The callback to be invoked when a choice is made.
 * * timeout - The timeout of the input box, after which the menu will close and qdel itself. Set to zero for no timeout.
 * * round_value - whether the inputted number is rounded down into an integer.
 */
/**
 * # async tgui_text_input
 *
 * An asynchronous version of tgui_text_input to be used with callbacks instead of waiting on user responses.
 */
///datum/tgui_input_number/async/tgui_close(mob/user)
//	. = ..()
//	qdel(src)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_input\text.dm. ----------------------
/**
 * Creates a TGUI window with a text input. Returns the user's response.
 *
 * This proc should be used to create windows for text entry that the caller will wait for a response from.
 * If tgui fancy chat is turned off: Will return a normal input. If max_length is specified, will return
 * stripped_multiline_input.
 *
 * Arguments:
 * * user - The user to show the text input to.
 * * message - The content of the text input, shown in the body of the TGUI window.
 * * title - The title of the text input modal, shown on the top of the TGUI window.
 * * default - The default (or current) value, shown as a placeholder.
 * * max_length - Specifies a max length for input. MAX_MESSAGE_LEN is default (4096)
 * * multiline -  Bool that determines if the input box is much larger. Good for large messages, laws, etc.
 * * encode - Toggling this determines if input is filtered via html_encode. Setting this to FALSE gives raw input.
 * * timeout - The timeout of the textbox, after which the modal will close and qdel itself. Set to zero for no timeout.
 */
/**
 * tgui_input_text
 *
 * Datum used for instantiating and using a TGUI-controlled text input that prompts the user with
 * a message and has an input for text entry.
 */
/**
 * Waits for a user's response to the tgui_text_input's prompt before returning. Returns early if
 * the window was closed by the user.
 */
/**
 * Creates an asynchronous TGUI input text window with an associated callback.
 *
 * This proc should be used to create inputs that invoke a callback with the user's chosen option.
 * Arguments:
 * * user - The user to show the input box to.
 * * message - The content of the input box, shown in the body of the TGUI window.
 * * title - The title of the input box, shown on the top of the TGUI window.
 * * default - The default value pre-populated in the input box.
 * * callback - The callback to be invoked when a choice is made.
 * * timeout - The timeout of the input box, after which the menu will close and qdel itself. Set to zero for no timeout.
 */
/**
 * # async tgui_text_input
 *
 * An asynchronous version of tgui_text_input to be used with callbacks instead of waiting on user responses.
 */
///datum/tgui_input_text/async/tgui_close(mob/user)
//	. = ..()
//	qdel(src)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_panel\audio.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/// Admin music volume, from 0 to 1.
/**
 * public
 *
 * Sends music data to the browser.
 *
 * Optional settings:
 * - pitch: the playback rate
 * - start: the start time of the sound
 * - end: when the musics stops playing
 *
 * required url string Must be an https URL.
 * optional extra_data list Optional settings.
 */
/**
 * public
 *
 * Stops playing music through the browser.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_panel\external.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui panel / chat troubleshooting verb
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_panel\telemetry.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * Maximum number of connection records allowed to analyze.
 * Should match the value set in the browser.
 */
/**
 * Maximum time allocated for sending a telemetry packet.
 */
/// Time of telemetry request
/// Time of telemetry analysis completion
/// List of previous client connections
/**
 * private
 *
 * Requests some telemetry from the client.
 */
/**
 * private
 *
 * Analyzes a telemetry packet.
 *
 * Is currently only useful for detecting ban evasion attempts.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tgui_panel\tgui_panel.dm. ----------------------
/*!
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */
/**
 * tgui_panel datum
 * Hosts tgchat and other nice features.
 */
/**
 * public
 *
 * TRUE if panel is initialized and ready to receive messages.
 */
/**
 * public
 *
 * Initializes tgui panel.
 */
/**
 * private
 *
 * Called when initialization has timed out.
 */
/**
 * private
 *
 * Callback for handling incoming tgui messages.
 */
/**
 * public
 *
 * Sends a round restart notification.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\tooltip\tooltip.dm. ----------------------
/*
Tooltips v1.1 - 22/10/15
Developed by Wire (#goonstation on irc.synirc.net)
- Added support for screen_loc pixel offsets. Should work. Maybe.
- Added init function to more efficiently send base vars

Configuration:
- Set control to the correct skin element (remember to actually place the skin element)
- Set file to the correct path for the .html file (remember to actually place the html file)
- Attach the datum to the user client on login, e.g.
	/client/New()
		src.tooltips = new /datum/tooltip(src)

Usage:
- Define mouse event procs on your (probably HUD) object and simply call the show and hide procs respectively:
	/atom/movable/screen/hud
		MouseEntered(location, control, params)
			usr.client.tooltip.show(params, title = src.name, content = src.desc)

		MouseExited()
			usr.client.tooltip.hide()

Customization:
- Theming can be done by passing the theme var to show() and using css in the html file to change the look
- For your convenience some pre-made themes are included

Notes:
- You may have noticed 90% of the work is done via javascript on the client. Gotta save those cycles man.
- This is entirely untested in any other codebase besides goonstation so I have no idea if it will port nicely. Good luck!
	- After testing and discussion (Wire, Remie, MrPerson, AnturK) ToolTips are ok and work for /tg/station13
*/
/* TG SPECIFIC CODE */
//Open a tooltip for user, at a location based on params
//Theme is a CSS class in tooltip.html, by default this wrapper chooses a CSS class based on the user's UI_style (Midnight, Plasmafire, Retro, etc)
//Includes sanity.checks
//Arbitrarily close a user's tooltip
//Includes sanity checks.
/**
 * If set, will return a list for the tooltip (that will also be put together in a `Join()`)
 * However, if returning `null`, the tooltip will not be shown as #14942 changed it.
 *
 * Though no tooltips will be created for atoms that have `tooltips = FALSE`
*/
// Break my stuff again and i'll kill you, kisses
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\anchored_mobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\bespoke_id.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\binary_insert.dm. ----------------------
/// A test to ensure the sanity of BINARY_INSERT
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\card_mismatch.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\chain_pull_through_space.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\character_saving.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\combat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\component_tests.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\confusion.dm. ----------------------
// Checks that the confusion symptom correctly gives, and removes, confusion
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\crafting_recipes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\create_and_destroy.dm. ----------------------
///Delete one of every type, sleep a while, then check to see if anything has gone fucky
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\dynamic_ruleset_sanity.dm. ----------------------
/// Verifies that roundstart dynamic rulesets are setup properly without external configuration.
/// Verifies that dynamic rulesets have unique antag_flag.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\emoting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\find_reference_sanity.dm. ----------------------
///Used to test the completeness of the reference finder proc.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\heretic_knowledge.dm. ----------------------
/// This test checks all heretic knowledge nodes - excluding the ones which are unreachable on purpose - and ensures players can reach them in game.
/// If it finds a node that is unreachable, it throws an error.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\holidays.dm. ----------------------
// test Jewish holiday
// test Islamic holiday
// nth day of week
// another nth day of week
// plain old simple holiday
// holiday which goes across months
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\interactions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\keybinding_init.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\machine_disassembly.dm. ----------------------
/// Ensures that when disassembling a machine, all the parts are given back
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\medical_wounds.dm. ----------------------
/// This test is used to make sure a flesh-and-bone base human can suffer all the types of wounds, and that suffering more severe wounds removes and replaces the lesser wound. Also tests that [/mob/living/carbon/proc/fully_heal] removes all wounds
/// This test is used for making sure species with bones but no flesh (skeletons, plasmamen) can only suffer BONE_WOUNDS, and nothing tagged with FLESH_WOUND (it's possible to require both)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\merge_type.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\metabolizing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\outfit_sanity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\pills.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\plantgrowth_tests.dm. ----------------------
// Checks plants for broken tray icons. Use Advanced Proc Call to activate.
// Maybe some day it would be used as unit test.
// -------- IT IS NOW!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\projectiles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\quick_swap_sanity.dm. ----------------------
/// Test that quick swap correctly swaps items and invalidates suit storage
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\reactions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\reagent_id_typos.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\reagent_mod_expose.dm. ----------------------
// testing the mob expose procs are working
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\reagent_mod_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\reagent_recipe_collisions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\resist.dm. ----------------------
/// Test that stop, drop, and roll lowers fire stacks
/// Test that you can resist out of a container
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\serving_tray.dm. ----------------------
/**
 * Check that standard food items fit on the serving tray
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\siunit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\spawn_humans.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\spawn_mobs.dm. ----------------------
///Unit test that spawns all mobs that can be spawned by golden slimes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\species_whitelists.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\stomach.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\subsystem_init.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\surgeries.dm. ----------------------
/*
i couldn't actually find anything in the parts of the code it's calling preventing two surgeries, so it's probably somewhere else
/datum/unit_test/multiple_surgeries/Run()
	var/mob/living/carbon/human/user = allocate(/mob/living/carbon/human)
	var/mob/living/carbon/human/patient_zero = allocate(/mob/living/carbon/human)
	var/mob/living/carbon/human/patient_one = allocate(/mob/living/carbon/human)

	var/obj/item/scalpel/scalpel = allocate(/obj/item/scalpel)

	var/datum/surgery_step/incise/surgery_step = new
	var/datum/surgery/organ_manipulation/surgery_for_zero = new

	INVOKE_ASYNC(surgery_step, /datum/surgery_step/proc/initiate, user, patient_zero, BODY_ZONE_CHEST, scalpel, surgery_for_zero)
	sleep(1)
	TEST_ASSERT(surgery_for_zero.step_in_progress, "Surgery on patient zero was not initiated")

	var/datum/surgery/organ_manipulation/surgery_for_one = new


	// Without waiting for the incision to complete, try to start a new surgery
	TEST_ASSERT(!surgery_step.initiate(user, patient_one, BODY_ZONE_CHEST, scalpel, surgery_for_one), "Was allowed to start a second surgery without the rod of asclepius")
	TEST_ASSERT(!surgery_for_one.step_in_progress, "Surgery for patient one is somehow in progress, despite not initiating")

	user.apply_status_effect(STATUS_EFFECT_HIPPOCRATIC_OATH)
	INVOKE_ASYNC(surgery_step, /datum/surgery_step/proc/initiate, user, patient_one, BODY_ZONE_CHEST, scalpel, surgery_for_one)
	TEST_ASSERT(surgery_for_one.step_in_progress, "Surgery on patient one was not initiated, despite having rod of asclepius")
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\teleporters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\tgui_create_message.dm. ----------------------
/// Test that `TGUI_CREATE_MESSAGE` is correctly implemented
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\timer_sanity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\unit_test.dm. ----------------------
/*

Usage:
Override /Run() to run your test code

Call TEST_FAIL() to fail the test (You should specify a reason)

You may use /New() and /Destroy() for setup/teardown respectively

You can use the run_loc_floor_bottom_left and run_loc_floor_top_right to get turfs for testing

*/
/// A list of every test that is currently focused.
/// Use the PERFORM_ALL_TESTS macro instead.
/// Allocates an instance of the provided type, and places it somewhere in an available loc
/// Instances allocated through this proc will be destroyed when the test is over
/*
/datum/unit_test/proc/test_screenshot(name, icon/icon)
	if (!istype(icon))
		TEST_FAIL("[icon] is not an icon.")
		return

	var/path_prefix = replacetext(replacetext("[type]", "/datum/unit_test/", ""), "/", "_")
	name = replacetext(name, "/", "_")

	var/filename = "code/modules/unit_tests/screenshots/[path_prefix]_[name].png"

	if (fexists(filename))
		var/data_filename = "data/screenshots/[path_prefix]_[name].png"
		fcopy(icon, data_filename)
		log_test("\t[path_prefix]_[name] was found, putting in data/screenshots")
	else if (fexists("code"))
		// We are probably running in a local build
		fcopy(icon, filename)
		TEST_FAIL("Screenshot for [name] did not exist. One has been created.")
	else
		// We are probably running in real CI, so just pretend it worked and move on
		fcopy(icon, "data/screenshots_new/[path_prefix]_[name].png")

		log_test("\t[path_prefix]_[name] was put in data/screenshots_new")

/// Helper for screenshot tests to take an image of an atom from all directions and insert it into one icon
/datum/unit_test/proc/get_flat_icon_for_all_directions(atom/thing, no_anim = TRUE)
	var/icon/output = icon('icons/effects/effects.dmi', "nothing")

	for (var/direction in GLOB.cardinals)
		var/icon/partial = getFlatIcon(thing, defdir = direction, no_anim = no_anim)
		output.Insert(partial, dir = direction)

	return output
*/
/// Logs a test message. Will use GitHub action syntax found at https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
/*
	if (ispath(test_path, /datum/unit_test/focus_only))
		return
*/
// /datum/map_template/unit_tests
// 	name = "Unit Tests Zone"
// 	mappath = "_maps/templates/unit_tests.dmm"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\vore_tests.dm. ----------------------
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\unit_tests\_unit_tests.dm. ----------------------
//include unit test files in this module in this ifdef
//Keep this sorted alphabetically
/// For advanced cases, fail unconditionally but don't return (so a test can return multiple results)
/// Asserts that a condition is true
/// If the condition is not true, fails the test
/// Asserts that a parameter is not null
/// Asserts that a parameter is null
/// Asserts that the two parameters passed are equal, fails otherwise
/// Optionally allows an additional message in the case of a failure
/// Asserts that the two parameters passed are not equal, fails otherwise
/// Optionally allows an additional message in the case of a failure
/// *Only* run the test provided within the parentheses
/// This is useful for debugging when you want to reduce noise, but should never be pushed
/// Intended to be used in the manner of `TEST_FOCUS(/datum/unit_test/math)`
/// Constants indicating unit test completion status
/// After most test steps, used for tests that run long so shorter issues can be noticed faster
/// This must be the last test to run due to the inherent nature of the test iterating every single tangible atom in the game and qdeleting all of them (while taking long sleeps to make sure the garbage collector fires properly) taking a large amount of time.
/// Change color to red on ANSI terminal output, if enabled with -DANSICOLORS.
/// Change color to green on ANSI terminal output, if enabled with -DANSICOLORS.
/// A trait source when adding traits through unit tests
// #include "bloody_footprints.dm"
// #include "breath.dm"
// #include "card_mismatch.dm"
// #include "combat.dm"
// #include "connect_loc.dm"
// #include "confusion.dm"
// #include "crayons.dm"
// #include "designs.dm"
// #include "egg_glands.dm"
// #include "dynamic_ruleset_sanity.dm"
// #include "emoting.dm"
// #include "food_edibility_check.dm"
// #include "greyscale_config.dm"
// #include "heretic_knowledge.dm"
// #include "holidays.dm"
// #include "hydroponics_harvest.dm"
// #include "keybinding_init.dm"
// #include "metabolizing.dm"
// #include "ntnetwork_tests.dm"
// #include "outfit_sanity.dm"
// #include "pills.dm"
// #include "plantgrowth_tests.dm"
// #include "projectiles.dm"
// #include "rcd.dm"
// #include "reagent_mod_expose.dm"
// #include "reagent_mod_procs.dm"
// #include "say.dm"
// #include "security_officer_distribution.dm"
// #include "serving_tray.dm"
// #include "siunit.dm"
// #include "species_whitelists.dm"
// #include "stomach.dm"
// #include "strippable.dm"
// #include "wizard.dm"
/// CIT TESTS
/// SANDSTORM TESTS
//#undef TEST_FOCUS - This define is used by vscode unit test extension to pick specific unit tests to run and appended later so needs to be used out of scope here
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_devices.dm. ----------------------
// A collection of pre-set uplinks, for admin spawns.
// Radio-like uplink; not an actual radio because this uplink is most commonly
// used for nuke ops, for whom opening the radio GUI and the uplink GUI
// simultaneously is an annoying distraction.
// Multitool uplink
// Pen uplink
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items.dm. ----------------------
/**
 * Uplink Items
 *
 * Items that can be spawned from an uplink. Can be limited by gamemode.
**/
//Discounts (dynamically filled above)
// cit specific. idk
//All bundles and telecrystals
// Dangerous Items
//Support and Mechs
// Stealth Items
//Space Suits and Hardsuits
// Devices and Tools
// Implants
//Race-specific items
// Role-specific items
// Pointless
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_purchase_log.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_ammo.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Ammunition
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_badass.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Pointless (Badassery)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_bundles.dm. ----------------------
//All bundles and telecrystals
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_clothing.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
//Space Suits and Hardsuits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_dangerous.dm. ----------------------
// Dangerous Items
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_devices.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Devices and Tools
//this seems like a terrible idea to me, so commenting it out for now. -Shell
/*
/datum/uplink_item/device_tools/tc_rod
	name = "Telecrystal Fuel Rod"
	desc = "This special fuel rod has eight material slots that can be inserted with telecrystals, \
			once the rod has been fully depleted, you will be able to harvest the extra telecrystals. \
			Please note: This Rod fissiles much faster than it's regular counterpart, it doesn't take \
			much to overload the reactor with these..."
	item = /obj/item/twohanded/required/fuel_rod/material/telecrystal
	cost = 7
*/
/* for now
/datum/uplink_item/device_tools/suspiciousphone
	name = "Protocol CRAB-17 Phone"
	desc = "The Protocol CRAB-17 Phone, a phone borrowed from an unknown third party, it can be used to crash the space market, funneling the losses of the crew to your bank account.\
	The crew can move their funds to a new banking site though, unless they HODL, in which case they deserve it."
	item = /obj/item/suspiciousphone
	cost = 7
	restricted = TRUE
	limited_stock = 1
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_explosives.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
//Grenades and Explosives
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_implants.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Implants
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_roles.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Role-specific items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_stealth.dm. ----------------------
// Stealthy Weapons
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_stealthdevices.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
// Stealth Items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\uplink\uplink_items\uplink_support.dm. ----------------------
/*
	Uplink Items:
	Unlike categories, uplink item entries are automatically sorted alphabetically on server init in a global list,
	When adding new entries to the file, please keep them sorted by category.
*/
//Support and Mechs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\atv.dm. ----------------------
//TURRETS!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\bicycle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\lavaboat.dm. ----------------------
//Boat
//Dragon Boat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\motorized_wheelchair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\pimpin_ride.dm. ----------------------
//PIMP-CART
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\ridden.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\scooter.dm. ----------------------
///Moves the vehicle forward and if it lands on a table, repeats
//CONSTRUCTION
//Wheelys
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\sealed.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\secway.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\speedbike.dm. ----------------------
//BM SPEEDWAGON
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\vehicle_actions.dm. ----------------------
//VEHICLE DEFAULT HANDLING
//ACTION DATUMS
//CLOWN CAR ACTION DATUMS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\vehicle_key.dm. ----------------------
//START VECTORCARKEYS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\wheelchair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\_vehicle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\cars\car.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\cars\clowncar.dm. ----------------------
/**
 * Plays a random funky effect
 * Only available while car is emagged
 * Possible effects:
 * * Spawn bananapeel
 * * Spawn random reagent foam
 * * Make the clown car look like a singulo temporarily
 * * Spawn Laughing chem gas
 * * Drop oil
 * * Fart and make everyone nearby laugh
 */
///resets the icon and iconstate of the clowncar after it was set to singulo states
///Deploys oil when the clowncar moves in oil deploy mode
///Stops dropping oil after the time has run up
///Toggles the on and off state of the clown cannon that shoots random kidnapped people
///Finalizes canon activation
///Finalizes canon deactivation
///Fires the cannon where the user clicks
///Increments the thanks counter every time someone thats been kidnapped thanks the driver
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_actions.dm. ----------------------
/***************** MECHA ACTIONS *****************/
//////////////////////////////////////// Specific Ability Actions  ///////////////////////////////////////////////
//Need to be granted by the mech type, Not default abilities.
///swap seats, for two person mecha
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_construction_paths.dm. ----------------------
////////////////////////////////
///// Construction datums //////
////////////////////////////////
// Default proc to generate mech steps.
// Override if the mech needs an entirely custom process (See HONK mech)
// Otherwise override specific steps as needed (Ripley, Clarke, Phazon)
// Default proc for the first steps of mech construction.
// Default proc for the circuit board steps of a mech.
// Second set of steps by default.
// Default proc for weapon circuitboard steps
// Used by combat mechs
// Default proc for stock part installation
// Third set of steps by default
// Default proc for inner armor plating
// Fourth set of steps by default
// Default proc for outer armor plating
// Fifth set of steps by default
//Begin Medigax
// End Medigax
// HONK doesn't have any construction step icons, so we just set an icon once.
//PHAZON
//ODYSSEUS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_control_console.dm. ----------------------
/**
  * Returns a html formatted string describing attached mech status
  */
/**
  * Attempts to EMP mech that the tracker is attached to, if there is one and tracker is not on cooldown
  */
/**
  * Resets recharge variable, allowing tracker to be EMP pulsed again
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_parts.dm. ----------------------
/////////////////////////
////// Mecha Parts //////
/////////////////////////
/////////// Ripley
//Firefighter
///////// Odysseus
///////// Gygax
///////// Medical Gygax
//////////// Durand
////////// HONK
////////// Phazon
///////// Circuitboards
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_topic.dm. ----------------------
////////////////////////////////////
///// Rendering stats window ///////
////////////////////////////////////
///Returns the status of the mech.
///Returns HTML for mech actions. Ideally, this proc would be empty for the base mecha. Segmented for easy refactoring.
///HTML for internal damage.
///HTML for list of equipment.
///HTML for commands.
/////////////////
///// Topic /////
/////////////////
///Repairs internal damage if the mech hasn't moved.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mecha_wreckage.dm. ----------------------
///////////////////////////////////
////////  Mecha wreckage   ////////
///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mech_bay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mech_fabricator.dm. ----------------------
/**
  * Generates an info list for a given part.
  *
  * Returns a list of part information.
  * * D - Design datum to get information on.
  * * categories - Boolean, whether or not to parse snowflake categories into the part information list.
  */
/**
  * Generates a list of resources / materials available to this Exosuit Fab
  *
  * Returns null if there is no material container available.
  * List format is list(material_name = list(amount = ..., ref = ..., etc.))
  */
/**
  * Intended to be called when an item starts printing.
  *
  * Adds the overlay to show the fab working and sets active power usage settings.
  */
/**
  * Intended to be called when the exofab has stopped working and is no longer printing items.
  *
  * Removes the overlay to show the fab working and sets idle power usage settings. Additionally resets the description and turns off queue processing.
  */
/**
  * Calculates resource/material costs for printing an item based on the machine's resource coefficient.
  *
  * Returns a list of k,v resources with their amounts.
  * * D - Design datum to calculate the modified resource cost of.
  */
/**
  * Checks if the Exofab has enough resources to print a given item.
  *
  * Returns FALSE if the design has no reagents used in its construction (?) or if there are insufficient resources.
  * Returns TRUE if there are sufficient resources to print the item.
  * * D - Design datum to calculate the modified resource cost of.
  */
/**
  * Attempts to build the next item in the build queue.
  *
  * Returns FALSE if either there are no more parts to build or the next part is not buildable.
  * Returns TRUE if the next part has started building.
  * * verbose - Whether the machine should use say() procs. Set to FALSE to disable the machine saying reasons for failure to build.
  */
/**
  * Starts the build process for a given design datum.
  *
  * Returns FALSE if the procedure fails. Returns TRUE when being_built is set.
  * Uses materials.
  * * D - Design datum to attempt to print.
  * * verbose - Whether the machine should use say() procs. Set to FALSE to disable the machine saying reasons for failure to build.
  */
/**
  * Dispenses a part to the tile infront of the Exosuit Fab.
  *
  * Returns FALSE is the machine cannot dispense the part on the appropriate turf.
  * Return TRUE if the part was successfully dispensed.
  * * D - Design datum to attempt to dispense.
  */
/**
  * Adds a list of datum designs to the build queue.
  *
  * Will only add designs that are in this machine's stored techweb.
  * Does final checks for datum IDs and makes sure this machine can build the designs.
  * * part_list - List of datum design ids for designs to add to the queue.
  */
/**
  * Adds a datum design to the build queue.
  *
  * Returns TRUE if successful and FALSE if the design was not added to the queue.
  * * D - Datum design to add to the queue.
  */
/**
  * Removes datum design from the build queue based on index.
  *
  * Returns TRUE if successful and FALSE if a design was not removed from the queue.
  * * index - Index in the build queue of the element to remove.
  */
/**
  * Generates a list of parts formatted for tgui based on the current build queue.
  *
  * Returns a formatted list of lists containing formatted part information for every part in the build queue.
  */
/**
  * Syncs machine with R&D servers.
  *
  * Requires an R&D Console visible within 7 tiles. Copies techweb research. Updates tgui's state data.
  */
/**
  * Calculates the coefficient-modified resource cost of a single material component of a design's recipe.
  *
  * Returns coefficient-modified resource cost for the given material component.
  * * D - Design datum to pull the resource cost from.
  * * resource - Material datum reference to the resource to calculate the cost of.
  * * roundto - Rounding value for round() proc
  */
/**
  * Calculates the coefficient-modified build time of a design.
  *
  * Returns coefficient-modified build time of a given design.
  * * D - Design datum to calculate the modified build time of.
  * * roundto - Rounding value for round() proc
  */
/**
  * Eject material sheets.
  *
  * Returns the number of sheets successfully ejected.
  * eject_sheet - Byond REF of the material to eject.
  *	eject_amt - Number of sheets to attempt to eject.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\mech_melee_attack.dm. ----------------------
///Called when a mech melee attacks an atom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\_mecha.dm. ----------------------
/***************** WELCOME TO MECHA.DM, ENJOY YOUR STAY *****************/
/**
  * Mechs are now (finally) vehicles, this means you can make them multicrew
  * They can also grant select ability buttons based on occupant bitflags
  *
  * Movement is handled through vehicle_move() which is called by relaymove
  * Clicking is done by way of signals registering to the entering mob
  * NOTE: MMIS are NOT mobs but instead contain a brain that is, so you need special checks
  * AI also has special checks becaus it gets in and out of the mech differently
  * Always call remove_occupant(mob) when leaving the mech so the mob is removed properly
  *
  * For multi-crew, you need to set how the occupants recieve ability bitflags corresponding to their status on the vehicle(i.e: driver, gunner etc)
  * Abilities can then be set to only apply for certain bitflags and are assigned as such automatically
  *
  * Clicks are wither translated into mech_melee_attack (see mech_melee_attack.dm)
  * Or are used to call action() on equipped gear
  * Cooldown for gear is on the mech because exploits
  */
//override this proc if you need to split up mecha control between multiple people (see savannah_ivanov.dm)
////////////////////////
////// Helpers /////////
////////////////////////
///Adds a cell, for use in Map-spawned mechs, Nuke Ops mechs, and admin-spawned mechs. Mechs built by hand will replace this.
///Adds a scanning module, for use in Map-spawned mechs, Nuke Ops mechs, and admin-spawned mechs. Mechs built by hand will replace this.
///Adds a capacitor, for use in Map-spawned mechs, Nuke Ops mechs, and admin-spawned mechs. Mechs built by hand will replace this.
////////////////////////////////////////////////////////////////////////////////
//processing internal damage, temperature, air regulation, alert updates, lights power use.
//Diagnostic HUD updates
////////////////////////////
///// Action processing ////
////////////////////////////
//////////////////////////////////
////////  Movement procs  ////////
//////////////////////////////////
///Plays the mech step sound effect. Split from movement procs so that other mechs (HONK) can override this one specific part.
///////////////////////////////////
////////  Internal damage  ////////
///////////////////////////////////
/////////////////////////////////////
//////////// AI piloting ////////////
/////////////////////////////////////
//Hack and From Card interactions share some code, so leave that here for both to use.
///Handles an actual AI (simple_animal mecha pilot) entering the mech
///Handles an actual AI (simple_animal mecha pilot) exiting the mech
/////////////////////////////////////
////////  Atmospheric stuff  ////////
/////////////////////////////////////
/////////////////////////
////// Access stuff /////
/////////////////////////
///////////////////////
///// Power stuff /////
///////////////////////
///////////////////////
////// Ammo stuff /////
///////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\combat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\durand.dm. ----------------------
///Relays the signal from the action button to the shield, and creates a new shield if the old one is MIA.
//Redirects projectiles to the shield if defense_check decides they should be blocked and returns true.
/**Checks if defense mode is enabled, and if the attacker is standing in an area covered by the shield.
Expects a turf. Returns true if the attack should be blocked, false if not.*/
////////////////////////////
///// Shield processing ////
////////////////////////////
/**An object to take the hit for us when using the Durand's defense mode.
It is spawned in during the durand's initilization, and always stays on the same tile.
Normally invisible, until defense mode is actvated. When the durand detects an attack that should be blocked, the
attack is passed to the shield. The shield takes the damage, uses it to calculate charge cost, and then sets its
own integrity back to max. Shield is automatically dropped if we run out of power or the user gets out.*/
/**
  *Handles activating and deactivating the shield. This proc is called by a signal sent from the mech's action button
  *and relayed by the mech itself. The "forced" variabe, signal_args[1], will skip the to-pilot text and is meant for when
  *the shield is disabled by means other than the action button (like running out of power)
  * Arguments:
  * * source: the shield
  * * owner: mob that activated the shield
  * * signal_args: whether it's forced
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\five_stars.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\gygax.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\honker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\marauder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\medigax.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\neovgre.dm. ----------------------
//override this proc if you need to split up mecha control between multiple people (see savannah_ivanov.dm)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\phazon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\combat\reticence.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\mecha_equipment.dm. ----------------------
//DO NOT ADD MECHA PARTS TO THE GAME WITH THE DEFAULT "SPRITE ME" SPRITE!
//I'm annoyed I even have to tell you this! SPRITE FIRST, then commit.
/// do after checks for the mecha equipment do afters
//Used for reloading weapons/tools etc. that use some form of resource
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\tools\medical_tools.dm. ----------------------
// Sleeper, Medical Beam, and Syringe gun
///////////////////////////////// Syringe Gun ///////////////////////////////////////////////////////////////
///////////////////////////////// Medical Beam ///////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\tools\mining_tools.dm. ----------------------
// Drill, Diamond drill, Mining scanner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\tools\other_tools.dm. ----------------------
// Teleporter, Wormhole generator, Gravitational catapult, Armor booster modules,
// Repair droid, Tesla Energy relay, Generators
////////////////////////////////////////////// TELEPORTER ///////////////////////////////////////////////
////////////////////////////////////////////// WORMHOLE GENERATOR //////////////////////////////////////////
/////////////////////////////////////// GRAVITATIONAL CATAPULT ///////////////////////////////////////////
//////////////////////////// ARMOR BOOSTER MODULES //////////////////////////////////////////////////////////
////////////////////////////////// REPAIR DROID //////////////////////////////////////////////////
/////////////////////////////////// TESLA ENERGY RELAY ////////////////////////////////////////////////
/////////////////////////////////////////// GENERATOR /////////////////////////////////////////////
/////////////////////////////////////////// THRUSTERS /////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\tools\weapon_bay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\tools\work_tools.dm. ----------------------
//Hydraulic clamp, Kill clamp, Extinguisher, RCD, Cable layer.
//This is pretty much just for the death-ripley
//Dunno where else to put this so shrug
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\weapons\mecha_ammo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\equipment\weapons\weapons.dm. ----------------------
//Base energy weapon type
//Base ballistic weapon type
//used for projectile initilisation (priming flashbang) and additional logging
//Classic extending punching glove, but weaponised!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\medical\odysseus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\working\ripley.dm. ----------------------
/**
  * Makes the mecha go faster and halves the mecha drill cooldown if in Lavaland pressure.
  *
  * Checks for Lavaland pressure, if that works out the mech's speed is equal to fast_pressure_step_in and the cooldown for the mecha drill is halved. If not it uses slow_pressure_step_in and drill cooldown is normal.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vehicles\mecha\working\working.dm. ----------------------
/**
  * Handles collecting ore.
  *
  * Checks for a hydraulic clamp or ore box manager and if it finds an ore box inside them puts ore in the ore box.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\assist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\autodrobe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\barkbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\boozeomat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\cartridge.dm. ----------------------
//This one's from bay12
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\cigarette.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\clothesmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\coffee.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\cola.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\dinnerware.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\engineering.dm. ----------------------
//This one's from bay12
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\engivend.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\games.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\kinkmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\liberation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\liberation_toy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\magivend.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\medical_wall.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\megaseed.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\nutrimax.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\plasmaresearch.dm. ----------------------
//This one's from bay12
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\robotics.dm. ----------------------
//This one's from bay12
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\snack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\sovietsoda.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\sovietvend.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\sustenance.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\toys.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\wardrobes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\youtool.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vending\_vending.dm. ----------------------
/*
 * Vending machine types - Can be found under /code/modules/vending/
 */
/*

/obj/machinery/vending/[vendors name here]   // --vending machine template   :)
	name = ""
	desc = ""
	icon = ''
	icon_state = ""
	products = list()
	contraband = list()
	premium = list()
*/
/**
 * # vending record datum
 *
 * A datum that represents a product that is vendable
 */
/**
 * # vending machines
 *
 * Captalism in the year 2525, everything in a vending machine, even love
 */
/**
 * Initialize the vending machine
 *
 * Builds the vending machine inventory, sets up slogans and other such misc work
 *
 * This also sets the onstation var to:
 * * FALSE - if the machine was maploaded on a zlevel that doesn't pass the is_station_level check
 * * TRUE - all other cases
 */
/**
 * Build the inventory of the vending machine from it's product and record lists
 *
 * This builds up a full set of /datum/data/vending_products from the product list of the vending machine type
 * Arguments:
 * * productlist - the list of products that need to be converted
 * * recordlist - the list containing /datum/data/vending_product datums
 * * startempty - should we set vending_product record amount from the product list (so it's prefilled at roundstart)
 */
/**
 * Refill a vending machine from a refill canister
 *
 * This takes the products from the refill canister and then fills the products,contraband and premium product categories
 *
 * Arguments:
 * * canister - the vending canister we are refilling from
 */
/**
 * Refill our inventory from the passed in product list into the record list
 *
 * Arguments:
 * * productlist - list of types -> amount
 * * recordlist - existing record datums
 */
/**
 * Set up a refill canister that matches this machines products
 *
 * This is used when the machine is deconstructed, so the items aren't "lost"
 */
/**
 * Given a record list, go through and and return a list of type -> amount
 */
///Tilts ontop of the atom supplied, if crit is true some extra shit can happen. Returns TRUE if it dealt damage to something.
/**
 * Is the passed in user allowed to load this vending machines compartments
 *
 * Arguments:
 * * user - mob that is doing the loading of the vending machine
 */
// /obj/machinery/vending/proc/select_colors(list/params)
// 	. = TRUE
// 	if(!can_vend(usr))
// 		return
// 	var/datum/data/vending_product/product = locate(params["ref"])
// 	var/atom/fake_atom = product.product_path
// 	var/list/allowed_configs = list()
// 	var/config = initial(fake_atom.greyscale_config)
// 	if(!config)
// 		return
// 	allowed_configs += "[config]"
// 	if(ispath(fake_atom, /obj/item))
// 		var/obj/item/item = fake_atom
// 		if(initial(item.greyscale_config_worn))
// 			allowed_configs += "[initial(item.greyscale_config_worn)]"
// 		if(initial(item.greyscale_config_inhand_left))
// 			allowed_configs += "[initial(item.greyscale_config_inhand_left)]"
// 		if(initial(item.greyscale_config_inhand_right))
// 			allowed_configs += "[initial(item.greyscale_config_inhand_right)]"
// 	var/datum/greyscale_modify_menu/menu = new(
// 		src, usr, allowed_configs, CALLBACK(src, .proc/vend_greyscale, params),
// 		starting_icon_state=initial(fake_atom.icon_state),
// 		starting_config=initial(fake_atom.greyscale_config),
// 		starting_colors=initial(fake_atom.greyscale_colors)
// 	)
// 	menu.ui_interact(usr)
// /obj/machinery/vending/proc/vend_greyscale(list/params, datum/greyscale_modify_menu/menu)
// 	if(usr != menu.user)
// 		return
// 	if(!menu.target.can_interact(usr))
// 		return
// 	vend(params, menu.split_colors)
/**
 * Speak the given message verbally
 *
 * Checks if the machine is powered and the message exists
 *
 * Arguments:
 * * message - the message to speak
 */
//Somebody cut an important wire and now we're following a new definition of "pitch."
/**
 * Throw an item from our internal inventory out in front of us
 *
 * This is called when we are hacked, it selects a random product from the records that has an amount > 0
 * This item is then created and tossed out in front of us with a visible message
 */
/**
 * A callback called before an item is tossed out
 *
 * Override this if you need to do any special case handling
 *
 * Arguments:
 * * I - obj/item being thrown
 */
/**
 * Shock the passed in user
 *
 * This checks we have power and that the passed in prob is passed, then generates some sparks
 * and calls electrocute_mob on the user
 *
 * Arguments:
 * * user - the user to shock
 * * prb - probability the shock happens
 */
/**
 * Are we able to load the item passed in
 *
 * Arguments:
 * * I - the item being loaded
 * * user - the user doing the loading
 */
///Crush the mob that the vending machine got thrown at
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\hook-defs.dm. ----------------------
//The base hooks themselves
//New() hooks
//Hooks for interactions
//
//Hook helpers to expand hooks to others
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\persistence.dm. ----------------------
/*
* Returns a byond list that can be passed to the "deserialize" proc
* to bring a new instance of this atom to its original state
*
* If we want to store this info, we can pass it to `json_encode` or some other
* interface that suits our fancy, to make it into an easily-handled string
*/
/*
* This is given the byond list from above, to bring this atom to the state
* described in the list.
* This will be called after `New` but before `initialize`, so linking and stuff
* would probably be handled in `initialize`
*
* Also, this should only be called by `list_to_object` in persistence.dm - at least
* with current plans - that way it can actually initialize the type from the list
*/
// This is so specific atoms can override these, and ignore certain ones
// No need to save any state of an area by default
/*
Whoops, forgot to put documentation here.
What this does, is take a JSON string produced by running
BYOND's native `json_encode` on a list from `serialize` above, and
turns that string into a new instance of that object.

You can also easily get an instance of this string by calling "Serialize Marked Datum"
in the "Debug" tab.

If you're clever, you can do neat things with SDQL and this, though be careful -
some objects, like humans, are dependent that certain extra things are defined
in their list
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\trycatch.dm. ----------------------
/*
This file is for jamming single-line procs into Polaris procs.
It will prevent runtimes and allow their code to run if these fail.
It will also log when we mess up our code rather than making it vague.

Call it at the top of a stock proc with...

if(attempt_vr(object,proc to call,args)) return

...if you are replacing an entire proc.

The proc you're attemping should return nonzero values on success.
*/
/*
This is the _vr version of calling hooks.
It's meant to have different messages, and also the try/catch block.
For when you want hooks and want to know when you ruin everything,
vs when Polaris ruins everything.

Call it at the top of a stock proc with...

if(hook_vr(proc,args)) return

...if you are replacing an entire proc.

The hooks you're calling should return nonzero values on success.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\bellymodes.dm. ----------------------
// Process the predator's effects upon the contents of its belly (i.e digestion/transformation etc)
/////////////////////////// Auto-Emotes ///////////////////////////
///////////////////// Prey Loop Refresh/hack //////////////////////
/////////////////////////// Exit Early ////////////////////////////
//////////////////////// Absorbed Handling ////////////////////////
////////////////////////// Sound vars /////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\belly_dat_vr.dm. ----------------------
// THIS IS NOW MERELY LEGACY, because memes. hopefully it won't be dumb.
//
//	The belly object is what holds onto a mob while they're inside a predator.
//	It takes care of altering the pred's decription, digesting the prey, relaying struggles etc.
//
// If you change what variables are on this, then you need to update the copy() proc.
//
// Parent type of all the various "belly" varieties.
//
//	var/silenced = FALSE					// Will the heartbeat/fleshy internal loop play?
//OLD: This only exists for legacy conversion purposes
//It's called whenever an old datum-style belly is loaded
// // // // // // // // // // // //
// // // LEGACY USE ONLY!! // // //
// // // // // // // // // // // //
//       See top of file!        //
// // // // // // // // // // // //
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\belly_obj.dm. ----------------------
//
//  Belly system 2.0, now using objects instead of datums because EH at datums.
//	How many times have I rewritten bellies and vore now? -Aro
//
// If you change what variables are on this, then you need to update the copy() proc.
//
// Parent type of all the various "belly" varieties.
//
//	var/shrink_grow_size = 1				// This horribly named variable determines the minimum/maximum size it will shrink/grow prey to.
//For serialization, keep this updated AND IN ORDER OF VARS LISTED ABOVE AND IN DUPE AT THE BOTTOM!!, required for bellies to save correctly.
// Called whenever an atom enters this belly
// Release all contents of this belly into the owning mob's location.
// If that location is another mob, contents are transferred into whichever of its bellies the owning mob is in.
// Returns the number of mobs so released.
//	var/atom/destination = drop_location()
// Release a specific atom from the contents of this belly into the owning mob's location.
// If that location is another mob, the atom is transferred into whichever of its bellies the owning mob is in.
// Returns the number of atoms so released.
// Actually perform the mechanics of devouring the tasty prey.
// The purpose of this method is to avoid duplicate code, and ensure that all necessary
// steps are taken.
//Transfers contents from one belly to another
// Get the line that should show up in Examine message if the owner of this belly
// is examined.   By making this a proc, we not only take advantage of polymorphism,
// but can easily make the message vary based on how many people are inside, etc.
// Returns a string which shoul be appended to the Examine output.
// The next function gets the messages set on the belly, in human-readable format.
// This is useful in customization boxes and such. The delimiter right now is \n\n so
// in message boxes, this looks nice and is easily delimited.
// The next function sets the messages on the belly, from human-readable var
// replacement strings and linebreaks as delimiters (two \n\n by default).
// They also sanitize the messages.
// Handle the death of a mob via digestion.
// Called from the process_Life() methods of bellies that digest prey.
// Default implementation calls M.death() and removes from internal contents.
// Indigestable items are removed, and M is deleted.
// Handle a mob being absorbed
//Digest a single item
//Receives a return value from digest_act that's how much nutrition
//the item should be worth
//		owner.adjust_nutrition(5 * digested) // haha no.
//Determine where items should fall out of us into.
//Typically just to the owner's location.
//Yes, it's ""safe"" to drop items here
//Handle a mob struggling
// Called from /mob/living/carbon/relaymove()
// Belly copies and then returns the copy
// Needs to be updated for any var changes AND KEPT IN ORDER OF THE VARS ABOVE AS WELL!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\digest_act.dm. ----------------------
//Please make sure to:
//return FALSE: You are not going away, stop asking me to digest.
//return non-negative integer: Amount of nutrition/charge gained (scaled to nutrition, other end can multiply for charge scale).
// Ye default implementation.
/////////////
// Some indigestible stuff
/////////////
/////////////
// Some special treatment
/////////////
/////////////
// Some more complicated stuff
/////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\living.dm. ----------------------
///////////////////// Mob Living /////////////////////
//
// Hook for generic creation of stuff on new creatures
//
// Handle being clicked, perhaps with something to devour
//
//
// Eating procs depending on who clicked what
//
//
// Master vore proc that actually does vore procedures
//
//
//End vore code.
//
// Our custom resist catches for /mob/living
//
// internal slimy button in case the loop stops playing but the player wants to hear it
// OOC Escape code for pref-breaking or AFK preds
//
//
//	Proc for applying vore preferences, given bellies
//
//
// Release everything in every vore organ
//
//
// Returns examine messages for bellies
//
//
// Whether or not people can see our belly messages
//
//
// Clearly super important. Obviously.
//
//
// Equally important as the above
//
//	Check if an object is capable of eating things, based on vore_organs
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\voreitems.dm. ----------------------
// -------------- Sickshot -------------
//Projectile
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\vore\eating\vorepanel.dm. ----------------------
//
// Vore management panel for players
//
//
// Callback Handler for the Inside form
//
// This looks weird, but all tgui_host is used for is state checking
// So this allows us to use the self_state just fine.
// Note, in order to allow others to look at others vore panels, this state would need
// to be modified.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\VR\vr_mob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\VR\vr_sleeper.dm. ----------------------
//Glorified teleporter that puts you in a new human body.
// it's """VR"""
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\abstract\compare.dm. ----------------------
/**
 * # Compare Component
 *
 * Abstract component to build conditional components
 */
/**
 * Used by derivatives to load their own ports in for custom use.
 */
/// Do the comparisons and return a result
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\abstract\module.dm. ----------------------
/**
 * # Module Component
 *
 * A component that has an input, output
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\light.dm. ----------------------
/**
 * # Light Component
 *
 * Emits a light of a specific brightness and colour. Requires a shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\mmi.dm. ----------------------
/**
 * # Man-Machine Interface Component
 *
 * Allows an MMI to be inserted into a shell, allowing it to be linked up. Requires a shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\pathfind.dm. ----------------------
/**
 * # Pathfinding component
 *
 * Calcualtes a path, returns a list of entities. Each entity is the next step in the path. Can be used with the direction component to move.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\pull.dm. ----------------------
/**
 * # Pull Component
 *
 * Tells the shell to start pulling on a designated atom. Only works on movable shells.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\radio.dm. ----------------------
/**
 * # Radio Component
 *
 * Listens out for signals on the designated frequencies and sends signals on designated frequencies
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\soundemitter.dm. ----------------------
/**
 * # Sound Emitter Component
 *
 * A component that emits a sound when it receives an input.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\action\speech.dm. ----------------------
/**
 * # Speech Component
 *
 * Sends a message. Requires a shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\getvar.dm. ----------------------
/**
 * # Get Variable Component
 *
 * A component that gets a variable on an object
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\proccall.dm. ----------------------
/**
 * # Proc Call Component
 *
 * A component that calls a proc on an object and outputs the return value
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\sdql.dm. ----------------------
/**
 * # SDQL Component
 *
 * A component that performs an sdql operation
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\setvar.dm. ----------------------
/**
 * # Set Variable Component
 *
 * A component that sets a variable on an object
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\spawn.dm. ----------------------
/**
 * # Spawn Atom Component
 *
 * Spawns an atom.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\admin\to_type.dm. ----------------------
/**
 * # To Type Component
 *
 * Converts a string into a typepath. Useful for adding components.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\direction.dm. ----------------------
/**
 * # Direction Component
 *
 * Return the direction of a mob relative to the component
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\gps.dm. ----------------------
/**
 * # GPS Component
 *
 * Return the location of this
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\health.dm. ----------------------
/**
 * # Get Health Component
 *
 * Return the health of a mob
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\hear.dm. ----------------------
/**
 * # Hear Component
 *
 * Listens for messages. Requires a shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\self.dm. ----------------------
/**
 * # Self Component
 *
 * Return the current shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\atom\species.dm. ----------------------
/**
 * # Get Species Component
 *
 * Return the species of a mob
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\hud\bar_overlay.dm. ----------------------
/**
 * # Bar Overlay Component
 *
 * Basically an advanced verion of object overlay component that shows a horizontal/vertical bar.
 * Requires a BCI shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\hud\counter_overlay.dm. ----------------------
/**
 * # Counter Overlay Component
 *
 * Shows an counter overlay.
 * Requires a BCI shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\hud\object_overlay.dm. ----------------------
/**
 * # Object Overlay Component
 *
 * Shows an overlay ontop of an object. Toggleable.
 * Requires a BCI shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\hud\target_intercept.dm. ----------------------
/**
 * # Target Intercept Component
 *
 * When activated intercepts next click and outputs clicked atom.
 * Requires a BCI shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\concat.dm. ----------------------
/**
 * # Concat List Component
 *
 * Concatenates a list with a separator
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\get_column.dm. ----------------------
/**
 * # Get Column Component
 *
 * Gets the column of a table and returns it as a regular list.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\index.dm. ----------------------
/**
 * # Index Component
 *
 * Return the index of a list
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\index_table.dm. ----------------------
/**
 * # Index Table Component
 *
 * Gets the row of a table using the index inputted. Will return no value if the index is invalid or a proper table is not returned.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\list_literal.dm. ----------------------
/**
 * # List Literal Component
 *
 * Return a list literal.
 */
// Increases list length
// Decreases list length
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\select.dm. ----------------------
/**
 * # Select Component
 *
 * Selects a list from a list of lists by a specific column. Used only by USBs for communications to and from computers with lists of varying sizes.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\list\split.dm. ----------------------
/**
 * # Split component
 *
 * Splits a string
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\arithmetic.dm. ----------------------
/**
 * # Arithmetic Component
 *
 * General arithmetic unit with add/sub/mult/divide capabilities
 * This one only works with numbers.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\comparison.dm. ----------------------
/**
 * # Comparison Component
 *
 * Compares two objects
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\length.dm. ----------------------
/**
 * # Length Component
 *
 * Return the length of an input
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\logic.dm. ----------------------
/**
 * # Logic Component
 *
 * General logic unit with AND OR capabilities
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\not.dm. ----------------------
/**
 * # Logic Component
 *
 * General logic unit with AND OR capabilities
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\math\random.dm. ----------------------
/**
 * # Random Component
 *
 * Generates a random number between specific values
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\ntnet\ntnet_receive.dm. ----------------------
/**
 * # NTNet Receiver Component
 *
 * Receives data through NTNet.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\ntnet\ntnet_send.dm. ----------------------
/**
 * # NTNet Transmitter Component
 *
 * Sends a data package through NTNet
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\sensors\pressuresensor.dm. ----------------------
/**
 * # Pressure Sensor
 *
 * Returns the pressure of the tile
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\sensors\tempsensor.dm. ----------------------
/**
 * # Temperature Sensor
 *
 * Returns the temperature of the tile
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\string\concat.dm. ----------------------
/**
 * # Concatenate Component
 *
 * General string concatenation component. Puts strings together.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\string\contains.dm. ----------------------
/**
 * # String Contains Component
 *
 * Checks if a string contains a word/letter
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\string\textcase.dm. ----------------------
/**
 * # Text Component
 *
 * Either makes the text upper case or lower case.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\string\tonumber.dm. ----------------------
/**
 * #To Number Component
 *
 * Converts a string into a Number
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\string\tostring.dm. ----------------------
/**
 * # To String Component
 *
 * Converts any value into a string
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\clock.dm. ----------------------
/**
 * # Clock Component
 *
 * Fires every tick of the circuit timer SS
 */
/**
 * Adds the component to the SSclock_component process list
 *
 * Starts ticking to send signals between periods of time
 */
/**
 * Removes the component to the SSclock_component process list
 *
 * Signals stop getting sent.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\delay.dm. ----------------------
/// The minimum delay value that the delay component can have.
/**
 * # Delay Component
 *
 * Delays a signal by a specified duration.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\getter.dm. ----------------------
/**
 * # Getter Component
 *
 * Gets the current value from a variable.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\router.dm. ----------------------
/**
 * # Router Component
 *
 * Writes one of multiple inputs to one of multiple outputs.
 */
// If I is in range, L[I]. If I is out of range, wrap around.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\setter.dm. ----------------------
/**
 * # Setter Component
 *
 * Stores the current input when triggered into a variable.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\typecast.dm. ----------------------
/**
 * # Typecast Component
 *
 * A component that casts a value to a type if it matches or outputs null.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\components\utility\typecheck.dm. ----------------------
/**
 * # Typecheck Component
 *
 * Checks the type of a value
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\admin_panel.dm. ----------------------
/// An admin verb to view all circuits, plus useful information
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\component.dm. ----------------------
/**
 * # Integrated Circuit Component
 *
 * A component that performs a function when given an input
 *
 * Can be attached to an integrated circuitboard, where it can then
 * be connected between other components to provide an output or to receive
 * an input. This is the base type of all components
 */
/// Called when the option ports should be set up
/// Extension of add_input_port. Simplifies the code to make an option port to reduce boilerplate
/**
 * Called when a shell is registered from the component/the component is added to a circuit.
 *
 * Register all signals here on the shell.
 * Arguments:
 * * shell - Shell being registered
 */
/**
 * Called when a shell is unregistered from the component/the component is removed from a circuit.
 *
 * Unregister all signals here on the shell.
 * Arguments:
 * * shell - Shell being unregistered
 */
/**
 * Disconnects a component from other components
 *
 * Disconnects both the input and output ports of the component
 */
/**
 * Adds an input port and returns it
 *
 * Arguments:
 * * name - The name of the input port
 * * type - The datatype it handles
 * * trigger - Whether this input port triggers an update on the component when updated.
 */
/**
 * Removes an input port and deletes it. This will not cleanup any references made by derivatives of the circuit component
 *
 * Arguments:
 * * input_port - The input port to remove.
 */
/**
 * Adds an output port and returns it
 *
 * Arguments:
 * * name - The name of the output port
 * * type - The datatype it handles.
 */
/**
 * Removes an output port and deletes it. This will not cleanup any references made by derivatives of the circuit component
 *
 * Arguments:
 * * output_port - The output port to remove.
 */
/**
 * Called whenever an input is received from one of the ports.
 *
 * Return value indicates that the circuit should not do anything. Also prevents an output signal.
 * Arguments:
 * * port - Can be null. The port that sent the input
 */
/// Called when this component is about to be added to an integrated_circuit.
/// Called when this component is removed from an integrated_circuit.
/**
 * Gets the UI notices to be displayed on the CircuitInfo panel.
 *
 * Returns a list of buttons in the following format
 * list(
 *   "icon" = ICON(string)
 *   "content" = CONTENT(string)
 *   "color" = COLOR(string, not a hex)
 * )
 */
/**
 * Creates a UI notice entry to be used in get_ui_notices()
 *
 * Returns a list that can then be added to the return list in get_ui_notices()
 */
/**
 * Creates a table UI notice entry to be used in get_ui_notices()
 *
 * Returns a list that can then be added to the return list in get_ui_notices()
 * Used by components to list their available columns. Recommended to use at the end of get_ui_notices()
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\component_printer.dm. ----------------------
/// Component printer, creates components for integrated circuits.
/// Module duplicator, allows you to save and recreate module components.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\datatypes.dm. ----------------------
// An assoc list of all the possible datatypes.
/**
 * A circuit datatype. Used to determine the datatype of a port and also handle any additional behaviour.
 */
/**
 * Returns the value to be set for the port
 *
 * Used for implicit conversions between outputs and inputs (e.g. number -> string)
 * and applying/removing signals on inputs
 */
/**
 * Determines if a datatype is compatible with another port of a different type.
 * Note: This is ALWAYS called on the input port, never on the output port.
 * Inputs need to care about what types they're receiving, output ports don't have to care.
 *
 * Arguments:
 * * datatype_to_check - The datatype to check
 */
/**
 * Called when the datatype is given to a port.
 *
 * Arguments:
 * * gained_port - The gained port.
 */
/**
 * Called when the datatype is removed from a port.
 *
 * Arguments:
 * * lost_port - The removed port.
 */
/**
 * Determines if a port is compatible with this datatype.
 * This WILL throw a runtime if it returns false. This is for sanity checking and it should not return false
 * unless under extraordinary circumstances or people fail to write proper code.
 *
 * Arguments:
 * * port - The port to check if it is compatible.
 */
/**
 * The data to send to the UI attached to the port. Received by the type in FUNDAMENTAL_PORT_TYPES
 *
 * Arguments:
 * * port - The port sending the data.
 */
/**
 * When an input is manually set by a player. This is where extra sanitizing can happen. Will still call convert_value()
 *
 * Arguments:
 * * port - The port sending the data.
 * *
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\duplicator.dm. ----------------------
// Determines if a port can have a predefined input value if it is of this type.
/// Loads a circuit based on json data at a location. Can also load usb connections, such as arrest consoles.
/// Converts a circuit into json.
/// Saves data to a list. Shouldn't be used unless you are quite literally saving the data of a component to a list. Input value is the list to save the data to
/// Loads data from a list
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\integrated_circuit.dm. ----------------------
/// A list of all integrated circuits
/**
 * # Integrated Circuitboard
 *
 * A circuitboard that holds components that work together
 *
 * Has a limited amount of power.
 */
/**
 * Registers an movable atom as a shell
 *
 * No functionality is done here. This is so that input components
 * can properly register any signals on the shell.
 * Arguments:
 * * new_shell - The new shell to register.
 */
/**
 * Unregisters the current shell attached to this circuit.
 */
/**
 * Adds a component to the circuitboard
 *
 * Once the component is added, the ports can be attached to other components
 */
/**
 * Adds a component to the circuitboard through a manual action.
 */
/**
 * Removes a component to the circuitboard
 *
 * This removes all connects between the ports
 */
/// Sets the display name that appears on the shell.
/**
 * Returns the creator of the integrated circuit. Used in admin messages and other related things.
 */
/**
 * Returns the creator of the integrated circuit. Used in admin logs and other related things.
 */
/// Attempts to save a circuit to a given client
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\marker.dm. ----------------------
/// Clears the current marked atom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\port.dm. ----------------------
/**
 * # Component Port
 *
 * A port used by a component. Connects to other ports.
 */
/**
 * Sets the port's value to value.
 * Casts to the port's datatype (e.g. number -> string), and assumes this can be done.
 */
/**
 * Updates the value of the input and calls input_received on the connected component
 */
/**
 * Sets the datatype of the port.
 *
 * Arguments:
 * * new_type - The type this port is to be set to.
 */
/**
 * Returns the data from the datatype
 */
/**
 * # Output Port
 *
 * An output port that many input ports can connect to
 *
 * Sends a signal whenever the output value is changed
 */
/**
 * Disconnects a port from all other ports.
 *
 * Called by [/obj/item/circuit_component] whenever it is disconnected from
 * an integrated circuit
 */
/// Do our part in setting all source references anywhere to null.
/**
 * # Input Port
 *
 * An input port remembers connected output ports.
 *
 * Registers the PORT_SET_VALUE signal on each connected port,
 * and keeps its value equal to the last such signal received.
 */
/**
 * Introduces two ports to one another.
 */
/**
 * Determines if a datatype is compatible with another port of a different type.
 *
 * Arguments:
 * * other_datatype - The datatype to check
 */
/**
 * Determines if a datatype is compatible with another port of a different type.
 *
 * Arguments:
 * * other_datatype - The datatype to check
 */
/**
 * Mirror value updates from connected output ports after an input_receive_delay.
 */
/// Signal handler proc to null the input if an atom is deleted. An update is not sent because this was not set by anything.
/**
 * Handle type updates from connected output ports, breaking uncastable connections.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\usb_cable.dm. ----------------------
/// A cable that can connect integrated circuits to anything with a USB port, such as computers and machines.
// Look, I'm not happy about this either, but moving an object doesn't call Moved if it's inside something else.
// There's good reason for this, but there's no element or similar yet to track it as far as I know.
// SSobj runs infrequently, this is only ran while there's an attached circuit, its performance cost is negligible.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\core\variable.dm. ----------------------
/**
 * A circuit variable that holds the name, the datatype and the colour of the variable (taken from the datatype).
 *
 * Used in integrated circuits for setter and getter circuit components.
 */
/// Sets the value of the circuit component and triggers the appropriate listeners
/// Adds a listener to receive inputs when the variable has a value that is set.
/// Removes a listener to receive inputs when the variable has a value that is set. Listener will usually clean themselves up
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\any.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\basic.dm. ----------------------
// This file is for types that do not have any special conversion behaviour
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\entity.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\number.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\option.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\signal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\datatypes\string.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\preset\hello_world.dm. ----------------------
/**
 * # Hello World preset
 *
 * Says "Hello World" when triggered. Needs to be wired up and connected first.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\preset\speech_relay.dm. ----------------------
/**
 * # Speech Relay preset
 *
 * Acts like polly. Says whatever it hears.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\airlock.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\bot.dm. ----------------------
/**
 * # Bot
 *
 * Immobile (but not dense) shells that can interact with world.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\brain_computer_interface.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\compact_remote.dm. ----------------------
/**
 * # Compact Remote
 *
 * A handheld device with one big button.
 */
/**
 * Called when the shell item is used in hand.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\controller.dm. ----------------------
/**
 * # Compact Remote
 *
 * A handheld device with several buttons.
 * In game, this translates to having different signals for normal usage, alt-clicking, and ctrl-clicking when in your hand.
 */
/**
 * Called when the shell item is used in hand
 */
/**
 * Called when the shell item is alt-clicked
 */
/**
 * Called when the shell item is right-clicked in active hand
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\drone.dm. ----------------------
/**
 * # Drone
 *
 * A movable mob that can be fed inputs on which direction to travel.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\moneybot.dm. ----------------------
/**
 * # Money Bot
 *
 * Immobile (but not dense) shell that can receive and dispense money.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\scanner.dm. ----------------------
/**
 * # Scanner
 *
 * A handheld device that lets you flash it over people.
 */
/**
 * Called when the shell item attacks something
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\scanner_gate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\server.dm. ----------------------
/**
 * # Server
 *
 * Immobile (but not dense) shells that can interact with
 * world.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\wiremod\shell\shell_items.dm. ----------------------
/**
 * # Shell Item
 *
 * Printed out by protolathes. Screwdriver to complete the shell.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\zombie\items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\modules\zombie\organs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\admin.dm. ----------------------
// /proc/init_smites() //todo: add on the second wave
// 	var/list/smites = list()
// 	for (var/_smite_path in subtypesof(/datum/smite))
// 		var/datum/smite/smite_path = _smite_path
// 		smites[initial(smite_path.name)] = smite_path
// 	return smites
// GLOBAL_LIST_INIT_TYPED(smites, /datum/smite, init_smites())
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\bitfields.dm. ----------------------
/// Specifies a bitfield for smarter debugging
/// Turns /datum/bitfield subtypes into a list for use in debugging
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\configuration.dm. ----------------------
// Debug is used exactly once (in living.dm) but is commented out in a lot of places.  It is not set anywhere and only checked.
// Debug2 is used in conjunction with a lot of admin verbs and therefore is actually legit.
//This was a define, but I changed it to a variable so it can be changed in-game.(kept the all-caps definition because... code...) -Errorage
//Protecting these because the proper way to edit them is with the config/secrets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\game_modes.dm. ----------------------
//TODO clear this one up too
///We want reality_smash_tracker to exist only once and be accesable from anywhere.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\genetics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\logging.dm. ----------------------
/// Log associated with [/proc/log_suspicious_login()] - Intended to hold all logins that failed due to suspicious circumstances such as ban detection, CID randomisation etc.
// GLOBAL_VAR(world_econ_log)
// GLOBAL_PROTECT(world_econ_log)
// GLOBAL_VAR(world_cloning_log)
// GLOBAL_PROTECT(world_cloning_log)
// GLOBAL_VAR(demo_log)
// GLOBAL_PROTECT(demo_log)
/////Picture logging
/////
//// cit logging
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\misc.dm. ----------------------
// All religion stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\regexes.dm. ----------------------
//These are a bunch of regex datums for use /((any|every|no|some|head|foot)where(wolf)?\sand\s)+(\.[\.\s]+\s?where\?)?/i
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\tgui.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\traits.dm. ----------------------
/*
 FUN ZONE OF ADMIN LISTINGS
 Try to keep this in sync with __DEFINES/traits.dm
 quirks have it's own panel so we don't need them here.
*/
/// value -> trait name, generated on use from trait_by_type global
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\achievements.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\client.dm. ----------------------
// This is a mapping from JS keys to Byond - ref: https://keycode.info/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\flavor_misc.dm. ----------------------
//Preferences stuff
//a way to index the right bodypart list given the type of bodypart
//references wag types to regular types, wings open to wings, etc
//Backpacks
//Suit/Skirt
//Uplink spawn loc
// What we show to the user
// What is actually saved; if the uplink implant price changes, it won't affect save files then
//List of cached alpha masked icons.
// Reference list for disposal sort junctions. Set the sortType variable on disposal sort junctions to
// the index of the sort department that you want. For example, sortType set to 2 will reroute all packages
// tagged for the Cargo Bay.
/* List of sortType codes for mapping reference
0 Waste
1 Disposals - All unwrapped items and untagged parcels get picked up by a junction with this sortType. Usually leads to the recycler.
2 Cargo Bay
3 QM Office
4 Engineering
5 CE Office
6 Atmospherics
7 Security
8 HoS Office
9 Medbay
10 CMO Office
11 Chemistry
12 Research
13 RD Office
14 Robotics
15 HoP Office
16 Library
17 Chapel
18 Theatre
19 Bar
20 Kitchen
21 Hydroponics
22 Janitor
23 Genetics
24 Circuitry
25 Toxins
26 Dormitories
27 Virology
28 Xenobiology
29 Law Office
30 Detective's Office
*/
//The whole system for the sorttype var is determined based on the order of this list,
//disposals must always be 1, since anything that's untagged will automatically go to disposals, or sorttype = 1 --Superxpdude
//If you don't want to fuck up disposals, add to this list, and don't change the order.
//If you insist on changing the order, you'll have to change every sort junction to reflect the new order. --Pete
//LANGUAGE CHARACTER CUSTOMIZATION
//SPECIES BODYPART LISTS
//locked parts are those that your picked species requires to have
//unlocked parts are those that anyone can choose on customisation regardless
//parts not in unlocked, but in all, are thus locked
//parts in either of the above two lists that require a second option that allows them to be coloured
//body ids that have greyscale sprites
//body ids that have prosthetic sprites
//body ids that have non-gendered bodyparts
//list of eye types, corresponding to a respective left and right icon state for the set of eyes
//list linking bodypart bitflags to their actual names
// list linking bodypart names back to the bitflags
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\keybindings.dm. ----------------------
/// Creates and sorts all the keybinding datums
/// Adds an instanced keybinding to the global tracker
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\loadout_categories.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\maintenance_loot.dm. ----------------------
//How to balance this table
//-------------------------
//The total added weight of all the entries should be (roughly) equal to the total number of lootdrops
//(take in account those that spawn more than one object!)
//
//While this is random, probabilities tells us that item distribution will have a tendency to look like
//the content of the weighted table that created them.
//The less lootdrops, the less even the distribution.
//
//If you want to give items a weight <1 you can multiply all the weights by 10
//
//the "" entry will spawn nothing, if you increase this value,
//ensure that you balance it with more spawn points
//table data:
//-----------
//aft maintenance: 		24 items, 18 spots 2 extra (28/08/2014)
//asmaint: 				16 items, 11 spots 0 extra (08/08/2014)
//asmaint2:			 	36 items, 26 spots 2 extra (28/08/2014)
//fpmaint:				5  items,  4 spots 0 extra (08/08/2014)
//fpmaint2:				12 items, 11 spots 2 extra (28/08/2014)
//fsmaint:				0  items,  0 spots 0 extra (08/08/2014)
//fsmaint2:				40 items, 27 spots 5 extra (28/08/2014)
//maintcentral:			2  items,  2 spots 0 extra (08/08/2014)
//port:					5  items,  5 spots 0 extra (08/08/2014)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\mapping.dm. ----------------------
//away missions
/// An association from typepath to area instance. Only includes areas with `unique` set.
/// Global list of megafauna spawns on cave gen
///Away missions, VR, random z levels stuff.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\mobs.dm. ----------------------
//Since it didn't really belong in any other category, I'm putting this here
//This is for procs to replace all the goddamn 'in world's that are chilling around the code
/// All alive antags with clients.
/// All observers with clients that joined as observers.
//Dynamic Port
//Family Port
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\names.dm. ----------------------
//loaded on startup because of "
//would include in rsc if ' was used
/*
List of configurable names in preferences and their metadata
"id" = list(
	"pref_name" = "name", //pref label
	"qdesc" =  "name", //popup question text
	"allow_numbers" = FALSE, // numbers allowed in the name
	"group" = "whatever", // group (these will be grouped together on pref ui ,order still follows the list so they need to be concurrent to be grouped)
	"allow_null" = FALSE // if empty name is entered it's replaced with default value
	),
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\poll_ignore.dm. ----------------------
//Each lists stores ckeys for "Never for this round" option category
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_globalvars\lists\typecache.dm. ----------------------
//please store common type caches here.
//type caches should only be stored here if used in mutiple places or likely to be used in mutiple places.
//Note: typecache can only replace istype if you know for sure the thing is at least a datum.
/**
 * Makes a typecache of a single typecache
 * 
 * Obviously in BYOND we don't have the efficiency around here to have proper enforcement so
 * If you use this you better know what you're doing. The list you get back is globally cached and if it's modified, you might break multiple things.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_js\byjax.dm. ----------------------
//this function places received data into element with specified id.
/*
sends data to control_id:replaceContent

receiver - mob
control_id - window id (for windows opened with browse(), it'll be "windowname.browser")
target_element - HTML element id
new_content - HTML content
callback - js function that will be called after the data is sent
callback_args - arguments for callback function

Be sure to include required js functions in your page, or it'll raise an exception.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_js\menus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\adjacent.dm. ----------------------
/*
	Adjacency proc for determining touch range

	This is mostly to determine if a user can enter a square for the purposes of touching something.
	Examples include reaching a square diagonally or reaching something on the other side of a glass window.

	This is calculated by looking for border items, or in the case of clicking diagonally from yourself, dense items.
	This proc will NOT notice if you are trying to attack a window on the other side of a dense object in its turf.  There is a window helper for that.

	Note that in all cases the neighbor is handled simply; this is usually the user's mob, in which case it is up to you
	to check that the mob is not inside of something
*/
// Not a sane use of the function and (for now) indicative of an error elsewhere
/*
	Adjacency (to turf):
	* If you are in the same turf, always true
	* If you are vertically/horizontally adjacent, ensure there are no border objects
	* If you are diagonally adjacent, ensure you can pass through at least one of the mutually adjacent square.
		* Passing through in this case ignores anything with the LETPASSTHROW pass flag, such as tables, racks, and morgue trays.
*/
/*
	Adjacency (to anything else):
	* Must be on a turf
*/
// This is necessary for storage items not on your person.
/*
	This checks if you there is uninterrupted airspace between that turf and this one.
	This is defined as any dense ON_BORDER_1 object, or any dense object without LETPASSTHROW.
	The border_only flag allows you to not objects (for source and destination squares)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\ai.dm. ----------------------
/*
	AI ClickOn()

	Note currently ai restrained() returns 0 in all cases,
	therefore restrained code has been removed

	The AI can double click to move the camera (this was already true but is cleaner),
	or double click a mob to track them.

	Note that AI have no need for the adjacency proc, and so this proc is a lot cleaner.
*/
/*
	AI has no need for the UnarmedAttack() and RangedAttack() procs,
	because the AI code is not generic;	attack_ai() is used instead.
	The below is only really for safety, or you can alter the way
	it functions and re-insert it above.
*/
/*
	Since the AI handles shift, ctrl, and alt-click differently
	than anything else in the game, atoms have separate procs
	for AI shift, ctrl, and alt clicking.
*/
/*
	The following criminally helpful code is just the previous code cleaned up;
	I have no idea why it was in atoms.dm instead of respective files.
*/
/* Questions: Instead of an Emag check on every function, can we not add to airlocks onclick if emag return? */
/* Atom Procs */
/* Airlocks */
/* APC */
/* AI Turrets */
/* Holopads */
//
// Override TurfAdjacent for AltClicking
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\click.dm. ----------------------
/*
	Before anything else, defer these calls to a per-mobtype handler.  This allows us to
	remove istype() spaghetti code, but requires the addition of other handler procs to simplify it.

	Alternately, you could hardcode every mob's variation in a flat ClickOn() proc; however,
	that's a lot of code duplication and is hard to maintain.

	Note that this proc can be overridden, and is in the case of screen objects.
*/
/**
  * Common mob click code
  */
/*
	Standard mob ClickOn()
	Handles exceptions: Buildmode, middle click, modified clicks, mech actions

	After that, mostly just check your state, check whether you're holding an item,
	check whether you're adjacent to the target, then pass off the click to whoever
	is receiving it.
	The most common are:
	* mob/UnarmedAttack(atom,adjacent) - used here only when adjacent, with no item in hand; in the case of humans, checks gloves
	* atom/attackby(item,user) - used only when adjacent
	* item/afterattack(atom,user,adjacent,params) - used both ranged and adjacent
	* mob/RangedAttack(atom,params) - used only ranged, only used for tk and laser eyes but could be changed
*/
//Is the atom obscured by a PREVENT_CLICK_UNDER_1 object above it
//This is called reach into but it's called on the deepest things first so uh, make sure to account for that!
// Default behavior: ignore double clicks (the second click that makes the doubleclick call already calls for a normal click)
/*
	Translates into attack_hand, etc.

	Note: proximity_flag here is used to distinguish between normal usage (flag=1),
	and usage when clicking on things telekinetically (flag=0).  This proc will
	not be called at ranged except with telekinesis.

	proximity_flag is not currently passed to attack_hand, and is instead used
	in human click code to allow glove touches only at melee range.
*/
/*
	Ranged unarmed attack:

	This currently is just a default for all mobs, involving
	laser eyes and telekinesis.  You could easily add exceptions
	for things like ranged glove touches, spitting alien acid/neurotoxin,
	animals lunging, etc.
*/
/*
	Restrained ClickOn

	Used when you are handcuffed and click things.
	Not currently used by anything but could easily be.
*/
/*
	Middle click
	Only used for swapping hands
*/
// In case of use break glass
/*
/atom/proc/MiddleClick(mob/M as mob)
	return
*/
/*
	Shift click
	For most mobs, examine.
	This is overridden in ai.dm
*/
/*
	Ctrl + Right click
	Combat mode feature
	Drop item in hand at position.
*/
/*
	Ctrl click
	For most objects, pull
*/
/*
	Alt click
	Used as an alternate way to interact with things.
*/
/// Use this instead of [/mob/proc/AltClickOn] where you only want turf content listing without additional atom alt-click interaction
/*
	Control+Shift click
	Unused except for AI
*/
/*
	Misc helpers

	Laser Eyes: as the name implies, handles this since nothing else does currently
	face_atom: turns the mob towards what you clicked on
*/
// Simple helper to face what you clicked on, in case it should be needed in more than one place
/* MouseWheelOn */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\cyborg.dm. ----------------------
/*
	Cyborg ClickOn()

	Cyborgs have no range restriction on attack_robot(), because it is basically an AI click.
	However, they do have a range restriction on item use, so they cannot do without the
	adjacency code.
*/
//Middle click cycles through selected modules.
//Give cyborgs hotkey clicks without breaking existing uses of hotkey clicks
// for non-doors/apcs
/*
	As with AI, these are not used in click code,
	because the code for robots is specific, not generic.

	If you would like to add advanced features to robot
	clicks, you can do so here, but you will have to
	change attack_robot() above to the proper function
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\drag_drop.dm. ----------------------
/*
	MouseDrop:

	Called on the atom you're dragging.  In a lot of circumstances we want to use the
	receiving object instead, so that's the default action.  This allows you to drag
	almost anything into a trash can.
*/
// receive a mousedrop
//Please don't roast me too hard
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\item_attack.dm. ----------------------
/**
  *This is the proc that handles the order of an item_attack.
  *The order of procs called is:
  *tool_act on the target. If it returns TRUE, the chain will be stopped.
  *pre_attack() on src. If this returns TRUE, the chain will be stopped.
  *attackby on the target. If it returns TRUE, the chain will be stopped.
  *and lastly
  *afterattack. The return value does not matter.
  */
/// Like melee_attack_chain but for ranged.
// Called when the item is in the active hand, and clicked; alternately, there is an 'activate held object' verb or you can hit pagedown.
// No comment
/**
  * Called when someone uses us to attack a mob in melee combat.
  *
  * This proc respects CheckAttackCooldown() default clickdelay handling.
  *
  * @params
  * * mob/living/M - target
  * * mob/living/user - attacker
  * * attackchain_Flags - see [code/__DEFINES/_flags/return_values.dm]
  * * damage_multiplier - what to multiply the damage by
  */
//the equivalent of the standard version of attack() but for object targets.
/**
  * Called after attacking something if the melee attack chain isn't interrupted before.
  * Also called when clicking on something with an item without being in melee range
  *
  * WARNING: This does not automatically check clickdelay if not in a melee attack! Be sure to account for this!
  *
  * @params
  * * target - The thing we clicked
  * * user - mob of person clicking
  * * proximity_flag - are we in melee range/doing it in a melee attack
  * * click_parameters - mouse control parameters, check BYOND ref.
  */
/// How much stamina this takes to swing this is not for realism purposes hecc off.
/**
  * Uses the amount of stamina required for a standard hit
  */
/// How long this staggers for. 0 and negatives supported.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\observer.dm. ----------------------
// Oh by the way this didn't work with old click code which is why clicking shit didn't spam you
// ---------------------------------------
// And here are some good things for free:
// Now you can click through portals, wormholes, gateways, and teleporters while observing. -Sayu
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\other_mobs.dm. ----------------------
/*
	Humans:
	Adds an exception for gloves, to allow special glove types like the ninja ones.

	Otherwise pretty standard.
*/
//Return a non FALSE value to cancel whatever called this from propagating, if it respects it.
/*
/mob/living/carbon/human/RestrainedClickOn(var/atom/A) ---carbons will handle this
	return
*/
/*
	Animals & All Unspecified
*/
/*
	Monkeys
*/
/*
	Monkey RestrainedClickOn() was apparently the
	one and only use of all of the restrained click code
	(except to stop you from doing things while handcuffed);
	moving it here instead of various hand_p's has simplified
	things considerably
*/
/*
	Aliens
	Defaults to same as monkey in most places
*/
// Babby aliens
/*
	Slimes
	Nothing happening here
*/
/*
	Drones
*/
/*
	True Devil
*/
/*
	Brain
*/
/*
	pAI
*/
/*
	Simple animals
*/
/*
	Hostile animals
*/
/*
	New Players:
	Have no reason to click on anything at all.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\overmind.dm. ----------------------
// Blob Overmind Controls
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\right_click.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\right_item_attack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\right_other_mobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\telekinesis.dm. ----------------------
/*
	Telekinesis

	This needs more thinking out, but I might as well.
*/
/*
	Telekinetic attack:

	By default, emulate the user's unarmed attack
*/
/*
	This is similar to item attack_self, but applies to anything
	that you can grab with a telekinetic grab.

	It is used for manipulating things at range, for example, opening and closing closets.
	There are not a lot of defaults at this time, add more where appropriate.
*/
/*
	TK Grab Item (the workhorse of old TK)

	* If you have not grabbed something, do a normal tk attack
	* If you have something, throw it at the target.  If it is already adjacent, do a normal attackby()
	* If you click what you are holding, or attack_self(), do an attack_self_tk() on it.
	* Deletes itself if it is ever not in your hand, or if you should have no access to TK.
*/
//stops TK grabs being equipped anywhere but into hands
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\action_button.dm. ----------------------
//Hide/Show Action Buttons ... Button
//see human and alien hud for specific implementations.
//This is the proc used to update all the action buttons.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\ai.dm. ----------------------
// Language menu
//AI core
//Camera list
//Track
//Camera light
//Crew Monitoring
//Crew Manifest
//Alerts
//Announcement
//Shuttle
//Laws
//PDA message
//PDA log
//Take image
//View images
//Medical/Security sensors
//Multicamera mode
//Add multicamera camera
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\alert.dm. ----------------------
//A system to manage and display alerts on screen without needing you to do it yourself
//PUBLIC -  call these wherever you want
/* Proc to create or update an alert. Returns the alert if the alert is new or updated, 0 if it was thrown already
 category is a text string. Each mob may only have one alert per category; the previous one will be replaced
 path is a type path of the actual alert type to throw
 severity is an optional number that will be placed at the end of the icon_state for this alert
 For example, high pressure's icon_state is "highpressure" and can be serverity 1 or 2 to get "highpressure1" or "highpressure2"
 new_master is optional and sets the alert's icon state to "template" in the ui_style icons with the master as an overlay.
 Clicks are forwarded to master
 Override makes it so the alert is not replaced until cleared by a clear_alert with clear_override, and it's used for hallucinations.
 */
// Proc to clear an existing alert.
//Gas alerts
//End gas alerts
/*
/atom/movable/screen/alert/fat
	name = "Fat"
	desc = "You ate too much food, lardass. Run around the station and lose some weight."
	icon_state = "fat"

/atom/movable/screen/alert/hungry
	name = "Hungry"
	desc = "Some food would be good right about now."
	icon_state = "hungry"

/atom/movable/screen/alert/thirsty
	name = "Thirsty"
	desc = "Some water would be good right about now."
	icon = 'modular_sand/icons/mob/screen_alert.dmi'
	icon_state = "thirsty"

/atom/movable/screen/alert/starving
	name = "Starving"
	desc = "You're severely malnourished. The hunger pains make moving around a chore."
	icon_state = "starving"

/atom/movable/screen/alert/dehydrated
	name = "Dehydrated"
	desc = "You're severely dehydrated."
	icon = 'modular_sand/icons/mob/screen_alert.dmi'
	icon_state = "dehydrated"
*/
/**
 * Handles assigning most of the variables for the alert that pops up when an item is offered
 *
 * Handles setting the name, description and icon of the alert and tracking the person giving
 * and the item being offered, also registers a signal that removes the alert from anyone who moves away from the offerer
 * Arguments:
 * * taker - The person receiving the alert
 * * offerer - The person giving the alert and item
 * * receiving - The item being given by the offerer
 */
/// An overrideable proc used simply to hand over the item when claimed, this is a proc so that high-fives can override them since nothing is actually transferred
/// Simply checks if the other person is still in range
/// If the person who offered the high five no longer has it when we try to accept it, we get pranked hard
/// Part two of the ultimate prank
/// If someone examine_more's the offerer while they're trying to pull a too-slow, it'll tip them off to the offerer's trickster ways
/// Families handshakes
//ALIENS
// This alert is temporarily gonna be thrown for all hot air but one day it will be used for literally being on fire
//BLOBS
// BLOODCULT
// CLOCKCULT
//GUARDIANS
//SILICONS
//Need to cover all use cases - emag, illegal upgrade module, malf AI hack, traitor cyborg
//MECHS
//GHOSTS
//TODO: expand this system to replace the pollCandidates/CheckAntagonist/"choose quickly"/etc Yes/No messages
//OBJECT-BASED
// PRIVATE = only edit, use, or override these if you're editing the system as a whole
// Re-render all alerts - also called in /datum/hud/show_hud() because it's needed there
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\alien.dm. ----------------------
//equippable shit
//hands
//begin buttons
//begin indicators
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\alien_larva.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\blobbernauthud.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\blob_overmind.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\clockwork_marauder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\constructs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\credits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\devil.dm. ----------------------
//Soul counter is stored with the humans, it does weird when you place it here apparently...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\drones.dm. ----------------------
//	inv_box.icon_full = "template"
//	inv_box.icon_full = "template"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\families.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\generic_dextrous.dm. ----------------------
//Used for normal mobs that have hands.
//Dextrous simple mobs can use hands!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\ghost.dm. ----------------------
//We should only see observed mob alerts.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\guardian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\hud.dm. ----------------------
/*
	The hud datum
	Used to show and hide huds for all the different mob types,
	including inventories and item quick actions.
*/
// The default UI style is the first one in the list
//Version denotes which style should be displayed. blank or 0 means "next version"
//Triggered when F12 is pressed (Unless someone changed something in the DMF)
//(re)builds the hand ui slots, throwing away old ones
//not really worth jugglying existing ones so we just scrap+rebuild
//9/10 this is only called once per mob and only for 2 hands
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\human.dm. ----------------------
// Sandstorm edit
//
//	inv_box.icon_full = "template_small"
// Sandstorm edit
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\lavaland_elite.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\map_popups.dm. ----------------------
/**
 * A screen object, which acts as a container for turfs and other things
 * you want to show on the map, which you usually attach to "vis_contents".
 */
/**
 * A generic background object.
 * It is also implicitly used to allocate a rectangle on the map, which will
 * be used for auto-scaling the map.
 */
/**
 * Sets screen_loc of this screen object, in form of point coordinates,
 * with optional pixel offset (px, py).
 *
 * If applicable, "assigned_map" has to be assigned before this proc call.
 */
/**
 * Sets screen_loc to fill a rectangular area of the map.
 *
 * If applicable, "assigned_map" has to be assigned before this proc call.
 */
/**
 * Registers screen obj with the client, which makes it visible on the
 * assigned map, and becomes a part of the assigned map's lifecycle.
 */
/**
 * Clears the map of registered screen objects.
 *
 * Not really needed most of the time, as the client's screen list gets reset
 * on relog. any of the buttons are going to get caught by garbage collection
 * anyway. they're effectively qdel'd.
 */
/**
 * Clears all the maps of registered screen objects.
 */
/**
 * Creates a popup window with a basic map element in it, without any
 * further initialization.
 *
 * Ratio is how many pixels by how many pixels (keep it simple).
 *
 * Returns a map name.
 */
/**
 * Create the popup, and get it ready for generic use by giving
 * it a background.
 *
 * Width and height are multiplied by 64 by default.
 */
/**
 * Closes a popup.
 */
/**
 * When the popup closes in any way (player or proc call) it calls this.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\monkey.dm. ----------------------
//	inv_box.icon_full = "template"
//	inv_box.icon_full = "template"
//	inv_box.icon_full = "template"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\movable_screen_objects.dm. ----------------------
//////////////////////////
//Movable Screen Objects//
//   By RemieRichards	//
//////////////////////////
//Movable Screen Object
//Not tied to the grid, places it's center where the cursor is
//Snap Screen Object
//Tied to the grid, snaps to the nearest turf
//Debug procs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\new_player.dm. ----------------------
/// Run sleeping actions after initialize
///Animates moving the button off-screen
///Animates moving the button back into place
///Updates the button's status: TRUE to enable interaction with the button, FALSE to disable
///Prefs menu
///Button that appears before the game has started
///Shown when the game has started
//Subtype the bottom buttons away so the collapse/expand shutter goes behind them
///Moves the button to the top of the screen, leaving only the screen part in view
///Sends a signal on the hud for the menu hud elements to listen to
///Extends the button back to its usual spot
///Sends a signal on the hud for the menu hud elements to listen to
///Sets up the shutter pulling down and up. It's the same animation for both collapsing and expanding the menu.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\picture_in_picture.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\plane_master.dm. ----------------------
//Why do plane masters need a backdrop sometimes? Read https://secure.byond.com/forum/?post=2141928
//Trust me, you need one. Period. If you don't think you do, you're doing something extremely wrong.
///Things rendered on "openspace"; holes in multi-z
///Contains just the floor
///Contains most things in the game world
///Contains all shadow cone masks, whose image overrides are displayed only to their respective owners.
///Used to display the owner and its adjacent surroundings through the FoV plane mask.
///Stores the visible portion of the FoV shadow cone.
///Contains all lighting objects
/*!
 * This system works by exploiting BYONDs color matrix filter to use layers to handle emissive blockers.
 *
 * Emissive overlays are pasted with an atom color that converts them to be entirely some specific color.
 * Emissive blockers are pasted with an atom color that converts them to be entirely some different color.
 * Emissive overlays and emissive blockers are put onto the same plane.
 * The layers for the emissive overlays and emissive blockers cause them to mask eachother similar to normal BYOND objects.
 * A color matrix filter is applied to the emissive plane to mask out anything that isn't whatever the emissive color is.
 * This is then used to alpha mask the lighting plane.
 */
/**
 * Handles emissive overlays and emissive blockers.
 */
///Contains space parallax
//Reserved to chat messages, so they are still displayed above the field of vision masking.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\radial.dm. ----------------------
//If we swap to vis_contens inventory these will need a redo
//Sets defaults
//These assume 45 deg min_angle
/*
	Presents radial menu to user anchored to anchor (or user if the anchor is currently in users screen)
	Choices should be a list where list keys are movables or text used for element names and return value
	and list values are movables/icons/images used for element icons
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\radial_persistent.dm. ----------------------
/*
	A derivative of radial menu which persists onscreen until closed and invokes a callback each time an element is clicked
*/
/*
	Creates a persistent radial menu and shows it to the user, anchored to anchor (or user if the anchor is currently in users screen).
	Choices should be a list where list keys are movables or text used for element names and return value
	and list values are movables/icons/images used for element icons
	Select_proc is the proc to be called each time an element on the menu is clicked, and should accept the chosen element as its final argument
	Clicking the center button will return a choice of null
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\revenanthud.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\robot.dm. ----------------------
//Radio
//Module select
//End of module select
//Photography stuff
//Sec/Med HUDs
//Borg Integrated Tablet
//Alerts
//Thrusters
//Intent
//Health
//Installed Module
//Store
//borg pda
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screentip.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects.dm. ----------------------
/*
	Screen objects
	Todo: improve/re-implement

	Screen objects are only used for the hud and should not appear anywhere "in-game".
	They are used with the client/screen list and the screen_loc var.
	For more information, see the byond documentation on the screen_loc and screen vars.
*/
// /atom/movable/screen/skills
// 	name = "skills"
// 	icon = 'icons/mob/screen_midnight.dmi'
// 	icon_state = "skills"
// 	screen_loc = ui_skill_menu
// /atom/movable/screen/skills/Click()
// 	if(ishuman(usr))
// 		var/mob/living/carbon/human/H = usr
// 		H.mind.print_levels(H)
//	add_overlays()
//	cut_overlay(object_overlay)
//	QDEL_NULL(object_overlay)
// /atom/movable/screen/close
// 	name = "close"
// 	plane = ABOVE_HUD_PLANE
// 	icon_state = "backpack_close"
// /atom/movable/screen/close/Initialize(mapload, new_master)
// 	. = ..()
// 	master = new_master
// /atom/movable/screen/close/Click()
// 	var/datum/component/storage/S = master
// 	S.hide_from(usr)
// 	return TRUE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\simple_animal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\swarmer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\_defines.dm. ----------------------
/*
	These defines specificy screen locations.  For more information, see the byond documentation on the screen_loc var.

	The short version:

	Everything is encoded as strings because apparently that's how Byond rolls.

	"1,1" is the bottom left square of the user's screen.  This aligns perfectly with the turf grid.
	"1:2,3:4" is the square (1,3) with pixel offsets (+2, +4); slightly right and slightly above the turf grid.
	Pixel offsets are used so you don't perfectly hide the turf under them, that would be crappy.

	In addition, the keywords NORTH, SOUTH, EAST, WEST and CENTER can be used to represent their respective
	screen borders. NORTH-1, for example, is the row just below the upper edge. Useful if you want your
	UI to scale with screen size.

	The size of the user's screen is defined by client.view (indirectly by world.view), in our case "15x15".
	Therefore, the top right corner (except during admin shenanigans) is at "15,15"
*/
//Lower left, persistent menu
//Middle left indicators
//Lower center, persistent menu
//Lower right, persistent menu
//Upper-middle right (alerts)
//Middle right (status indicators)
// #define ui_spacesuit "EAST-1:28,CENTER-4:10"
//Pop-up inventory
//Generic living
//Monkeys
//Drones
//Cyborgs
//Aliens
//Constructs
// AI
// pAI
// #define ui_pai_software "SOUTH:6,WEST"
// #define ui_pai_shell "SOUTH:6,WEST+1"
// #define ui_pai_chassis "SOUTH:6,WEST+2"
// #define ui_pai_rest "SOUTH:6,WEST+3"
// #define ui_pai_light "SOUTH:6,WEST+4"
// #define ui_pai_newscaster "SOUTH:6,WEST+5"
// #define ui_pai_host_monitor "SOUTH:6,WEST+6"
// #define ui_pai_crew_manifest "SOUTH:6,WEST+7"
// #define ui_pai_state_laws "SOUTH:6,WEST+8"
// #define ui_pai_pda_send "SOUTH:6,WEST+9"
// #define ui_pai_pda_log "SOUTH:6,WEST+10"
// #define ui_pai_take_picture "SOUTH:6,WEST+12"
// #define ui_pai_view_images "SOUTH:6,WEST+13"
//skyrat slots
//
//Ghosts
//UI position overrides for 1:1 screen layout. (default is 7:5)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects\clickdelay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects\sprint.dm. ----------------------
//Sprint buffer onscreen code.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects\stamina.dm. ----------------------
//stam buffer
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects\storage.dm. ----------------------
/**
  * Sets the size of this box screen object and regenerates its left/right borders. This includes the actual border's size!
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_onclick\hud\screen_objects\vore.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\mob.dm. ----------------------
/**
 * initializes screen rendering. call on mob new
 */
/**
 * loads screen rendering. call on mob login
 */
/**
 * destroys screen rendering. call on mob del
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\atom_huds\alternate_appearance.dm. ----------------------
//an alternate appearance that attaches a single image to a single atom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\atom_huds\atom_hud.dm. ----------------------
/* HUD DATUMS */
//GLOBAL HUD LIST
//MOB PROCS
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\atom_huds\data_huds.dm. ----------------------
/*
 * Data HUDs have been rewritten in a more generic way.
 * In short, they now use an observer-listener pattern.
 * See code/datum/hud.dm for the generic hud datum.
 * Update the HUD icons when needed with the appropriate hook. (see below)
 */
/* DATA HUD DATUMS */
/* MED/SEC/DIAG HUD HOOKS */
/*
 * THESE HOOKS SHOULD BE CALLED BY THE MOB SHOWING THE HUD
 */
/***********************************************
 Medical HUD! Basic mode needs suit sensors on.
************************************************/
//HELPERS
//called when a carbon changes virus
//helper for getting the appropriate health status
//HOOKS
//called when a human changes suit sensors
//called when a living mob changes health
//for carbon suit sensors
//called when a carbon changes stat, virus or XENO_HOST
/***********************************************
 Security HUDs! Basic mode shows only the job.
************************************************/
//HOOKS
/***********************************************
 Diagnostic HUDs!
************************************************/
//For Diag health and cell bars!
//Sillycone hooks
//Borgie battery tracking!
//borg-AI shell tracking
//AI side tracking of AI shell control
/*~~~~~~~~~~~~~~~~~~~~
	BIG STOMPY MECHS
~~~~~~~~~~~~~~~~~~~~~*/
/*~~~~~~~~~
	Bots!
~~~~~~~~~~*/
/*~~~~~~~~~~~~
	Circutry!
~~~~~~~~~~~~~*/
/*~~~~~~~~~~~~
	Airlocks!
~~~~~~~~~~~~~*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\clickcatcher\clickcatcher.dm. ----------------------
/*
#define MAX_SAFE_BYOND_ICON_SCALE_TILES (MAX_SAFE_BYOND_ICON_SCALE_PX / world.icon_size)
#define MAX_SAFE_BYOND_ICON_SCALE_PX (33 * 32)			//Not using world.icon_size on purpose.

/atom/movable/screen/click_catcher/proc/UpdateFill(view_size_x = 15, view_size_y = 15)
	var/icon/newicon = icon('icons/mob/screen_gen.dmi', "catcher")
	var/ox = min(MAX_SAFE_BYOND_ICON_SCALE_TILES, view_size_x)
	var/oy = min(MAX_SAFE_BYOND_ICON_SCALE_TILES, view_size_y)
	var/px = view_size_x * world.icon_size
	var/py = view_size_y * world.icon_size
	var/sx = min(MAX_SAFE_BYOND_ICON_SCALE_PX, px)
	var/sy = min(MAX_SAFE_BYOND_ICON_SCALE_PX, py)
	newicon.Scale(sx, sy)
	icon = newicon
	screen_loc = "CENTER-[(ox-1)*0.5],CENTER-[(oy-1)*0.5]"
	var/matrix/M = new
	M.Scale(px/sx, py/sy)
	transform = M

#undef MAX_SAFE_BYOND_ICON_SCALE_TILES
#undef MAX_SAFE_BYOND_ICON_SCALE_PX
*/
/**
 * Makes a clickcatcher if necessary, and ensures it's fit to our size.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\fullscreen\fullscreen.dm. ----------------------
/**
 * Adds a fullscreen overlay
 *
 * @params
 * - category - string - must exist. will overwrite any other screen in this category. defaults to type.
 * - type - the typepath of the screen
 * - severity - severity - different screen objects have differing severities
 */
/**
 * Wipes a fullscreen of a certain category
 *
 * Second argument is for animation delay.
 */
/**
 * Wipes all fullscreens
 */
/**
 * Removes fullscreens from client but not the mob
 */
/**
 * Ensures all fullscreens are on client.
 */
//Provides darkness to the back of the lighting plane
//Provides whiteness in case you don't see lights so everything is still visible
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\parallax\parallax.dm. ----------------------
/**
 * Holds parallax information.
 */
/**
 * Gets a new version of the objects inside - used when applying to a holder.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\parallax\parallax_holder.dm. ----------------------
/**
 * # Parallax holders
 *
 * Holds all the information about a client's parallax
 *
 * Not on mob because parallax is area based, not mob based.
 *
 * How parallax works:
 * - Layers - normal layers, scroll with movement to relative position, can scroll
 * - Absolute - absolute layers, scroll with movement to absolute position, cannot scroll
 * - Vis - vis_contents-like model - things in this are directly applied and get no processing whatsoever. Things like overmap ships can use this.
 */
// better updates via client_mobs_in_contents can be created again when important recursive contents is ported!
/**
 * Gets the eye we should be centered on
 */
/**
 * Gets the base parallax planemaster for things like turning
 */
/**
 * Syncs us to our parallax objects. Does NOT check if we should have those objects, that's Reset()'s job.
 *
 * Doesn't move/update positions/screen locs either.
 *
 * Also ensures movedirs are correct for the eye's pos.
 */
/**
 * Updates motion if needed
 */
/**
 * Runs a modifier to parallax as an animation.
 *
 * @params
 * speed - ds per loop
 * turn - angle clockwise from north to turn the motion to
 * windup - ds to spend on windups. 0 for immediate.
 * turn_speed - ds to spend on turning. 0 for immediate.
 */
/**
 * Smoothly stops the animation, turning to a certain angle as needed.
 */
/**
 * fully resets animation state
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\parallax\parallax_object.dm. ----------------------
/**
 * Return "natural" overlays, as we're goin to do some fuckery to overlays above.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\_rendering\parallax\types\space.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\access.dm. ----------------------
//SPLURT EDIT BEGIN
//SPLURT EDIT END
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\achievements.dm. ----------------------
// Keep the identifiers here below 32 characters, you can put the full display name in the actual achievement datum
//Misc Medal hub IDs
//Skill medal hub IDs
//Mafia medal hub IDs (wins)
//Mafia medal hub IDs (misc stuff)
//Boss medals
// Medal hub IDs for boss medals (Pre-fixes)
// Medal hub IDs for boss-kill scores
// DB ID for hardcore random mode
// DB ID for amount of consumed maintenance pills
// DB ID for intento score
// Tourist related achievements and scores
//centcom grades (achievement)
//scores
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\actionspeed_modifiers.dm. ----------------------
//ids
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\admin.dm. ----------------------
//A set of constants used to determine which type of mute an admin wishes to apply:
//Please read and understand the muting/automuting stuff before changing these. MUTE_IC_AUTO etc = (MUTE_IC << 1)
//Therefore there needs to be a gap between the flags for the automute flags
//Some constants for DB_Ban
//Admin Permissions
//ambition start
//ambition end
/// for asay pings, this is the index in the return list for [/proc/check_admin_pings] that contains the message modified with underlines for the spotted names
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\antagonists.dm. ----------------------
//fugitive end results
//ERT Types
//ERT subroles
//Shuttle hijacking
//Syndicate Contracts
//Lingblood stuff
///Heretics --
//Overthrow time to update heads obj
//Gangshit
//Bloodsucker defines
// Bloodsucker related antag datums
//#define ANTAG_DATUM_HUNTER				/datum/antagonist/vamphunter   Disabled for now
// BLOODSUCKER
//Blob
/// How many telecrystals a normal traitor starts with
/// How many telecrystals mapper/admin only "precharged" uplink implant
/// The normal cost of an uplink implant; used for calcuating how many
/// TC to charge someone if they get a free implant through choice or
/// because they have nothing else that supports an implant.
/// The dimensions of the antagonist preview icon. Will be scaled to this size.
//Objectives-Ambitions Panel
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\atmospherics.dm. ----------------------
//ATMOS
//stuff you should probably leave well alone!
//EXCITED GROUPS
//HEAT TRANSFER COEFFICIENTS
//Must be between 0 and 1. Values closer to 1 equalize temperature faster
//Should not exceed 0.4 else strange heat flow occur
//FIRE
//GASES
//REACTIONS
//return values for reactions (bitflags)
// Pressure limits.
//PIPES
//Atmos pipe limits
//used for device_type vars
//TANKS
//CANATMOSPASS
// Adjacency flags
//OPEN TURF ATMOS
//ATMOSPHERICS DEPARTMENT GAS TANK TURFS
//LAVALAND
//SNOSTATION
//FESTIVESTATION
//ATMOSIA GAS MONITOR TAGS
//AIRLOCK CONTROLLER TAGS
//RnD toxins burn chamber
//Atmospherics/maintenance incinerator
//Syndicate lavaland base incinerator (lavaland_surface_syndicate_base1.dmm)
//MULTIPIPES
//IF YOU EVER CHANGE THESE CHANGE SPRITES TO MATCH.
// Gas defines because i hate typepaths
//SUPERMATTER DEFINES
//HELPERS
//If you're doing spreading things related to atmos, DO NOT USE CANATMOSPASS, IT IS NOT CHEAP. use this instead, the info is cached after all. it's tweaked just a bit to allow for circular checks
//Unomos - So for whatever reason, garbage collection actually drastically decreases the cost of atmos later in the round. Turning this into a define yields massively improved performance.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\bitfields.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\blackmarket.dm. ----------------------
// Shipping methods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\botany.dm. ----------------------
//Both available scanning modes for the plant analyzer.
//Seed flags.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\callbacks.dm. ----------------------
/// A shorthand for the callback datum, [documented here](datum/callback.html)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\cargo.dm. ----------------------
/// The baseline unit for cargo crates. Adjusting this will change the cost of all in-game shuttles, crate export values, bounty rewards, and all supply pack import values, as they use this as their unit of measurement.
//cit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\cinematics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\citadel_defines.dm. ----------------------
//Global defines for most of the unmentionables.
//Be sure to update the min/max of these if you do change them.
//Measurements are in imperial units. Inches, feet, yards, miles. Tsp, tbsp, cups, quarts, gallons, etc
//Filters
//organ defines
//genital flags
//SPLURT change, support for more sizes
//visibility toggles defines to avoid errors typos code errors.
//Individual logging define
//Citadel istypes
//xenobio console upgrade stuff
//Citadel toggles because bitflag memes
//Note: reminder, if you're a coder adding more bitflags here in the event we add more horny things, the maximum is (1<<23).
//belly sound pref things
//icon states for the default eyes and for a state for no eye
//special species definitions
//defines for different matrix sections
//defines for the two colour schemes, advanced and old
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\cleaning.dm. ----------------------
//Cleaning tool strength
// 1 is also a valid cleaning strength but completely unused so left undefined
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\clockcult.dm. ----------------------
//component id defines; sometimes these may not make sense in regards to their use in scripture but important ones are bright
//Scripture tiers and requirements; peripherals should never be used
//Various costs related to power.
//clockcult power defines
//Ark defines
//Objective text define
//Eminence defines
//misc clockcult stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\combat.dm. ----------------------
/*ALL DEFINES RELATED TO COMBAT GO HERE*/
//Damage and status effect defines
//Damage defines //TODO: merge these down to reduce on defines
//Toxins damage 'typeflag' - is this normal toxins damage or does it have to do with systems corruption (ROBOTIC_ORGANISM species trait)
//bitflag damage defines used for suicide_act
// mob/living/var/combat_flags variable.
/// Default combat flags for those affected by sprinting (combat mode has been made into its own component)
/// Default combat flags for everyone else (so literally everyone but humans).
/// Default combat flags for those in stamina combat system
/// The user wants sprint mode on
/// Sprint is currently active
/// Currently attempting to crawl under someone
/// Currently stamcritted
/// Currently attempting to resist up from the ground
/// Intentionally resting
/// This mob requires stamina buffer to do things that require stamina buffer. Not having this exempts the mob from stamina combat.
/// Force sprint mode on at all times, overrides everything including sprint disable traits.
/// This mob is capable of using the active parrying system.
/// This mob is capable of using the active blocking system.
/// This mob is capable of unarmed parrying
/// This mob is currently actively blocking
/// This mob is currently starting an active block
// Helpers for getting someone's stamcrit state. Cast to living.
// Stamcrit check helpers
//stamina stuff
/// crit for stamina damage. forces a rest, and stops movement until stamina goes back to stamina softcrit
/// Threshold for leaving stamina critical
/// Threshold under for which you are unable to draw from stamina health to replace stamina buffer
//Bitflags defining which status effects could be or are inflicted on a mob
// This is a bit out of date/inaccurate in light of all the new status effects and is probably pending rework.
//Health Defines
//Actual combat defines
//click cooldowns, in tenths of a second, used for various combat actions
//Cuff resist speeds
//Grab levels
//attack visual effects
//intent defines
//NOTE: INTENT_HOTKEY_* defines are not actual intents!
//they are here to support hotkeys
//the define for visible message range in combat
//Shove knockdown lengths (deciseconds)
/// how long they're staggered for
/// how long they're off balance for
//Embedded objects
//Gun weapon weight
//Gun trigger guards
//E-gun self-recharge values
//Gun suppression
//Nice shot bonus
///Time to spend without clicking on other things required for your shots to become accurate.
//Autofire component
/// Compatible firemode is in the gun. Wait until it's held in the user hands.
/// Gun is active and in the user hands. Wait until user does a valid click.
/// Gun is shooting.
//Object/Item sharpness
//His Grace.
//We will round to this value in damage calculations.
//stamina recovery defines. Blocked if combat mode is on.
/**
  * should the current-attack-damage be lower than the item force multiplied by this value,
  * a "inefficiently" prefix will be added to the message.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\configuration.dm. ----------------------
//config files
/// Gets the datum of the object, for when editing a const define.
/// Caches an entry in the proc
//flags
// Policy config keys
// MAKE SURE THESE ARE UPPERCASE
/// Displayed to cloned patients
/// Displayed to defibbed/revival surgery'd patients before the memory loss time threshold
/// Displayed to defibbed/revival surgery'd patients after the memory loss time threshold
/// Displayed to pyroclastic slimes on spawn
/// Displayed to pAIs on spawn
/// displayed to lavaland elites on spawn, overriding the default if set
/// displayed to lavaland elites on sentience potion, overriding the default if set
/// displayed to lavaland elites on winning the fight, overriding the default if set
/// displayed to prisoners on spawn, overriding the default if set
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\construction.dm. ----------------------
/*ALL DEFINES RELATED TO CONSTRUCTION, CONSTRUCTING THINGS, OR CONSTRUCTED OBJECTS GO HERE*/
//Defines for construction states
//girder construction states
//rwall construction states
//window construction states
//reinforced plasma window construction states
//airlock assembly construction states
//default_unfasten_wrench() return defines
//ai core defines
//Construction defines for the pinion airlock
//floodlights because apparently we use defines now
//other construction-related things
//windows affected by Nar'Sie turn this color.
//let's just pretend fulltile windows being children of border windows is fine
//The maximum size of a stack object.
//maximum amount of cable in a coil
//tablecrafting defines
//Electrochromatic window defines.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\contracts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\cooldowns.dm. ----------------------
//// COOLDOWN SYSTEMS
/*
 * We have 2 cooldown systems: timer cooldowns (divided between stoppable and regular) and world.time cooldowns.
 *
 * When to use each?
 *
 * * Adding a commonly-checked cooldown, like on a subsystem to check for processing
 * * * Use the world.time ones, as they are cheaper.
 *
 * * Adding a rarely-used one for special situations, such as giving an uncommon item a cooldown on a target.
 * * * Timer cooldown, as adding a new variable on each mob to track the cooldown of said uncommon item is going too far.
 *
 * * Triggering events at the end of a cooldown.
 * * * Timer cooldown, registering to its signal.
 *
 * * Being able to check how long left for the cooldown to end.
 * * * Either world.time or stoppable timer cooldowns, depending on the other factors. Regular timer cooldowns do not support this.
 *
 * * Being able to stop the timer before it ends.
 * * * Either world.time or stoppable timer cooldowns, depending on the other factors. Regular timer cooldowns do not support this.
*/
/*
 * Cooldown system based on an datum-level associative lazylist using timers.
*/
//INDEXES
//Mecha cooldowns
//car cooldowns
//clown car cooldowns
//TIMER COOLDOWN MACROS
/*
 * Stoppable timer cooldowns.
 * Use indexes the same as the regular tiemr cooldowns.
 * They make use of the TIMER_COOLDOWN_CHECK() and TIMER_COOLDOWN_END() macros the same, just not the TIMER_COOLDOWN_START() one.
 * A bit more expensive than the regular timers, but can be reset before they end and the time left can be checked.
*/
/*
 * Cooldown system based on storing world.time on a variable, plus the cooldown time.
 * Better performance over timer cooldowns, lower control. Same functionality.
*/
//Returns true if the cooldown has run its course, false otherwise
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\cult.dm. ----------------------
//rune colors, for easy reference
//blood magic
//screen locations
//misc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\diseases.dm. ----------------------
//Visibility Flags
//Disease Flags
//Spread Flags
//Severity Defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\DNA.dm. ----------------------
/*ALL DNA, SPECIES, AND GENETICS-RELATED DEFINES GO HERE*/
//Defines copying names of mutations in all cases, make sure to change this if you change mutation's type
// String identifiers for associative list lookup
//Types of usual mutations
//Mutation classes. Normal being on them, extra being additional mutations with instability and other being stuff you dont want people to fuck with like wizard mutate
//species use_skintones defines
//DNA - Because fuck you and your magic numbers being all over the codebase.
//Transformation proc stuff
//species traits for mutantraces
/// Used for determining which wounds are applicable to this species.
//organ slots
////organ defines
//used for the can_chromosome var on mutations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\donator_groupings.dm. ----------------------
//flags
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dye_keys.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dynamic.dm. ----------------------
/// This is the only ruleset that should be picked this round, used by admins and should not be on rulesets in code.
/// Only one ruleset with this flag will be picked.
/// This ruleset can only be picked once. Anything that does not have a scaling_cost MUST have this.
/// No round event was hijacked this cycle
/// This cycle, a round event was hijacked when the last midround event was too recent.
/// This cycle, a round event was hijacked when the next midround event is too soon.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\economy.dm. ----------------------
//What should vending machines charge when you buy something in-department.
//ID bank account support defines.
//Some price defines to help standarize the intended vending value of items. Do not bother adding too many examples.
//Defines that set what kind of civilian bounties should be applied mid-round.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\events.dm. ----------------------
///Events that mess with or create artificial intelligences, such as vending machines and the AI itself
///Events that spawn anomalies, which might be the source of anomaly cores
///Events pertaining cargo, messages incoming to the station and job slots
///Events that cause breakages and malfunctions that could be fixed by engineers
///Events that spawn creatures with simple desires, such as to hunt
///Events that should have no harmful effects, and might be useful to the crew
///Events that affect the body and mind
///Events reserved for special occassions
///Events with enemy groups with a more complex plan
///Events that make a mess
///Events that summon meteors and other debris, and stationwide waves of harmful space weather
///Events summoned by a wizard
/// Return from admin setup to stop the event from triggering entirely.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\exosuit_fabs.dm. ----------------------
/// Module is compatible with Security Cyborg models
/// Module is compatible with Miner Cyborg models
/// Module is compatible with Janitor Cyborg models
/// Module is compatible with Medical Cyborg models
/// Module is compatible with Engineering Cyborg models
/// Module is compatible with Ripley Exosuit models
/// Module is compatible with Odyseeus Exosuit models
/// Module is compatible with Clarke Exosuit models. Rebranded to firefighter because tg nerfed it to this.
// #define EXOSUIT_MODULE_CLARKE		(1<<2)
/// Module is compatible with Gygax Exosuit models
/// Module is compatible with Durand Exosuit models
/// Module is compatible with H.O.N.K Exosuit models
/// Module is compatible with Phazon Exosuit models
/// Module is compatable with N models
/// Module is compatible with Savannah Exosuit models - SPLURT ADDITION
/// Module is compatible with "Working" Exosuit models - Ripley and Clarke
/// Module is compatible with "Combat" Exosuit models - Gygax, H.O.N.K, Durand and Phazon
/// Module is compatible with "Medical" Exosuit modelsm - Odysseus
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\explosion.dm. ----------------------
// THIS IS INSANITY
// These are how wave explosions track when there's not only one direction to keep track of (diagonals, etc)
/// Default explosion power to consider an explosion over
/// Default explosion falloff
/// Default explosion constant falloff
/// Block amount at which point having 0 block resistance will result in a full block
/// Explosion power quantization
// [explosion_flags] variable on /atom
/// No blocking if we're not dense
/// If we survive the explosion, we block ALL the power and ignore the results of wave_ex_act().
// Standardized explosion powers
/// Maxcap
/// erases shreds from explosions/item damage
/// Gibs most mobs
// Walls
// Floors
// Helpers
/// Explosion power to object damage (without taking into consideration armor)
/// Explosion power to object damage for hard obstacles
/// Explosion power to object damage for windows
/// Default brute damage to do to living things
// Damage factors
/// Factor to multiply damage to a door by if it's open (and therefore not blocking the explosion)
// Standardized explosion constant blocks
// Standardized explosion factor blocks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\exports.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\fantasy_affixes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\fonts.dm. ----------------------
// Font metrics bitfield
/// Include leading A width and trailing C width in GetWidth() or in DrawText()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\food.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\footsteps.dm. ----------------------
//barefoot sounds
//misc footstep sounds
//footstep mob defines
/*

id = list(
list(sounds),
base volume,
extra range addition
)


*/
//bare footsteps lists
//claw footsteps lists
//heavy footsteps list
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\gun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\hud.dm. ----------------------
//HUD styles.  Index order defines how they are cycled in F12.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\instruments.dm. ----------------------
/// Max number of playing notes per instrument.
/// Distance multiplier that makes us not be impacted by 3d sound as much. This is a multiplier so lower it is the closer we will pretend to be to people.
/// How many tiles instruments have no falloff for
/// Maximum length a note should ever go for
/// These are per decisecond.
/// Minimum volume for when the sound is considered dead.
// /datum/instrument instrument_flags
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\integrated_electronics.dm. ----------------------
// Pin functionality.
// Methods of obtaining a circuit.
// Categories that help differentiate circuits that can do different types of actions
// Displayed along with the pin name to show what type of pin it is.
// Used inside input/output list to tell the constructor what pin to make.
// Data limits.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\interaction_flags.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\inventory.dm. ----------------------
/*ALL DEFINES RELATED TO INVENTORY OBJECTS, MANAGEMENT, ETC, GO HERE*/
//Inventory depth: limits how many nested storage items you can access directly.
//1: stuff in mob, 2: stuff in backpack, 3: stuff in box in backpack, etc
//ITEM INVENTORY SLOT BITMASKS
/// Suit slot (armors, costumes, space suits, etc.)
/// Jumpsuit slot
/// Glove slot
/// Glasses slot
/// Ear slot (radios, earmuffs)
/// Mask slot
/// Head slot (helmets, hats, etc.)
/// Shoe slot
/// ID slot
/// Belt slot
/// Back slot
/// Dextrous simplemob "hands" (used for Drones and Dextrous Guardians)
/// Neck slot (ties, bedsheets, scarves)
/// A character's hand slots
/// Inside of a character's backpack
/// Suit Storage slot
/// Left Pocket slot
/// Right Pocket slot
// -- Sandstorm edit --
/// Underwear slot
/// Socks slot
/// Shirt slot
/// Right ear slot
/// Wrist slot
// -- End edit --
/// Handcuff slot
/// Legcuff slot (bolas, beartraps)
/// To attach to a jumpsuit
/// Total amount of slots
//SLOT GROUP HELPERS
//EARS HELPER
//Bit flags for the flags_inv variable, which determine when a piece of clothing hides another. IE a helmet hiding glasses.
//sandstorm edit
//
//bitflags for clothing coverage - also used for limbs
//flags for alternate styles: These are hard sprited so don't set this if you didn't put the effort in
//flags for female outfits: How much the game can safely "take off" the uniform without it looking weird
//flags for outfits that have mutant race variants: Most of these require additional sprites to work.
//digitigrade legs settings.
//flags for covering body parts
// defines for AFK theft
/// How many messages you can remember while logged out before you stop remembering new ones
/// If someone logs back in and there are entries older than this, just tell them they can't remember who it was or when
/// The index of the entry in 'afk_thefts' with the person's visible name at the time
/// The index of the entry in 'afk_thefts' with the text
/// The index of the entry in 'afk_thefts' with the time it happened
//Allowed equipment lists for security vests and hardsuits.
//Internals checker
//Slots that won't trigger humans' update_genitals() on equip().
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\is_helpers.dm. ----------------------
/// Checks if something is a BYOND object datatype rather than a primitive, or whatever's closest to one.
// simple is_type and similar inline helpers
//Turfs
//#define isturf(A) (istype(A, /turf)) This is actually a byond built-in. Added here for completeness sake.
//Mobs
//Carbon mobs
//Human sub-species
// Citadel specific species
//more carbon mobs
//Silicon mobs
//Simple animals
// #define israt(A) (istype(A, /mob/living/simple_animal/hostile/rat))
// #define isregalrat(A) (istype(A, /mob/living/simple_animal/hostile/regalrat))
//Misc mobs
//Footstep helpers
//Objects
//Assemblies
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\jobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\language.dm. ----------------------
// LANGUAGE SOURCE DEFINES
//#define LANGUAGE_MULTILINGUAL	"multilingual"
//SKYRAT LANGUAGES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\layers_planes.dm. ----------------------
//Defines for atom layers and planes
//KEEP THESE IN A NICE ACSCENDING ORDER, PLEASE
///Layers most often used by atoms of plane lower than GAME_PLANE
//#define TURF_LAYER 2 //For easy recordkeeping; this is a byond define
///catwalk overlay of /turf/open/floor/plating/plating_catwalk
///Layers most often used by atoms of plane equal or higher than GAME_PLANE
//#define OBJ_LAYER 3 //For easy recordkeeping; this is a byond define
//#define MOB_LAYER 4 //For easy recordkeeping; this is a byond define
//#define FLY_LAYER 5 //For easy recordkeeping; this is a byond define
/// Plane for balloon text (text that fades up)
/// It's over lighting and every other crap because this is nearly as important as hud content and only visible to the user.
//HUD layer defines
///Layer for lobby menu collapse button
///Layer for lobby menu background image and main buttons (Join/Ready, Observe, Charater Prefs)
///Layer for lobby menu shutter, which covers up the menu to collapse/expand it
///Layer for lobby menu buttons that are hanging away from and lower than the main panel
///Layer for screentips
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\lighting.dm. ----------------------
//Bay lighting engine shit, not in /code/modules/lighting because BYOND is being shit about it
// If the max of the lighting lumcounts of each spectrum drops below this, disable luminosity on the lighting objects.
// Set to zero to disable soft lighting. Luminosity changes then work if it's lit at all.
// If I were you I'd leave this alone.
//Some defines to generalise colours used in lighting.
//Important note on colors. Colors can end up significantly different from the basic html picture, especially when saturated
//lighting area defines
//code assumes higher numbers override lower numbers.
// Emissive blocking.
/// Uses vis_overlays to leverage caching so that very few new items need to be made for the overlay. For anything that doesn't change outline or opaque area much or at all.
/// Uses a dedicated render_target object to copy the entire appearance in real time to the blocking layer. For things that can change in appearance a lot from the base state, like humans.
/// The color matrix applied to all emissive overlays. Should be solely dependent on alpha and not have RGB overlap with [EM_BLOCK_COLOR].
/// A globaly cached version of [EMISSIVE_COLOR] for quick access.
/// The color matrix applied to all emissive blockers. Should be solely dependent on alpha and not have RGB overlap with [EMISSIVE_COLOR].
/// A globaly cached version of [EM_BLOCK_COLOR] for quick access.
/// The color matrix used to mask out emissive blockers on the emissive plane. Alpha should default to zero, be solely dependent on the RGB value of [EMISSIVE_COLOR], and be independant of the RGB value of [EM_BLOCK_COLOR].
/// A globaly cached version of [EM_MASK_MATRIX] for quick access.
/// Returns the red part of a #RRGGBB hex sequence as number
/// Returns the green part of a #RRGGBB hex sequence as number
/// Returns the blue part of a #RRGGBB hex sequence as number
/// Parse the hexadecimal color into lumcounts of each perspective.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\loadout.dm. ----------------------
//defines for loadout categories
//no category defines
//accessory
//backpack
//neck
//mask
//hands
//uniform
//suit
//head
//shoes
//gloves
//glasses
//donator items
//unlockable items
//how many prosthetics can we have
//what limbs can be amputated or be prosthetic
//options for modifiying limbs
//loadout saving/loading specific defines
//loadout item flags
/* the names of the customization tabs
#define SETTINGS_TAB			0
#define GAME_PREFERENCES_TAB	1
#define APPEARANCE_TAB			2
#define SPEECH_TAB				3
#define LOADOUT_TAB				4
#define CONTENT_PREFERENCES_TAB	5
#define KEYBINDINGS_TAB			6
*/
//quirks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\logging.dm. ----------------------
//Investigate logging defines
// Logging types for log_message()
//Individual logging panel pages
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\machines.dm. ----------------------
// channel numbers for power
//Power use
//bitflags for door switches.
//used in design to specify which machine can build it
//Note: More then one of these can be added to a design but imprinter and lathe designs are incompatable.
//Modular computer/NTNet defines
//Modular computer part defines
//NTNet stuff, for modular computers
//NTNet transfer speeds, used when downloading/uploading a file/program.
//Caps for NTNet logging. Less than 10 would make logging useless anyway, more than 500 may make the log browser too laggy. Defaults to 100 unless user changes it.
//Program bitflags
//Program states
//Program categories
// These are used by supermatter and supermatter monitor program, mostly for UI updating purposes. Higher should always be worse!
//Nuclear bomb stuff
//these flags are used to tell the DNA modifier if a plant gene cannot be extracted or modified.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mapexporting.dm. ----------------------
//Bits to save
//Ignore turf if it contains
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\maps.dm. ----------------------
/*
The /tg/ codebase allows mixing of hardcoded and dynamically-loaded z-levels.
Z-levels can be reordered as desired and their properties are set by "traits".
See map_config.dm for how a particular station's traits may be chosen.
The list DEFAULT_MAP_TRAITS at the bottom of this file should correspond to
the maps that are hardcoded, as set in _maps/_basemap.dm. SSmapping is
responsible for loading every non-hardcoded z-level.

As of 2018-02-04, the typical z-levels for a single-level station are:
1: CentCom
2: Station
3-4: Randomized space
5: Mining
6: City of Cogs
7-11: Randomized space
12: Empty space
13: Transit space

Multi-Z stations are supported and multi-Z mining and away missions would
require only minor tweaks.
*/
// traits
// boolean - marks a level as having that property if present
//boolean - weather types that occur on the level
// number - bombcap is multiplied by this before being applied to bombs
// number - default gravity if there's no gravity generators or area overrides present
// numeric offsets - e.g. {"Down": -1} means that chasms will fall to z - 1 rather than oblivion
// enum - how space transitions should affect this level
// string - type path of the z-level's baseturf (defaults to space)
// default trait definitions, used by SSmapping
//SKYRAT CHANGES oh a jungle
// must correspond to _basemap.dm for things to work correctly
// Camera lock flags
//Reserved/Transit turf type
//Ruin Generation
///Map generation defines
//Map type stuff.
//Random z-levels name defines.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\materials.dm. ----------------------
/// Is the material from an ore? currently unused but exists atm for categorizations sake
/// Hard materials, such as iron or metal
///Use this flag on TRUE if you want the basic recipes
/// Flag for atoms, this flag ensures it isn't re-colored by materials. Useful for snowflake icons such as default toolboxes.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\maths.dm. ----------------------
// Credits to Nickr5 for the useful procs I've taken from his library resource.
// This file is quadruple wrapped for your pleasure
// (
//"fancy" math for calculating time in ms from tick_usage percentage and the length of ticks
//percent_of_tick_used * (ticklag * 100(to convert to ms)) / 100(percent ratio)
//collapsed to percent_of_tick_used * tick_lag
//time of day but automatically adjusts to the server going into the next day within the same round.
//for when you need a reliable time number that doesn't depend on byond time.
// round() acts like floor(x, 1) by default but can't handle other values
// Similar to clamp but the bottom rolls around to the top and vice versa. min is inclusive, max is exclusive
// Real modulus that handles decimals
// Cotangent
// Secant
// Cosecant
// Greatest Common Divisor - Euclid's algorithm
// Least Common Multiple
// Used for calculating the radioactive strength falloff
// Returns true if val is from min to max, inclusive.
// Same as above, exclusive.
// Performs a linear interpolation between a and b.
// Note that amount=0 returns a, amount=1 returns b, and
// amount=0.5 returns the mean of a and b.
// Returns the nth root of x.
// The quadratic formula. Returns a list with the solutions, or an empty list
// if they are imaginary.
/// Gets shift x that would be required the bitflag (1<<x)
// Will filter out extra rotations and negative rotations
// E.g: 540 becomes 180. -180 becomes 180.
//Finds the shortest angle that angle A has to change to get to angle B. Aka, whether to move clock or counterclockwise.
//A logarithm that converts an integer to a number scaled between 0 and 1.
//Currently, this is used for hydroponics-produce sprite transforming, but could be useful for other transform functions.
//converts a uniform distributed random number into a normal distributed one
//since this method produces two random numbers, one is saved for subsequent calls
//(making the cost negligble for every second call)
//This will return +/- decimals, situated about mean with standard deviation stddev
//68% chance that the number is within 1stddev
//95% chance that the number is within 2stddev
//98% chance that the number is within 3stddev...etc
// Returns a list where [1] is all x values and [2] is all y values that overlap between the given pair of rectangles
// )
/// Converts a probability/second chance to probability/delta_time chance
/// For example, if you want an event to happen with a 10% per second chance, but your proc only runs every 5 seconds, do `if(prob(100*DT_PROB_RATE(0.1, 5)))`
/// Like DT_PROB_RATE but easier to use, simply put `if(DT_PROB(10, 5))`
// )
/// Taxicab distance--gets you the **actual** time it takes to get from one turf to another due to how we calculate diagonal movement
// )
/// A function that exponentially approaches a maximum value of L
/// k is the rate at which is approaches L, x_0 is the point where the function = 0
// )
/// Make sure something is a boolean TRUE/FALSE 1/0 value, since things like bitfield & bitflag doesn't always give 1s and 0s.
// )
/// Gives the number of pixels in an orthogonal line of tiles.
// )
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\MC.dm. ----------------------
// Used to smooth out costs to try and avoid oscillation.
//! SubSystem flags (Please design any new flags so that the default is off, to make adding flags to subsystems easier)
/// subsystem does not initialize.
/** subsystem does not fire. */
/// (like can_fire = 0, but keeps it from getting added to the processing subsystems list)
/// (Requires a MC restart to change)
/** Subsystem only runs on spare cpu (after all non-background subsystems have ran that tick) */
/// SS_BACKGROUND has its own priority bracket, this overrides SS_TICKER's priority bump
/// subsystem does not tick check, and should not run unless there is enough time (or its running behind (unless background))
/** Treat wait as a tick count, not DS, run every wait ticks. */
/// (also forces it to run first in the tick (unless SS_BACKGROUND))
/// (implies all runlevels because of how it works)
/// This is designed for basically anything that works as a mini-mc (like SStimer)
/** keep the subsystem's timing on point by firing early if it fired late last fire because of lag */
/// ie: if a 20ds subsystem fires say 5 ds late due to lag or what not, its next fire would be in 15ds, not 20ds.
/** Calculate its next fire after its fired. */
/// (IE: if a 5ds wait SS takes 2ds to run, its next fire should be 5ds away, not 3ds like it normally would be)
/// This flag overrides SS_KEEP_TIMING
//! SUBSYSTEM STATES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mecha.dm. ----------------------
///blocks using equipment and melee attacking.
/// posibrains can drive this mecha
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\melee.dm. ----------------------
//Martial arts defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\menu.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\misc.dm. ----------------------
// Byond direction defines, because I want to put them somewhere.
// #define NORTH 1
// #define SOUTH 2
// #define EAST 4
// #define WEST 8
/// yeah yeah i'm a lazy asshole who can't debug yeah yeah
/// world.icon_size
//These get to go at the top, because they're special
//You can use these defines to get the typepath of the currently running proc/verb (yes procs + verbs are objects)
/* eg:
/mob/living/carbon/human/death()
	to_chat(world, THIS_PROC_TYPE_STR) //You can only output the string versions
Will print: "/mob/living/carbon/human/death" (you can optionally embed it in a string with () (eg: the _WITH_ARGS defines) to make it look nicer)
*/
//define THIS_PROC_TYPE_WEIRD_STR "[THIS_PROC_TYPE_WEIRD]" //Included for completeness
//define THIS_PROC_TYPE_WEIRD_STR_WITH_ARGS "[THIS_PROC_TYPE_WEIRD]([args.Join(",")])" //Ditto
//Human Overlays Indexes/////////
//LOTS OF CIT CHANGES HERE. BE CAREFUL WHEN UPSTREAM ADDS MORE LAYERS
//Human Overlay Index Shortcuts for alternate_worn_layer, layers
//Because I *KNOW* somebody will think layer+1 means "above"
//IT DOESN'T OK, IT MEANS "UNDER"
//AND -1 MEANS "ABOVE", OK?, OK!?!
//some arbitrary defines to be used by self-pruning global lists. (see master_controller)
// Cargo-related stuff.
//used by canUseTopic()
//singularity defines
//SSticker.current_state values
//FONTS:
// Used by Paper and PhotoCopier (and PaperBin once a year).
// Used by PDA's Notekeeper.
// Used by NewsCaster and NewsPaper.
// Used by Modular Computers
//transfer_ai() defines. Main proc in ai_core.dm
//check_target_facings() return defines
//Cache of bloody footprint images
//Key:
//"entered-[blood_state]-[dir_of_image]"
//or: "exited-[blood_state]-[dir_of_image]"
//Bloody shoes/footprints
//Bloody shoe blood states
//Blood Decal Colors
//suit sensors: sensor_mode defines
//suit sensors: has_sensor defines
//suit sensor flags: sensor_flag defines
//suit sensor integrity percentage threshold defines
//Wet floor type flags. Stronger ones should be higher in number.
//Maximum amount of time, (in deciseconds) a tile can be wet for.
//unmagic-strings for types of polls
//subtypesof(), typesof() without the parent path
//Gets the turf this atom inhabits
//Same as above except gets the area instead
//Ghost orbit types:
//Ghost showing preferences:
//pda fonts
//pda icon reskins
/////////////////////////////////////
// atom.appearence_flags shortcuts //
/////////////////////////////////////
/*

// Disabling certain features
#define APPEARANCE_IGNORE_TRANSFORM			RESET_TRANSFORM
#define APPEARANCE_IGNORE_COLOUR			RESET_COLOR
#define	APPEARANCE_IGNORE_CLIENT_COLOUR		NO_CLIENT_COLOR
#define APPEARANCE_IGNORE_COLOURING			(RESET_COLOR|NO_CLIENT_COLOR)
#define APPEARANCE_IGNORE_ALPHA				RESET_ALPHA
#define APPEARANCE_NORMAL_GLIDE				~LONG_GLIDE

// Enabling certain features
#define APPEARANCE_CONSIDER_TRANSFORM		~RESET_TRANSFORM
#define APPEARANCE_CONSIDER_COLOUR			~RESET_COLOUR
#define APPEARANCE_CONSIDER_CLIENT_COLOUR	~NO_CLIENT_COLOR
#define APPEARANCE_CONSIDER_COLOURING		(~RESET_COLOR|~NO_CLIENT_COLOR)
#define APPEARANCE_CONSIDER_ALPHA			~RESET_ALPHA
#define APPEARANCE_LONG_GLIDE				LONG_GLIDE

*/
// Consider these images/atoms as part of the UI/HUD
//Just space
// Maploader bounds indices
// Defib stats
// Diagonal movement
// Bluespace shelter deploy checks
//debug printing macros
//TODO Move to a pref
//Endgame Results
//gibtonite state defines
//for obj explosion block calculation
//for determining which type of heartbeat sound is playing
//Mouse buttons pressed/held/released
//Keys held down during the mouse action
//Pixel coordinates within the icon, in the icon's coordinate space
//Pixel coordinates in screen_loc format ("[tile_x]:[pixel_x],[tile_y]:[pixel_y]")
//https://secure.byond.com/docs/ref/info.html#/atom/var/mouse_opacity
//world/proc/shelleo
//server security mode
//Dummy mob reserve slots
//gold slime core spawning
//slime core activation type
//stack recipe placement check types
//text files
// #define BOOMER_FILE "boomer.json"
// #define LOCATIONS_FILE "locations.json"
// #define WANTED_FILE "wanted_message.json"
// #define VISTA_FILE "steve.json"
//Fullscreen overlay resolution in tiles.
//Run the world with this parameter to enable a single run though of the game setup and tear down process with unit tests in between
//Force the log directory to be something specific in the data/logs folder
//Prevent the master controller from starting automatically, overrides TEST_RUN_PARAMETER
//Force the config directory to be something other than "config"
// list of all null rod weapons
// Used by PDA and cartridge code to reduce repetitiveness of spritesheets
//Filters
// possible bitflag return values of intercept_zImpact(atom/movable/AM, levels = 1) calls
//Misc text define. Does 4 spaces. Used as a makeshift tabulator.
//Nightshift levels.
//Scavenging element defines for special loot "events".
//Scavenging element defines for ckey/mind restrictions.
//stages of shoe tying-ness
// Notification action types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mobs.dm. ----------------------
/*ALL MOB-RELATED DEFINES THAT DON'T BELONG IN ANOTHER FILE GO HERE*/
// Misc mob defines
// Ready states at roundstart for mob/dead/new_player
// movement intent defines for the m_intent var
// Blood levels
// Sizes of mobs, used by mob/living/var/mob_size
// Ventcrawling defines
// Bloodcrawling defines
// Mob bio-types flags
/// Mobs that otherwise support nanites
// Organ defines for carbon mobs
/*see __DEFINES/inventory.dm for bodypart bitflag defines*/
// Health/damage defines for carbon mobs
// Note that gas heat damage is only applied once every FOUR ticks.
// Brain Damage defines
// Limit of traumas for each resilience tier
// Surgery Defines
// Health hud screws for carbon mobs
// Threshold levels for beauty for humans
// Moods levels for humans
// Sanity levels for humans
// Nutrition levels for humans
// Disgust levels for humans
// Charge levels for Ethereals
// Slime evolution threshold. Controls how fast slimes can split/grow
// Slime extract crossing. Controls how many extracts is required to feed to a slime to core-cross.
// Slime commands defines
// Sentience types, to prevent things like sentience potions from giving bosses sentience
//#define SENTIENCE_OTHER	 3	// Unused
// Mob AI Status
// Hostile simple animals
// If you add a new status, be sure to add a list for it to the simple_animals global in _globalvars/lists/mobs.dm
// determines if a mob can smash through it
// /Flags used by the flags parameter of electrocute act.
// /Makes it so that the shock doesn't take gloves into account.
// /Used when the shock is from a tesla bolt.
// /Used when an illusion shocks something. Makes the shock deal stamina damage and not trigger certain secondary effects.
// /The shock doesn't stun.
// Secbot and ED209 judgement criteria bitflag values
// ED209's ignore monkeys
// Offsets defines
//skyrat edit
//
// MINOR TWEAKS/MISC
// Roundstart trait system
// AI Toggles
// /obj/item/bodypart on_mob_life() retval flag
// / Field of vision defines.
// / How far away you can be to make eye contact with someone while examining
// / If you examine the same atom twice in this timeframe, we call examine_more() instead of examine()
///Define for spawning megafauna instead of a mob for cave gen
/*
 * Defines for "AI emotions", allowing the AI to expression emotions
 * with status displays via emotes.
 */
// / Breathing types. Lungs can access either by these or by a string, which will be considered a gas ID.
//Gremlins
//Game mode list indexes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mod.dm. ----------------------
/// Default value for the max_complexity var on MODsuits
/// Default cell drain per process on MODsuits
/// Default time for a part to seal
/// Passive module, just acts when put in naturally.
/// Usable module, does something when you press a button.
/// Toggle module, you turn it on/off and it does stuff.
/// Actively usable module, you may only have one selected at a time.
//Defines used by the theme for clothing flags and similar
//Defines used to override MOD clothing's icon and worn icon files in the skin.
/// Global list of all /datum/mod_theme
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\monkeys.dm. ----------------------
//Monkey defines, placed here so they can be read by other things!
//Mode defines
// Probability per Life tick that the monkey will:
// how many Life ticks the monkey will fail to:
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\movement.dm. ----------------------
/// The minimum for glide_size to be clamped to.
/// The maximum for glide_size to be clamped to.
/// This shouldn't be higher than the icon size, and generally you shouldn't be changing this, but it's here just in case.
/// Compensating for time dialation
///Broken down, here's what this does:
/// divides the world icon_size (32) by delay divided by ticklag to get the number of pixels something should be moving each tick.
/// The division result is given a min value of 1 to prevent obscenely slow glide sizes from being set
/// Then that's multiplied by the global glide size multiplier. 1.25 by default feels pretty close to spot on. This is just to try to get byond to behave.
/// The whole result is then clamped to within the range above.
/// Not very readable but it works
/// Enables smooth movement
// #define SMOOTH_MOVEMENT
/// Set appearance flags in vars
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\movespeed_modification.dm. ----------------------
//flags
//conflict types
//ids
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\move_force.dm. ----------------------
//Defaults
//Factors/modifiers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\nanites.dm. ----------------------
//Nanite excess thresholds
///Nanite Protocol types
///Nanite extra settings types: used to help uis know what type an extra setting is
///Nanite Extra Settings - Note that these will also be the names displayed in the UI
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\networks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\pinpointers.dm. ----------------------
//I would rather have these in pinpointer.dm, but Malf_Modules.dm is loaded before that file so they need to be here.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\pipe_construction.dm. ----------------------
//Construction Categories
//Disposal pipe relative connection directions
//Transit tubes
//the open status of the transit tube station
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\plumbing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\pool.dm. ----------------------
//TODO: move these to their own file
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\power.dm. ----------------------
///conversion ratio from joules to watts
///conversion ratio from watts to joules
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\preferences.dm. ----------------------
//Preference toggles
//Chat toggles
// Playtime tracking system, see jobs_exp.dm
//Flags in the players table in the db
//Job preferences levels
//Chaos levels for dynamic voting
// 'Be Victim' consent options for preferences panel / antag target HUD
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\procpath.dm. ----------------------
/// Represents a proc or verb path.
///
/// Despite having no DM-defined static type, proc paths have some variables,
/// listed below. These are not modifiable, but for a given procpath P,
/// `new P(null, "Name", "Desc")` can be used to create a new procpath with the
/// same code but new `name` and `desc` values. The other variables cannot be
/// changed in this way.
///
/// This type exists only to act as an annotation, providing reasonable static
/// typing for procpaths. Previously, types like `/atom/verb` were used, with
/// the `name` and `desc` vars of `/atom` thus being accessible. Proc and verb
/// paths will fail `istype` and `ispath` checks against `/procpath`.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\profile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\projectiles.dm. ----------------------
// check_pierce() return values
/// Default behavior: hit and delete self
/// Hit the thing but go through without deleting. Causes on_hit to be called with pierced = TRUE
/// Entirely phase through the thing without ever hitting.
// Delete self without hitting
/// This atom should be ricocheted off of from its inherent properties using standard % chance handling.
/// This atom should not be ricocheted off of from its inherent properties.
/// This atom should prevent any kind of projectile ricochet from its inherent properties.
/// This atom should force a projectile ricochet from its inherent properties.
//bullet_act() return values
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\qdel.dm. ----------------------
//! Defines that give qdel hints.
//!
//! These can be given as a return in [/atom/proc/Destroy] or by calling [/proc/qdel].
/// `qdel` should queue the object for deletion.
/// `qdel` should let the object live after calling [/atom/proc/Destroy].
/// Functionally the same as the above. `qdel` should assume the object will gc on its own, and not check it.
/// Qdel should assume this object won't GC, and queue a hard delete using a hard reference.
// Qdel should assume this object won't gc, and hard delete it posthaste.
/** If REFERENCE_TRACKING is enabled, qdel will call this object's find_references() verb.
 *
 * Functionally identical to [QDEL_HINT_QUEUE] if [GC_FAILURE_HARD_LOOKUP] is not enabled in _compiler_options.dm.
*/
/// Behavior as [QDEL_HINT_FINDREFERENCE], but only if the GC fails and a hard delete is forced.
// Defines for the [gc_destroyed][/datum/var/gc_destroyed] var.
// Defines for the time left for an item to get its reference cleaned
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\radiation.dm. ----------------------
/*
These defines are the balancing points of various parts of the radiation system.
Changes here can have widespread effects: make sure you test well.
Ask ninjanomnom if they're around
*/
// apply_effect((amount*RAD_MOB_COEFFICIENT)/max(1, (radiation**2)*RAD_OVERDOSE_REDUCTION), IRRADIATE, blocked)
// WARNING: The deines below could have disastrous consequences if tweaked incorrectly. See: The great SM purge of Oct.6.2017
// contamination_chance = 		(strength-RAD_MINIMUM_CONTAMINATION) * RAD_CONTAMINATION_CHANCE_COEFFICIENT * min(1/(steps*RAD_DISTANCE_COEFFICIENT), 1))
// contamination_strength = 	(strength-RAD_MINIMUM_CONTAMINATION) * RAD_CONTAMINATION_STR_COEFFICIENT
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\radio.dm. ----------------------
// Radios use a large variety of predefined frequencies.
//say based modes like binary are in living/say.dm
// Frequencies are always odd numbers and range from 1201 to 1599.
// Only the 1441 to 1489 range is freely available for general conversation.
// This represents 1/8th of the available spectrum.
// Transmission types.
// Filter types, used as an optimization to avoid unnecessary proc calls.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\reactions.dm. ----------------------
//Defines used in atmos gas reactions. Used to be located in ..\modules\atmospherics\gasmixtures\reactions.dm, but were moved here because fusion added so fucking many.
//Plasma fire properties
//General assmos defines.
//Research point amounts
//Plasma fusion properties
// Snowflake fire product types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\reagents.dm. ----------------------
//reagents reaction var defines
//reagents_holder_flags defines
// Is an open container for all intents and purposes.
//reagents_value defines, basically a multiplier used in reagent containers cargo selling.
/// Standard reagents value defines.
/// Take a grain of salt, only "rare" reagents should have a decent value here, for balance reasons.
/// TL;DR Think of it also like general market request price more than rarity.
//container_flags
//defines passed through to the on_reagent_change proc
//reagent bitflags, used for altering how they works
//Chemical reaction flags, for determining reaction specialties
//Chemical blacklists for smartdarts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\reagents_specific_heat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\research.dm. ----------------------
//RDSCREEN screens
//#define DEPARTMENTAL_FLAG_MINING		(1<<7)
//When adding new types, update the list below!
//defined here so people don't forget to change this!
// Linux still has old trit fires, so
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\robots.dm. ----------------------
/*ALL DEFINES FOR AIS, CYBORGS, AND SIMPLE ANIMAL BOTS*/
//Bot defines, placed here so they can be read by other things!
//Mode defines. If you add a new one make sure you update mode_name in /mob/living/simple_animal/bot
//Bot types
//AI notification defines
//Assembly defines
//Bot Upgrade defines
//Checks to determine borg availability depending on the server's config. These are defines in the interest of reducing copypasta
//silicon_priviledges flags
/// Defines for whether or not module slots are broken.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\rockpaperscissors.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\role_preferences.dm. ----------------------
//Values for antag preferences, event roles, etc. unified here
//These are synced with the Database, if you change the values of the defines
//then you MUST update the database!
//#define ROLE_MONSTERHUNTER			"monster hunter" Disabled for now
//Define for disabling individual antagonists for dynamic
//Missing assignment means it's not a gamemode specific role, IT'S NOT A BUG OR ERROR.
//The gamemode specific ones are just so the gamemodes can query whether a player is old enough
//(in game days played) to play that role
//Job defines for what happens when you fail to qualify for any job during job selection
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\rust_g.dm. ----------------------
// rust_g.dm - DM API for rust_g extension library
//
// To configure, create a `rust_g.config.dm` and set what you care about from
// the following options:
//
// #define RUST_G "path/to/rust_g"
// Override the .dll/.so detection logic with a fixed path or with detection
// logic of your own.
//
// #define RUSTG_OVERRIDE_BUILTINS
// Enable replacement rust-g functions for certain builtins. Off by default.
// Default automatic RUST_G detection.
// On Windows, looks in the standard places for `rust_g.dll`.
// On Linux, looks in `.`, `$LD_LIBRARY_PATH`, and `~/.byond/bin` for either of
// `librust_g.so` (preferred) or `rust_g` (old).
/* This comment bypasses grep checks */ /var/__rust_g
/// Gets the version of rust_g
/**
 * Sets up the Aho-Corasick automaton with its default options.
 *
 * The search patterns list and the replacements must be of the same length when replace is run, but an empty replacements list is allowed if replacements are supplied with the replace call
 * Arguments:
 * * key - The key for the automaton, to be used with subsequent rustg_acreplace/rustg_acreplace_with_replacements calls
 * * patterns - A non-associative list of strings to search for
 * * replacements - Default replacements for this automaton, used with rustg_acreplace
 */
/**
 * Sets up the Aho-Corasick automaton using supplied options.
 *
 * The search patterns list and the replacements must be of the same length when replace is run, but an empty replacements list is allowed if replacements are supplied with the replace call
 * Arguments:
 * * key - The key for the automaton, to be used with subsequent rustg_acreplace/rustg_acreplace_with_replacements calls
 * * options - An associative list like list("anchored" = 0, "ascii_case_insensitive" = 0, "match_kind" = "Standard"). The values shown on the example are the defaults, and default values may be omitted. See the identically named methods at https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html to see what the options do.
 * * patterns - A non-associative list of strings to search for
 * * replacements - Default replacements for this automaton, used with rustg_acreplace
 */
/**
 * Run the specified replacement engine with the provided haystack text to replace, returning replaced text.
 *
 * Arguments:
 * * key - The key for the automaton
 * * text - Text to run replacements on
 */
/**
 * Run the specified replacement engine with the provided haystack text to replace, returning replaced text.
 *
 * Arguments:
 * * key - The key for the automaton
 * * text - Text to run replacements on
 * * replacements - Replacements for this call. Must be the same length as the set-up patterns
 */
/**
 * This proc generates a cellular automata noise grid which can be used in procedural generation methods.
 *
 * Returns a single string that goes row by row, with values of 1 representing an alive cell, and a value of 0 representing a dead cell.
 *
 * Arguments:
 * * percentage: The chance of a turf starting closed
 * * smoothing_iterations: The amount of iterations the cellular automata simulates before returning the results
 * * birth_limit: If the number of neighboring cells is higher than this amount, a cell is born
 * * death_limit: If the number of neighboring cells is lower than this amount, a cell dies
 * * width: The width of the grid.
 * * height: The height of the grid.
 */
/**
 * This proc generates a grid of perlin-like noise
 *
 * Returns a single string that goes row by row, with values of 1 representing an turned on cell, and a value of 0 representing a turned off cell.
 *
 * Arguments:
 * * seed: seed for the function
 * * accuracy: how close this is to the original perlin noise, as accuracy approaches infinity, the noise becomes more and more perlin-like
 * * stamp_size: Size of a singular stamp used by the algorithm, think of this as the same stuff as frequency in perlin noise
 * * world_size: size of the returned grid.
 * * lower_range: lower bound of values selected for. (inclusive)
 * * upper_range: upper bound of values selected for. (exclusive)
 */
/**
 * This proc generates a noise grid using worley noise algorithm
 *
 * Returns a single string that goes row by row, with values of 1 representing an alive cell, and a value of 0 representing a dead cell.
 *
 * Arguments:
 * * region_size: The size of regions
 * * threshold: the value that determines wether a cell is dead or alive
 * * node_per_region_chance: chance of a node existiing in a region
 * * size: size of the returned grid
 * * node_min: minimum amount of nodes in a region (after the node_per_region_chance is applied)
 * * node_max: maximum amount of nodes in a region
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\rust_g_overrides.dm. ----------------------
// RUSTG_OVERRIDE_BUILTINS is not used since the file APIs don't work well over Linux.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\say.dm. ----------------------
/*
	Defines for use in saycode and text formatting.
	Currently contains speech spans and message modes
*/
//Message modes. Each one defines a radio channel, more or less.
//Spans. Robot speech, italics, etc. Applied in compose_message().
//bitflag #defines for return value of the radio() proc.
//Eavesdropping
// A link given to ghost alice to follow bob
//whether the emote is visible or audible.
// Requires sight
// Requires hearing
// Requires sight or hearing
// Always able to be seen
//Don't set this very much higher then 1024 unless you like inviting people in to dos your server with message spam
//ambition start
//ambition end
//Bark defines
// Is something in the IC chat filter? This is config dependent.
// Audio/Visual Flags. Used to determine what sense are required to notice a message.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\screentips.dm. ----------------------
/// Context applied to LMB actions
/// Context applied to RMB actions
/// Context applied to Shift-LMB actions
/// Context applied to Ctrl-LMB actions
/// Context applied to Ctrl-RMB actions
/// Context applied to Alt-LMB actions
/// Context applied to Alt-RMB actions
/// Context applied to Ctrl-Shift-LMB actions
/// Screentips are always disabled
/// Screentips are always enabled
/// Screentips are only enabled when they have context
/// Screentips enabled, no context
/// Regardless of intent
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\security_levels.dm. ----------------------
//Security levels
//Macro helpers.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\server_tools.config.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\shuttles.dm. ----------------------
//shuttle mode defines
// Shuttle return values
//Launching Shuttles to CentCom
//positive value = cannot puchase
// Ripples, effects that signal a shuttle's arrival
//Engine related
//Docking error flags
//Docking turf movements
//Rotation params
//Shuttle defaults
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\sight.dm. ----------------------
//#define SEE_INVISIBLE_LEVEL_ONE 35 //currently unused
//#define INVISIBILITY_LEVEL_ONE 35 //currently unused
//#define SEE_INVISIBLE_LEVEL_TWO 45 //currently unused
//#define INVISIBILITY_LEVEL_TWO 45 //currently unused
//for clothing visor toggles, these determine which vars to toggle
//for whether AI eyes see static, and whether it is mouse-opaque or not
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\sound.dm. ----------------------
//max channel is 1024. Only go lower from here, because byond tends to pick the first availiable channel to play sounds on
//CIT CHANNELS - TRY NOT TO REGRESS
//Reactor Channel
///Default range of a sound.
///default extra range for sounds considered to be quieter
///The range deducted from sound range for things that are considered silent / sneaky
///Percentage of sound's range where no falloff is applied
///The default exponent of sound falloff
/// Default distance multiplier for sounds
/// Default range at which sound distance multiplier applies
//THIS SHOULD ALWAYS BE THE LOWEST ONE!
//KEEP IT UPDATED
/// remove
//Ambience types
//default byond sound environments
//If we ever make custom ones add them here
//"sound areas": easy way of keeping different types of areas consistent.
///Announcer audio keys
/// Global list of all of our announcer keys.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\spaceman_dmm.dm. ----------------------
// Interfaces for the SpacemanDMM linter, define'd to nothing when the linter
// is not in use.
// The SPACEMAN_DMM define is set by the linter and other tooling when it runs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\spans.dm. ----------------------
// Sorted alphabetically
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\species.dm. ----------------------
// Species ID Defines ---------------------------
// Species Category Defines ---------------------
//Species Wing Type Defines ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\stat.dm. ----------------------
/*
	Used with the various stat variables (mob, machines)
*/
//mob/var/stat things
//Maximum healthiness an individual can have
// bitflags for machine stat variable
//ai power requirement defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\station.dm. ----------------------
/// The data file that future station traits are stored in
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\status_effects.dm. ----------------------
//These are all the different status effects. Use the paths for each effect in the defines.
///////////
// BUFFS //
///////////
/////////////
// DEBUFFS //
/////////////
/// The affected is unable to move, or to use, hold, or pickup items.
/// The affected is unable to use or pickup items
/// Blocks sprint
/// shoves inflict this to indicate the next shove while this is in effect should disarm guns
/////////////
// NEUTRAL //
/////////////
/////////////
//  SLIME  //
/////////////
/////////////
// GROUPED //
/////////////
/// If the incapacitated status effect will ignore a mob in stasis (stasis beds)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\stat_tracking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\strippable.dm. ----------------------
// All of these must be matched in StripMenu.js.
/// This slot is not obscured.
/// This slot is completely obscured, and cannot be accessed.
/// This slot can't be seen, but can be accessed.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\subsystems.dm. ----------------------
//! Defines for subsystems and overlays
//!
//! Lots of important stuff in here, make sure you have your brain switched on
//! when editing this file
//! ## DB defines
/**
 * DB major schema version
 *
 * Update this whenever the db schema changes
 *
 * make sure you add an update to the schema_version stable in the db changelog
 */
/**
 * DB minor schema version
 *
 * Update this whenever the db schema changes
 *
 * make sure you add an update to the schema_version stable in the db changelog
 */
//! ## Timing subsystem
/**
 * Don't run if there is an identical unique timer active
 *
 * if the arguments to addtimer are the same as an existing timer, it doesn't create a new timer,
 * and returns the id of the existing timer
 */
///For unique timers: Replace the old timer rather then not start this one
/**
 * Timing should be based on how timing progresses on clients, not the server.
 *
 * Tracking this is more expensive,
 * should only be used in conjuction with things that have to progress client side, such as
 * animate() or sound()
 */
///Timer can be stopped using deltimer()
///prevents distinguishing identical timers with the wait variable
///
///To be used with TIMER_UNIQUE
///Loops the timer repeatedly until qdeleted
///
///In most cases you want a subsystem instead, so don't use this unless you have a good reason
///Delete the timer on parent datum Destroy() and when deltimer'd
///Empty ID define
//! ## Initialization subsystem
///New should not call Initialize
///New should call Initialize(TRUE)
///New should call Initialize(FALSE)
//! ### Initialization hints
///Nothing happens
/**
 * call LateInitialize at the end of all atom Initalization
 *
 * The item will be added to the late_loaders list, this is iterated over after
 * initalization of subsystems is complete and calls LateInitalize on the atom
 * see [this file for the LateIntialize proc](atom.html#proc/LateInitialize)
 */
///Call qdel on the atom after intialization
//Call qdel with a force of TRUE after initialization
///type and all subtypes should always immediately call Initialize in New()
// Subsystem init_order, from highest priority to lowest priority
// Subsystems shutdown in the reverse of the order they initialize in
// The numbers just define the ordering, they are meaningless otherwise.
// #define INIT_ORDER_TCG				55
// #define INIT_ORDER_OUTPUTS			35
// #define INIT_ORDER_SKILLS			15
// #define INIT_ORDER_DISCORD			-60
// #define INIT_ORDER_EXPLOSIONS		-69
// Subsystem fire priority, from lowest to highest priority
// If the subsystem isn't listed here it's either DEFAULT or PROCESS (if it's a processing subsystem child)
// #define FIRE_PRIORITY_EXPLOSIONS	666
// SS runlevels
// SSair run section
// Subsystem delta times or tickrates, in seconds. I.e, how many seconds in between each process() call for objects being processed by that subsystem.
// Only use these defines if you want to access some other objects processing delta_time, otherwise use the delta_time that is sent as a parameter to process()
//! ## Overlays subsystem
///Compile all the overlays for an atom from the cache lists
// |= on overlays is not actually guaranteed to not add same appearances but we're optimistically using it anyway.
/**
	Create a new timer and add it to the queue.
	* Arguments:
	* * callback the callback to call on timer finish
	* * wait deciseconds to run the timer for
	* * flags flags for this timer, see: code\__DEFINES\subsystems.dm
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\text.dm. ----------------------
/// Prepares a text to be used for maptext. Use this so it doesn't look hideous.
/// Macro from Lummox used to get height from a MeasureText proc
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\tgs.config.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\tgs.dm. ----------------------
// tgstation-server DMAPI
// All functions and datums outside this document are subject to change with any version and should not be relied on.
// CONFIGURATION
/// Create this define if you want to do TGS configuration outside of this file.
// Comment this out once you've filled in the below.
// Uncomment this if you wish to allow the game to interact with TGS 3..
// This will raise the minimum required security level of your game to TGS_SECURITY_TRUSTED due to it utilizing call()().
//#define TGS_V3_API
// Required interfaces (fill in with your codebase equivalent):
/// Create a global variable named `Name` and set it to `Value`.
/// Read the value in the global variable `Name`.
/// Set the value in the global variable `Name` to `Value`.
/// Disallow ANYONE from reflecting a given `path`, security measure to prevent in-game use of DD -> TGS capabilities.
/// Display an announcement `message` from the server to all players.
/// Notify current in-game administrators of a string `event`.
/// Write an info `message` to a server log.
/// Write an warning `message` to a server log.
/// Write an error `message` to a server log.
/// Get the number of connected /clients.
// EVENT CODES
/// Before a reboot mode change, extras parameters are the current and new reboot mode enums.
/// Before a port change is about to happen, extra parameters is new port.
/// Before the instance is renamed, extra parameter is the new name.
/// After the watchdog reattaches to DD, extra parameter is the new [/datum/tgs_version] of the server.
/// When the watchdog sends a health check to DD. No parameters.
/// When the repository is reset to its origin reference. Parameters: Reference name, Commit SHA.
/// When the repository performs a checkout. Parameters: Checkout git object.
/// When the repository performs a fetch operation. No parameters.
/// When the repository test merges. Parameters: PR Number, PR Sha, (Nullable) Comment made by TGS user.
/// Before the repository makes a sychronize operation. Parameters: Absolute repostiory path.
/// Before a BYOND install operation begins. Parameters: [/datum/tgs_version] of the installing BYOND.
/// When a BYOND install operation fails. Parameters: Error message
/// When the active BYOND version changes.  Parameters: (Nullable) [/datum/tgs_version] of the current BYOND, [/datum/tgs_version] of the new BYOND.
/// When the compiler starts running. Parameters: Game directory path, origin commit SHA.
/// When a compile is cancelled. No parameters.
/// When a compile fails. Parameters: Game directory path, [TRUE]/[FALSE] based on if the cause for failure was DMAPI validation.
/// When a compile operation completes. Note, this event fires before the new .dmb is loaded into the watchdog. Consider using the [TGS_EVENT_DEPLOYMENT_COMPLETE] instead. Parameters: Game directory path.
/// When an automatic update for the current instance begins. No parameters.
/// When the repository encounters a merge conflict: Parameters: Base SHA, target SHA, base reference, target reference.
/// When a deployment completes. No Parameters.
/// Before the watchdog shuts down. Not sent for graceful shutdowns. No parameters.
/// Before the watchdog detaches for a TGS update/restart. No parameters.
// We don't actually implement these 4 events as the DMAPI can never receive them.
// #define TGS_EVENT_WATCHDOG_LAUNCH 17
// #define TGS_EVENT_WATCHDOG_CRASH 18
// #define TGS_EVENT_WORLD_END_PROCESS 19
// #define TGS_EVENT_WORLD_REBOOT 20
/// Watchdog event when TgsInitializationComplete() is called. No parameters.
// DMAPI also doesnt implement this
// #define TGS_EVENT_DREAM_DAEMON_LAUNCH 22
/// After a single submodule update is performed. Parameters: Updated submodule name.
/// After CodeModifications are applied, before DreamMaker is run. Parameters: Game directory path, origin commit sha, byond version.
/// Whenever a deployment folder is deleted from disk. Parameters: Game directory path.
// OTHER ENUMS
/// The server will reboot normally.
/// The server will stop running on reboot.
/// The watchdog will restart on reboot.
/// DreamDaemon Trusted security level.
/// DreamDaemon Safe security level.
/// DreamDaemon Ultrasafe security level.
//REQUIRED HOOKS
/**
 * Call this somewhere in [/world/proc/New] that is always run. This function may sleep!
 *
 * * event_handler - Optional user defined [/datum/tgs_event_handler].
 * * minimum_required_security_level: The minimum required security level to run the game in which the DMAPI is integrated. Can be one of [TGS_SECURITY_ULTRASAFE], [TGS_SECURITY_SAFE], or [TGS_SECURITY_TRUSTED].
 */
/**
 * Call this when your initializations are complete and your game is ready to play before any player interactions happen.
 *
 * This may use [/world/var/sleep_offline] to make this happen so ensure no changes are made to it while this call is running.
 * Afterwards, consider explicitly setting it to what you want to avoid this BYOND bug: http://www.byond.com/forum/post/2575184
 * This function should not be called before ..() in [/world/proc/New].
 */
/// Put this at the start of [/world/proc/Topic].
/**
 * Call this as late as possible in [world/proc/Reboot].
 */
// DATUM DEFINITIONS
// All datums defined here should be considered read-only
/// Represents git revision information.
/// Represents a version.
/**
 * Returns [TRUE]/[FALSE] based on if the [/datum/tgs_version] contains wildcards.
 */
/**
 * Returns [TRUE]/[FALSE] based on if the [/datum/tgs_version] equals some other version.
 *
 * other_version - The [/datum/tgs_version] to compare against.
 */
/// Represents a merge of a GitHub pull request.
/// Represents a connected chat channel.
// Represents a chat user
/// User definable handler for TGS events.
/**
 * User definable callback for handling TGS events.
 *
 * event_code - One of the TGS_EVENT_ defines. Extra parameters will be documented in each.
 */
/// User definable chat command.
/**
 * Process command activation. Should return a [/datum/tgs_message_content] to respond to the issuer with.
 *
 * sender - The [/datum/tgs_chat_user] who issued the command.
 * params - The trimmed string following the command `/datum/tgs_chat_command/var/name].
 */
/// User definable chat message.
/// User definable chat embed. Currently mirrors Discord chat embeds. See https://discord.com/developers/docs/resources/channel#embed-object-embed-structure for details.
/// Common datum for similar discord embed medias.
/// See https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure for details.
/// See https://discord.com/developers/docs/resources/channel#embed-object-embed-provider-structure for details.
/// See https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure for details. Must have name set in New().
/// See https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure for details. Must have name and value set in New().
// API FUNCTIONS
/// Returns the maximum supported [/datum/tgs_version] of the DMAPI.
/// Returns the minimum supported [/datum/tgs_version] of the DMAPI.
/**
 * Returns [TRUE] if DreamDaemon was launched under TGS, the API matches, and was properly initialized. [FALSE] will be returned otherwise.
 */
// No function below this succeeds if it TgsAvailable() returns FALSE or if TgsNew() has yet to be called.
/**
 * Forces a hard reboot of DreamDaemon by ending the process. This function may sleep!
 *
 * Unlike del(world) clients will try to reconnect.
 * If TGS has not requested a [TGS_REBOOT_MODE_SHUTDOWN] DreamDaemon will be launched again.
 */
/**
 * Send a message to connected chats. This function may sleep!
 *
 * message - The [/datum/tgs_message_content] to send.
 * admin_only: If [TRUE], message will be sent to admin connected chats. Vice-versa applies.
 */
/**
 * Send a private message to a specific user. This function may sleep!
 *
 * message - The [/datum/tgs_message_content] to send.
 * user: The [/datum/tgs_chat_user] to PM.
 */
/**
 * Send a message to connected chats that are flagged as game-related in TGS. This function may sleep!
 *
 * message - The [/datum/tgs_message_content] to send.
 * channels - Optional list of [/datum/tgs_chat_channel]s to restrict the message to.
 */
/// Returns the current [/datum/tgs_version] of TGS if it is running the server, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Returns the current [/datum/tgs_version] of the DMAPI being used if it was activated, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Returns the name of the TGS instance running the game if TGS is present, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Return the current [/datum/tgs_revision_information] of the running server if TGS is present, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Returns the current BYOND security level as a TGS_SECURITY_ define if TGS is present, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Returns a list of active [/datum/tgs_revision_information/test_merge]s if TGS is present, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/// Returns a list of connected [/datum/tgs_chat_channel]s if TGS is present, null otherwise. This function may sleep if the call to [/world/proc/TgsNew] is sleeping!
/*
The MIT License

Copyright (c) 2017-2023 Jordan Brown

Permission is hereby granted, free of charge,
to any person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\tgui.dm. ----------------------
/// Green eye; fully interactive
/// Orange eye; updates but is not interactive
/// Red eye; disabled, does not update
/// UI Should close
/// Maximum number of windows that can be suspended/reused
/// Maximum number of open windows
/// Maximum ping timeout allowed to detect zombie windows
/// Used for rate-limiting to prevent DoS by excessively refreshing a TGUI window
/// Window does not exist
/// Window was just opened, but is still not ready to be sent data
/// Window is free and ready to receive data
/// Get a window id based on the provided pool index
/// Get a pool index of the provided window id
/// Creates a message packet for sending via output()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\time.dm. ----------------------
//Select holiday names -- If you test for a holiday in the code, make the holiday's name a define and test for that instead
/*

Days of the week to make it easier to reference them.

When using time2text(), please use "DDD" to find the weekday. Refrain from using "Day"

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\tools.dm. ----------------------
// Tool types
//Glasswork Tools
// If delay between the start and the end of tool operation is less than MIN_TOOL_SOUND_DELAY,
// tool sound is only played when op is started. If not, it's played twice.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\traits.dm. ----------------------
// trait accessor defines
//mob traits
/// Prevents voluntary movement.
/// Prevents usage of manipulation appendages (picking, holding or using items, manipulating storage).
/// Like antimagic, but doesn't block the user from casting
/// Gives us turf, mob and object vision through walls
/// Gives us mob vision through walls and slight night vision
/// Gives us turf vision through walls and slight night vision
/// Gives us Night vision
/// Lets us scan reagents
/// forces update_density to make us not dense
/// forces us to not render our overlays
///Used for fireman carry to have mobe not be dropped when passing by a prone individual.
//used because it's more reliable than checking for the component
// mobility flag traits
// IN THE FUTURE, IT WOULD BE NICE TO DO SOMETHING SIMILAR TO https://github.com/tgstation/tgstation/pull/48923/files (ofcourse not nearly the same because I have my.. thoughts on it)
// BUT FOR NOW, THESE ARE HOOKED TO DO update_mobility() VIA COMSIG IN living_mobility.dm
// SO IF YOU ADD MORE, BESURE TO UPDATE IT THERE.
/// Disallow movement
/// Disallow pickup
/// Disallow item use
///Disallow resting/unresting
/**
  * COMBAT MODE/SPRINT MODE TRAITS
  */
/// Prevents combat mode from being active.
/// Prevents sprinting from being active.
/// Weather immunities, also protect mobs inside them.
///Used for managing KEEP_TOGETHER in [appearance_flags]
// item traits
// common trait sources
// unique trait sources, still defines
///Turf trait for when a turf is transparent
/// This trait is added by the active directional block system.
/// This trait is added by the parry system.
/// obtained from mapping helper
/// Trait associated with mafia
///Traits given by station traits
/// Trait applied by MODsuits.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\turf_flags.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\typeids.dm. ----------------------
//Byond type ids
//helper macros
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\uplink.dm. ----------------------
// These are used in uplink_devices.dm to determine whether or not an item is purchasable.
/// This item is purchasable to traitors
/// This item is purchasable to nuke ops
/// This item is purchasable to clown ops
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\vehicles.dm. ----------------------
//Vehicle control flags. control flags describe access to actions in a vehicle.
///controls the vehicles movement
///Can't leave vehicle voluntarily, has to resist.
///melee attacks/shoves a vehicle may have
///using equipment/weapons on the vehicle
///changing around settings and the like.
///ez define for giving a single pilot mech all the flags it needs.
//car_traits flags
///Will this car kidnap people by ramming into them?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\voreconstants.dm. ----------------------
// Overhauled vore system
/// Can be smelled?
/// Can get absorbed?
/// Can get simplemob vored?
/// Change this whenever you add a vore flag, must be largest vore flag*2-1
// Stance for hostile mobs to be in while devouring someone.
/* // removing sizeplay again
GLOBAL_LIST_INIT(player_sizes_list, list("Macro" = SIZESCALE_HUGE, "Big" = SIZESCALE_BIG, "Normal" = SIZESCALE_NORMAL, "Small" = SIZESCALE_SMALL, "Tiny" = SIZESCALE_TINY))
// Edited to make the new travis check go away
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\vote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\vv.dm. ----------------------
//#define IS_VALID_ASSOC_KEY(V) (istext(V) || ispath(V) || isdatum(V) || islist(V))
//General helpers
//Helper for getting something to vv_do_topic in general
//Helpers for vv_get_dropdown()
// VV HREF KEYS
// vv_do_list() keys
// vv_do_basic() keys
// /datum
// /datum/gas_mixture
// /atom
// #define VV_HK_RADIATE "radiate"
// #define VV_HK_ADD_AI "add_ai"
// /obj
// /mob
// /mob/living/carbon
// /mob/living/carbon/human
// misc
// paintings
//outfits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\wall_dents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\wires.dm. ----------------------
//retvals for attempt_wires_interaction
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\wounds.dm. ----------------------
/// an attack must do this much damage after armor in order to roll for being a wound (incremental pressure damage need not apply)
/// an attack must do this much damage after armor in order to be eliigible to dismember a suitably mushed bodypart
/// any damage dealt over this is ignored for damage rolls unless the target has the frail quirk (35^1.4=145)
/// any brute weapon/attack that doesn't have sharpness. rolls for blunt bone wounds
/// any brute weapon/attack with sharpness = SHARP_EDGED. rolls for slash wounds
/// any brute weapon/attack with sharpness = SHARP_POINTY. rolls for piercing wounds
/// any concentrated burn attack (lasers really). rolls for burning wounds
// How much determination reagent to add each time someone gains a new wound in [/datum/wound/proc/second_wind()]
/// the max amount of determination you can have
/// set wound_bonus on an item or attack to this to disable checking wounding for the attack
// list in order of highest severity to lowest
// Thresholds for infection for burn wounds, once infestation hits each threshold, things get steadily worse
/// below this has no ill effects from infection
/// then below here, you ooze some pus and suffer minor tox damage, but nothing serious
/// then below here, your limb occasionally locks up from damage and infection and briefly becomes disabled. Things are getting really bad
/// below here, your skin is almost entirely falling off and your limb locks up more frequently. You are within a stone's throw of septic paralysis and losing the limb
// above WOUND_INFECTION_SEPTIC, your limb is completely putrid and you start rolling to lose the entire limb by way of paralyzation. After 3 failed rolls (~4-5% each probably), the limb is paralyzed
/// how quickly sanitization removes infestation and decays per tick
/// how much blood you can lose per tick per slash max. 8 is a LOT of blood for one cut so don't worry about hitting it easily
/// dead people don't bleed, but they can clot! this is the minimum amount of clotting per tick on dead people, so even critical cuts will slowly clot in dead people
/// if we suffer a bone wound to the head that creates brain traumas, the timer for the trauma cycle is +/- by this percent (0-100)
// The following are for persistent scar save formats
/// The version number of the scar we're saving
/// The body_zone we're applying to on granting
/// The description we're loading
/// The precise location we're loading
/// The severity the scar had
///how many fields there are above (NOT INCLUDING THIS OBVIOUSLY)
// increment this number when you update the persistent scarring format in a way that invalidates previous saved scars (new fields, reordering, etc)
/// saved scars with a version lower than this will be discarded
// With the wounds pt. 2 update, general dismemberment now requires 2 things for a limb to be dismemberable (bone only creatures just need the second):
// 	1. Skin is mangled: A critical slash or pierce wound on that limb
// 	2. Bone is mangled: At least a severe bone wound on that limb
// see [/obj/item/bodypart/proc/get_mangled_state] for more information
// What kind of biology we have, and what wounds we can suffer, mostly relies on the HAS_FLESH and HAS_BONE species traits on human species
/// golems and androids, cannot suffer any wounds
/// skeletons and plasmemes, can only suffer bone wounds, only needs mangled bone to be able to dismember
/// nothing right now, maybe slimepeople in the future, can only suffer slashing, piercing, and burn wounds
/// standard humanoids, can suffer all wounds, needs mangled bone and flesh to dismember
/// If this wound requires having the HAS_FLESH flag for humanoids
/// If this wound requires having the HAS_BONE flag for humanaoids
/// If having this wound counts as mangled flesh for dismemberment
/// If having this wound counts as mangled bone for dismemberment
/// If this wound marks the limb as being allowed to have gauze applied
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_auxtools.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_globals.dm. ----------------------
//See also controllers/globals.dm
//Creates a global initializer with a given InitValue expression, do not use
//Creates an empty global initializer, do not use
//Prevents a given global from being VV'd
//Standard BYOND global, do not use
//Standard typed BYOND global, do not use
//Defines a global var on the controller, do not use
//Create an untyped global with an initializer expression
//Create a global const var, do not use
//Create a list global with an initializer expression
//Create a list global that is initialized as an empty list
// Create a typed list global with an initializer expression
// Create a typed list global that is initialized as an empty list
//Create a typed global with an initializer expression
//Create an untyped null global
//Create a null global list
//Create an typed null global
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_protect.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_readme.dm. ----------------------
/*
	This folder is full of #define statements.  They are similar to constants,
	but must come before any code that references them, and they do not take up
	memory the way constants do.

	The values in this folder are NOT options.  They are not for hosts to play with.
	Some of the values are arbitrary and only need to be different from similar constants;
	for example, the genetic mutation numbers in genetics.dm mean nothing, but MUST be distinct.

	It is wise not to touch them unless you understand what they do, where they're used,
	and most importantly,
	how to undo your changes if you screw it up.
	- Sayu
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_tick.dm. ----------------------
/// Percentage of tick to leave for master controller to run
/// internal_tick_usage is updated every tick by extools
/// Tick limit while running normally
/// Tick limit used to resume things in stoplag
/// Tick limit for MC while running
/// Tick limit while initializing
/// for general usage of tick_usage
/// to be used where the result isn't checked
/// Returns true if tick_usage is above the limit
/// runs stoplag if tick_usage is above the limit
/// Returns true if tick usage is above 95, for high priority usage
/// runs stoplag if tick_usage is above 95, for high priority usage
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\admin\keybindings.dm. ----------------------
// Defines for managed input/keybinding system.
/// Max length of a keypress command before it's considered to be a forged packet/bogus command
/// Maximum keys that can be bound to one button
/// Maximum keys per keybind
/// Max amount of keypress messages per second over two seconds before client is autokicked
/// Max keys that can be held down at once by a client
/// Macroset name of hotkeys/keybind only/modern mode
/// Macroset name of classic hotkey mode
/// Macroset name of classic input mode
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\chemistry\reactions.dm. ----------------------
// Reaction priorities, higher makes it checked first. Otherwise, it goes based on reaction temperature requirements.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\color\colors.dm. ----------------------
// This is eventually for wjohn to add more color standardization stuff like I keep asking him >:(
//Color defines used by the soapstone (based on readability against grey tiles)
//Color defines used by the assembly detailer.
///Colors for xenobiology vatgrowing
///Main colors for UI themes
///Colors for eigenstates
/**
 * Some defines to generalise colours used in lighting.
 *
 * Important note: colors can end up significantly different from the basic html picture, especially when saturated
 */
/// Bright but quickly dissipating neon green. rgb(100, 200, 100)
/// Electric green. rgb(0, 255, 0)
/// Cold, diluted blue. rgb(100, 150, 250)
/// Light blueish green. rgb(125, 225, 175)
/// Diluted cyan. rgb(125, 225, 225)
/// Electric cyan rgb(0, 255, 255)
/// More-saturated cyan. rgb(64, 206, 255)
/// Saturated blue. rgb(51, 117, 248)
/// Diluted, mid-warmth pink. rgb(225, 125, 225)
/// Dimmed yellow, leaning kaki. rgb(225, 225, 125)
/// Clear brown, mostly dim. rgb(150, 100, 50)
/// Mostly pure orange. rgb(250, 150, 50)
/// Light Purple. rgb(149, 44, 244)
/// Less-saturated light purple. rgb(155, 81, 255)
///slightly desaturated bright yellow.
/// deep crimson
/* These ones aren't a direct colour like the ones above, because nothing would fit */
/// Warm orange color, leaning strongly towards yellow. rgb(250, 160, 25)
/// Very warm yellow, leaning slightly towards orange. rgb(196, 138, 24)
/// Bright, non-saturated red. Leaning slightly towards pink for visibility. rgb(250, 100, 75)
/// Weird color, between yellow and green, very slimy. rgb(175, 200, 75)
/// Extremely diluted yellow, close to skin color (for some reason). rgb(250, 225, 175)
/// Barely visible cyan-ish hue, as the doctor prescribed. rgb(240, 250, 250)
//The GAGS greyscale_colors for each department's computer/machine circuits
/// Colors for pride week
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\color\color_priority.dm. ----------------------
//different types of atom colorations
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\color\lum.dm. ----------------------
//Luma coefficients suggested for HDTVs. If you change these, make sure they add up to 1.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\combat\attack_types.dm. ----------------------
// Attack types for check_block()/run_block(). Flags, combinable.
/// Attack was melee, whether or not armed.
/// Attack was with a gun or something that should count as a gun (but not if a gun shouldn't count for a gun, crazy right?)
/// Attack was unarmed.. this usually means hand to hand combat.
/// Attack was a thrown atom hitting the victim.
/// Attack was a bodyslam/leap/tackle. See: Xenomorph leap tackles.
/// Attack was from a parry counterattack. Do not attempt to parry-this!
// Requires for datum definitions to not error with must be a constant statement when used in lists as text associative keys.
// KEEP IN SYNC WITH ABOVE!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\combat\block.dm. ----------------------
/// Check whether or not we can block, without "triggering" a block. Basically run checks without effects like depleting shields.
/// Wrapper for do_run_block(). The arguments on that means the same as for this.
/// Runs a block "sequence", effectively checking and then doing effects if necessary.
/// Wrapper for do_run_block(). The arguments on that means the same as for this.
// Don't ask why there's block_parry.dm and this. This is for the run_block() system, which is the "parent" system of the directional block and parry systems.
/// Bitflags for check_block() and handle_block(). Meant to be combined. You can be hit and still reflect, for example, if you do not use BLOCK_SUCCESS.
/// Attack was not blocked
/// Attack was blocked, do not do damage. THIS FLAG MUST BE THERE FOR DAMAGE/EFFECT PREVENTION!
/// The below are for "metadata" on "how" the attack was blocked.
/// Attack was and should be redirected according to list argument REDIRECT_METHOD (NOTE: the SHOULD here is important, as it says "the thing blocking isn't handling the reflecting for you so do it yourself"!)
/// Attack was redirected (whether by us or by SHOULD_REDIRECT flagging for automatic handling)
/// Attack was blocked by something like a shield.
/// Attack was blocked by something worn on you.
/// Attack outright missed because the target dodged. Should usually be combined with redirection passthrough or something (see martial arts)
/// Meta-flag for run_block/do_run_block : By default, BLOCK_SUCCESS tells do_run_block() to assume the attack is completely blocked and not continue the block chain. If this is present, it will continue to check other items in the chain rather than stopping.
/// Attack should change the amount of damage incurred. This means something calling run_block() has to handle it!
/// Attack should scale by this percent, 0 for no block and 100 for full blocked
/// For keys in associative list/block_return as we don't want to saturate our (somewhat) limited flags.
/// These keys are generally only applied to the list if real_attack is FALSE. Used incase we want to make "smarter" mob AI in the future or something.
/// Tells the caller how likely from 0 (none) to 100 (always) we are to reflect energy projectiles
/// Tells the caller how likely we are to block attacks from 0 to 100 in general
/// Tells the caller about how many hits we can soak on average before our blocking fails.
/// Tells the caller we got blocked by active directional block.
/// Tells the caller our damage mitigation for their attack.
/// For [BLOCK_CHANGE_DAMAGE]. Set damage to this.
/// For [BLOCK_SHOULD_PARTIAL_MITIGATE]. Percentage mitigation.
/// Used internally by run_parry proc, use on an on_active_parry() proc to override parrying efficiency.
/// Used internally by run_parry proc, use on an on_active_parry() proc to prevent counterattacks
/// Always set to 100 by run_block() if BLOCK_SUCCESS is in return value. Otherwise, defaults to mitigation percent if not set. Used by projectile/proc/on_hit().
/// Default if the above isn't set in the list.
/// Block priorities. Higher means it's checked sooner.
// THESE MUST NEVER BE 0! Block code uses ! instead of isnull for the speed boost.
//SKYRAT EDIT
//SKYRAT EDIT END
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\combat\block_parry.dm. ----------------------
// We can't determine things like NORTHEAST vs NORTH *and* EAST without making our own flags :(
/// If this is the value of active_block_starting it signals we want to interrupt the start
/// ""types"" of parry "items"
/// Parry phase we're in
// /datum/block_parry_data/var/parry_flags
/// Default handling for audio/visual feedback
/// Lock sprinting while parrying
/// Lock attacking while parrying
/// Parry effects.
/// Automatically melee attacks back normally, LMB equivalent action of an harm intent attack. List association should be defaulting to 1, being the attack damage multiplier for said counterattack
/// List association should be TRUE.
/// List association should be duration or null for just plain knockdown.
/// List association should be duration.
/// List association should be amount of time to daze attacker.
/// Set to TRUE in list association to ignore adjacency checks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\combat\stamina_combat.dm. ----------------------
// Stamina Buffer
// Standard amounts for stamina usage
// Multipliers
/// Base stamina cost for an item of a certain w_class without total_mass set.
// Flat amounts
/// Usage for eyestabbing with a screwdriver
/// Usage for shoving yourself off the ground instantly
//items total mass, used to calculate their attacks' stamina costs. If not defined, the cost will be (w_class * 1.25)
//stamina cost defines.
/// Damage penalty when fighting prone.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\flags.dm. ----------------------
/// Return this from `/datum/component/Initialize` or `datum/component/OnTransfer` to have the component be deleted if it's applied to an incorrect type.
/// `parent` must not be modified if this is to be returned.
/// This will be noted in the runtime logs
/// Returned in PostTransfer to prevent transfer, similar to `COMPONENT_INCOMPATIBLE`
/// Return value to cancel attaching
// /datum/element flags
/// Causes the detach proc to be called when the host object is being deleted
/**
  * Only elements created with the same arguments given after `id_arg_index` share an element instance
  * The arguments are the same when the text and number values are the same and all other values have the same ref
  */
// How multiple components of the exact same type are handled in the same datum
/// old component is deleted (default)
/// duplicates allowed
/// new component is deleted
/// old component is given the initialization args of the new
/// each component of the same type is consulted as to whether the duplicate should be allowed
//Redirection component init flags
//Arch
//Ouch my toes!
// Spellcasting
//// Identification ////
// /datum/component/identification/identification_flags
/// Delete on successful broad identification (so the main way we "uncover" how an object works, since this won't be on it to obfuscate it)
/// We've already been successfully deepscanned by a deconstructive analyzer
// /datum/component/identification/identification_effect_flags
/// Block user from getting actions if they don't know how to use this. Triggered on equip.
// /datum/component/identification/identification_method_flags
/// Can be identified in a deconstructive analyzer
// Return values for /datum/component/deitnfication/check_knowledge()
/// Has no knowledge, default
/// Has full knowledge
// Combat mode flags.
/// The user wants combat mode on
/// combat mode is active.
/// combat mode is not active
// Update flags for [/atom/proc/update_appearance]
/// Update the atom's name
/// Update the atom's desc
/// Update the atom's icon state
/// Update the atom's overlays
/// Update the atom's greyscaling
/// Update the atom's smoothing. (More accurately, queue it for an update)
/// Update the atom's icon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\helpers.dm. ----------------------
/// Used to trigger signals and call procs registered for that signal
/// The datum hosting the signal is automaticaly added as the first argument
/// Returns a bitfield gathered from all registered procs
/// Arguments given here are packaged in a list and given to _SendSignal
/// Signifies that this proc is used to handle signals.
/// Every proc you pass to RegisterSignal must have this.
/// Signifies that this proc is used to handle signals, but also sleeps.
/// Do not use this for new work.
/// A wrapper for _AddElement that allows us to pretend we're using normal named arguments
/// A wrapper for _RemoveElement that allows us to pretend we're using normal named arguments
/// A wrapper for _AddComponent that allows us to pretend we're using normal named arguments
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals.dm. ----------------------
// All signals. Format:
// When the signal is called: (signal arguments)
// All signals send the source datum of the signal as the first argument
// global signals
// These are signals which can be listened to by any component on any parent
// start global signals with "!", this used to be necessary but now it's just a formatting choice
/// from base of datum/controller/subsystem/mapping/proc/add_new_zlevel(): (list/args)
/// called after a successful var edit somewhere in the world: (list/args)
/// called after an explosion happened : (epicenter, devastation_range, heavy_impact_range, light_impact_range, took, orig_dev_range, orig_heavy_range, orig_light_range)
/// mob was created somewhere : (mob)
/// mob died somewhere : (mob , gibbed)
/// global living say plug - use sparingly: (mob/speaker , message)
/// called by datum/cinematic/play() : (datum/cinematic/new_cinematic)
/// job subsystem has spawned and equipped a new mob
/// job datum has been called to deal with the aftermath of a latejoin spawn
/// a weather event of some kind occured
/// called by auxgm add_gas: (gas_id)
// signals from globally accessible objects
/// from SSsun when the sun changes position : (primary_sun, suns)
///from SSsecurity_level when the security level changes : (new_level)
/// from SSactivity for things that add threat but aren't "global" (e.g. phylacteries)
//////////////////////////////////////////////////////////////////
// /datum signals
/// when a component is added to a datum: (/datum/component)
/// before a component is removed from a datum because of RemoveComponent: (/datum/component)
/// before a datum's Destroy() is called: (force), returning a nonzero value will cancel the qdel operation
/// just before a datum's Destroy() is called: (force), at this point none of the other components chose to interrupt qdel and Destroy will be called
/// generic topic handler (usr, href_list)
/// from datum ui_act (usr, action)
/// from datum tgui_fallback (payload)
/// fires on the target datum when an element is attached to it (/datum/element)
/// fires on the target datum when an element is attached to it  (/datum/element)
/// sent to the component itself when unregistered from a parent
/// sent to the component itself when registered to a parent
/// Trait signals
// /atom signals
//from base of atom/proc/Initialize(): sent any time a new atom is created
//from SSatoms InitAtom - Only if the  atom was not deleted or failed initialization
///from base of atom/get_examine_name(): (/mob, list/overrides)
///from base of [/atom/proc/update_appearance]: (updates)
///from base of [/atom/proc/update_name]: (updates)
///from base of [/atom/proc/update_desc]: (updates)
///from base of [/atom/update_icon]: ()
///from base of [atom/update_icon_state]: ()
///from base of [/atom/update_overlays]: (list/new_overlays)
///from base of [/atom/update_icon]: (signalOut, did_anything)
/// From base of atom/wave_ex_act(): (datum/wave_explosion/explosion, args)
///from base of atom/ex_act(): (severity, target)
///from base of atom/emp_act(): (severity)
///from base of atom/fire_act(): (exposed_temperature, exposed_volume)
///from base of atom/bullet_act(): (/obj/item/projectile, def_zone)
///from base of atom/blob_act(): (/obj/structure/blob)
///from base of atom/acid_act(): (acidpwr, acid_volume)
///from base of atom/emag_act(): (/mob/user)
///from base of atom/rad_act(intensity)
///from base of atom/narsie_act(): ()
///from base of atom/ratvar_act(): ()
///from base of atom/rcd_act(): (/mob, /obj/item/construction/rcd, passed_mode)
///from base of atom/singularity_pull(): (S, current_size)
///from obj/machinery/bsa/full/proc/fire(): ()
///from base of atom/setDir(): (old_dir, new_dir). Called before the direction changes.
///from base of atom/handle_atom_del(): (atom/deleted)
///from base of atom/has_gravity(): (turf/location, list/forced_gravities)
///from proc/get_rad_contents(): ()
///from base of datum/radiation_wave/radiate(): (strength)
///from base of datum/radiation_wave/check_obstructions(): (datum/radiation_wave, width)
///from internal loop in atom/movable/proc/CanReach(): (list/next)
/////////////////
/////////////////
//This signal return value bitflags can be found in __DEFINES/misc.dm
/// Called from orbit component: (atom/movable/orbiter, radius, clockwise, rotation_speed, rotation_segments, pre_rotation)
/// Called from orbit component: (atom/movable/orbiter, refreshing)
// /area signals
// /turf signals
///from base of turf/ChangeTurf(): (path, list/new_baseturfs, flags, list/transferring_comps)
///from base of atom/has_gravity(): (atom/asker, list/forced_gravities)
///from base of turf/multiz_turf_del(): (turf/source, direction)
///from base of turf/multiz_turf_new: (turf/source, direction)
// /atom/movable signals
//	#define HEARING_LANGUAGE 3
//	 #define HEARING_RADIO_FREQ 5
//	#define HEARING_SPANS 6
//	#define HEARING_SOURCE 8
// /mind signals
// /mob signals
///from /mob/living/handle_eye_contact(): (mob/living/other_mob)
//	#define COMPONENT_STOP_MIND_TRANSFER 1
//	#define SPEECH_SANITIZE 4
//	#define SPEECH_IGNORE_SPAM 6
//	#define SPEECH_FORCED 7
///from base of mob/AltClickOn(): (atom/A)
//Gun signals
///When a gun is switched to automatic fire mode
///When a gun is switched off of automatic fire mode
// Lighting:
///from base of [atom/proc/set_light]: (l_range, l_power, l_color, l_on)
///Called right before the atom changes the value of light_power to a different one, from base [atom/proc/set_light_power]: (new_power)
///Called right after the atom changes the value of light_power to a different one, from base of [/atom/proc/set_light_power]: (old_power)
///Called right before the atom changes the value of light_range to a different one, from base [atom/proc/set_light_range]: (new_range)
///Called right after the atom changes the value of light_range to a different one, from base of [/atom/proc/set_light_range]: (old_range)
///Called right before the atom changes the value of light_color to a different one, from base [atom/proc/set_light_color]: (new_color)
///Called right after the atom changes the value of light_color to a different one, from base of [/atom/proc/set_light_color]: (old_color)
///Called right before the atom changes the value of light_on to a different one, from base [atom/proc/set_light_on]: (new_value)
///Called right after the atom changes the value of light_on to a different one, from base of [/atom/proc/set_light_on]: (old_value)
///Called right before the atom changes the value of light_flags to a different one, from base [atom/proc/set_light_flags]: (new_flags)
///Called right after the atom changes the value of light_flags to a different one, from base of [/atom/proc/set_light_flags]: (old_flags)
// /client signals
///sent when a mob/login() finishes: (client)
//from base of client/MouseDown(): (/client, object, location, control, params)
//from base of client/MouseUp(): (/client, object, location, control, params)
//from base of client/MouseUp(): (/client, object, location, control, params)
// /mob/living signals
// This returns flags as defined for block in __DEFINES/combat.dm!
//ALL OF THESE DO NOT TAKE INTO ACCOUNT WHETHER AMOUNT IS 0 OR LOWER AND ARE SENT REGARDLESS!
// /mob/living/carbon physiology signals
///from base of /obj/item/bodypart/proc/attach_limb(): (new_limb, special) allows you to fail limb attachment
// /mob/living/silicon signals
// /mob/living/simple_animal/hostile signals
// /obj signals
// /machinery signals
///from base power_change() when power is lost
///from base power_change() when power is restored
///from /obj/machinery/obj_break(damage_flag): (damage_flag)
// /obj/machinery/power/supermatter_crystal signals
/// from /obj/machinery/power/supermatter_crystal/process_atmos(); when the SM delam reaches the point of sounding alarms
/// from /obj/machinery/power/supermatter_crystal/process_atmos(); when the SM sounds an audible alarm
// /obj/item signals
/// A mob has just unequipped an item.
// /obj/item signals for economy
// THE FOLLOWING TWO BLOCKS SHOULD RETURN BLOCK FLAGS AS DEFINED IN __DEFINES/combat.dm!
// Item mouse siganls
///Called when an item is being offered, from [/obj/item/proc/on_offered(mob/living/carbon/offerer)]
///Called when an someone tries accepting an offered item, from [/obj/item/proc/on_offer_taken(mob/living/carbon/offer, mob/living/carbon/taker)]
///from [/obj/structure/closet/supplypod/proc/endlaunch]:
// /obj/item/grenade signals
// /obj/item/clothing signals
// /obj/item/implant signals
// /obj/item/pda signals
// /obj/item/radio signals
// /obj/item/pen signals
// /obj/item/projectile signals (sent to the firer)
// /obj/vehicle/sealed/mecha signals
// /sent from mecha action buttons to the mecha they're linked to
///sent from clicking while you have no equipment selected. Sent before cooldown and adjacency checks, so you can use this for infinite range things if you want.
///sent from clicking while you have equipment selected.
// /mob/living/carbon/human signals
// /datum/species signals
// /datum/mutation signals
///from base of mob/living/death(): (gibbed)
// Sent before any of the other death code has run, mob is still alive.
/*******Component Specific Signals*******/
//Janitor
//Food
//Gibs
//Mood
///Mask of Madness
//NTnet
//Combat mode
//Nanites
/// Checks if a nanite component is able to be controlled by console
/// Checks if a nanite component is able to be interfaced with by a host with innate nanite control
/// Checks if a nanite component is able to be overwritten by viral replica
// Internal signals that programs register to and respond with to not require for loops
// /datum/component/storage signals
// /datum/component/two_handed signals
// /datum/component/squeak signals
// /datum/action signals
//Xenobio hotkeys
// /datum/element/ventcrawling signals
// twitch plays
/// Returns direction: (wipe_votes)
// /datum/component/identification signals
///from base of [/datum/component/multiple_lives/proc/respawn]: (mob/respawned_mob, gibbed, lives_left)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_hud.dm. ----------------------
/// Sent from /atom/movable/screen/lobby/button/collapse/proc/collapse_buttons() : ()
/// Sent from /atom/movable/screen/lobby/button/collapse/proc/expand_buttons() : ()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_medical.dm. ----------------------
/// From /datum/surgery/New(): (datum/surgery/surgery, surgery_location (body zone), obj/item/bodypart/targeted_limb)
/// From /datum/surgery_step/success(): (datum/surgery_step/step, mob/living/target, target_zone, obj/item/tool, datum/surgery/surgery, default_display_results)
/// From /obj/item/shockpaddles/proc/do_success(): (obj/item/shockpaddles/source)
/// From /datum/surgery/can_start(): (mob/source, datum/surgery/surgery, mob/living/patient)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_mod.dm. ----------------------
//MODsuit signals
/// Called when a module is selected to be the active one from on_select(obj/item/mod/module/module)
/// Called when a MOD deploys one or more of its parts.
/// Called when a MOD retracts one or more of its parts.
/// Called when a MOD is finished toggling itself.
/// Called when a MOD activation is called from toggle_activate(mob/user)
/// Called when a MOD finishes having a module removed from it.
/// Called when a MOD finishes having a module added to it.
/// Called when a MOD is having modules removed from crowbar_act(mob/user, obj/crowbar)
/// Called when a module attempts to activate, however it does. At the end of checks so you can add some yourself, or work on trigger behavior (mob/user)
/// Called when a module activates, after all checks have passed and cooldown started.
/// Called when a module deactivates, after all checks have passed.
/// Called when a module is used, after all checks have passed and cooldown started.
/// Called when the MODsuit wearer is set.
/// Called when the MODsuit wearer is unset.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_movable.dm. ----------------------
///from base of atom/experience_pressure_difference(): (pressure_difference, direction, pressure_resistance_prob_delta)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_painting.dm. ----------------------
// signals for painting canvases, tools and the /datum/component/palette component
///from base of /item/proc/set_painting_tool_color(): (chosen_color)
/// from base of /item/canvas/ui_data(): (data)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_reagent.dm. ----------------------
///Sent by /datum/reagents/proc/reaction, used for /obj/item/mod/module/springlock
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_screentips.dm. ----------------------
/// A "Type-A" contextual screentip interaction.
/// These are used for items that are defined by their behavior. They define their contextual text within *themselves*,
/// not in their targets.
/// Examples include syringes (LMB to inject, RMB to draw) and health analyzers (LMB to scan health/wounds, RMB for chems)
/// Items can override `add_item_context()`, and call `register_item_context()` in order to easily connect to this.
/// Called on /obj/item with a mutable screentip context list, the hovered target, and the mob hovering.
/// A screentip context list is a list that has context keys (SCREENTIP_CONTEXT_*, from __DEFINES/screentips.dm)
/// that map to the action as text.
/// If you mutate the list in this signal, you must return CONTEXTUAL_SCREENTIP_SET.
/// A "Type-B" contextual screentip interaction.
/// These are atoms that are defined by what happens *to* them. These should define contextual text within themselves, and
/// not in their operating tools.
/// Examples include construction objects (LMB with glass to put in screen for computers).
/// Called on /atom with a mutable screentip context list, the item being used, and the mob hovering.
/// A screentip context list is a list that has context keys (SCREENTIP_CONTEXT_*, from __DEFINES/screentips.dm)
/// that map to the action as text.
/// If you mutate the list in this signal, you must return CONTEXTUAL_SCREENTIP_SET.
/// Tells the contextual screentips system that the list context was mutated.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_subsystem.dm. ----------------------
// Subsystem signals. Format:
// When the signal is called: (signal arguments)
// All signals send the source datum of the signal as the first argument
///Subsystem signals
///From base of datum/controller/subsystem/Initialize: (start_timeofday)
///Called when the ticker enters the pre-game phase
///Called when the ticker sets up the game for start
///Called when the ticker fails to set up the game for start
/// Called when the round has started, but before GAME_STATE_PLAYING
// Point of interest signals
/// Sent from base of /datum/controller/subsystem/points_of_interest/proc/on_poi_element_added : (atom/new_poi)
/// Sent from base of /datum/controller/subsystem/points_of_interest/proc/on_poi_element_removed : (atom/old_poi)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_atom\signals_atom_movement.dm. ----------------------
/// Called from /mob/living/PushAM -- Called when this mob is about to push a movable, but before it moves
/// (aotm/movable/being_pushed)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\dcs\signals\signals_mob\signals_mob_living.dm. ----------------------
///From base of mob/living/MobBump() (mob/living)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mapping\maploader.dm. ----------------------
//map template annihilate_bounds
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\material\worth.dm. ----------------------
/// cm3 of material matter per sheet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mobs\innate_abilities.dm. ----------------------
// helpers
// sources
/// Species
/// Changeling
// abilities
/// Full customization and transformation of mutantparts/hair/sprite accessories/etc - excludes name by default
/// Slime blobform
/// limb regrowth
/// ability properties
// customization/body change
/// is this silent?
// blobform
/// Blobform color
// limb regrwoth
/// limb regrowth usage type
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\mobs\slowdowns.dm. ----------------------
/// How much someone is slowed from pulling a prone human
/// How much someone is slowed from fireman carrying a human
/// How much someone is slowed by piggybacking a human
/// slowdown when in softcrit. Note that crawling slowdown will also apply at the same time!
/// slowdown when crawling
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\rendering\atom_hud.dm. ----------------------
// for secHUDs and medHUDs and variants. The number is the location of the image on the list hud_list
// note: if you add more HUDs, even for non-human atoms, make sure to use unique numbers for the defines!
// /datum/atom_hud expects these to be unique
// these need to be strings in order to make them associative lists
//for antag huds. these are used at the /mob level
//by default everything in the hud_list of an atom is an image
//a value in hud_list with one of these will change that behavior
//data HUD (medhud, sechud) defines
//Don't forget to update human/New() if you change these!
//antag HUD defines
// Which players consent via their game settings to be a target for antagonists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\rendering\parallax.dm. ----------------------
// WARNING - client.prefs uses this, if you change these make sure to update the code in preferences!
// keep this false until we can fix it being a seizure hazard/ugly as sin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\research\anomalies.dm. ----------------------
// Anomaly core types
/// Bluespace cores
/// Gravitational cores
/// Flux
/// Vortex
/// Pyro
// Max amounts of cores you can make
/// chance supermatter anomalies drop real cores
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\research\stock_parts.dm. ----------------------
// the clamps are just sanity checks.
/// Efficiency scaling for stock part level to material usage. All code concerning lathing and production from raw material sheet should be using this.
/// Efficiency scaling for stock part level to ore factor. All code concerning lathing and production from raw ores to raw material sheets should be using this.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\skills\defines.dm. ----------------------
/// true/false
/// numerical
/// Enum
/// Levels
// Standard values for job starting skills
// Standard values for job starting skill affinities
// Standard values for skill gain (this is multiplied by affinity)
//multiplier of the difference of max_value and min_value. Mostly for balance purposes between numerical and level-based skills.
//An extra point for each few seconds of delay when using a tool. Before the multiplier.
///Items skill_traits and other defines
///competency_threshold  defines
/// Level/Experience skills defines.
//level up methods defines
//job skill level defines
//other skill level defines, not an exhaustive catalogue, only contains be most relevant ones.
/// Skill modifier defines and flags.
///makes the skill modifier a multiplier, not an addendum.
///Sets the skill to the defined value if lower than that. Highly reccomended you don't use it with MODIFIER_SKILL_MULT.
///Does the opposite of the above. combining both effectively results in the skill being locked to the specified value.
///Makes it untransferred by mind.transfer_to()
///Adds the difference of the current value and the value stored at the time the modifier was added to the result.
///Will this skill use competency thresholds instead of preset values
///Ascending priority defines.
// UI Defines
///Categories of skills, these will be displayed alphabetically.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\skills\helpers.dm. ----------------------
//How experience levels are calculated.
//More experience value getter macros
///Doesn't automatically round the value.
/// Simple generic identifier macro.
/**
  * A simple universal comsig for body bound skill modifiers.
  * Technically they are still bound to the mind, but other signal procs will take care of adding and removing the modifier
  * from/to new/old minds.
  */
/// Same as above but to remove the skill modifier.
///Macro used when adding generic singleton skill modifiers.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\storage\volumetrics.dm. ----------------------
// PLEASE KEEP ALL VOLUME DEFINES IN THIS FILE, it's going to be hell to keep track of them later.
/// Macro for automatically getting the volume of an item from its w_class.
/// Macro for automatically getting the volume of a storage item from its max_w_class and max_combined_w_class.
// Let's keep all of this in one place. given what we put above anyways..
// volume amount for items
/// volume for a data disk
/// volume for a shotgun stripper clip holding 4 shells
// #define SAMPLE_VOLUME_AMOUNT 2
// max_weight_class for storages
// max_volume for storages
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\storage\_storage.dm. ----------------------
// storage_flags variable on /datum/component/storage
// Storage limits. These can be combined (and usually are combined).
/// Check max_items and contents.len when trying to insert
/// Check max_combined_w_class.
/// Use the new volume system. Will automatically force rendering to use the new volume/baystation scaling UI so this is kind of incompatible with stuff like stack storage etc etc.
/// Use max_w_class
// UI defines
/// Size of volumetric box icon
/// Size of EACH left/right border icon for volumetric boxes
/// Minimum pixels an item must have in volumetric scaled storage UI
/// Maximum number of objects that will be allowed to be displayed using the volumetric display system. Arbitrary number to prevent server lockups.
/// How much padding to give between items
/// How much padding to give to edges
//ITEM INVENTORY WEIGHT, FOR w_class
/// Usually items smaller then a human hand, ex: Playing Cards, Lighter, Scalpel, Coins/Money
/// Pockets can hold small and tiny items, ex: Flashlight, Multitool, Grenades, GPS Device
/// Standard backpacks can carry tiny, small & normal items, ex: Fire extinguisher, Stunbaton, Gas Mask, Metal Sheets
/// Items that can be weilded or equipped but not stored in a normal bag, ex: Defibrillator, Backpack, Space Suits
/// Usually represents objects that require two hands to operate, ex: Shotgun, Two Handed Melee Weapons - Can not fit in Boh
/// Essentially means it cannot be picked up or placed in an inventory, ex: Mech Parts, Safe - Can not fit in Boh
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\do_after.dm. ----------------------
/// Requires absolute stillness from the user
/// Requires absolute stillness from the target
/// Requires that the user is on a turf.
/// Requires relative stillness to our target via dx and dy coordinate difference but only if both are spacedrifting. Specify DO_AFTER_ALLOW_NONSPACEDRIFT_RELATIVITY to say otherwise.
/// Breaks if active hand item changes. Requires a tool be specified, otherwise defaults to active item
/// Breaks if the user has no free hands. If a tool is specified, allows that as well.
/// Do not display progressbar.
/// Do not check do_after_coefficient()
/// For relative stillness, allow non spacedrift relative movement
/// Ignores checks.
/// Uses all other checks
/// Breaks
/// Stage - initiating a do_after
/// Stage - main loop of a do_after
/// Stage - Last check of a do_after
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\item_flags.dm. ----------------------
// Flags for the item_flags var on /obj/item
///is this item equipped into an inventory slot or hand of a mob? used for tooltips
///used for tooltips
///Used by security bots to determine if this item is safe for public use.
///Stops you from putting things like an RCD or other items into an ORM or protolathe for materials.
///When dropped, it calls qdel on itself
///when an item has this it produces no "X has been hit by Y with Z" message in the default attackby()
///for all things that are technically items but used for various different stuff
///When players should not be able to change the slowdown of the item (Speed potions, ect)
///Tool commonly used for surgery: won't attack targets in an active surgical operation on help intent (in case of mistakes)
///Can be worn on certain slots (currently belt and id) that would otherwise require an uniform.
/// This item can be used to parry. Only a basic check used to determine if we should proceed with parry chain at all.
/// This item can be used in the directional blocking system. Only a basic check used to determine if we should proceed with directional block handling at all.
// Flags for the clothing_flags var on /obj/item/clothing
// Flags for the organ_flags var on /obj/item/organ
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\obj_flags.dm. ----------------------
// Flags for the obj_flags var on /obj
/// Has contextual screentips when HOVERING OVER OTHER objects
/// Integrity defines for clothing (not flags but close enough)
// If you add new ones, be sure to add them to /obj/Initialize as well for complete mapping support
/// Flags for the pod_flags var on /obj/structure/closet/supplypod
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\return_values.dm. ----------------------
/////////// ATTACKCHAIN_FLAGS ////////////
// melee_attack_chain(), attackby(), pre_attack(), afterattack(), and tool_act(), attack() and **anything that is called by ClickOn()** return values.
// These are all passed down through the attack chain and are binary OR'd into each other!
/// Stop the attack chain if still in melee_attack_chain()
/// This attack should discard last_action instead of flushing (storing) it). You should probably know what you're doing if you use this considering this is how clickdelay is enforced.
/// There are a number of "safety nets" intended to default-handle clickdelay. Return this flag to bypass ALL of them. Be sure
/// you know EXACTLY what you are doing!
/// Only used with UnarmedAttack(). Interrupts unarmed attack from progressing.
/// Attack should not set next action even if the atom wants it to be an action
/// Attack should not at all check last_action/attack_hand_speed even if the atom wants to
/// This attack is from a parry counterattack
// obj/item/dropped()
/// dropped() relocated this item, return FALSE for doUnEquip.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\shields.dm. ----------------------
/// Transparent, let beams pass
/// Flammable, takes more damage from fire
/// Fragile, takes more damage from brute
/// Strong against kinetic, weak against energy
/// Strong against energy, weak against kinetic
/// Disabler and other stamina based energy weapons boost the damage done to the sheld
/// Doesn't block ranged attacks whatsoever
/// Doesn't block melee attacks whatsoever
/// Can shield bash
/// Shield bash knockdown on wall hit
/// Shield bash always knockdown
/// Shield bash disarm on wall hit
/// Shield bash always disarm
/// You can shieldbash target someone on the ground for ground slam
/// Shield bashing someone on the ground will disarm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__DEFINES\_flags\_flags.dm. ----------------------
/*
	These defines are specific to the atom/flags_1 bitmask
*/
//for convenience
// for /datum/var/datum_flags
//FLAGS BITMASK
///This flag is what recursive_hear_check() uses to determine wether to add an item to the hearer list or not.
///Projectiles will use default chance-based ricochet handling on things with this.
///Conducts electricity (metal etc.).
///For machines and structures that should not break into parts, eg, holodeck stuff.
///Atom queued to SSoverlay.
///Item has priority to check when entering or leaving.
///Whether or not this atom shows screentips when hovered over
///Prevent clicking things below it on the same turf eg. doors/ fulltile windows.
///Prevents mobs from getting chainshocked by teslas and the supermatter.
///Whether /atom/Initialize() has already run for the object.
///was this spawned by an admin? used for stat tracking stuff.
/// should not get harmed if this gets caught by an explosion?
/// Early returns mob.face_atom()
//turf-only flags
/// If a turf can be made dirty at roundstart. This is also used in areas.
/// Blocks lava rivers being generated on the turf
/// Blocks ruins spawning on the turf
/// Should this tile be cleaned up and reinserted into an excited group?
/// Whether or not this atom has contextual screentips when hovered OVER
////////////////Area flags\\\\\\\\\\\\\\
/// If it's a valid territory for cult summoning or the CRAB-17 phone to spawn
/// If blobs can spawn there and if it counts towards their score.
/// If mining tunnel generation is allowed in this area
/// If flora are allowed to spawn in this area randomly through tunnel generation
/// If mobs can be spawned by natural random generation
/// If megafauna can be spawned by natural random generation
/// Are you forbidden from teleporting to the area? (centcom, mobs, wizard, hand teleporter)
/// Hides area from player Teleport function.
/// If false, loading multiple maps with this area type will create multiple instances.
/// If people are allowed to suicide in it. Mostly for OOC stuff like minigames
/// Can the Xenobio management console transverse this area by default?
/// If Abductors are unable to teleport in with their observation console
/// If an area should be hidden from power consoles, power/atmosphere alerts, etc.
/// If blood cultists can draw runes or build structures on this AREA.
/*
	These defines are used specifically with the atom/pass_flags bitmask
	the atom/checkpass() proc uses them (tables will call movable atom checkpass(PASSTABLE) for example)
*/
//flags for pass_flags
/// Let thrown things past us. **ONLY MEANINGFUL ON pass_flags_self!**
//Movement Types
///When moving, will Bump()/Cross()/Uncross() everything, but won't stop or Bump() anything.
///Applied if you're crawling around on the ground/resting.
//Fire and Acid stuff, for resistance_flags
//tesla_zap
//EMP protection
// radiation
//Mob mobility var flags
/// any flag
/// can move
/// can, and is, standing up.
/// can pickup items
/// can use items and interact with world objects like opening closets/etc
/// can use interfaces like consoles
/// can use storage item
/// can pull things
/// can hold non-nodropped items voluntarily
/// Can resist out of buckling, grabs, cuffs, etc, in the usual order (buckle --> cuffs --> grab)
/// If the thing can reflect light (lasers/energy)
/// If the thing can reflect matter (bullets/bomb shrapnel)
//setter for KEEP_TOGETHER to allow for multiple sources to set and unset it
//dir macros
///Returns true if the dir is diagonal, false otherwise
///True if the dir is north or south, false therwise
///True if the dir is east/west, false otherwise
///Flips the dir for north/south directions
///Flips the dir for east/west directions
///Turns the dir by 180 degrees
/// 33554431 (2^24 - 1) is the maximum value our bitflags can reach.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\angles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\areas.dm. ----------------------
//Repopulates sortedAreas list
//Takes: Area type as a text string from a variable.
//Returns: Instance for the area in the world.
//Takes: Area type as text string or as typepath OR an instance of the area.
//Returns: A list of all areas of that type in the world.
//Takes: Area type as text string or as typepath OR an instance of the area.
//Returns: A list of all turfs in areas of that type of that type in the world.
// Gets an atmos isolated contained space
// Returns an associative list of turf|dirs pairs
// The dirs are connected turfs in the same space
// break_if_found is a typecache of turf/area types to return false if found
// Please keep this proc type agnostic. If you need to restrict it do it elsewhere or add an arg.
/**
  * Returns the base area the target is located in if there is one.
  * Alternatively, returns the area as is.
  */
/**
  * Returns either null, or a list containing every sub area associated with our base area.
  * If include_base is TRUE, the base area will also be added to the return list.
  */
/**
  * Proc used for purposes similar to get_areas_turfs(), but aimed to include associated areas.
  * Only accepts area instances and paths for the first arg, no text strings.
  * Returns a list of all turfs found in the sub areas (including the base's if include_base is TRUE)
  * and located in a z level matching target_z, or anywhere if target_z is 0
  */
/**
  * Simple proc that returns a sum of all contents from every sub area,
  * Think of the above but for all contents, not just turfs, and without target z.
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\chat.dm. ----------------------
/*

Here's how to use the chat system with configs

send2adminchat is a simple function that broadcasts to admin channels

send2chat is a bit verbose but can be very specific

The second parameter is a string, this string should be read from a config.
What this does is dictacte which TGS4 channels can be sent to.

For example if you have the following channels in tgs4 set up
- Channel 1, Tag: asdf
- Channel 2, Tag: bombay,asdf
- Channel 3, Tag: Hello my name is asdf
- Channel 4, No Tag
- Channel 5, Tag: butts

and you make the call:

send2chat("I sniff butts", CONFIG_GET(string/where_to_send_sniff_butts))

and the config option is set like:

WHERE_TO_SEND_SNIFF_BUTTS asdf

It will be sent to channels 1 and 2

Alternatively if you set the config option to just:

WHERE_TO_SEND_SNIFF_BUTTS

it will be sent to all connected chats.

In TGS3 it will always be sent to all connected designated game chats.
*/
/**
 * Sends a message to TGS chat channels.
 *
 * message - The message to send.
 * channel_tag - Required. If "", the message with be sent to all connected (Game-type for TGS3) channels. Otherwise, it will be sent to TGS4 channels with that tag (Delimited by ','s).
 */
/**
 * Sends a message to TGS admin chat channels.
 *
 * category - The category of the mssage.
 * message - The message to send.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\clients.dm. ----------------------
///Returns whether or not a player is a guest using their ckey as an input
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\cmp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\config.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\custom_holoforms.dm. ----------------------
// Generates a holoform appearance
// Equipment list is slot = path.
//Prompts this client for custom holoform parameters.
//Errors go to user.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\dates.dm. ----------------------
//Curse you calenders...
//Y, eg: 2017, 2018, 2019, in num form (not string)
//etc. Between 1583 and 4099
//Adapted from a free algorithm written in BASIC (https://www.assa.org.au/edm#Computer)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\dna.dm. ----------------------
//////////////////////////////////////////////////////////
//A bunch of helpers to make genetics less of a headache//
//////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\donator_groupings.dm. ----------------------
/*
Current specifications:

Donator groups in __DEFINES/donator_groupings.dm, config entries in controllers/configuration/entries/donator.dm

3 groups, Tier 1/2/3
Each tier includes the one before it (ascending)
For fast lookups, this is generated using regenerate_donator_grouping_list()

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\do_after.dm. ----------------------
/**
 * Higher overhead "advanced" version of do_after.
 * @params
 * - atom/user is the atom doing the action or the "physical" user
 * - delay is time in deciseconds
 * - atom/target is the atom the action is being done to, defaults to user
 * - do_after_flags see __DEFINES/flags/do_after.dm for details.
 * - datum/callback/extra_checks - Every time this ticks, extra_checks() is invoked with (user, delay, target, time_left, do_after_flags, required_mobility_flags, required_combat_flags, mob_redirect, stage, initially_held_item, tool, passed_in).
 * 	Stage can be DO_AFTER_STARTING, DO_AFTER_PROGRESSING, DO_AFTER_FINISHING
 * 	If it returns DO_AFTER_STOP, this breaks.
 * 	If it returns nothing, all other checks are done.
 * 	If it returns DO_AFTER_PROCEED, all other checks are ignored.
 *  passed_in is a list[PROGRESS_MULTIPLIER], for modification.
 * - required_mobility_flags is checked with CHECK_ALL_MOBILITY. Will immediately fail if the user isn't a mob.
 * - requried_combat_flags is checked with CHECK_MULTIPLE_BITFIELDS. Will immediately fail if the user isn't a mob.
 * - mob/living/mob_redirect - advanced option: If this is specified, movement and mobility/combat flag checks will use this instead of user. Progressbars will also go to this.
 * - obj/item/tool - The tool we're using. See do_after flags for details.
 */
//some additional checks as a callback for for do_afters that want to break on losing health or on the mob taking action
//pass a list in the format list("health" = mob's health var) to check health during this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\files.dm. ----------------------
//Sends resource files to client cache
/*	This proc is a failsafe to prevent spamming of file requests.
	It is just a timer that only permits a download every [FTPDELAY] ticks.
	This can be changed by modifying FTPDELAY's value above.

	PLEASE USE RESPONSIBLY, Some log files can reach sizes of 4MB!	*/
/// Returns the md5 of a file at a given path.
/// Save file as an external file then md5 it.
/// Used because md5ing files stored in the rsc sometimes gives incorrect md5 results.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\filters.dm. ----------------------
//This is stored as a nested list instead of datums or whatever because it json encodes nicely for usage in tgui
//Helpers to generate lists for filter helpers
//This is the only practical way of writing these that actually produces sane lists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\game.dm. ----------------------
//supposedly the fastest way to do this according to https://gist.github.com/Giacom/be635398926bb463b42a
/// Returns either the error landmark or the location of the room. Needless to say, if this is used, it means things have gone awry.
/**
 * Get a bounding box of a list of atoms.
 *
 * Arguments:
 * - atoms - List of atoms. Can accept output of view() and range() procs.
 *
 * Returns: list(x1, y1, x2, y2)
 */
// Like view but bypasses luminosity check
//We used to use linear regression to approximate the answer, but Mloc realized this was actually faster.
//And lo and behold, it is, and it's more accurate to boot.
/** recursive_organ_check
  * inputs: O (object to start with)
  * outputs:
  * description: A pseudo-recursive loop based off of the recursive mob check, this check looks for any organs held
  *				 within 'O', toggling their frozen flag. This check excludes items held within other safe organ
  *				 storage units, so that only the lowest level of container dictates whether we do or don't decompose
  */
// Better recursive loop, technically sort of not actually recursive cause that shit is stupid, enjoy.
//No need for a recursive limit either
//viewers() but with a signal, for blacklisting.
/// Removes an image from a client's `.images`. Useful as a callback.
//Recursively checks if an item is inside a given type, even through layers of storage. Returns the atom if it finds it.
///Send a message in common radio when a player arrives
// Find a obstruction free turf that's within the range of the center. Can also condition on if it is of a certain area type.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\global_lists.dm. ----------------------
//////////////////////////
/////Initial Building/////
//////////////////////////
//CIT CHANGES START HERE, ADDS SNOWFLAKE BODYPARTS AND MORE
//END OF CIT CHANGES
//creates every subtype of prototype (excluding prototype) and adds it to list L.
//if no list/L is provided, one is created.
//returns a list of paths to every subtype of prototype (excluding prototype)
//if no list/L is provided, one is created.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\heap.dm. ----------------------
//////////////////////
//datum/heap object
//////////////////////
//insert and place at its position a new node in the heap
//removes and returns the first element of the heap
//(i.e the max or the min dependant on the comparison function)
//Get a node up to its right position in the heap
//Get a node down to its right position in the heap
//Returns the greater (relative to the comparison proc) of a node children
//or 0 if there's no child
//Replaces a given node so it verify the heap condition
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\icons.dm. ----------------------
/*
IconProcs README

A BYOND library for manipulating icons and colors

by Lummox JR

version 1.0

The IconProcs library was made to make a lot of common icon operations much easier. BYOND's icon manipulation
routines are very capable but some of the advanced capabilities like using alpha transparency can be unintuitive to beginners.

CHANGING ICONS

Several new procs have been added to the /icon datum to simplify working with icons. To use them,
remember you first need to setup an /icon var like so:

GLOBAL_DATUM_INIT(my_icon, /icon, new('iconfile.dmi'))

icon/ChangeOpacity(amount = 1)
    A very common operation in DM is to try to make an icon more or less transparent. Making an icon more
    transparent is usually much easier than making it less so, however. This proc basically is a frontend
    for MapColors() which can change opacity any way you like, in much the same way that SetIntensity()
    can make an icon lighter or darker. If amount is 0.5, the opacity of the icon will be cut in half.
    If amount is 2, opacity is doubled and anything more than half-opaque will become fully opaque.
icon/GrayScale()
    Converts the icon to grayscale instead of a fully colored icon. Alpha values are left intact.
icon/ColorTone(tone)
    Similar to GrayScale(), this proc converts the icon to a range of black -> tone -> white, where tone is an
    RGB color (its alpha is ignored). This can be used to create a sepia tone or similar effect.
    See also the global ColorTone() proc.
icon/MinColors(icon)
    The icon is blended with a second icon where the minimum of each RGB pixel is the result.
    Transparency may increase, as if the icons were blended with ICON_ADD. You may supply a color in place of an icon.
icon/MaxColors(icon)
    The icon is blended with a second icon where the maximum of each RGB pixel is the result.
    Opacity may increase, as if the icons were blended with ICON_OR. You may supply a color in place of an icon.
icon/Opaque(background = "#000000")
    All alpha values are set to 255 throughout the icon. Transparent pixels become black, or whatever background color you specify.
icon/BecomeAlphaMask()
    You can convert a simple grayscale icon into an alpha mask to use with other icons very easily with this proc.
    The black parts become transparent, the white parts stay white, and anything in between becomes a translucent shade of white.
icon/AddAlphaMask(mask)
    The alpha values of the mask icon will be blended with the current icon. Anywhere the mask is opaque,
    the current icon is untouched. Anywhere the mask is transparent, the current icon becomes transparent.
    Where the mask is translucent, the current icon becomes more transparent.
icon/UseAlphaMask(mask, mode)
    Sometimes you may want to take the alpha values from one icon and use them on a different icon.
    This proc will do that. Just supply the icon whose alpha mask you want to use, and src will change
    so it has the same colors as before but uses the mask for opacity.

COLOR MANAGEMENT AND HSV

RGB isn't the only way to represent color. Sometimes it's more useful to work with a model called HSV, which stands for hue, saturation, and value.

    * The hue of a color describes where it is along the color wheel. It goes from red to yellow to green to
    cyan to blue to magenta and back to red.
    * The saturation of a color is how much color is in it. A color with low saturation will be more gray,
    and with no saturation at all it is a shade of gray.
    * The value of a color determines how bright it is. A high-value color is vivid, moderate value is dark,
    and no value at all is black.

Just as BYOND uses "#rrggbb" to represent RGB values, a similar format is used for HSV: "#hhhssvv". The hue is three
hex digits because it ranges from 0 to 0x5FF.

    * 0 to 0xFF - red to yellow
    * 0x100 to 0x1FF - yellow to green
    * 0x200 to 0x2FF - green to cyan
    * 0x300 to 0x3FF - cyan to blue
    * 0x400 to 0x4FF - blue to magenta
    * 0x500 to 0x5FF - magenta to red

Knowing this, you can figure out that red is "#000ffff" in HSV format, which is hue 0 (red), saturation 255 (as colorful as possible),
value 255 (as bright as possible). Green is "#200ffff" and blue is "#400ffff".

More than one HSV color can match the same RGB color.

Here are some procs you can use for color management:

ReadRGB(rgb)
    Takes an RGB string like "#ffaa55" and converts it to a list such as list(255,170,85). If an RGBA format is used
    that includes alpha, the list will have a fourth item for the alpha value.
hsv(hue, sat, val, apha)
    Counterpart to rgb(), this takes the values you input and converts them to a string in "#hhhssvv" or "#hhhssvvaa"
    format. Alpha is not included in the result if null.
ReadHSV(rgb)
    Takes an HSV string like "#100FF80" and converts it to a list such as list(256,255,128). If an HSVA format is used that
    includes alpha, the list will have a fourth item for the alpha value.
RGBtoHSV(rgb)
    Takes an RGB or RGBA string like "#ffaa55" and converts it into an HSV or HSVA color such as "#080aaff".
HSVtoRGB(hsv)
    Takes an HSV or HSVA string like "#080aaff" and converts it into an RGB or RGBA color such as "#ff55aa".
BlendRGB(rgb1, rgb2, amount)
    Blends between two RGB or RGBA colors using regular RGB blending. If amount is 0, the first color is the result;
    if 1, the second color is the result. 0.5 produces an average of the two. Values outside the 0 to 1 range are allowed as well.
    The returned value is an RGB or RGBA color.
BlendHSV(hsv1, hsv2, amount)
    Blends between two HSV or HSVA colors using HSV blending, which tends to produce nicer results than regular RGB
    blending because the brightness of the color is left intact. If amount is 0, the first color is the result; if 1,
    the second color is the result. 0.5 produces an average of the two. Values outside the 0 to 1 range are allowed as well.
    The returned value is an HSV or HSVA color.
BlendRGBasHSV(rgb1, rgb2, amount)
    Like BlendHSV(), but the colors used and the return value are RGB or RGBA colors. The blending is done in HSV form.
HueToAngle(hue)
    Converts a hue to an angle range of 0 to 360. Angle 0 is red, 120 is green, and 240 is blue.
AngleToHue(hue)
    Converts an angle to a hue in the valid range.
RotateHue(hsv, angle)
    Takes an HSV or HSVA value and rotates the hue forward through red, green, and blue by an angle from 0 to 360.
    (Rotating red by 60° produces yellow.) The result is another HSV or HSVA color with the same saturation and value
    as the original, but a different hue.
GrayScale(rgb)
    Takes an RGB or RGBA color and converts it to grayscale. Returns an RGB or RGBA string.
ColorTone(rgb, tone)
    Similar to GrayScale(), this proc converts an RGB or RGBA color to a range of black -> tone -> white instead of
    using strict shades of gray. The tone value is an RGB color; any alpha value is ignored.
*/
/*
Get Flat Icon DEMO by DarkCampainger

This is a test for the get flat icon proc, modified approprietly for icons and their states.
Probably not a good idea to run this unless you want to see how the proc works in detail.
mob
	icon = 'old_or_unused.dmi'
	icon_state = "green"

	Login()
		// Testing image underlays
		underlays += image(icon='old_or_unused.dmi',icon_state="red")
		underlays += image(icon='old_or_unused.dmi',icon_state="red", pixel_x = 32)
		underlays += image(icon='old_or_unused.dmi',icon_state="red", pixel_x = -32)

		// Testing image overlays
		add_overlay(image(icon='old_or_unused.dmi',icon_state="green", pixel_x = 32, pixel_y = -32))
		add_overlay(image(icon='old_or_unused.dmi',icon_state="green", pixel_x = 32, pixel_y = 32))
		add_overlay(image(icon='old_or_unused.dmi',icon_state="green", pixel_x = -32, pixel_y = -32))

		// Testing icon file overlays (defaults to mob's state)
		add_overlay('_flat_demoIcons2.dmi')

		// Testing icon_state overlays (defaults to mob's icon)
		add_overlay("white")

		// Testing dynamic icon overlays
		var/icon/I = icon('old_or_unused.dmi', icon_state="aqua")
		I.Shift(NORTH,16,1)
		add_overlay(I)

		// Testing dynamic image overlays
		I=image(icon=I,pixel_x = -32, pixel_y = 32)
		add_overlay(I)

		// Testing object types (and layers)
		add_overlay(/obj/effect/overlayTest)

		loc = locate (10,10,1)
	verb
		Browse_Icon()
			set name = "1. Browse Icon"
			// Give it a name for the cache
			var/iconName = "[ckey(src.name)]_flattened.dmi"
			// Send the icon to src's local cache
			src<<browse_rsc(getFlatIcon(src), iconName)
			// Display the icon in their browser
			src<<browse("<body bgcolor='#000000'><p><img src='[iconName]'></p></body>")

		Output_Icon()
			set name = "2. Output Icon"
			to_chat(src, "Icon is: [icon2base64html(getFlatIcon(src))]")

		Label_Icon()
			set name = "3. Label Icon"
			// Give it a name for the cache
			var/iconName = "[ckey(src.name)]_flattened.dmi"
			// Copy the file to the rsc manually
			var/icon/I = fcopy_rsc(getFlatIcon(src))
			// Send the icon to src's local cache
			src<<browse_rsc(I, iconName)
			// Update the label to show it
			winset(src,"imageLabel","image='[REF(I)]'");

		Add_Overlay()
			set name = "4. Add Overlay"
			add_overlay(image(icon='old_or_unused.dmi',icon_state="yellow",pixel_x = rand(-64,32), pixel_y = rand(-64,32))

		Stress_Test()
			set name = "5. Stress Test"
			for(var/i = 0 to 1000)
				// The third parameter forces it to generate a new one, even if it's already cached
				getFlatIcon(src,0,2)
				if(prob(5))
					Add_Overlay()
			Browse_Icon()

		Cache_Test()
			set name = "6. Cache Test"
			for(var/i = 0 to 1000)
				getFlatIcon(src)
			Browse_Icon()

/obj/effect/overlayTest
	icon = 'old_or_unused.dmi'
	icon_state = "blue"
	pixel_x = -24
	pixel_y = 24
	layer = TURF_LAYER // Should appear below the rest of the overlays

world
	view = "7x7"
	maxx = 20
	maxy = 20
	maxz = 1
*/
// Convert to grayscale
// Take the minimum color of two icons; combine transparency as if blending with ICON_ADD
// Take the maximum color of two icons; combine opacity as if blending with ICON_OR
// make this icon fully opaque--transparent pixels become black
// Change a grayscale icon into a white icon where the original color becomes the alpha
// I.e., black -> transparent, gray -> translucent white, white -> solid white
/*
	HSV format is represented as "#hhhssvv" or "#hhhssvvaa"

	Hue ranges from 0 to 0x5ff (1535)

		0x000 = red
		0x100 = yellow
		0x200 = green
		0x300 = cyan
		0x400 = blue
		0x500 = magenta

	Saturation is from 0 to 0xff (255)

		More saturation = more color
		Less saturation = more gray

	Value ranges from 0 to 0xff (255)

		Higher value means brighter color
 */
/*
	Smooth blend between HSV colors

	amount=0 is the first color
	amount=1 is the second color
	amount=0.5 is directly between the two colors

	amount<0 or amount>1 are allowed
 */
/*
	Smooth blend between RGB colors

	amount=0 is the first color
	amount=1 is the second color
	amount=0.5 is directly between the two colors

	amount<0 or amount>1 are allowed
 */
// positive angle rotates forward through red->green->blue
// Convert an rgb color to grayscale
// Change grayscale color to black->tone->white range
//Used in the OLD chem colour mixing algorithm
// Creates a single icon from a given /atom or /image.  Only the first argument is required.
//What the mob looks like as animated static
//By vg's ComicIronic
//What the mob looks like as a pitch black outline
//By vg's ComicIronic
//Dwarf fortress style icons based on letters (defaults to the first letter of the Atom's name)
//By vg's ComicIronic
// Pick a random animal instead of the icon, and use that instead
//Interface for using DrawBox() to draw 1 pixel on a coordinate.
//Returns the same icon specifed in the argument, but with the pixel drawn
//Interface for easy drawing of one pixel on an atom.
//For creating consistent icons for human looking simple animals
//Hook, override to run code on- wait this is images
//Images have dir without being an atom, so they get their own definition.
//Lame.
//Assumes already frozed
/// Save file used in icon2base64. Used for converting icons to base64.
/// Generate a filename for this asset
/// The same asset will always lead to the same asset name
/// (Generated names do not include file extention.)
/**
  * Converts an icon to base64. Operates by putting the icon in the iconCache savefile,
  * exporting it as text, and then parsing the base64 from that.
  * (This relies on byond automatically storing icons in savefiles as base64)
  */
//Costlier version of icon2html() that uses getFlatIcon() to account for overlays, underlays, etc. Use with extreme moderation, ESPECIALLY on mobs.
/* Gives the result RGB of a RGB string after a matrix transformation. No alpha.
 * Input: rr, rg, rb, gr, gg, gb, br, bg, bb, cr, cg, cb
 * Output: RGB string
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\icon_smoothing.dm. ----------------------
//generic (by snowflake) tile smoothing code; smooth your icons with this!
/*
	Each tile is divided in 4 corners, each corner has an appearance associated to it; the tile is then overlayed by these 4 appearances
	To use this, just set your atom's 'smooth' var to 1. If your atom can be moved/unanchored, set its 'can_be_unanchored' var to 1.
	If you don't want your atom's icon to smooth with anything but atoms of the same type, set the list 'canSmoothWith' to null;
	Otherwise, put all types you want the atom icon to smooth with in 'canSmoothWith' INCLUDING THE TYPE OF THE ATOM ITSELF.

	Each atom has its own icon file with all the possible corner states. See 'smooth_wall.dmi' for a template.

	DIAGONAL SMOOTHING INSTRUCTIONS
	To make your atom smooth diagonally you need all the proper icon states (see 'smooth_wall.dmi' for a template) and
	to add the 'SMOOTH_DIAGONAL' flag to the atom's smooth var (in addition to either SMOOTH_TRUE or SMOOTH_MORE).

	For turfs, what appears under the diagonal corners depends on the turf that was in the same position previously: if you make a wall on
	a plating floor, you will see plating under the diagonal wall corner, if it was space, you will see space.

	If you wish to map a diagonal wall corner with a fixed underlay, you must configure the turf's 'fixed_underlay' list var, like so:
		fixed_underlay = list("icon"='icon_file.dmi', "icon_state"="iconstatename")
	A non null 'fixed_underlay' list var will skip copying the previous turf appearance and always use the list. If the list is
	not set properly, the underlay will default to regular floor plating.

	To see an example of a diagonal wall, see '/turf/closed/wall/mineral/titanium' and its subtypes.
*/
//Redefinitions of the diagonal directions so they can be stored in one var without conflicts
//do not use, use queue_smooth(atom)
//only walls should have a need to handle underlays
//Icon smoothing helpers
//SSicon_smooth
//SSicon_smooth
//Example smooth wall
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\level_traits.dm. ----------------------
// Helpers for checking whether a z-level conforms to a specific requirement
// Basic levels
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\lighting.dm. ----------------------
/// Produces a mutable appearance glued to the [EMISSIVE_PLANE] dyed to be the [EMISSIVE_COLOR].
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\markov.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\matrices.dm. ----------------------
/*
	This proc makes the input taper off above cap. But there's no absolute cutoff.
	Chunks of the input value above cap, are reduced more and more with each successive one and added to the output
	A higher input value always makes a higher output value. but the rate of growth slows
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\mobs.dm. ----------------------
//ordered by amount of tan. Keep the nonstandard skin tones last.
// Displays a message in deadchat, sent by source. source is not linkified, message is, to avoid stuff like character names to be linkified.
// Automatically gives the class deadsay to the whole message (message + source)
//Used in chemical_mob_spawn. Generates a random mob based on a given gold_core_spawnable value.
/// Gets the client of the mob, allowing for mocking of the client.
/// You only need to use this if you know you're going to be mocking clients somewhere else.
//check if the person is dead, not sure where to put this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\mouse_control.dm. ----------------------
//Wow, specific name!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\names.dm. ----------------------
//Traitors and traitor silicons will get these. Revs will not.
//Cached regex search - for checking if codewords are used.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\path.dm. ----------------------
/**
 * This file contains the stuff you need for using JPS (Jump Point Search) pathing, an alternative to A* that skips
 * over large numbers of uninteresting tiles resulting in much quicker pathfinding solutions. Mind that diagonals
 * cost the same as cardinal moves currently, so paths may look a bit strange, but should still be optimal.
 */
/**
 * This is the proc you use whenever you want to have pathfinding more complex than "try stepping towards the thing".
 * If no path was found, returns an empty list, which is important for bots like medibots who expect an empty list rather than nothing.
 *
 * Arguments:
 * * caller: The movable atom that's trying to find the path
 * * end: What we're trying to path to. It doesn't matter if this is a turf or some other atom, we're gonna just path to the turf it's on anyway
 * * max_distance: The maximum number of steps we can take in a given path to search (default: 30, 0 = infinite)
 * * mintargetdistance: Minimum distance to the target before path returns, could be used to get near a target, but not right to it - for an AI mob with a gun, for example.
 * * id: An ID card representing what access we have and what doors we can open. Its location relative to the pathing atom is irrelevant
 * * simulated_only: Whether we consider turfs without atmos simulation (AKA do we want to ignore space)
 * * exclude: If we want to avoid a specific turf, like if we're a mulebot who already got blocked by some turf
 * * skip_first: Whether or not to delete the first item in the path. This would be done because the first item is the starting tile, which can break movement for some creatures.
 */
/**
 * A helper macro to see if it's possible to step from the first turf into the second one, minding things like door access and directional windows.
 * Note that this can only be used inside the [datum/pathfind][pathfind datum] since it uses variables from said datum.
 * If you really want to optimize things, optimize this, cuz this gets called a lot.
 */
/// Another helper macro for JPS, for telling when a node has forced neighbors that need expanding
/// The JPS Node datum represents a turf that we find interesting enough to add to the open list and possibly search for new tiles from
/// TODO: Macro this to reduce proc overhead
/// The datum used to handle the JPS pathfinding, completely self-contained
/**
 * search() is the proc you call to kick off and handle the actual pathfinding, and kills the pathfind datum instance when it's done.
 *
 * If a valid path was found, it's returned as a list. If invalid or cross-z-level params are entered, or if there's no valid path found, we
 * return null, which [/proc/get_path_to] translates to an empty list (notable for simple bots, who need empty lists)
 */
/// Called when we've hit the goal with the node that represents the last tile, then sets the path var to that path so it can be returned by [datum/pathfind/proc/search]
/**
 * For performing lateral scans from a given starting turf.
 *
 * These scans are called from both the main search loop, as well as subscans for diagonal scans, and they treat finding interesting turfs slightly differently.
 * If we're doing a normal lateral scan, we already have a parent node supplied, so we just create the new node and immediately insert it into the heap, ezpz.
 * If we're part of a subscan, we still need for the diagonal scan to generate a parent node, so we return a node datum with just the turf and let the diag scan
 * proc handle transferring the values and inserting them into the heap.
 *
 * Arguments:
 * * original_turf: What turf did we start this scan at?
 * * heading: What direction are we going in? Obviously, should be cardinal
 * * parent_node: Only given for normal lateral scans, if we don't have one, we're a diagonal subscan.
*/
/**
 * For performing diagonal scans from a given starting turf.
 *
 * Unlike lateral scans, these only are called from the main search loop, so we don't need to worry about returning anything,
 * though we do need to handle the return values of our lateral subscans of course.
 *
 * Arguments:
 * * original_turf: What turf did we start this scan at?
 * * heading: What direction are we going in? Obviously, should be diagonal
 * * parent_node: We should always have a parent node for diagonals
*/
/**
 * For seeing if we can actually move between 2 given turfs while accounting for our access and the caller's pass_flags
 *
 * Arguments:
 * * caller: The movable, if one exists, being used for mobility checks to see what tiles it can reach
 * * ID: An ID card that decides if we can gain access to doors that would otherwise block a turf
 * * simulated_only: Do we only worry about turfs with simulated atmos, most notably things that aren't space?
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\priority_announce.dm. ----------------------
/**
 * Summon the crew for an emergency meeting
 *
 * Teleports the crew to a specified area, and tells everyone (via an announcement) who called the meeting. Should only be used during april fools!
 * Arguments:
 * * user - Mob who called the meeting
 * * button_zone - Area where the meeting was called and where everyone will get teleported to
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\pronouns.dm. ----------------------
//pronoun procs, for getting pronouns without using the text macros that only work in certain positions
//datums don't have gender, but most of their subtypes do!
//like clients, which do have gender.
//mobs(and atoms but atoms don't really matter write your own proc overrides) also have gender!
//humans need special handling, because they can have their gender hidden
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\qdel.dm. ----------------------
// This is a bit hacky, we do it to avoid people relying on a return value for the macro
// If you need that you should use QDEL_IN_STOPPABLE instead
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\radiation.dm. ----------------------
// A special GetAllContents that doesn't search past things with rad insulation
// Components which return COMPONENT_BLOCK_RADIATION prevent further searching into that object's contents. The object itself will get returned still.
// The ignore list makes those objects never return at all
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\radio.dm. ----------------------
/// Ensure the frequency is within bounds of what it should be sending/receiving at
/// Format frequency by moving the decimal.
///Opposite of format, returns as a number
///returns a random unused frequency between MIN_FREE_FREQ & MAX_FREE_FREQ if free = TRUE, and MIN_FREQ & MAX_FREQ if FALSE
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\reagents.dm. ----------------------
//see build_chemical_reactions_list in holder.dm for explanations
//Checks for if the given reagent R is invalid to process for its passed owner.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\roundend.dm. ----------------------
///Handles random hardcore point rewarding if it applies.
//Common part of the report
/**
 * Log the round-end report as an HTML file
 *
 * Composits the roundend report, and saves it in two locations.
 * The report is first saved along with the round's logs
 * Then, the report is copied to a fixed directory specifically for
 * housing the server's last roundend report. In this location,
 * the file will be overwritten at the end of each shift.
 */
///Generate a report for how much money is on station, as well as the richest crewmember on the station.
///Generate a report for all players who made it out alive with a hardcore random character and prints their final score
//ambition start
//ambition end
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\sanitize_values.dm. ----------------------
//general stuff
//more specialised stuff
/**
  * Sanitizes a hexadecimal color. Always outputs lowercase.
  *
  * @params
  * * color - input color, 3 or 6 characters without the #.
  * * desired_format - 3 or 6 characters without the potential #. can only put in 3 or 6 here.
  * * include_crunch - do we put a # at the start
  * * default - default color. must be 3 or 6 characters with or without #.
  * * default_replacement - what we replace broken letters with.
  */
/// Makes sure the input color is text with a # at the start followed by 6 hexadecimal characters. Examples: "#ff1234", "#A38321", COLOR_GREEN_GRAY
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\shell.dm. ----------------------
//Runs the command in the system's shell, returns a list of (error code, stdout, stderr)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\stat_tracking.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\text.dm. ----------------------
/*
 * Holds procs designed to help with filtering text
 * Contains groups:
 *			SQL sanitization/formating
 *			Text sanitization
 *			Text searches
 *			Text modification
 *			Misc
 */
/*
 * SQL sanitization
 */
/*
 * Text sanitization
 */
//Simply removes < and > and limits the length of the message
//Removes a few problematic characters
//Runs byond's sanitization proc along-side sanitize_simple
//Runs sanitize and strip_html_simple
//I believe strip_html_simple() is required to run first to prevent '<' from displaying as '&lt;' after sanitize() calls byond's html_encode()
//Runs byond's sanitization proc along-side strip_html_simple
//I believe strip_html_simple() is required to run first to prevent '<' from displaying as '&lt;' that html_encode() would cause
//Returns null if there is any bad text in the string
// Used to get a properly sanitized input, of max_length
// no_trim is self explanatory but it prevents the input from being trimed if you intend to parse newlines or whitespace.
// Used to get a properly sanitized multiline input, of max_length
/**
  * stripped_multiline_input but reflects to the user instead if it's too big and returns null.
  */
//Filters out undesirable characters from names
//html_encode helper proc that returns the smallest non null of two numbers
//or 0 if they're both null (needed because of findtext returning 0 when a value is not present)
//Checks if any of a given list of needles is in the haystack
//Like above, but case sensitive
//Adds 'char' ahead of 'text' until there are 'count' characters total
//Adds 'char' behind 'text' until there are 'count' characters total
//Returns a string with reserved characters and spaces before the first letter removed
//Returns a string with reserved characters and spaces after the last letter removed
//Returns a string with reserved characters and spaces before the first word and after the last word removed.
//Returns a string with the first element of the string capitalized.
//This proc fills in all spaces with the "replace" var (* by default) with whatever
//is in the other string at the same spot (assuming it is not a replace char).
//This is used for fingerprints
//if it isn't both the same letter, or if they are both the replacement character
//(no way to know what it was supposed to be)
//This proc returns the number of chars of the string that is the character
//This is used for detective work to determine fingerprint completion.
//merges non-null characters (3rd argument) from "from" into "into". Returns result
//e.g. into = "Hello World"
//     from = "Seeya______"
//     returns"Seeya World"
//The returned text is always the same length as into
//This was coded to handle DNA gene-splicing.
//finds the first occurrence of one of the characters from needles argument inside haystack
//it may appear this can be optimised, but it really can't. findtext() is so much faster than anything you can do in byondcode.
//stupid byond :(
//Takes a list of values, sanitizes it down for readability and character count,
//then exports it as a json file at data/npc_saves/[filename].json.
//As far as SS13 is concerned this is write only data. You can't change something
//in the json file and have it be reflected in the in game item/mob it came from.
//(That's what things like savefiles are for) Note that this list is not shuffled.
//Used for applying byonds text macros to strings that are loaded at runtime
//Replacement for the \th macro when you want the whole word output as text (first instead of 1st)
/// Slightly expensive proc to scramble a message using equal probabilities of character replacement from a list. DOES NOT SUPPORT HTML!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\text_vr.dm. ----------------------
//Readds quotes and apostrophes to HTML-encoded strings
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\time.dm. ----------------------
/* Returns 1 if it is the selected month and day */
//returns timestamp in a sql and a not-quite-compliant ISO 8601 friendly format
//Takes a value of time in deciseconds.
//Returns a text value of that number in hours, minutes, or seconds.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\type2type.dm. ----------------------
/*
 * Holds procs designed to change one type of value, into another.
 * Contains:
 *			hex2num & num2hex
 *			file2list
 *			angle2dir
 *			angle2text
 *			worldtime2text
 *			text2dir_extended & dir2text_short
 */
//Returns an integer given a hex input, supports negative values "-ff"
//skips preceding invalid characters
//breaks when hittin invalid characters thereafter
// If safe=TRUE, returns null on incorrect input strings instead of CRASHing
//Returns the hex value of a decimal number
//len == length of returned string
//if len < 0 then the returned string will be as long as it needs to be to contain the data
//Only supports positive numbers
//if an invalid number is provided, it assumes num==0
//Note, unlike previous versions, this one works from low to high <-- that way
//Splits the text of a file at seperator and returns them in a list.
//returns an empty list if the file doesn't exist
//Turns a direction into text
//Turns text into proper directions
//Converts an angle (degrees) into an ss13 direction
//returns the north-zero clockwise angle in degrees, given a direction
//Returns the angle in english
//Converts a blend_mode constant to one acceptable to icon.Blend()
//Converts a rights bitfield into a string
//colour formats
// Very ugly, BYOND doesn't support unix time and rounding errors make it really hard to convert it to BYOND time.
// returns "YYYY-MM-DD" by default
/// For finding out what body parts a body zone covers, the inverse of the below basically
//Turns a Body_parts_covered bitfield into a list of organ/limb names.
//(I challenge you to find a use for this) -I found a use for it!!
//adapted from http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
//This is a weird one:
//It returns a list of all var names found in the string
//These vars must be in the [var_name] format
//It's only a proc because it's used in more than one place
//Takes a string and a datum
//The string is well, obviously the string being checked
//The datum is used as a source for var names, to check validity
//Otherwise every single word could technically be a variable!
//assumes format #RRGGBB #rrggbb
//word of warning: using a matrix like this as a color value will simplify it back to a string after being set
//will drop all values not on the diagonal
//returns a string the last bit of a type, without the preceeding '/'
/// Return html to load a url.
/// for use inside of browse() calls to html assets that might be loaded on a cdn.
// Decodes hex to raw byte string.
// If safe=TRUE, returns null on incorrect input strings instead of CRASHing
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\typelists.dm. ----------------------
// mostly the same code as above, just more verbose, slower and has tallying for saved lists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\type_processing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\unsorted.dm. ----------------------
/*
 * A large number of misc global procs.
 */
//Inverts the colour of an HTML string
//Better performant than an artisanal proc and more reliable than Turn(). From TGMC.
//Returns location. Returns null if no location was found.
/*
Location where the teleport begins, target that will teleport, distance to go, density checking 0/1(yes/no).
Random error in tile placement x, error in tile placement y, and block offset.
Block offset tells the proc how to place the box. Behind teleport location, relative to starting location, forward, etc.
Negative values for offset are accepted, think of it in relation to North, -x is west, -y is south. Error defaults to positive.
Turf and target are separate in case you want to teleport some distance from a turf the target is not standing on or something.
*/
//Returns whether or not a player is a guest using their ckey as an input
//Generalised helper proc for letting mobs rename themselves. Used to be clname() and ainame()
//Picks a string of symbols to display as the law number for hacked or ion laws
//Returns a list of unslaved cyborgs
//Returns a list of AI's
//Find an active ai with the least borgs. VERBOSE PROCNAME HUH!
//Returns a list of all items of interest with their name
//Orders mobs by type then by name
// Format a power value in W, kW, MW, or GW.
// Format an energy value in J, kJ, MJ, or GJ. 1W = 1J/s.
/**
 * Returns the top-most atom sitting on the turf.
 * For example, using this on a disk, which is in a bag, on a mob,
 * will return the mob because it's on the turf.
 *
 * Arguments
 * * something_in_turf - a movable within the turf, somewhere.
 * * stop_type - optional - stops looking if stop_type is found in the turf, returning that type (if found).
 **/
//Returns a list of all locations the target is within.
// returns the turf located at the map edge in the specified direction relative to A
// used for mass driver
// returns turf relative to A in given direction at set range
// result is bounded to map size
// note range is non-pythagorean
// used for disposal system
/**
  * Get ranged target turf, but with direct targets as opposed to directions
  *
  * Starts at atom A and gets the exact angle between A and target
  * Moves from A with that angle, Range amount of times, until it stops, bound to map size
  * Arguments:
  * * A - Initial Firer / Position
  * * target - Target to aim towards
  * * range - Distance of returned target turf from A
  * * offset - Angle offset, 180 input would make the returned target turf be in the opposite direction
  */
// returns turf relative to A offset in dx and dy tiles
// bound to map limits
/*
	Gets all contents of contents and returns them all in a list.
*/
//Step-towards method of determining whether one atom can see another. Similar to viewers()
//Takes: Anything that could possibly have variables and a varname to check.
//Returns: 1 if found, 0 if not.
//chances are 1:value. anyprob(1) will always return true
/*

 Gets the turf this atom's *ICON* appears to inhabit
 It takes into account:
 * Pixel_x/y
 * Matrix x/y

 NOTE: if your atom has non-standard bounds then this proc
 will handle it, but:
 * if the bounds are even, then there are an even amount of "middle" turfs, the one to the EAST, NORTH, or BOTH is picked
 (this may seem bad, but you're atleast as close to the center of the atom as possible, better than byond's default loc being all the way off)
 * if the bounds are odd, the true middle turf of the atom is returned

*/
///Returns a turf based on text inputs, original turf and viewing client
//Finds the distance between two atoms, in pixels
//centered = FALSE counts from turf edge to edge
//centered = TRUE counts from turf center to turf center
//of course mathematically this is just adding world.icon_size on again
/*
Checks if that loc and dir has an item on the wall
*/
//Compare A's dir, the clockwise dir of A and the anticlockwise dir of A
//To the opposite dir of the dir returned by get_dir(B,A)
//If one of them is a match, then A is facing B
/*
rough example of the "cone" made by the 3 dirs checked

 B
  \
   \
    >
      <
       \
        \
B --><-- A
        /
       /
      <
     >
    /
   /
 B

*/
//Center's an image.
//Requires:
//The Image
//The x dimension of the icon file used in the image
//The y dimension of the icon file used in the image
// eg: center_image(I, 32,32)
// eg2: center_image(I, 96,96)
//ultra range (no limitations on distance, faster than range for distances > 8); including areas drastically decreases performance
//similar function to range(), but with no limitations on the distance; will search spiralling outwards from the center
//similar function to RANGE_TURFS(), but will search spiralling outwards from the center (like the above, but only turfs)
//gives us the stack trace from CRASH() without ending the current proc.
//Key thing that stops lag. Cornerstone of performance in ss13, Just sitting here, in unsorted.dm.
//Increases delay as the server gets more overloaded,
//as sleeps aren't cheap and sleeping only to wake up and sleep again is wasteful
//returns the number of ticks slept
//Version of view() which ignores darkness, because BYOND doesn't have it (I actually suggested it but it was tagged redundant, BUT HEARERS IS A T- /rant).
/**
 * Checks whether the target turf is in a valid state to accept a directional window
 * or other directional pseudo-dense object such as railings.
 *
 * Returns FALSE if the target turf cannot accept a directional window or railing.
 * Returns TRUE otherwise.
 *
 * Arguments:
 * * dest_turf - The destination turf to check for existing windows and railings
 * * test_dir - The prospective dir of some atom you'd like to put on this turf.
 * * is_fulltile - Whether the thing you're attempting to move to this turf takes up the entire tile or whether it supports multiple movable atoms on its tile.
 */
//counts the number of bits in Byond's 16-bit width field
//in constant time and memory!
//same as do_mob except for movables and it allows both to drift and doesn't draw progressbar
//returns a GUID like identifier (using a mostly made up record format)
//guids are not on their own suitable for access or security tokens, as most of their bits are predictable.
//	(But may make a nice salt to one)
// \ref behaviour got changed in 512 so this is necesary to replicate old behaviour.
// If it ever becomes necesary to get a more performant REF(), this lies here in wait
// #define REF(thing) (thing && istype(thing, /datum) && (thing:datum_flags & DF_USE_TAG) && thing:tag ? "[thing:tag]" : "\ref[thing]")
// Makes a call in the context of a different usr
// Use sparingly
//Returns a list of all servants of Ratvar and observers.
//datum may be null, but it does need to be a typed var
//dupe code because dm can't handle 3 level deep macros
///DO NOT USE ___TraitAdd OR ___TraitRemove as a replacement for ADD_TRAIT / REMOVE_TRAIT defines. To be used explicitly for callback.
///DO NOT USE ___TraitAdd OR ___TraitRemove as a replacement for ADD_TRAIT / REMOVE_TRAIT defines. To be used explicitly for callback.
//For these two procs refs MUST be ref = TRUE format like typecaches!
// Converts browser keycodes to BYOND keycodes.
//Checks to see if either the victim has a garlic necklace or garlic in their blood
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\vector.dm. ----------------------
// Basic geometry things.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\verbs.dm. ----------------------
/**
  * handles adding verbs and updating the stat panel browser
  *
  * pass the verb type path to this instead of adding it directly to verbs so the statpanel can update
  * Arguments:
  * * target - Who the verb is being added to, client or mob typepath
  * * verb - typepath to a verb, or a list of verbs, supports lists of lists
  */
/**
  * handles removing verb and sending it to browser to update, use this for removing verbs
  *
  * pass the verb type path to this instead of removing it from verbs so the statpanel can update
  * Arguments:
  * * target - Who the verb is being removed from, client or mob typepath
  * * verb - typepath to a verb, or a list of verbs, supports lists of lists
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\view.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\weakref.dm. ----------------------
/// Checks if potential_weakref is a weakref of thing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\yelling.dm. ----------------------
// blatantly copied from wave explosion code
// check explosion2.dm for what this does and how it works.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\_cit_helpers.dm. ----------------------
//THIS FILE CONTAINS CONSTANTS, PROCS, AND OTHER THINGS//
/////////////////////////////////////////////////////////
//longcat memes.
//Crew objective and miscreants stuff
/*pretty much everything got moved to modular_skyrat (interactions)
/mob/living/carbon/has_penis() // Skyrat Change
	var/obj/item/organ/genital/G = getorganslot(ORGAN_SLOT_PENIS)
	if(G && istype(G, /obj/item/organ/genital/penis))
		return TRUE
	return FALSE

/mob/living/carbon/proc/has_balls() // Skyrat Change
	var/obj/item/organ/genital/G = getorganslot(ORGAN_SLOT_TESTICLES)
	if(G && istype(G, /obj/item/organ/genital/testicles))
		return TRUE
	return FALSE

/mob/living/carbon/has_vagina() // Skyrat Change
	if(getorganslot(ORGAN_SLOT_VAGINA))
		return TRUE
	return FALSE

/mob/living/carbon/has_breasts() // Skyrat Change
	if(getorganslot(ORGAN_SLOT_BREASTS))
		return TRUE
	return FALSE

/mob/living/carbon/proc/has_butt()
	if(getorganslot(ORGAN_SLOT_BUTT))
		return TRUE
	return FALSE
*/
////////////////////////
//DANGER | DEBUG PROCS//
////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\_extools_api.dm. ----------------------
//#define EXTOOLS_LOGGING // rust_g is used as a fallback if this is undefined
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\_lists.dm. ----------------------
/*
 * Holds procs to help with list operations
 * Contains groups:
 * Misc
 * Sorting
 */
/*
 * Misc
 */
// Generic listoflist safe add and removal macros:
///If value is a list, wrap it in a list so it can be used with list add/remove operations
///Add an untyped item to a list, taking care to handle list items by wrapping them in a list to remove the footgun
///Remove an untyped item to a list, taking care to handle list items by wrapping them in a list to remove the footgun
///Like LAZYCOPY - copies an input list if the list has entries, If it doesn't the assigned list is nulled
//ambition start
//ambition end
///returns L[I] if L exists and I is a valid index of L, runtimes if L is not a list
///This is used to add onto lazy assoc list when the value you're adding is a /list/. This one has extra safety over lazyaddassoc because the value could be null (and thus cant be used to += objects)
//Sets a list to null
///This is used to add onto lazy assoc list when the value you're adding is a /list/. This one has extra safety over lazyaddassoc because the value could be null (and thus cant be used to += objects)
//These methods don't null the list
/// Performs an insertion on the given lazy list with the given key and value. If the value already exists, a new one will not be made.
/// Passed into BINARY_INSERT to compare keys
/// Passed into BINARY_INSERT to compare values
/****
	* Binary search sorted insert
	* INPUT: Object to be inserted
	* LIST: List to insert object into
	* TYPECONT: The typepath of the contents of the list
	* COMPARE: The object to compare against, usualy the same as INPUT
	* COMPARISON: The variable on the objects to compare
	* COMPTYPE: How should the values be compared? Either COMPARE_KEY or COMPARE_VALUE.
	*/
//Returns a list in plain english as a string
/**
 * English_list but associative supporting. Higher overhead.
 * @depricated
 */
//Returns list element or null. Should prevent "index out of bounds" error.
/// @depricated
//Return either pick(list) or null if list is not of type /list or is empty
/// @depricated
//Checks if the list is empty
/// @depricated
//Checks for specific types in a listc
//Checks for specific types in specifically structured (Assoc "type" = TRUE) lists ('typecaches')
//Checks for a string in a list
//Removes a string from a list
//returns a new list with only atoms that are in typecache L
///Like typesof() or subtypesof(), but returns a typecache instead of a list
//Empties the list by setting the length to 0. Hopefully the elements get garbage collected
//Removes any null entries from the list
//Returns TRUE if the list had nulls, FALSE otherwise
/*
 * Returns list containing all the entries from first list that are not present in second.
 * If skiprep = 1, repeated elements are treated as one.
 * If either of arguments is not a list, returns null
 */
/*
 * Returns list containing entries that are in either list but not both.
 * If skipref = 1, repeated elements are treated as one.
 * If either of arguments is not a list, returns null
 */
//Picks a random element from a list based on a weighting system:
//1. Adds up the total of weights for each element
//2. Gets a number between 1 and that total
//3. For each element in the list, subtracts its weighting from that number
//4. If that makes the number 0 or less, return that element.
//Will output null sometimes if you use decimals (e.g. 0.1 instead of 10) as rand() uses integers, not floats
//Picks a number of elements from a list based on weight.
//This is highly optimised and good for things like grabbing 200 items from a list of 40,000
//Much more efficient than many pickweight calls
/// Pick a random element from the list and remove it from the list.
//Pick a random element from the list by weight and remove it from the list.
//Result is returned as a list in the format list(key, value)
//Returns the top(last) element from the list and removes it from the list (typical stack function)
// Returns the next item in a list
// Returns the previous item in a list
//Randomize: Return the list in a random order
//same, but returns nothing and acts on list in place
//Return a list with no duplicate entries
//same, but returns nothing and acts on list in place (also handles associated values properly)
//for sorting clients or mobs by ckey
//Specifically for record datums in a list.
//any value in a list
//uses sortList() but uses the var's name specifically. This should probably be using mergeAtom() instead
//Converts a bitfield to a list of numbers (or words if a wordlist is provided)
// Returns the key based on the index
/// Returns datum/data/record
//Move a single element from position fromIndex within a list, to position toIndex
//All elements in the range [1,toIndex) before the move will be before the pivot afterwards
//All elements in the range [toIndex, L.len+1) before the move will be after the pivot afterwards
//In other words, it's as if the range [fromIndex,toIndex) have been rotated using a <<< operation common to other languages.
//fromIndex and toIndex must be in the range [1,L.len+1]
//This will preserve associations ~Carnie
//Move elements [fromIndex,fromIndex+len) to [toIndex-len, toIndex)
//Same as moveElement but for ranges of elements
//This will preserve associations ~Carnie
//Move elements from [fromIndex, fromIndex+len) to [toIndex, toIndex+len)
//Move any elements being overwritten by the move to the now-empty elements, preserving order
//Note: if the two ranges overlap, only the destination order will be preserved fully, since some elements will be within both ranges ~Carnie
//replaces reverseList ~Carnie
//return first thing in L which has var/varname == value
//this is typecaste as list/L, but you could actually feed it an atom instead.
//completely safe to use
//remove all nulls from a list
//Copies a list, and all lists inside it recusively
//Does not copy any other reference type
//takes an input_key, as text, and the list of keys already used, outputting a replacement key in the format of "[input_key] ([number_of_duplicates])" if it finds a duplicate
//use this for lists of things that might have the same name, like mobs or objects, that you plan on giving to a player as input
//Flattens a keyed list into a list of it's contents
//Picks from the list, with some safeties, and returns the "default" arg if it fails
/* Definining a counter as a series of key -> numeric value entries

 * All these procs modify in place.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\_logging.dm. ----------------------
//wrapper macros for easier grepping
// proc hooked, so we can just put in standard TRUE and FALSE
//This is an external call, "true" and "false" are how rust parses out booleans
//print a warning message to world.log
//not an error or a warning, but worth to mention on the world log, just in case.
//print a testing-mode debug message to world.log and world
/* Items with ADMINPRIVATE prefixed are stripped from public logs. */
/* All other items are public. */
/**
 * Writes to a special log file if the log_suspicious_login config flag is set,
 * which is intended to contain all logins that failed under suspicious circumstances.
 *
 * Mirrors this log entry to log_access when access_log_mirror is TRUE, so this proc
 * doesn't need to be used alongside log_access and can replace it where appropriate.
 */
/* Log to both DD and the logfile. */
/* Log to the logfile only. */
/* Rarely gets called; just here in case the config breaks. */
/* For logging round startup. */
/**
 * Appends a tgui-related log entry. All arguments are optional.
 */
/* Close open log handles. This should be called as late as possible, and no logging should hapen after. */
/* Helper procs for building detailed log lines */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\_string_lists.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\matrices\color_matrix.dm. ----------------------
/////////////////////
// COLOUR MATRICES //
/////////////////////
/* Documenting a couple of potentially useful color matrices here to inspire ideas
// Greyscale - indentical to saturation @ 0
list(LUMA_R,LUMA_R,LUMA_R,0, LUMA_G,LUMA_G,LUMA_G,0, LUMA_B,LUMA_B,LUMA_B,0, 0,0,0,1, 0,0,0,0)

// Color inversion
list(-1,0,0,0, 0,-1,0,0, 0,0,-1,0, 0,0,0,1, 1,1,1,0)

// Sepiatone
list(0.393,0.349,0.272,0, 0.769,0.686,0.534,0, 0.189,0.168,0.131,0, 0,0,0,1, 0,0,0,0)
*/
//Does nothing
//Adds/subtracts overall lightness
//0 is identity, 1 makes everything white, -1 makes everything black
//Changes distance hues have from grey while maintaining the overall lightness. Greys are unaffected.
//1 is identity, 0 is greyscale, >1 oversaturates colors
/**
 * Exxagerates or removes colors
 */
//Changes distance colors have from rgb(127,127,127) grey
//1 is identity. 0 makes everything grey >1 blows out colors and greys
/**
 * Exxagerates or removes brightness
 */
//Moves all colors angle degrees around the color wheel while maintaining intensity of the color and not affecting greys
//0 is identity, 120 moves reds to greens, 240 moves reds to blues
/**
 * Moves all colors angle degrees around the color wheel while maintaining intensity of the color and not affecting whites
 * TODO: Need a version that only affects one color (ie shift red to blue but leave greens and blues alone)
 */
//These next three rotate values about one axis only
//x is the red axis, y is the green axis, z is the blue axis.
/**
 * Builds a color matrix that transforms the hue, saturation, and value, all in one operation.
 */
//Returns a matrix addition of A with B
//Returns a matrix multiplication of A with B
/**
 * Assembles a color matrix, defaulting to identity
 */
/**
 * Assembles a color matrix, defaulting to identity
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\matrices\transform_matrix.dm. ----------------------
//Dumps the matrix data in format a-f
//Dumps the matrix data in a matrix-grid format
/*
  a d 0
  b e 0
  c f 1
*/
//The X pixel offset of this matrix
//The Y pixel offset of this matrix
//Skews a matrix in a particular direction
//Missing arguments are treated as no skew in that direction
//As Rotation is defined as a scale+skew, these procs will break any existing rotation
//Unless the result is multiplied against the current matrix
/**
 * constructs a transform matrix, defaulting to identity
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\sorts\InsertSort.dm. ----------------------
//simple insertion sort - generally faster than merge for runs of 7 or smaller
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\sorts\MergeSort.dm. ----------------------
//merge-sort - gernerally faster than insert sort, for runs of 7 or larger
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\sorts\TimSort.dm. ----------------------
//TimSort interface
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__HELPERS\sorts\__main.dm. ----------------------
/*
	Sorts the specified portion of the specified array using a binary
	insertion sort.  This is the best method for sorting small numbers
	of elements.  It requires O(n log n) compares, but O(n^2) data
	movement (worst case).

	If the initial part of the specified range is already sorted,
	this method can take advantage of it: the method assumes that the
	elements in range [lo,start) are already sorted

	lo		the index of the first element in the range to be sorted
	hi		the index after the last element in the range to be sorted
	start	the index of the first element in the range that is	not already known to be sorted
*/
/*
	Returns the length of the run beginning at the specified position and reverses the run if it is back-to-front

	A run is the longest ascending sequence with:
		a[lo] <= a[lo + 1] <= a[lo + 2] <= ...
	or the longest descending sequence with:
		a[lo] >  a[lo + 1] >  a[lo + 2] >  ...

	For its intended use in a stable mergesort, the strictness of the
	definition of "descending" is needed so that the call can safely
	reverse a descending sequence without violating stability.
*/
//Returns the minimum acceptable run length for an array of the specified length.
//Natural runs shorter than this will be extended with binarySort
//Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished:
//	runLen[i-3] > runLen[i-2] + runLen[i-1]
//	runLen[i-2] > runLen[i-1]
//This method is called each time a new run is pushed onto the stack.
//So the invariants are guaranteed to hold for i<stackSize upon entry to the method
//Merges all runs on the stack until only one remains.
//Called only once, to finalise the sort
//Merges the two consecutive runs at stack indices i and i+1
//Run i must be the penultimate or antepenultimate run on the stack
//In other words, i must be equal to stackSize-2 or stackSize-3
/*
	Locates the position to insert key within the specified sorted range
	If the range contains elements equal to key, this will return the index of the LEFTMOST of those elements

	key		the element to be inserted into the sorted range
	base	the index of the first element of the sorted range
	len		the length of the sorted range, must be greater than 0
	hint	the offset from base at which to begin the search, such that 0 <= hint < len; i.e. base <= hint < base+hint

	Returns the index at which to insert element 'key'
*/
/**
  * Like gallopLeft, except that if the range contains an element equal to
  * key, gallopRight returns the index after the rightmost equal element.
  *
  * @param key the key whose insertion point to search for
  * @param a the array in which to search
  * @param base the index of the first element in the range
  * @param len the length of the range; must be > 0
  * @param hint the index at which to begin the search, 0 <= hint < n.
  *	 The closer hint is to the result, the faster this method will run.
  * @param c the comparator used to order the range, and to search
  * @return the int k,  0 <= k <= n such that a[b + k - 1] <= key < a[b + k]
  */
//Merges two adjacent runs in-place in a stable fashion.
//For performance this method should only be called when len1 <= len2!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\access.dm. ----------------------
// Returns used by production machinery
// Based on access type that passed the check
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\chat.dm. ----------------------
/// Adds a generic box around whatever message you're sending in chat. Really makes things stand out.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\DNA.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\keybindings.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\language.dm. ----------------------
/*
 * # LANGUAGE_SERGAL
 * Just an easier way of changing it i suppose if it ever does.
 * "i want fancy merp language"
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\lewd.dm. ----------------------
/*
 * # lewd_prefs_choices
 * Used for determining the possible choices for lewd prefs,
 * downstreams can modify this and i don't know,
 * remove "Ask"? or make a very confusing list of options which will make players hate you for it.
*/
//Weird defines go here
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\loadout.dm. ----------------------
/// LOADOUT STUFF
/// The category for all underwear, includes underwear, shirt and socks
/// Subcategory for underwear
/// Subcategory for shirts
/// Subcategory for socks
/// Category for wrist items
/// Subcategory for watches
//the names of the customization tabs
//subtabs for the character settings tab
//subtabs for preferences tab
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\medical_defines.dm. ----------------------
/*
 * # Painkillers - Currently only ever used to speed up self-surgery.
 * There's probably not even a reason to have those,
 * there's no effects to using one more than another
 * other than their regular effects.
*/
/// Painkiller trait - Miner's salve version
/// Painkiller trait - Morphine version
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\misc.dm. ----------------------
/// Adds an utf-8 header...? only ever used on circuitry so when wiremod arrives...
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\mobs.dm. ----------------------
//Thirst
/// Maximum amount of hydration the player can have
// Pixel shifting
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\runechat_defines.dm. ----------------------
/*
 * # runechat_color_names
 * Used for remembering what color a player's speech would be.
 * It's associative, entries are built like this:
 * list("John" = "#FFFFFF")
 * Both values are strings.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\signals.dm. ----------------------
// /datum/component/container_item
/// (atom/container, mob/user) - returns bool
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\sizecode.dm. ----------------------
//I am not a coder. Please fucking tear apart my code, and insult me for how awful I am at coding. Please and thank you. -Dahlular
//alright bet -BoxBoy
//averages
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\spans.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\status_effects.dm. ----------------------
/// Special crusher mark, hurts more.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\strippable.dm. ----------------------
/// Modular file strippable items, we do have extra slots only here.
/// Right ear strippable slot
/// Wrists strippable slot
/// Socks strippable slot
/// Undershirt strippable slot
/// Underwear strippable slot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\subsystems.dm. ----------------------
/*
 * # INIT_ORDER_INTERACTIONS
 * Used by the Interactions subsystems, used to set it's own position in the queue.
 * This puts this last on priority, very far from other subsystems,
 * if citadel ever manages to get this far, push it ever lower.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\traits.dm. ----------------------
/// Painkiller trait, used for self-surgeries.
/// Prevents the player from getting thirsty at all, usually paired with TRAIT_NOHUNGER.
/// Define for the quirk "sheltered", the player does not start with Galactic Common language.
/// Define for the quirk "infertile", self explanatory. Please make this a preference on the Content Preferences Tab.
/// DNC trait, used to prevent cloning
/// Estrous traits, used for mammalian seasonal arousal systems
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\wires.dm. ----------------------
/// Fire alarms have wires now.
/// Toggles the fire alarm's alarm on/off.
/// Toggles whether the fire alarm will trigger if there is a fire or is hit.
/// Immediately triggers the alarm on the fire alarm, only used for pulsing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\dcs\signals.dm. ----------------------
/*
 * # COMSIG_MOB_ORGAN_ADD
 * From modular_sand\code\modules\surgery\organs
 * Used by signals for determining when an organ was inserted
*/
/*
 * # COMSIG_MOB_ORGAN_REMOVE
 * From modular_sand\code\modules\surgery\organs
 * Used by signals for determining when an organ was removed
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\dcs\signals\signals_mob_main.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\DEFINES\dcs\signals\sizecode.dm. ----------------------
/*
 * # COMSIG_MICRO_PICKUP_FEET
 * From /datum/element/mob_holder/micro
 * Used by signals for determining whether you can pick up someone with your feet, kinky.
*/
/*
 * # COMSIG_MOB_RESIZED
 * From /mob/living
 * Used by signals for whenever a mob has changed sizes.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SANDCODE\HELPERS\sizecode.dm. ----------------------
/*
 * # get_size(mob/living/target)
 * Grabs the size of your critter, works for any living creature even carbons with dna
 * Now, please don't tell me your creature has a dna but it's very snowflakey, then i say you should rewrite your mob
 * instead of touching this file.
*/
/*
 * # COMPARE_SIZES(mob/living/user, mob/living/target)
 * Returns how bigger or smaller the target is in comparison to user
 * Example:
 * - user = 2, target = 1, result = 0.5
 * - user = 1, target = 2, result = 2
 * Args:
 * - user = /mob/living
 * - target = /mob/living
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\access.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\admin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\atmospherics.dm. ----------------------
// Gas defines here because somebody hates typepaths
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\cit_defines.dm. ----------------------
//Damage stuffs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\click.dm. ----------------------
/*
	Click code cleanup
	~Sayu
*/
// 1 decisecond click delay (above and beyond mob/next_move)
//This is mainly modified by click code, to modify click delays elsewhere, use next_move and changeNext_move()
// THESE DO NOT EFFECT THE BASE 1 DECISECOND DELAY OF NEXT_CLICK
//Delays the mob's next click/action by num deciseconds
// eg: 10-3 = 7 deciseconds of delay
// eg: 10*0.5 = 5 deciseconds of delay
// DOES NOT EFFECT THE BASE 1 DECISECOND DELAY OF NEXT_CLICK
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\configuration.dm. ----------------------
/// like  CONFIG_GET_ENTRY() but uses a full path
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\cooldowns.dm. ----------------------
/*

	Read code\__DEFINES\cooldowns.dm

*/
//INDEXES
//Mecha cooldowns
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\hud.dm. ----------------------
//Lower right, persistent menu
//Cyborgs
//Aliens
//Arousal Meter
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\is_helpers.dm. ----------------------
// Hyperstation Stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\lewd.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\loadout.dm. ----------------------
//the names of the customization tabs
//#define SETTINGS_TAB			0 //Already exists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\mobs.dm. ----------------------
// Ready states at roundstart for mob/dead/new_player
// Increase max age
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\preferences.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\pregnancy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\quirks.dm. ----------------------
//Dominant/Well-trained quirks
// Quirk mood types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\radiation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\rope.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\say.dm. ----------------------
//Spans. Robot speech, italics, etc. Applied in compose_message().
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\signals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\spans.dm. ----------------------
// This file is maintained for exotic span types
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\species.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\subsystems.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\traits.dm. ----------------------
// General traits
// Trait types
// Quirk traits
// Hyperstation traits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\arousal\genitals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\code\__SPLURTCODE\DEFINES\dcs\signals.dm. ----------------------
/*
 * # COMSIG_MOB_UPDATE_GENITALS
 * From modular_splurt\code\modules\arousal\genitals.dm
 * Used by signals for determining when genitals have been updated
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\interface.dm. ----------------------
//Please use mob or src (not usr) in these procs. This way they can be called in the same fashion as procs.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\menu.dm. ----------------------
/*
/datum/verbs/menu/Example/verb/Example()
	set name = "" //if this starts with @ the verb is not created and name becomes the command to invoke.
	set desc = "" //desc is the text given to this entry in the menu
	//You can not use src in these verbs. It will be the menu at compile time, but the client at runtime.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\stylesheet.dm. ----------------------
/// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/// !!!!!!!!!!HEY LISTEN!!!!!!!!!!!!!!!!!!!!!!!!
/// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// If you modify this file you ALSO need to modify code/modules/goonchat/browserAssets/browserOutput.css and browserOutput_white.css
// BUT you have to use PX font sizes with are on a x8 scale of these font sizes
// Sample font-size: DM: 8 CSS: 64px
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\fonts_datum.dm. ----------------------
/// A font datum, it exists to define a custom font to use in a span style later.
/// Get font metrics
/// From Lummox's dmifontsplus (https://www.byond.com/developer/LummoxJR/DmiFontsPlus)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\grand_9k.dm. ----------------------
/// For clean results on map, use only sizing pt, multiples of 6: 6pt 12pt 18pt 24pt etc. - Not for use with px sizing
/// Can be used in TGUI etc, px sizing is pt / 0.75. 6pt = 8px, 12pt = 16px etc.
/// Base font
/// For icon overlays
/// Grand9K 6pt metrics generated using Lummox's dmifontsplus (https://www.byond.com/developer/LummoxJR/DmiFontsPlus)
/// Note: these variable names have been changed, so you can't straight copy/paste from dmifontsplus.exe
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\pixellari.dm. ----------------------
/// For clean results on map, use only sizing pt, multiples of 12: 12pt 24pt 48pt etc. - Not for use with px sizing
/// Can be used in TGUI etc, px sizing is pt / 0.75. 12pt = 16px, 24pt = 32px etc.
/// Base font
/// For icon overlays
/// Pixellari 12pt metrics generated using Lummox's dmifontsplus (https://www.byond.com/developer/LummoxJR/DmiFontsPlus)
/// Note: these variable names have been changed, so you can't straight copy/paste from dmifontsplus.exe
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\spess_font.dm. ----------------------
/// For clean results on map, use only sizing pt, multiples of 6: 6t 12pt 18pt etc. - Not for use with px sizing
/// Can be used in TGUI etc, px sizing is pt / 0.75. 12pt = 16px, 24pt = 32px etc.
/// Base font
/// For icon overlays
/// Spess Font 6pt metrics generated using Lummox's dmifontsplus (https://www.byond.com/developer/LummoxJR/DmiFontsPlus)
/// Note: these variable names have been changed, so you can't straight copy/paste from dmifontsplus.exe
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\tiny_unicode.dm. ----------------------
/// For clean results on map, use only sizing pt, multiples of 12: 12pt 24pt 48pt etc. - Not for use with px sizing
/// Can be used in TGUI etc, px sizing is pt / 0.75. 12pt = 16px, 24pt = 32px etc.
/// Base font
/// For icon overlays
/// TinyUnicode 12pt metrics generated using Lummox's dmifontsplus (https://www.byond.com/developer/LummoxJR/DmiFontsPlus)
/// Note: these variable names have been changed, so you can't straight copy/paste from dmifontsplus.exe
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\interface\fonts\vcr_osd_mono.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\datums\components\souldeath.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\datums\status_effects\chems.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////
//			Astral INSURANCE
///////////////////////////////////////////////
//Makes sure people can't get trapped in each other's bodies if lag causes a deync between proc calls.
/*//////////////////////////////////////////
///////////////////////////////////////////
//Preamble
//Remove all stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\game\objects\effects\temporary_visuals\souldeath.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\admin\holder2.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\admin\secrets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\client_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\preferences_savefile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\preferences_toggles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\accessory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\backpack.dm. ----------------------
// Moved here from quirks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\glasses.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\gloves.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\hands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\head.dm. ----------------------
//trek fancy Hats!
// orvilike "original" kepi
/*Commenting out Until next Christmas or made automatic
/datum/gear/santahatr
	name = "Red Santa Hat"
	category = ITEM_SLOT_HEAD
	path = /obj/item/clothing/head/christmashat

/datum/gear/santahatg
	name = "Green Santa Hat"
	category = ITEM_SLOT_HEAD
	path = /obj/item/clothing/head/christmashatg
*/
//Cowboy Stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\mask.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\neck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\shoes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\suit.dm. ----------------------
//Federation jackets from movies
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\uniform.dm. ----------------------
// Pantsless Sweaters
// Grey utility
// Trekie things
//TOS
//TNG
//VOY
//DS9
//ENT
//TheMotionPicture
//Orvilike
//Memes
//Christmas
/*Commenting out Until next Christmas or made automatic
/datum/gear/uniform/christmasmaler
	name = "Red Masculine Christmas Suit"
	category = ITEM_SLOT_ICLOTHING
	path = /obj/item/clothing/under/costume/christmas

/datum/gear/uniform/christmasmaleg
	name = "Green Masculine Christmas Suit"
	category = ITEM_SLOT_ICLOTHING
	path = /obj/item/clothing/under/costume/christmas/green

/datum/gear/uniform/christmasfemaler
	name = "Red Feminine Christmas Suit"
	category = ITEM_SLOT_ICLOTHING
	path = /obj/item/clothing/under/costume/christmas/croptop

/datum/gear/uniform/christmasfemaleg
	name = "Green Feminine Christmas Suit"
	category = ITEM_SLOT_ICLOTHING
	path = /obj/item/clothing/under/costume/christmas/croptop/green

/datum/gear/uniform/pinkstripper
	name = "Pink stripper outfit"
	category = ITEM_SLOT_ICLOTHING
	path = /obj/item/clothing/under/misc/stripper
	cost = 3
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\unlockable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\_loadout.dm. ----------------------
// Loadout system. All items are children of /datum/gear. To make a new item, you usually just define a new item like /datum/gear/example
// then set required vars like name(string), category(slot define, take them from code/__DEFINES/inventory.dm (the lowertext ones) (be sure that there is an entry in
// slot_to_string(slot) proc in hippiestation/code/_HELPERS/mobs.dm to show the category name in preferences menu) and path (the actual item path).
// description defaults to the path initial desc, cost defaults to 1 point but if you think your item requires more points, the framework allows that
// and lastly, restricted_roles list allows you to let someone spawn with certain items only if the job they spawned with is on the list.
//a comprehensive donator check proc is intentionally not implemented due to the fact that we (((might))) have job-whitelists for donator items in the future and I like to stay on the safe side.
//ckey only check
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\_medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\_security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\_service.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\loadout\__donator.dm. ----------------------
//This is the file that handles donator loadout items.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\client\verbs\who.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\clothing\neck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\clothing\trek.dm. ----------------------
/*/////////////////////////////////////////////////////////////////////////////////
///////																		///////
///////								Star Trek Stuffs						///////
///////																		///////
//  <3 Nienhaus && Joan.
// I made the Voy and DS9 stuff tho. - Poojy
// Armor lists for even Heads of Staff is Nulled out do round start armor as well most armor going onto the suit itself rather then a armor slot - Trilby
///////////////////////////////////////////////////////////////////////////////////
//DS9
//MODERN ish Joan sqrl sprites. I think
//For general use
//Variants
//"modern" ones for fancy
//Variants
//Variants
//orvilike caps
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\clothing\suits\suits.dm. ----------------------
/*/////////////////////////////////////////////////////////////////////////////////
///////																		///////
///////			Cit's exclusive suits, armor, etc. go here			///////
///////																		///////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\custom_loadout\custom_items.dm. ----------------------
//For custom items.
// Unless there's a digitigrade version make sure you add mutantrace_variation = NONE to all clothing/under and shoes - Pooj
// Digitigrade stuff is uniform_digi.dmi and digishoes.dmi in icons/mob
//Removed all of the space flags from this suit so it utilizes nothing special.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\custom_loadout\load_to_mob.dm. ----------------------
//Proc that does the actual loading of items to mob
/*Itemlists are formatted as
"[typepath]" = number_of_it_to_spawn
*/
//Just incase there's extra mob selections in the future.....
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\custom_loadout\read_from_file.dm. ----------------------
//Layered list in form of custom_item_list[ckey][job][items][amounts]
//ckey is key, job is specific jobs, or "ALL" for all jobs, items for items, amounts for amount of item.
//File should be in the format of ckey|exact job name/exact job name/or put ALL instead of any job names|/path/to/item=amount;/path/to/item=amount
//Each ckey should be in a different line
//if there's multiple entries of a single ckey the later ones will add to the earlier definitions.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\eventmaps\Spookystation\halloweenPersiWork.dm. ----------------------
//Halloween Fluff Papers!
//Dorm Buttons
//Dorm Doors
//Luxury Dorm Shutters
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\eventmaps\Spookystation\JTGSZwork.dm. ----------------------
/*
⢀⡴⠑⡄⠀⠀⠀⠀⠀⠀⠀⣀⣀⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠸⡇⠀⠿⡀⠀⠀⠀⣀⡴⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠑⢄⣠⠾⠁⣀⣄⡈⠙⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⡀⠁⠀⠀⠈⠙⠛⠂⠈⣿⣿⣿⣿⣿⠿⡿⢿⣆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⡾⣁⣀⠀⠴⠂⠙⣗⡀⠀⢻⣿⣿⠭⢤⣴⣦⣤⣹⠀⠀⠀⢀⢴⣶⣆
⠀⠀⢀⣾⣿⣿⣿⣷⣮⣽⣾⣿⣥⣴⣿⣿⡿⢂⠔⢚⡿⢿⣿⣦⣴⣾⠁⠸⣼⡿
⠀⢀⡞⠁⠙⠻⠿⠟⠉⠀⠛⢹⣿⣿⣿⣿⣿⣌⢤⣼⣿⣾⣿⡟⠉⠀⠀⠀⠀⠀
⠀⣾⣷⣶⠇⠀⠀⣤⣄⣀⡀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀ 		WARNING: THE SHITCODE BELOW HAS BEEN HASTILY
⠀⠉⠈⠉⠀⠀⢦⡈⢻⣿⣿⣿⣶⣶⣶⣶⣤⣽⡹⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀ 		COPY AND PASTED, PORTED FROM AWKWARD PLACES, AND PROBABLY MADE WORSE.
⠀⠀⠀⠀⠀⠀⠀⠉⠲⣽⡻⢿⣿⣿⣿⣿⣿⣿⣷⣜⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣷⣶⣮⣭⣽⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣀⣀⣈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀ WELCOME TO JT's TG-CODE HALLOWEEN BALL CODEFILE.
⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀ 					ALL OF IT WILL HOPEFULLY BE BELOW.
⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⠿⠿⠿⠿⠛⠉
*/
//Also Shrek will crash your dmlang server repeatedly if you edit him.
//JT is weird, considering my handle is a acronym.
//Considering I can't grab defines from everywhere, I hope you enjoy strings and numbers plebs.
//Update - Moved to modular citadel so we are after everything has loaded...probably we gucci - jtgsz
/*
	AREAS
			*/
//This is generally how you handle planet areas, gen 1 large outside area is good for outside effects.
//PS: Mountain has a soundloop, outside has a soundloop, inside has a soundloop, mountaininside is silent
//This is for the rain weather my man.
/*
	OUTSIDE WALLS I WANT NOT NEED
										*/
//These exist mostly to limit the amount of space we use organically really.
//Decided to just use the denserock within the regular code.
/*
	OUTSIDE TURFS WITH NO GEN JUS MIDNIGHT LIGHT BABY
														*/
//In a ideal world, we would have split the turfs onto a single parent.
//Then we would tree from INSIDE and OUTSIDE, with outside having the lighting set, for the day/night subsystem to change.
//Outside would also have the planetary atmos and config on it.
//Inside would be a case to case basis depending on if you want it to scrub or not.. and not have the lighting.
//Along with what needs to be constructed on etc.
//This is not a ideal world so enjoy the overload.
//Parent of all our outside turfs. Both the inside and outside should be on a parent like this.
/*
	Baseturf, when we call scrapeaway() after a shoveling. So people can attach tiles
																						*/
//WARNING VERY IMPORTANT AND HACKJOBBISH - Basically this handles construction on everything.
/*
	FLOOR TILES
							*/
/*
	IMPORTANT TURFS */
//Grass with no flora generation on it.
//Dirt patches with no lighting.
//Snow with no planetary atmos, so the map doesn't atmos crash.
/*
	Basic Grass turf w Flora gen
									*/
/*
	FLORA GEN PROCEDURE
						*/
//This is mostly for flora/doodads. I don't feel like there needs to be lake/cave and animals generation..
//For the halloween map at least, so I used the f13 flora gen and appended to it instead of usin cellular automata.
//Soooo, its just tied to the turf initialize on init right now.
//Right now each segment generates independantly, but it wouldn't be hard to do it in a chain
//And check for what else is there before a list of objects has the option to appear.
//Or even change weighting based on the weight of other things that the turf has checked in its range.
//But at the same time, the stacked flora/rocks etc look pretty okay together honestly.
//On the other side of the coin, you could even adjust their pixel x and y for better thickets.
//Since after-all things in nature don't just occupy one spot each a lot of the time.
//That being said you have somewhere around 50 seconds of init, and 160 seconds of pre-game time.
//To finish generation if you need to split it up by chunks and add more checks.
//Its more time than you could ever want considering how fast it finishes like this without hiccups really.
//Ironically, not very resource intensive or slow to do this much of it.
//I have turned what used to be simple into hell.
//We can keep appending stuff here as we go, it basically just spawns it all on turf spooktimegrass on init.
//============> Current Set value // JTGSZ Tuned Reference Value <==============
//These are basically what can spawn in the lists, the number is the weight.
//The weight dictates how likely it is to spawn over other things in the lists. If you were to use pickweight.
//Lists that occur when the cluster doesn't happen but probability dictates it tries.
//I just kinda made it worse... Like a lot worse. Ngl man.
//Make sure we delete the objects if we ever change turfs
//Grass baseturf helper, more than likely completely unneeded since its set on the original turf too.
//A reference to this list is passed into area sound managers, and it's modified in a manner that preserves that reference in ash_storm.dm
// HEY!! IF THIS DOES NOT WORK CHECK LOGIN.DM !!!!!
/*
	HERE COMES THE MOTHERFUCKING RAIN
										*/
/*
	GRANDFATHER CLOCK
						*/
/*
	1:00 AM		- 	overlay-2
	2:00 AM		-	overlay-2
	3:00 AM		-	overlay-3
	4:00 AM		-	overlay-4
	5:00 AM		- 	overlay-4
	6:00 AM 	- 	overlay-6
	7:00 AM 	- 	overlay-7
	8:00 AM 	- 	overlay-7
	9:00 AM 	- 	overlay-9
	10:00 AM 	- 	overlay-10
	11:00 AM 	- 	overlay-10
	12:00 AM	-	overlay-0
								 */
/*
	The Flora that is generated onto the basic grassturf, or can be placed for tone building.
																								*/
//For ease of use, I should have appended it all here..
//Stripped the other segments out, people don't need hay and interactions right now you know man?
//Technically we could also randomize the pixel_x, pixel_y placement of these guys for more dynamic thickets.
/*
	WALLS - BECAUSE I HAD TO REPLACE ALL OF THEM ON THE MAP AND DO IT RIGHT THIS TIME
																						*/
//Due to the behavior of walls generally, I'm not going to make a microcosm of full flexibility
//and functionability for a ball map, but heres everything we are usually using for future reference.
/*
	TURF DIRECTIONALS, OVERALL SPAMMED STUFF ETC
												*/
//Mostly here because I was tired of searching the top stuff.
//Damaged plasteel plates, cause fuck varediting all these icons my man.
//Just search damturf for the tree
//Parent that goes into coasts too
//Beaches and coasts and sand and shit.
//The water that follows the coastline also animated.
//The coastline itself with sand
//Beach corners
//Shallow water same color as beach water
//Slightly darker than the beach water color.
//Motion river water with the lighting on it.
//No motion river water with the lighting on it.
//Cobblestone and all of its directions tied to the parent.
//A tiny tiny bit of the total road icon file from f13 edited for grass not desert hastily.
//Theres something like 30 pieces including crosswalks, sidewalks, potholes and other shit in it man.
//Fermis's umbrella
//Keep the mechs out of the mech arena
/*
	Shitty Hay Objects Sprited by me in a rush when I was half-asleep at 9am + The material
																							*/
//Thanks Gomble
/*
	Hay Objects hastily drawn by me at 9am in a rush.
														*/
//Shitty bed
//Awful Wicker Basket
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\32x64.dm. ----------------------
//Festive Light Poles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\festive_decals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\festive_notes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\privacy.dm. ----------------------
//How to use:
//Set the name of off the the objects you want controlled by 1 button to the same name
//Set the tar_name of this to the same name
//Press the button in game.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\turfs.dm. ----------------------
//Turfy Turfs
//lets people build
//Grey Bricks, this will hurt some peoples eyes.
//Red Bricks
//white Bricks
//Cream Bricks
//Blue Bricks
//Panel Walls
//Grey Paneled Walls
//Train Decals
//Streets Decals
//train platform stuff
//I know, this is stupid of me to do, but it's all I could get working with my brain
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\festive\wheelchair.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\dementor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\follow.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentor.dm. ----------------------
// new client var: mentor_datum. Acts the same way holder does towards admin: it holds the mentor datum. if set, the guy's a mentor.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentorhelp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentorpm.dm. ----------------------
//shows a list of clients we could send PMs to, then forwards our choice to cmd_Mentor_pm
//takes input from cmd_mentor_pm_context, cmd_Mentor_pm_panel or /client/Topic and sends them a PM.
//Fetching a message if needed. src is the sender and C is the target client
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentorsay.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentor_memo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mentor\mentor_verbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\cit_emotes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\living.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\carbon\carbon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\carbon\damage_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\carbon\reindex_screams.dm. ----------------------
//Note that the following two are for /mob/living, while the above two are for /carbon and /human
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\carbon\human\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\mob\living\carbon\human\human_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\ammunition\caseless.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\ammunition\ballistic\smg\smg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\boxes_magazines\ammo_boxes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\boxes_magazines\external\pistol.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\boxes_magazines\external\smg\smg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\bullets\bullets\smg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\pumpenergy.dm. ----------------------
/*
//	PUMP-ACTION ENERGY GUNS
*/
//PUMP ACTION DISABLER
//WARDEN'S SPECIAL vERSION
//AMMO CASINGS (fire modes)
//PROJECTILES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\toys.dm. ----------------------
/*
// NEW TOYS GUNS GO HERE
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//HITSCAN EXPERIMENT
//PROJECTILES
//AMMO CASINGS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//TOY REVOLVER
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\ballistic\handguns.dm. ----------------------
///foam stealth pistol///
/////////RAYGUN MEMES/////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\ballistic\rifles.dm. ----------------------
///////XCOM X9 AR///////
///toy memes///
///////security rifles special ammo///////
///toy memes///
//////Flechette Launcher//////
///projectiles///
///ammo casings (CASELESS AMMO CASINGS WOOOOOOOO)///
///magazine///
///the gun itself///
///unique variant///
/*/////////////////////////////////////////////////////////////
//////////////////////// Zero's Meme //////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\ballistic\spinfusor.dm. ----------------------
/////////////spinfusor stuff////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\guns\energy\energy_gun.dm. ----------------------
/*/////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\projectiles\projectiles\reusable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\astrogen.dm. ----------------------
/*
////////////////////////////////////////////////////////////////////////////////////////////////////
//										ASTROGEN
///////////////////////////////////////////////////////////////////////////////////////////////////
More fun chems!
When you take it, it spawns a ghost that the player controls. (No access to deadchat)
This ghost moves pretty quickly and is mostly invisible, but is still visible for people with eyes.
When it's out of your system, you return back to yourself. It doesn't last long and metabolism of the chem is exponential.
Addiction is particularlly brutal, it slowly turns you invisible with flavour text, then kills you at a low enough alpha. (i've also added something to prevent geneticists speeding this up)
There's afairly major catch regarding the death though. I'm not gonna say here, go read the code, it explains it and puts my comments on it in context. I know that anyone reading it without understanding it is going to freak out so, this is my attempt to get you to read it and understand it.
I'd like to point out from my calculations it'll take about 60-80 minutes to die this way too. Plenty of time to visit chem and ask for some pills to quench your addiction.
*/
//Okay so, this might seem a bit too good, but my counterargument is that it'll likely take all round to eventually kill you this way, then you have to be revived without a body. It takes approximately 50-80 minutes to die from this.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\eigentstasium.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////////////////////////
//										EIGENSTASIUM
///////////////////////////////////////////////////////////////////////////////////////////////////
//eigenstate Chem
//Teleports you to chemistry and back
//OD teleports you randomly around the Station
//Addiction send you on a wild ride and replaces you with an alternative reality version of yourself.
//During the process you get really hungry, then your items start teleporting randomly,
//then alternative versions of yourself are brought in from a different universe and they yell at you.
//and finally you yourself get teleported to an alternative universe, and character your playing is replaced with said alternative
//Main functions
//Addiction
//eigenstate END
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\enlargement.dm. ----------------------
////////////////////////////////////////////////////////////////////////////////////////////////////
//										BREAST ENLARGE
///////////////////////////////////////////////////////////////////////////////////////////////////
//Other files that are relivant:
//modular_citadel/code/datums/status_effects/chems.dm
//modular_citadel/code/modules/arousal/organs/breasts.dm
//breast englargement
//Honestly the most requested chems
//I'm not a very kinky person, sorry if it's not great
//I tried to make it interesting..!!
//Normal function increases your breast size by 0.05, 10units = 1 cup.
//If you get stupid big, it presses against your clothes, causing brute and oxydamage. Then rips them off.
//If you keep going, it makes you slower, in speed and action.
//decreasing your size will return you to normal.
//(see the status effect in chem.dm)
//Overdosing on (what is essentially space estrogen) makes you female, removes balls and shrinks your dick.
//OD is low for a reason. I'd like fermichems to have low ODs, and dangerous ODs, and since this is a meme chem that everyone will rush to make, it'll be a lesson learnt early.
////////////////////////////////////////////////////////////////////////////////////////////////////
//										PENIS ENLARGE
///////////////////////////////////////////////////////////////////////////////////////////////////
//See breast explanation, it's the same but with taliwhackers
//instead of slower movement and attacks, it slows you and increases the total blood you need in your system.
//Since someone else made this in the time it took me to PR it, I merged them.
///Ass enhancer
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\fermi_reagents.dm. ----------------------
//Fun chems for all the family
//This should process fermichems to find out how pure they are and what effect to do.
//When merging two fermichems, see above
////////////////////////////////////////////////////////////////////////////////////////////////////
//										HATIMUIM
///////////////////////////////////////////////////////////////////////////////////////////////////
//Adds a heat upon your head, and tips their hat
//Also has a speech alteration effect when the hat is there
//Increase armour; 1 armour per 10u
//but if you OD it becomes negative.
////////////////////////////////////////////////////////////////////////////////////////////////////
//										FURRANIUM
///////////////////////////////////////////////////////////////////////////////////////////////////
//OwO whats this?
//Makes you nya and awoo
//At a certain amount of time in your system it gives you a fluffy tongue, if pure enough, it's permanent.
////////////////////////////////////////////////////////////////////////////////////////////////////
//										PLUSHMIUM
///////////////////////////////////////////////////////////////////////////////////////////////////
//A chemical you can spray on plushies to turn them into a 'shell'
//Hugging the plushie turns yourself into the plushie!
//Extra interaction for which spraying it on an existing sentient plushie aheals them, so they can be revived!
///////////////////////////////////////////////////////////////////////////////////////////////
//Nanite removal
//Writen by Trilby!! Embellsished a little by me.
//Increases shock events.
///////////////////////////////////////////////////////////////////////////////////////////////
//				MISC FERMICHEM CHEMS FOR SPECIFIC INTERACTIONS ONLY
///////////////////////////////////////////////////////////////////////////////////////////////
//Consumes self on addition and shifts pH
//Turns you into a cute catto while it's in your system.
//If you manage to gamble perfectly, makes you have cat ears after you transform back. But really, you shouldn't end up with that with how random it is.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\healing.dm. ----------------------
//NEEDS ON_MOB_DEAD()
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\MKUltra.dm. ----------------------
/*
////////////////////////////////////////
//				MKULTA				  //
////////////////////////////////////////
The magnum opus of FermiChem -
Long and complicated, I highly recomend you look at the two other files heavily involved in this
modular_citadel/code/datums/status_effects/chems.dm - handles the subject's reactions
code/modules/surgery/organs/vocal_cords.dm - handles the enchanter speaking

HOW IT WORKS
Fermis_Reagent.dm
There's 3 main ways this chemical works; I'll start off with discussing how it's set up.
Upon reacting with blood as a catalyst, the blood is used to define who the enthraller is - thus only the creator is/can choose who the master will be. As a side note, you can't adminbus this chem, even admins have to earn it.
This uses the fermichem only proc; FermiCreate, which is basically the same as On_new, except it doesn't require "data" which is something to do with blood and breaks everything so I said bugger it and made my own proc. It basically sets up vars.
When it's first made, the creator has to drink some of it, in order to give them the vocal chords needed.
When it's given to someone, it gives them the status effect and kicks off that side of things. For every metabolism tick, it increases the enthrall tally.
Finally, if you manage to pump 100u into some poor soul, you overload them, and mindbreak them. Making them your willing, but broken slave. Which can only be reversed by; fixing their brain with mannitol and neurine (100 / 50u respectively) (or less with both),

vocal_cords.dm
This handles when the enchanter speaks - basically uses code from voice of god, but only for people with the staus effect. Most of the words are self explainitory, and has a smaller range of commands. If you're not sure what one does, it likely affects the enthrall tally, or the resist tally.
list of commands:

-mixables-
enthral_words
reward_words
punish_words
0
saymyname_words
wakeup_words
1
silence_words
antiresist_words
resist_words
forget_words
attract_words
orgasm_words
2
awoo_words
nya_words
sleep_words
strip_words
walk_words
run_words
knockdown_words
3
statecustom_words
custom_words
objective_words
heal_words
stun_words
hallucinate_words
hot_words
cold_words
getup_words
pacify_words
charge_words

Mixables can be used intersperced with other commands, 0 is commands that work on sleeper against (i.e. players enthralled to state 3, then ordered to wake up and forget, they can be triggered back instantly)
1 is for players who immediately are injected with the chem - no stuns, only a silence and something that draws them towrds them. This is the best time to try to fight it and you're likely to win by spamming resist, unless the enchantress has plans.
2 is the seconds stage, which allows removal of clothes, slowdown and light stunning. You can also make them nya and awoo, because cute.
3 is the finaly state, which allows application of a few status effects (see chem.dm) and allows custom triggers to be installed (kind of like nanites), again, see chem.dm
In a nutshell, this is the way you enthrall people, by typing messages into chat and managing cooldowns on the stronger words. You have to type words and your message strength is increases with the number of characters - if you type short messages the cooldown will be too much and the other player will overcome the chem.
I suppose people could spam gdjshogndjoadphgiuaodp but, the truth of this chem is that it mostly allows a casus beli for subs to give in, and everyones a sub on cit (mostly), so if you aujigbnadjgipagdsjk then they might resist harder cause you're a baddie and baddies don't deserve pets.
Also, the use of this chem as a murder aid is antithetic to it's design, the subject gains bonus resistance if they're hurt or hungry (I'd like to expland this more, I like the idea that you have to look after all of them otherwise they aren't as effective, kind of like tamagachis!). If this becomes a problem, I'll deal with it, I'm not happy with people abusing this chem for an easy murder. (I might make it so you an't strike your pet when health is too low.)
Additionaly, in lieu of previous statement - the pet is ordered to not kill themselves, even if ordered to.

chem.dm
oof
There's a few basic things that have to be understood with this status effect
1. There is a min loop which calculates the enthrall state of the subject, when the entrall tally is over a certain amount, it will push you up 1 phase.
0 - Sleeper
1 - initial
2 - enthralled
3 - Fully entranced
4 - mindbroken
4 can only be reached via OD, whereas you can increment up from 1 > 2 > 3. 0 is only obtainable on a state 3 pet, and it toggles between the two.

1.5 Chem warfare
Since this is a chem, it's expected that you will use all of the chemicals at your disposal. Using aphro and aphro+ will weaken the resistance of the subject, while ananphro, anaphro+, mannitol and neurine will strengthen it.
Additionally, the more aroused you are, the weaker your resistance will be, as a result players immune to aphro and anaphro give a flat bonus to the enthraller.
using furranium and hatmium on the enchanter weakens their power considerably, because they sound rediculous. "Youwe fweewing wery sweepy uwu" This completely justifies their existance.
The impure toxin for this chem increases resistance too, so if they're a bad chemist it'll be unlikely they have a good ratio (and as a secret bonus, really good chemists cann purposely make the impure chem, to use either to combat the use of it against them, or as smoke grenades to deal with a large party)

2. There is a resistance proc which occurs whenever the player presses resist. You have to press it a lot, this is intentional. If you're trying to fight the enchanter, then you can't click both. You usually will win if you just mash resist and the enchanter does nothing, so you've got to react.
Each step futher it becomes harder to resist, in state 2 it's longer, but resisting is still worthwhile. If you're not in state 3, and you've not got MKultra inside of you, you generate resistance very fast. So in some cases the better option will be to stall out any attempts to entrance you.
At the moment, resistance doesn't affect the commands - mostly because it's a way to tell if a state 3 is trying to resist. But this might change if it gets too hard to fight them off.
Durign state 3, it's impossible to resist if the enthraller is in your presence (8 tiles), you generate no resistance if so. If they're out of your range, then you start to go into the addiction processed
As your resistance is tied to your arousal, sometimes your best option is to wah

3. The addition process starts when the enthraller is out of range, it roughtly follows the five stages of grief; denial, anger, bargaining, depression and acceptance.
What it mostly does makes you sad, hurts your brain, and sometimes you lash out in anger.
Denial - minor brain damaged
bargaining - 50:50 chance of brain damage and brain healing
anger - randomly lashing out and hitting people
depression - massive mood loss, stuttering, jittering, hallucinations and brain damage
depression, again - random stunning and crying, brain damage, and resistance
acceptance - minor brain damage and resistance.
You can also resist while out of range, but you can only break free of a stange 3 enthrallment by hitting the acceptance phase with a high enough resistance.
Finally, being near your enthraller reverts the damages caused.
It is expected that if you intend to break free you'll need to use psicodine and mannitol or you'll end up in a bad, but not dead, state. This gives more work for medical!! Finally the true rational of this complicated chem comes out.

4. Status effects in status effects.
There's a few commands that give status effects, such as antiresist, which will cause resistance presses to increase the enthrallment instead, theses are called from the vocal chords.
They're mostly self explainitory; antiresist, charge, pacify and heal. Heals quite weak for obvious reasons. I'd like to add more, maybe some weak adneals with brute/exhaustion costs after the status is over. A truth serum might be neat too.
State 4 pets don't get status effects.

5. Custom triggers
Because it wasnt complicated enough already.
Custom triggers are set by stating a trigger word, which will call a sub proc, which is also defined when the trigger is Called
The effects avalible at the moment are:
Speak - forces pet to say a preallocated phrase in response to the trigger
Echo - sends a message to that player only (i.e. makes them think something)
Shock - gives them a seizure/zaps them
You can look this one up yourself - it's what you expect, it's cit
kneel - gives a short knockdown
strip - strips jumpsuit only
objective - gives the pet a new objective. This requires a high ammount of mental capasity - which is determined by how much you resist. If you resist enough during phase 1 and 2, then they can't give you an objective.
Feel free to add more.
triggers work when said by ANYONE, not just the enchanter.
This is only state 3 pets, state 4 pets cannot get custom triggers, you broke them you bully.

7. If you're an antage you get a bonus to resistance AND to enthralling. Thus it can be worth using this on both sides. It shouldn't be hard to resist as an antag. There are futher bonuses to command, Chaplains and chemist.
If you give your pet a collar then their resistance reduced too.
(I think thats everything?)

Failstates:
Blowing up the reaction produces a gas that causes everyone to fall in love with one another.

Creating a chem with a low purity will make you permanently fall in love with someone, and tasked with keeping them safe. If someone else drinks it, you fall for them.
*/
//Creates a gas cloud when the reaction blows up, causing everyone in it to fall in love with someone/something while it's in their system.
//For addiction see chem.dm
//For vocal commands see vocal_cords.dm
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\reagents\SDGF.dm. ----------------------
/*SDGF
////////////////////////////////////////////////////
// 		synthetic-derived growth factor			 //
//////////////////////////////////////////////////
other files that are relivant:
modular_citadel/code/datums/status_effects/chems.dm - SDGF
WHAT IT DOES

Several outcomes are possible (in priority order):

Before the chem is even created, there is a risk of the reaction "exploding", which produces an angry teratoma that attacks the player.
0. Before the chem is activated, the purity is checked, if the purity of the reagent is less than 0.5, then sythetic-derived zombie factor is metabolised instead
	0.1 If SDZF is injected, the chem appears to act the same as normal, with nutrition gain, until the end, where it becomes toxic instead, giving a short window of warning to the player
		0.1.2 If the player can take pent in time, the player will spawn a hostile teratoma on them (less damaging), if they don't, then a zombie is spawned instead, with a small defence increase propotional to the volume
	0.2 If the purity is above 0.5, then the remaining impure volume created SDGFtox instead, which reduces blood volume and causes clone damage
1.Normal function creates a (another)player controlled clone of the player, which is spawned nude, with damage to the clone
	1.1 The remaining volume is transferred to the clone, which heals it over time, thus the player has to make a substantial ammount of the chem in order to produce a healthy clone
	1.2 If the player is infected with a zombie tumor, the tumor is transferred to the ghost controlled clone ONLY.
2. If no player can be found, a brainless clone is created over a long period of time, this body has no controller.
	2.1 If the player dies with a clone, then they play as the clone instead. However no memories are retained after splitting.
3. If there is already a clone, then SDGF heals clone, fire and brute damage slowly. This shouldn't normalise this chem as the de facto clone healing chem, as it will always try to make a ghost clone, and then a brainless clone first.
4. If there is insuffient volume to complete the cloning process, there are two outcomes
	4.1 At lower volumes, the players nutrition and blood is refunded, with light healing
	4.2 At higher volumes a stronger heal is applied to the user

IMPORTANT FACTORS TO CONSIDER WHILE BALANCING
1. The most important factor is the required volume, this is easily edited with the metabolism rate, this chem is HARD TO MAKE, You need to make a lot of it and it's a substantial effort on the players part. There is also a substantial risk; you could spawn a hotile teratoma during the reation, you could damage yourself with clone damage, you could accidentally spawn a zombie... Basically, you've a good chance of killing yourself.
	1.1 Additionally, if you're trying to make SDZF purposely, you've no idea if you have or not, and that reaction is even harder to do. Plus, the player has a huge time window to get to medical to deal with it. If you take pent while it's in you, it'll be removed before it can spawn, and only spawns a teratoma if it's late stage.
2. The rate in which the clone is made, This thing takes time to produce fruits, it slows you down and makes you useless in combat/working. Basically you can't do anything during it. It will only get you killed if you use it in combat, If you do use it and you spawn a player clone, they're gimped for a long time, as they have to heal off the clone damage.
3. The healing - it's pretty low and a cyropod is more Useful
4. If you're an antag, you've a 50% chance of making a clone that will help you with your efforts, and you've no idea if they will or not. While clones can't directly harm you and care for you, they can hinder your efforts.
5. If people are being arses when they're a clone, slap them for it, they are told to NOT bugger around with someone else character, if it gets bad I'll add a blacklist, or do a check to see if you've played X amount of hours.
	5.1 Another solution I'm okay with is to rename the clone to [M]'s clone, so it's obvious, this obviously ruins anyone trying to clone themselves to get an alibi however. I'd prefer this to not be the case.
	5.2 Additionally, this chem is a soft buff to changelings, which apparently need a buff!
	5.3 Other similar things exist already though in the codebase; impostors, split personalites, abductors, ect.
6. Giving this to someone without concent is against space law and gets you sent to gulag.
*/
//Clone serum #chemClone
//Main SDGF chemical
//Unobtainable, used in clone spawn.
//Unobtainable, used if SDGF is impure but not too impure
//Fail state of SDGF
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\chemistry\recipes\fermi.dm. ----------------------
//Called for every reaction step
//Called when reaction STOP_PROCESSING
//Called when temperature is above a certain threshold, or if purity is too low.
//serum
/*
/datum/chemical_reaction/fermi/astral
	name = "Astrogen"
	id = /datum/reagent/fermi/astral
	results = list(/datum/reagent/fermi/astral = 5)
	required_reagents = list(/datum/reagent/fermi/eigenstate = 1, /datum/reagent/toxin/plasma = 3, /datum/reagent/medicine/synaptizine = 1, /datum/reagent/aluminium = 5)
	//FermiChem vars:
	OptimalTempMin 			= 700
	OptimalTempMax			= 800
	ExplodeTemp 			= 1150
	OptimalpHMin 			= 10
	OptimalpHMax 			= 13
	ReactpHLim 				= 2
	CatalystFact 			= 0
	CurveSharpT 			= 1
	CurveSharppH 			= 1
	ThermicConstant 		= 25
	HIonRelease 			= 0.02
	RateUpLim 				= 15
	FermiChem				= TRUE
	FermiExplode 			= TRUE
	PurityMin 				= 0.25
*/
//So slimes can play too.
//FOR INSTANT REACTIONS - DO NOT MULTIPLY LIMIT BY 10.
//There's a weird rounding error or something ugh.
//Nano-b-gone
//secretcatchemcode, shh!! Of couse I hide it amongst cats. Though, I moved it with your requests.
//I'm not trying to be sneaky, I'm trying to keep it a secret!
//I don't know how to do hidden chems like Aurora
//ChemReactionVars:
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\objects\clothes.dm. ----------------------
//Fermiclothes!
//Clothes made from FermiChem
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\reagents\objects\items.dm. ----------------------
//A little janky with pockets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\vectorcrafts\vectorcar_heads.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\vectorcrafts\vectorcraft.dm. ----------------------
//Cars that drfit
//By Fermi!
//////////////////////////////////////////////////////////////
//					Main driving checks				    	//
//////////////////////////////////////////////////////////////
//Move the damn car
//Passive hover drift
//I got over messy process procs
//////////////////////////////////////////////////////////////
//					Movement procs						   	//
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//					Check procs						    	//
//////////////////////////////////////////////////////////////
//check the cooldown on the boost
//Make sure the clutch is on while changing gears!!
//Bounce the car off a wall
//////////////////////////////////////////////////////////////
//					Damage procs							//
//////////////////////////////////////////////////////////////
//Repairing
//Heals/damages the car
//
//////////////////////////////////////////////////////////////
//					Calc procs						    	//
//////////////////////////////////////////////////////////////
/*Calc_step_angle calculates angle based off pixel x,y movement (x,y in)
Calc angle calcus angle based off vectors
calc_speed() returns the highest var of x or y relative
calc accel calculates the acceleration to be added to vector
calc vector updates the internal vector
friction reduces the vector by an ammount to both axis*/
//How fast the car is going atm
/*
if(driver.sprinting && !(boost_cooldown))
	acceleration += boost_power //You got boost power!
	boost_cooldown = world.time + 150
	playsound(src.loc,'sound/vehicles/boost.ogg', 50, 0)
	//playsound
*/
//Returns the angle to move towards
//updates the internal speed of the car (used for crashing)
//Converts "gear" from intent to numerics
//Calculates the acceleration
//calulate the vector change
//Reduces speed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\vectorcrafts\vectortruck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\vectorcrafts\vectorvariants.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_citadel\code\modules\vectorcrafts\vector_process.dm. ----------------------
/* unsure if needed
/datum/controller/subsystem/processing/vectorcraft/Initialize()
	sync_flightsuit_processing()

/datum/controller/subsystem/processing/vectorcraft/vv_edit_var(var_name, var_value)
	..()
	switch(var_name)
		if("flightsuit_processing")
			sync_flightsuit_processing()

/datum/controller/subsystem/processing/vectorcraft/proc/sync_flightsuit_processing()
	for(var/obj/vehicle/sealed/vectorcraft/VC in processing)
		VC.sync_processing(src)
	if(flightsuit_processing == FLIGHTSUIT_PROCESSING_NONE)	//Don't even bother firing.
		can_fire = FALSE
	else
		can_fire = TRUE
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_maconha\code\datums\components\crafting\recipes\recipes_misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_maconha\code\datums\interactions\interaction_datums\lewd\rubbing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\controllers\configuration\entries\sandstorm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\controllers\configuration\entries\sandstorm_balance.dm. ----------------------
/// CRYPTOMINERS ///
// Should cryptominers work in non-atmos turf
// Cryptominer point multipliers
// Cryptominer heat thresholds
// Cryptominer heat produced
/*
 * The contained configuration values are currently unimplemented
 *
// Cryptominer processing time
/datum/config_entry/number/crypto_mining_time
	config_entry_value = 3000

// Cryptominer base payout
/datum/config_entry/number/crypto_payout_amount
	config_entry_value = 50

// Cryptominer power use
/datum/config_entry/number/crypto_power_use_idle
	config_entry_value = 20

/datum/config_entry/number/crypto_power_use_active
	config_entry_value = 200

/datum/config_entry/number/crypto_power_use_process
	config_entry_value = 20
*/
/// AUTODOC ///
// Autodoc processing time
/// BLUESPACE MINER ///
// BSM production output multiplier
// BSM minimum tier for bluespace crystals
/// TETRIS ARCADE MACHINE ///
// If the machine should skip producing science points
// Points required per prize vended
// Points required per prize vended
// Minimum score required to message admins
// Maximum research points that can be generated
// Maximum research points that can be generated
// Minimum time between giving rewards
/// R&D Machinery ///
// Should production machinery be restricted for skeleton crews?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\controllers\subsystem\interactions.dm. ----------------------
/// Makes the interactions, they're also a global list because having it as a list and just hanging around there is stupid
/// Blacklisting!
/*
 * Lewd interactions have a blacklist for certain mobs. When we evalute the user and target, both of
 * their requirements must be satisfied, and the mob must not be of a blacklisted type.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\controllers\subsystem\job.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\controllers\subsystem\language.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\action.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\ai_laws.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\shuttles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\glory_kill.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\interaction_menu_granter.dm. ----------------------
/// Attempts to open the tgui menu
/// The menu itself, only var is target which is the mob you are interacting with
/// The one interacting is clicker, the interacted is clicked.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\mood.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\riding.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\container_item\container_item.dm. ----------------------
/// Container item, an item which can be stored by specialized containers.
/// Called when parent is added to the container.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\container_item\tank_holder.dm. ----------------------
/// Tank holder item - Added to an object which can be added to a tank holder.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\crafting\recipes\recipes_misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\components\storage\concrete\dresser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\diseases\advance\symptoms\species.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\elements\holder_micro.dm. ----------------------
/// Do not inherit from /mob_holder, interactions are different.
//shoehorned (get it?) and lazy way to do instant foot pickups cause haha funny.
//TODO: add a timer to escape someone's grip dependant on size diff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\elements\skirt_peeking.dm. ----------------------
/// Alright, they've peeked us and everything, did we notice it though?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_mob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\lewd_definitions.dm. ----------------------
/*--------------------------------------------------
-------------------MOB STUFF----------------------
--------------------------------------------------
*/
//I'm sorry, lewd should not have mob procs such as life() and such in it. //NO SHIT IT SHOULDNT I REMOVED THEM
//weird procs go here
///Are we wearing something that covers our chest?
///Are we wearing something that covers our groin?
///Are we wearing something that covers our shoes?
///Handles the sex, if cumming returns true.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\lewd_interactions.dm. ----------------------
// If I could have gotten away with using a tilde in the type path, I would have.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\lewd_objects.dm. ----------------------
//Dildo changes.
//begin redds code
//end redds code
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\_interaction.dm. ----------------------
/**
	# Interactions code by HONKERTRON feat TestUnit
- Contains a lot ammount of ERP and MEHANOYEBLYA
- CREDIT TO ATMTA STATION FOR MOST OF THIS CODE, I ONLY MADE IT WORK IN /vg/ - Matt
- Rewritten 30/08/16 by Zuhayr, sry if I removed anything important.
- I removed ERP and replaced it with handholding. Nothing of worth was lost. - Vic
- Fuck you, Vic. ERP is back. - TT
- >using var/ on everything, also TRUE
- "TGUIzes" the panel because yes - SandPoot
- Makes all the code good because yes as well - SandPoot
**/
/// The base of all interactions
/// Checks if user can do an interaction, action_check is for whether you're actually doing it or not (useful for the menu and not removing the buttons)
/// Same as evaluate_user, but for target
/// Actually doing the action, has a few checks to see if it's valid, usually overwritten to be make things actually happen and what-not
/// Display the message
/// After the interaction, the base only plays the sound and only if it has one
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\interaction_definitions.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\breasts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\facefuck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\feet.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\finger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\frotting.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\fuck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\handjob.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\kiss.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\lick.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\mount.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\nipsuck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\nuts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\oral.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\cursed\earfuck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\cursed\eyefuck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\self\breasts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\self\finger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\interactions\interaction_datums\lewd\self\jack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\mood_events\generic_negative_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\mood_events\needs_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\mutations\combined.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\ruins\lavaland.dm. ----------------------
//always spawn sif's summoner sword
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\status_effects\buffs.dm. ----------------------
//argent
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\status_effects\debuffs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\traits\negative.dm. ----------------------
// You can pick languages for your character, if you don't pick anything, enjoy the rest of the round understanding nothing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\traits\neutral.dm. ----------------------
/*
/datum/quirk/infertile
	name = "Infertile"
	desc = "For one reason or another you simply don't seem able to get pregnant, no matter how hard you try."
	value = 0
	human_only = TRUE
	mob_trait = TRAIT_INFERTILE
	gain_text = span_notice("Your womb starts feeling dry and empty, all the life in it begins to fade away...")
	lose_text = span_love("You feel the warm blow of life flooding your womb, full of newfound, vibrant fertility!")
	medical_record_text = "Patient doesn't seem able to ovulate properly..."
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\traits\_quirk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\datums\wires\firealarm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\atoms.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\area\ship_area.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\area\areas\shuttles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\area\areas\ruins\lavaland.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\autodoc.dm. ----------------------
// Configuration defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\cryopod.dm. ----------------------
//Teleporters themselves. Also holy crap, what a code crunch i did on this!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\cryptominers.dm. ----------------------
// Configuration defines
/*
 * Some entries are currently unimplemented
 *
#define CRYPTO_POWER_USE		CONFIG_GET(number/crypto_power_use_process)
#define CRYPTO_POWER_IDLE		CONFIG_GET(number/crypto_power_use_idle)
#define CRYPTO_POWER_ACTIVE		CONFIG_GET(number/crypto_power_use_active)
#define CRYPTO_MININGTIME		CONFIG_GET(number/crypto_mining_time)
#define CRYPTO_MININGPOINTS		CONFIG_GET(number/crypto_payout_amount)
*/
/*
 * Some entries are currently unimplemented
 *
#undef CRYPTO_POWER_USE
#undef CRYPTO_POWER_IDLE
#undef CRYPTO_POWER_ACTIVE
#undef CRYPTO_MININGTIME
#undef CRYPTO_MININGPOINTS
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\Sleeper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\computer\cloning.dm. ----------------------
// Proc for scanning a mob in a cloning machine
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\computer\arcade\tetris.dm. ----------------------
// Configuration defines
// Cooldown defines
// Remove defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\pipe\construction.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\telecomms\machine_interactions.dm. ----------------------
// Additional Options for certain machines. Use this when you want to add an option to a specific machine.
// Example of how to use below.
// The topic for Additional Options. Use this for checking href links for your specific option.
// Example of how to use below.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\machinery\telecomms\machines\receiver.dm. ----------------------
//Code for the interceptor circuit
//makeshift receiver used for the circuit, so that we don't
//have to edit radio.dm and other shit
// End
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\mecha\mecha.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\mecha\mecha_construction_paths.dm. ----------------------
//Power armor: now actually built!
/// Better than writing all of that new crap for something that's not even a mech.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\mecha\mecha_parts.dm. ----------------------
//////////////////////////////
//////Custom Mech Parts //////
//////////////////////////////
///////// Power Armor (Not actually a mech but meh)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\effects\contraband.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\effects\decals\cleanable\lewd_decals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\borg_shapeshifter.dm. ----------------------
/**
  * check_menu: Checks if we are allowed to interact with a radial menu
  *
  * Arguments:
  * * user The mob interacting with a menu
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\BSRPD.dm. ----------------------
/*
CONTAINS:
BSRPD
*/
// SKYRAT CHANGE: Made BSRPD into a subtype of RPD, additionally made it work at range.
// End skyrat edit 
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\cards_ids.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\chrono_eraser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\cigs_lighters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\computermath.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\cosmetics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\extinguisher.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\fleshlight.dm. ----------------------
/**
 * # Hyperstation 13 fleshlight
 *
 * Humbley request this doesnt get ported to other code bases, we strive to make things unique on our server and we dont have a lot of coders
 * but if you absolutely must. please give us some credit~ <3
 * made by quotefox and heavily modified by SandPoot
*/
/**
 * # Hyperstation 13 portal fleshlight
 * kinky!
*/
/**
 * # Hyperstation 13 portal underwear
 * Wear it, cannot be worn if not pointing to the bits you have.
*/
// portal fleshlight box
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\plushes.dm. ----------------------
// Honestly, Saliith was just sad when he made this. Leave this file in the game to let people hug him.
// i agree and support - one of the spriters
// Pinpointer for plushie toy
// cube guy thing. beware, very silly
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\circuitboards\computer_circuitboards.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\circuitboards\machine_circuitboards.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\devices\dogborg_sleeper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\devices\extra_arm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\devices\PDA\PDA.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\devices\radio\headset.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\plushes\goat_boss.dm. ----------------------
//i hate these fucking goats but i can't murder them, for i know they will haunt me in my sleep if i do so. so i nerf them instead.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\plushes\plushes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\robot\robot_upgrades.dm. ----------------------
/* Shit doesnt work, work on it later
/obj/item/borg/upgrade/plasma
	name = "engineering cyborg plasma resource upgrade"
	desc = "An upgrade that allows cyborgs the ability to use plasma and assorted plasma products."
	icon_state = "cyborg_upgrade3"
	require_module = 1
	module_type = list(/obj/item/robot_module/engineering)
	module_flags = BORG_MODULE_ENGINEERING
*/
/* Shit doesnt work, do it later
/obj/item/borg/upgrade/plasma/action(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if(.)
		R.module.basic_modules += /obj/item/stack/sheet/plasmaglass/cyborg
		R.module.add_module(/obj/item/stack/sheet/plasmaglass/cyborg, FALSE, TRUE)
		R.module.basic_modules += /obj/item/stack/sheet/plasmarglass/cyborg
		R.module.add_module(/obj/item/stack/sheet/plasmarglass/cyborg, FALSE, TRUE)
		R.module.basic_modules += /obj/item/stack/sheet/plasteel/cyborg
		R.module.add_module(/obj/item/stack/sheet/plasteel/cyborg, FALSE, TRUE)
		R.module.basic_modules += /obj/item/stack/sheet/mineral/plasma/cyborg
		R.module.add_module(/obj/item/stack/sheet/mineral/plasma/cyborg, FALSE, TRUE)

/obj/item/borg/upgrade/plasma/deactivate(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if (.)
		R.module.remove_module(/obj/item/stack/sheet/plasmaglass/cyborg, TRUE)
		R.module.remove_module(/obj/item/stack/sheet/plasmarglass/cyborg, TRUE)
		R.module.remove_module(/obj/item/stack/sheet/plasteel/cyborg, TRUE)
		R.module.remove_module(/obj/item/stack/sheet/mineral/plasma/cyborg, TRUE)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\sheets\glass.dm. ----------------------
/* commented out to pick shit up
/obj/item/stack/sheet/plasmaglass/cyborg/get_amount()
	return min(round(plasource.energy / placost), round(glasource.energy / glacost))

/obj/item/stack/sheet/plasmaglass/cyborg/use(used, transfer = FALSE) // Requires special checks, because it uses two storages
	plasource.use_charge(used * placost)
	glasource.use_charge(used * glacost)

/obj/item/stack/sheet/plasmaglass/cyborg/add(amount)
	plasource.add_charge(amount * placost)
	glasource.add_charge(amount * glacost)
*/
/* commented out to pick shit up
/obj/item/stack/sheet/plasmarglass/cyborg/get_amount()
	return min(round(glasource.energy / glacost), round(plasource.energy / placost))

/obj/item/stack/sheet/plasmarglass/cyborg/use(used, transfer = FALSE) // Requires special checks, because it uses two storages
	glasource.use_charge(used * glacost)
	plasource.use_charge(used * placost)

/obj/item/stack/sheet/plasmarglass/cyborg/add(amount)
	glasource.add_charge(amount * glacost)
	plasource.add_charge(amount * placost)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\sheets\mineral.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\sheets\sheet_types.dm. ----------------------
/* Commented out to pick up shit
/obj/item/stack/sheet/plasteel/cyborg/get_amount()
	return min(round(source.energy / metcost), round(plasource.energy / placost))

/obj/item/stack/sheet/plasteel/cyborg/use(used, transfer = FALSE) // Requires special checks, because it uses two storages
	source.use_charge(used * metcost)
	plasource.use_charge(used * placost)

/obj/item/stack/sheet/plasteel/cyborg/add(amount)
	source.add_charge(amount * metcost)
	plasource.add_charge(amount * placost)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_plasteel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_plastitanium.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_reskinning.dm. ----------------------
/////////////////////
// Tile reskinning //
/////////////////////
// Q: What is this?
// A: A simple function to allow you to change what tiles you place with a stack of tiles.
// Q: Why do it this way?
// A: This allows players more freedom to do beautiful-looking builds.
// Q: Great! Can I use this for all floors?
// A: Yep! Just change the tile stack's `tile_reskin_lists` list variable and set which variants you want to be able to convert into.
/**
  * Caches associative lists with type path index keys and images of said type's initial icon state (typepath -> image).
  */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_titanium.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_types.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\stacks\tiles\tile_wooden.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\storage\backpack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\storage\bags.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\storage\boxes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tanks\tanks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tanks\tank_types.dm. ----------------------
// *
// * GENERIC
// *
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tools\crowbar.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tools\screwdriver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tools\weldingtool.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tools\wirecutters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\items\tools\wrench.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\dresser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\fauna.dm. ----------------------
///obj/item/kirbyplants/diamond
//	name = "diamond plant"
//	desc = "Shining diamond plant that doesnt even glow."
//	icon = 'modular_nostra/icons/obj/flora/plants.dmi'
//	icon_state = "plant-03"
// not used cause requires lots of respriting which im lazy to do now
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\ghost_role_spawners.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\ladders.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\tank_holder.dm. ----------------------
///?
/// Call this after taking the tank from contents in order to update references, icon
/// and density.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\crates_lockers\closets\secure\cargo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\crates_lockers\closets\secure\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\crates_lockers\closets\secure\medical.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\crates_lockers\closets\secure\scientist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\crates_lockers\closets\secure\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\objects\structures\lavaland\necropolis_tendril.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\open.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\minerals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\base_icon_state_overrides.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\misc_floor.dm. ----------------------
// SHOWER DRAIN
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\plasteel_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\plastitanium_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\plating.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\game\turfs\simulated\floor\titanium_floor.dm. ----------------------
// OLD TITANIUM (titanium floor tiles before PR #50454)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\admin\verbs\fix_air.dm. ----------------------
// Proc taken from yogstation, credit to nichlas0010 for the original
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\admin\verbs\randomverbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\arousal\arousal.dm. ----------------------
/*
/mob/living/proc/receive_climax(mob/living/partner, obj/item/organ/genital/receiver = null, obj/item/organ/genital/source_gen, spill = TRUE)
	if(!ishuman(src))
		return
	var/mob/living/carbon/human/h_self = src
	var/mob/living/carbon/human/h_partner = null
	if(ishuman(partner))
		h_partner = partner

	if(receiver)
		switch(receiver.slot) //Feel free to add more options for other receiving genitals if you desire
			if(ORGAN_SLOT_VAGINA)
				var/obj/item/organ/genital/womb/W = h_self.getorganslot(ORGAN_SLOT_WOMB)
				if(W && h_partner && !spill && !HAS_TRAIT(h_self, TRAIT_INFERTILE) && istype(source_gen, /obj/item/organ/genital/penis))
					var/obj/item/organ/genital/penis/Sp = source_gen
					if(prob(30 + clamp((70*(rand() + (h_self.sexual_potency + h_partner.sexual_potency)/200)), 0, 70)) && !W.impregnated && !Sp.equipment[GENITAL_EQUIPEMENT_CONDOM] && (Sp.linked_organ.fluid_id == /datum/reagent/consumable/semen))
						W.impregnated = TRUE
						log_game("Debug: [h_self] has been impregnated by [h_partner]")
						to_chat(src, span_userlove("You feel your hormones change, and a motherly instinct take over."))
						var/obj/item/organ/genital/breasts/B = h_self.getorganslot(ORGAN_SLOT_BREASTS)
						if(B)
							B.fluid_rate *= 2
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\arousal\genitals.dm. ----------------------
/// Toggles whether such genital can always be accessed
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\arousal\genital_sprite_accessories.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\arousal\organs\breasts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\arousal\organs\womb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\atmospherics\machinery\pipes\bluespace.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_item.dm. ----------------------
// Do not place anything here, this is only the root everything else uses
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_market.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_items\clothing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_items\gadgets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_items\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\blackmarket\blackmarket_items\weapons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\packs\emergency.dm. ----------------------
/*crack distilled
/datum/supply_pack/emergency/syndicate
	name = "NULL_ENTRY"
	desc = "(#@&^$THIS PACKAGE CONTAINS 30TC WORTH OF SOME RANDOM SYNDICATE GEAR WE HAD LYING AROUND THE WAREHOUSE. GIVE EM HELL, OPERATIVE@&!*() "
	hidden = TRUE
	cost = 100000 // 100k
	contains = list()
	crate_name = "emergency crate"
	crate_type = /obj/structure/closet/crate/internals
	uplink_flags = UPLINK_TRAITORS

/datum/supply_pack/emergency/syndicate/fill(obj/structure/closet/crate/C)
	var/crate_value = 30
	var/list/uplink_items = get_uplink_items(uplink_flags, FALSE)
	while(crate_value)
		var/category = pick(uplink_items)
		var/item = pick(uplink_items[category])
		var/datum/uplink_item/I = uplink_items[category][item]
		if(!I.surplus_nullcrates || prob(100 - I.surplus_nullcrates))
			continue
		if(crate_value < I.cost)
			continue
		crate_value -= I.cost
		new I.item(C)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\packs\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\packs\supply_pack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\cargo\packs\vending.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\asset_cache.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\preferences.dm. ----------------------
//SKYRAT EDIT - extra language
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\preferences_savefile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\accessories.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\backpack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\boxers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\hands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\head.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\shirts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\socks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\suit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\uniform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\wrists.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\client\loadout\_security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\refactor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\gloves\accessories.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\gloves\_gloves.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\head\helmet.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\head\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\head\misc_special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\masks\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\outfits\standard.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\shoes\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\spacesuits\chronosuit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\spacesuits\hardsuit.dm. ----------------------
//Power armor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\suits\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\under\costumes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\under\miscellaneous.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\under\uniform.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\under\_under.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\underwear\boxers.dm. ----------------------
// please make sure they're sorted alphabetically and categorized, above is the only exception
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\underwear\shirts.dm. ----------------------
// please make sure they're sorted alphabetically and categorized, above is the only exception
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\underwear\socks.dm. ----------------------
// please make sure they're sorted alphabetically and categorized, above is the only exception
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\underwear\_underwear.dm. ----------------------
//Fuck it we making underwear actual items
///Proc to check if undershirt is hidden.
///Proc to check if underwear is hidden.
///Proc to check if socks are hidden.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\wrists\watches.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\clothing\wrists\_wrists.dm. ----------------------
//wrist items (now we do, ha ha!)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\crafting\recipes\recipes_misc.dm. ----------------------
////////////
//Unsorted//
////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\hydroponics\hydroponics.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\hydroponics\grown\flowers.dm. ----------------------
// Carbon Rose
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\hydroponics\grown\misc.dm. ----------------------
//Oxyboo
//I actually have no idea no idea why i fixed this for monstermos, but swayde, you owe me one!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\integrated_electronics\subtypes\input.dm. ----------------------
//Interceptor
//Intercepts a telecomms signal, aka a radio message (;halp getting griff)
//Inputs:
//On (Boolean): If on, the circuit intercepts radio signals. Otherwise it does not. This doesn't affect no pass!
//No pass (Boolean): Decides if the signal will be silently intercepted
//					(false) or also blocked from being sent on the radio (true)
//Outputs:
//Source: name of the mob
//Job: job of the mob
//content: the actual message
//spans: a list of spans, there's not much info about this but stuff like robots will have "robot" span
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\integrated_electronics\subtypes\manipulation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\integrated_electronics\subtypes\output.dm. ----------------------
//Text to radio
//Outputs a simple string into radio (good to couple with the interceptor)
//Input:
//Text: the actual string to output
//Frequency: what channel to output in. This is a STRING, not a number, due to how comms work. It has to be the frequency without the dot, aka for common you need to put "1459"
//sandstorm original - pointer
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\jobs\job_types\prisoner.dm. ----------------------
// I'm letting you get 5 spawn positions because latejoin is broken, do not disappoint
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\jobs\job_types\_job.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\jobs\job_types\_job_alt_titles.dm. ----------------------
//Command
//Engineering
//Service
//Science
//Medical
//Security
//Cargo
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\keybindings\keybind\carbon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\language\dragon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\language\language.dm. ----------------------
// And so, people started making weird sounds that only similar ones could understand and do them too.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mining\machine_bluespaceminer.dm. ----------------------
// Configuration defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mining\machine_vending.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mining\equipment\kinetic_crusher.dm. ----------------------
//kinetic destroyer (premium crusher)
//legion (the big one!)
//rogue process
//shambling miner
// I'm gonna be honest, i cannot trust admins to be smart about it.
//lava imp
//traitor crusher
//king goat
//hierophant crusher small changes
//gladiator
//gladiator zweihander - it's just a one handed crusher
//great brown wolf sif
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mining\equipment\regenerative_core.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mining\lavaland\necropolis_chests.dm. ----------------------
//boss chests
//gladiator
//bubblegum
//super shotty changes (meat hook instead of bursto)
//crucible
//praetor suit and helmet
//drake
//ghost sword buff because it is dogshit
//colossus
//crystal choosing thing from colosssus
//normal chests
//Nerfing those on the chest because too OP yada yada
//legion
//dagoth ur mask
//glaurung (needs unique loot and crusher trophy)
//Sif stuff
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Sword Of The Forsaken=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
/*Videos on what the sword can do:
**
**Attacking: ----------	https://bungdeep.com/Sif/Sword_of_the_Forsaken_Attack.mp4
**Butchering: --------- https://bungdeep.com/Sif/Sword_of_the_Forsaken_Butcher.mp4
**Dodging: ------------ https://bungdeep.com/Sif/Sword_of_the_Forsaken_Block_Melee.png
**Projectile Dodging: - https://bungdeep.com/Sif/Sword_of_the_Forsaken_Block.png
**
*/
//Enables the sword to butcher bodies
//Sword blocking attacks, really hard to block projectiles but still possible.
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=End of Sworf Of The Forsaken=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Necklace Of The Forsaken=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
/*Videos on what the necklace can do:
**
**Binding the necklace to yourself: ------- https://bungdeep.com/Sif/Necklace_of_the_Forsaken_Binding.mp4
**Reviving when died: --------------------- https://bungdeep.com/Sif/Necklace_of_the_Forsaken_Death_Revive.mp4
**Becomes a cosmetic item after it is used: https://bungdeep.com/Sif/Necklace_of_the_Forsaken_Revive_Used.png
**
*/
//Apply a temp buff until the necklace is used
//Revive the user and remove buffs
//Remove buffs
//Add action
//What happens when the user clicks on datum
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=End of Necklace of The Forsaken=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
//Sifs loot chest
//Rogue process loot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\misc\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\mob.dm. ----------------------
// Configuration defines
// Only Clients should have a panel for them, okay?
///Adjust the thirst of a mob
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\mob_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\new_player\sprite_accessories\antenna.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\new_player\sprite_accessories\body_markings.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\new_player\sprite_accessories\ears.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\new_player\sprite_accessories\frills.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\new_player\sprite_accessories\tails.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\dead\observer\observer.dm. ----------------------
//This is more of a hacky fix for performance due to rune-chat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\combat_indicator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\living.dm. ----------------------
/// Returns false on failure
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\living_movement.dm. ----------------------
//#define MOB_LAYER 				4   // This is a byond standard define
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\ssd_indicator.dm. ----------------------
//This proc should stop mobs from having the overlay when someone keeps jumping control of mobs, unfortunately it causes Aghosts to have their character without the SSD overlay, I wasn't able to find a better proc unfortunately
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\typing_indicator_overrides.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\carbon.dm. ----------------------
//It's here so it doesn't make a big mess on randomverbs.dm,
//also because of this you can proccall it, why would you if you have smite?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\life.dm. ----------------------
//Hyper's creampie for some reason
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\show.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\human_stripping.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\species.dm. ----------------------
/*	switch(get_thirst(src))
		if(THIRST_LEVEL_THIRSTY to INFINITY)
			H.clear_alert("thirst")
		if(THIRST_LEVEL_PARCHED to THIRST_LEVEL_THIRSTY)
			H.throw_alert("thirst", /atom/movable/screen/alert/thirsty)
		if(0 to THIRST_LEVEL_PARCHED)
			H.throw_alert("thirst", /atom/movable/screen/alert/dehydrated)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\species_types\anthropomorph.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\species_types\ipc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\species_types\lizardpeople.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\carbon\human\species_types\synthliz.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\silicon\silicon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\silicon\ai\ai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\silicon\ai\vox_sounds.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\silicon\robot\robot.dm. ----------------------
/// Allows "cyborg" players to change gender at will
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\silicon\robot\robot_modules.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\bot\hugbot.dm. ----------------------
//HUGBOT
//HUGBOT PATHFINDING
//HUGBOT ASSEMBLY
// Variables sent to TGUI
// Actions received from TGUI
// Skyrat exclusive: Tipping over hugbots. Because fuck medbots.
// if someone tipped us over, check whether we should ask for help or just right ourselves eventually
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\friendly\doges.dm. ----------------------
//Borrowed from Skyrat, this is not sandstorm original content
//cheems, the true cargo pet
//note: will probably add hat and fluff functionality later
//note 2: will probably get a better sprite later
//note 3: ignore note 2 the sprite is actually good now
//cheemgularity
/* disabled for now because error: maximum number of internal arrays exceeded (65535)
/obj/singularity/proc/consume(atom/A)
	var/gain = A.singularity_act(current_size, src)
	src.energy += gain
	if(istype(A, /obj/machinery/power/supermatter_crystal) && !consumedSupermatter)
		desc = "[initial(desc)] It glows fiercely with inner fire."
		name = "supermatter-charged [initial(name)]"
		consumedSupermatter = 1
		set_light(10)
	if(istype(A, /mob/living/simple_animal/pet/dog/cheems))
		new /obj/singularity/cheemgularity(get_turf(src))
		qdel(src)

/obj/singularity/cheemgularity
	name = "cheemgularity"
	desc = "Praise cheem."
	icon = 'modular_sand/icons/obj/singularity.dmi'
	icon_state = "cheemgulo_s1"

/obj/singularity/cheemgularity/expand(force_size)
	..()
	switch(force_size)
		if(STAGE_ONE to STAGE_TWO)
			icon = initial(icon)
			icon_state = "cheemgulo_s1"
		if(STAGE_TWO to STAGE_THREE)
			icon = 'modular_sand/icons/effects/96x96.dmi'
			icon_state = "cheemgulo_s3"
		if(STAGE_THREE to STAGE_FOUR)
			icon = 'modular_sand/icons/effects/160x160.dmi'
			icon_state = "cheemgulo_s5"
		if(STAGE_FOUR to STAGE_FIVE)
			icon = 'modular_sand/icons/effects/224x224.dmi'
			icon_state = "cheemgulo_s7"
		if(STAGE_FIVE to STAGE_SIX)
			icon = 'modular_sand/icons/effects/288x288.dmi'
			icon_state = "cheemgulo_s9"
		if(STAGE_SIX)
			icon = 'modular_sand/icons/effects/352x352.dmi'
			icon_state = "cheemgulo_s11"
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\alien.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\blood_drunk_miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\bubblegum.dm. ----------------------
/*

BUBBLEGUM

Removes slaughterlings (because they are bullshit), instead replacing them with the blood rending thing from tg

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\colossus.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\demonic_frost_miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\drake.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\gladiator.dm. ----------------------
/* THE GLADIATOR
* Has 4 special attacks, which are used depending on the phase (the gladiator has 3 phases).
* AoE Zweihander swing: In a square of 4×4, he swings his sword in a 360 degree arc, damaging anything within it.
* Shield bash: The gladiator charges and chases you with increased speed for 21 tiles, if he makes contact, he bashes you and knocks you down.
He will stun himself for up to 2.25 seconds, no matter the result of the charge attack; This leaves him vulnerable for attacks for a few precious moments.
* Bone daggers: At random times if the player is running, he can throw bone daggers that will go considerably fast in the players direction.
They deal 35 brute (armor is considered).
* Additionally, he gets more speedy and aggressive as he raises in phase, at the cost of some special attacks.
* On phase 1, the gladiator has a 50% block chance for any attack.
* Loot:
* Gladiator tower shield - A powerful and indestructible shield, that can also be used as a surfboard.
* Shielding modkit - A modkit that grants your PKA a 15% chance to block any incoming attack while held.
* Tomahawk - Basically a one handed crusher to complement the shield.
*/
//Aggression helpers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\glaurung.dm. ----------------------
/*

GLAURUNG

Glaurung is a special Ash Drake for admemery roleplay. It's distinguishing features are the name, description, and the glowing blue eyes.

When not controlled by a player, it acts as a normal ashdrake, but with various changes.

Whenever possible, the drake will breathe fire in the direction it faces, igniting and heavily damaging anything caught in the blast.
It also often causes fire to rain from the sky - many nearby turfs will flash red as a fireball crashes into them, dealing damage to anything on the turfs.
Glaurung is unable to fly due to excess years of damage to its wings, but it is much faster on its legs.

When an ash drake dies, it leaves behind a chest that can contain four things:
 1. A spectral blade that allows its wielder to call ghosts to it, enhancing its power
 2. A lava staff that allows its wielder to create lava
 3. A spellbook and wand of fireballs
 4. A bottle of dragon's blood with several effects, including turning its imbiber into a drake themselves.

When butchered, they leave behind diamonds, sinew, bone, and ash drake hide. Ash drake hide can be used to create a hooded cloak that protects its wearer from ash storms.

Difficulty: Medium

*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\hierophant.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\king_of_goats.dm. ----------------------
/*
KING OF GOATS
The king of goat is inside a 9x9 arena protected by two guards while during stage one it is generally a cake walk the later stages however can prove extremely challenging and downright impossible for less skilled miners..
The king goat is as indicated by his name the king of all goats and as such if you attempt to fight him you will learn why he is the king in the first place...
It has no ranged attacks what so ever but makes up for it by being confined in a small space and having the ability to summon guards, charge at his enemy and do a aoe explosion attack which can prove devistating for most miners.
The three stages of the king goat:
 Stage 1: The king goat is pretty much just a slightly more robust regular goat, the king will proceed to charge at you full force in the hopes of taking you out easily but can be easily defeated by even a unexperienced miner.
 Stage 2: This is where things start heating up. At this stage the king goat will become slightly larger and start doing special attacks which range from summoning guards to come to his aid to stomping his hooves on the ground causing the arena to shake and a aoe explosion to appear around him most miners do not make it pass this stage but if you do...
 Stage 3: Oh boy your in for it now at this stage the king goat will completly heal and grow slightly bigger and start glowing it has the exact same attacks as stage 2 but is much more intimidating if you can defeat him at stage three he will fall over dead on the ground and drop a ladder so you may now leave the arena but dont forget to grab the loot first!
The loot:
The goat gun: This weapon as the name implies fires goats at your enemies knocking them down and doing a bit of brute damage it self recharges and combined with the goat pope hat or king goat pelt can lead to some interesting shenigans,
The king goat pelt: Hope you brought a knife cause your gonna need to butcher the king goats corpse to get this prize. Once you butcher the king goat you can grab his pelt and wear it on your head as armor, boasting decent bomb resistance and slightly better gun and laser resistance then the drake helm at the cost of slightly reduced melee protection this is THE prize to show who the king of lavaland really is around here! Also makes goats friendly towards you as long as you are wearing it for they will see you as their new king.
Difficulty: Insanely Hard
*/
//Visager's tracks 'Battle!' and 'Miniboss Fight' from the album 'Songs from an Unmade World 2' are available here
//http://freemusicarchive.org/music/Visager/Songs_From_An_Unmade_World_2/ and are made available under the CC BY 4.0 Attribution license,
//which is available for viewing here: https://creativecommons.org/licenses/by/4.0/legalcode
//the king and his court
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\legion.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\megafauna.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\rogueprocess.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\sand.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\megafauna\sif.dm. ----------------------
/*
Original PR made by sushifish on Russ Station. Bob joga just did a lazy ass port.
SIF (Sprites and ideas by MetalGearMan)

Sif spawns randomly in lavaland when it can, in the form of a sword which the user needs to interact with in order to summon Sif.

Speical attacks:
	- When Sif's able to he will charge his current target with 200% increased speed for 1 second, getting right next to his target.
	- Sif can also do an AOE spin attack.

	Links for videos on all of Sif's modes and attacks:

	Summon:			  https://bungdeep.com/Sif/Sif_Summon.mp4
	Angered Stage:	  https://bungdeep.com/Sif/Sif_Angered.mp4
	Enraged Stage:	  https://bungdeep.com/Sif/Sif_Enraged.mp4

	Projectile Dodge: https://bungdeep.com/Sif/Sif_Dodge.mp4

	AOE Spin:		  https://bungdeep.com/Sif/Sif_Spin.mp4
	Charge: 		  https://bungdeep.com/Sif/Sif_Charge.mp4
	Spin and Charge:  https://bungdeep.com/Sif/Sif_Spin_and_charge.mp4

	Death:			  https://bungdeep.com/Sif/Sif_Death.mp4

Sif has three stages:
 1. Normal state when it has health above 50%.
 2. When Sif reaches below 50% health it enters a angered state, which makes Sif's movement speed faster and attack speed slower,
 	with increased usage of specials.
 3. At 20% health Sif is significantly slowed but constantly doing special attacks.

WHEN SIF IS ANGERED (Stage 2):
	- Sif's specials take 50% less time to recharge from (Normal = 100) to (Angered = 50)
	- Sif's attack speed decreased by 30% and movement speed increased by 50%

WHEN SIF IS ENRAGED (Stage 3):
	- Sif's specials take 60% less time to recharge from (Angered = 50) to (Enraged = 30)
	- Sif is way slower but does more damage, as well as chances to dodge projectiles and melee attacks more often.

When Sif dies, it leaves behind a:
	!! Sword Of The Forsaken !! -> Giant ass sword that does damage. Small chance of blocking hits and almost no chance to block projectiles.
	!! Necklace Of The Forsaken !! -> Works by instantly reviving or fully healing the user at their discretion (one time use and can be used when dead, knocked out or alive)
	!! Dark Energy !! (If killed with a kinetic crusher) -> A Kinetic Crusher attachment which performs a bash attack for 100 damage (only works on big boy mobs like megafaunas)
Difficulty: Medium
*/
//Sword structure, used to summon sif.
//When the sword is touched it will spawn sif.
//Sif's charge attack
//Sif's AOE spin attack
//Chance to dodge projectiles when angered or enraged
//Sets Sif's angered stats
//Sets Sif's enraged stats
//Chooses a random special
//Attack speed delay
//bob's note: everything here is well coded except this like why would you not just use changeNext_move()
//Immune to explosions when spinning or charging
//stop spinning if you lose the target
//Activated when sif collides with target when charging.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\basilisk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\goldgrub.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\goliath.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\hivelord.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\imp.dm. ----------------------
//A speedy, annoying and scaredy demon
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\shamblingminer.dm. ----------------------
//A slow, melee, crazy miner.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\candy.dm. ----------------------
/**
  * # Candy
  *
  * Kind of like bubblegum's rebellious teenage son/daughter.
  * Has 4 attacks.
  * Charge - Charges at it's target.
  * Bloody Trap - Traps it's target between some walls, and then charges at them.
  * Meat Shield - Knockbacks all targets in the 3 tiles he faces, and then creates a wall.
  * Knockdown - Deals damage and knockbacks all targets in a 2 tile radius.
  */
// Candy actions
// Candy helpers
//loot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\drakeling.dm. ----------------------
/**
  * # Drakeling
  *
  * A small drake/dragon.
  * Has four attacks.
  * - Lava moat - Creates a moat of lava around themselves.
  * - Lava rivers - Creates lava rivers in all cardinal directions.
  * - Firespew - Spews fire in the direction they're facing.
  * - Fire moat - Spews fire in all directions.
  */
//Drakeling actions
// Drakeling helpers
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\elite.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\fanaticminer.dm. ----------------------
/**
  * # Necropolis priest
  *
  * Kind of like BD miner's son trying to impress their dad.
  * Has four attacks.
  * - Axe Slam - Slams his axe on the ground, hurting everyone is his direction in a 3 tile radius
  * - Summon Shambler - Summons a shambling miner that focuses on the target.
  * - Dash - Dashes in the target's general direction
  * - Axe Throw - Throws an axe at the target
  */
// priest actions
// priest helpers
//loot
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\goliath_broodmother.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\herald.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\legionnaire.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\mob\living\simple_animal\hostile\mining_mobs\elites\pandora.dm. ----------------------
//at this point i'm legitimately tired i dont care aaaaaaaaaaa // so true
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\movespeed\modifiers\components.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\pixel_shift\pixel_shift.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\power\cable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\power\cell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\power\lightning.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\power\port_gen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\projectiles\guns\ballistic\pistol.dm. ----------------------
//Note for the future, i didn't know this gun already existed in the code, may be deleted eventually.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\projectiles\guns\energy\kinetic_accelerator.dm. ----------------------
//BDM pka
//Rapid KA
//Heavy KA
//Precise KA
//Modular KA
//BYOKA
//Ashen KA
//Megafauna & other unique modkits
//bubblegum
//drake
//hierophant
//warning: spaghetti (and copypasted) code ahead.
//colossus
//essentially a penalty-less version of the rapid repeater
//legion
//blood drunk miner
//drakeling
//king goat
//rogue process
//gladiator
//10mm modkit (currently broken, only the 10mm pka works)
//sif
//This is Messy fucking code to get something to work... trust me, I wish i was good enough of a coder to not rely on this
//AoE blasts (Unremovable)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents.dm. ----------------------
/// Don't blame me if they have negative thirst, admeme.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\machinery\chem_dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\alcohol_reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\cit_reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\drink_reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\drug_reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\fermi_reagents.dm. ----------------------
// Plushmium object reaction
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\medicine_reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\reagents\other_reagents.dm. ----------------------
/*/datum/reagent/dragon_blood/admin
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\chemistry\recipes\others.dm. ----------------------
/* Might get deleted, conflicts with other recipes
/datum/chemical_reaction/silicon_dioxide
	name = "silicon dioxide"
	id = "silicon_dioxide"
	required_reagents = list(/datum/reagent/silicon = 5, /datum/reagent/oxygen = 10)//kinda handy
	required_temp = 450

/datum/chemical_reaction/silicon_dioxide/on_reaction(datum/reagents/holder, multiplier)
	var/location = get_turf(holder.my_atom)
	for(var/i in 1 to multiplier)
		new /obj/item/stack/ore/glass(location)

/datum/chemical_reaction/rought_iron
	name = "rought iron"
	id = "rought iron"
	required_reagents = list(/datum/reagent/iron = 50, /datum/reagent/carbon = 1)
	required_temp = 900 //time wasterd

/datum/chemical_reaction/rought_iron/on_reaction(datum/reagents/holder, multiplier)
	var/location = get_turf(holder.my_atom)
	for(var/i in 1 to multiplier)
		new /obj/item/stack/ore/iron(location)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_containers\borghydro.dm. ----------------------
/*
Borg Shaker
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_containers\dropper.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_containers\glass.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_containers\pill.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\reagents\reagent_containers\spray.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\stock_parts.dm. ----------------------
//Rating 5
// Makeshift stock parts, manages to be worse than the default ones
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\autolathe_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\biogenerator_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\machine_designs.dm. ----------------------
//Cryptocurrency Miners
//BS miner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\mechfabricator_designs.dm. ----------------------
/* Shit doesnt work, work on it later
/datum/design/borg_upgrade_plasma
	name = "Cyborg Upgrade (Plasma Resource)"
	id = "borg_upgrade_plasma"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/plasma
	materials = list(/datum/material/plasma = 1000, /datum/material/bluespace = 1000)
	construction_time = 100
	category = list("Cyborg Upgrade Modules")
*/
///Power Armor
///End of Power Armor
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\medical_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\misc_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\power_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\stocks_parts_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\telecomms_designs.dm. ----------------------
///////////////////////////////////
/////Headset Encryption////////////
///////////////////////////////////
///////////////////////////////////
////////Telecomm Server////////////
///////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\tool_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\weapon_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\autolathe_designs\autolathe_designs_medical_and_dinnerware.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\designs\machine_designs\machine_designs_all_misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\machinery\departmental_circuit_imprinter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\machinery\departmental_protolathe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\machinery\departmental_techfab.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\machinery\_production.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\nanites\nanite_programs\utility.dm. ----------------------
//Almost the same as the original; altered log message
//Got rid of beep and suicide in relation to the original.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\techweb\nodes\alien_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\techweb\nodes\all_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\techweb\nodes\bluespace_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\techweb\nodes\computer_hud_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\research\techweb\nodes\robotics_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\resize\resizing.dm. ----------------------
//handle the big steppy, except nice
//Stepping on disarm intent -- TO DO, OPTIMIZE ALL OF THIS SHIT
//smaller person stepping under another person... TO DO, fix and allow special interactions with naga legs to be seen
//Proc for scaling stamina damage on size difference
//Proc for scaling stuns on size difference (for grab intent)
//Proc for scaling brute damage on size difference
//Proc for instantly grabbing valid size difference. Code optimizations soon(TM)
/*
/mob/living/proc/sizeinteractioncheck(mob/living/target)
	if(abs(get_effective_size()/target.get_effective_size())>=2.0 && get_effective_size()>target.get_effective_size())
		return 0
	else
		return 1
*/
//Clothes coming off at different sizes, and health/speed/stam changes as well
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\resize\sizechems.dm. ----------------------
//Size Chemicals, now with better and less cringy names.
//TO DO: USE BETTER FERMICHEM TO MAKE ALL OF THESE CHEMICALS MORE INTERACTIVE
//Sizechem reagent
//Sizechem reaction
//Growthchem reagent
//Growthchem reaction
//Growthchem effects
//Shrinkchem reagent
//Shrinchem reaction
//Shrinkchem effects
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\resize\sizegun.dm. ----------------------
//Gun
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\ruins\lavalandruin_code\doom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\ruins\lavalandruin_code\kinggoat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\ruins\lavalandruin_code\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\ruins\spaceruin_code\hilbertshotel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\shuttle\custom_shuttle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\shuttle\shuttle_creation\shuttle_upgrades.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\spells\spell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\spells\spell_types\shapeshift.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\surgery\organs\augments_arms.dm. ----------------------
///////////////
//Tools  Arms//
///////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\surgery\organs\organ_internal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\telescience\telepad.dm. ----------------------
///SCI TELEPAD///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\telescience\telesci.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\telescience\telesci_computer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\tgs\chat_commands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\tgs\custom_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\uplink\uplink_items.dm. ----------------------
// Made craftable, and no longer illegal
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\uplink\uplink_roles.dm. ----------------------
//miner exclusives
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\vehicles\mecha\mech_fabricator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\vending\autodrobe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\vending\clothesmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\vending\kinkmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\modules\vending\wardrobes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_globalvars\bitfields.dm. ----------------------
/*
 If someone decides to name a var slot_flags
 outside of /obj/item, I will find you.
 (this sort of bitfield definition will ALWAYS
 use this menu so you can't var edit normally)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_globalvars\lists\lewd_content.dm. ----------------------
/*
 * List of clothes with possible peeking under,
 * It is prefilled with clothes that cannot be caught
 * by the automatic system (has no skirt in path)
*/
/*
 * List of clothes you can't say a pair of.
 * Ex:
 * A pair of jockstrap?
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_globalvars\lists\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_globalvars\lists\objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_onclick\hud\hud.dm. ----------------------
// Used for getting icons for extra inventory slots
// Same as above
// Called after updating extra inventory
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_sand\code\_onclick\hud\screen_objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_autocryo.dm. ----------------------
// Time before sending the user to cryo
// Should this system be used?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_comms.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_connections.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_discord.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_donator.dm. ----------------------
// New donator system
// Reminder that you must setup autodonator and ckeytools on
// a discord redbot on your guild for this to work
// https://github.com/SPLURT-Station/Mal0-cogs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_fetish_content.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_general.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_maps.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\configuration\entries\splurt_server.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\afk.dm. ----------------------
// Define config entries for cryo
// Remove defines
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\discord.dm. ----------------------
/**
 * # Discord Subsystem
 *
 * This subsystem handles some integrations with discord
 *
 *
 * NOTES:
 * * There is a DB table to track ckeys and associated discord IDs. (discord_link)
 * * This system REQUIRES TGS for notifying users at end of the round
 * * The SS uses fire() instead of just pure shutdown, so people can be notified if it comes back after a crash, where the SS wasn't properly shutdown
 * * It only writes to the disk every 5 minutes, and it won't write to disk if the file is the same as it was the last time it was written. This is to save on disk writes
 * * The system is kept per-server (EG: Terry will not notify people who pressed notify on Sybil), but the accounts are between servers so you dont have to relink on each server.
 *
 *
 * ## HOW NOTIFYING WORKS
 *
 * ### ROUNDSTART:
 * 1) The file is loaded and the discord IDs are extracted
 * 2) A ping is sent to the discord with the IDs of people who wished to be notified
 * 3) The file is emptied
 *
 * ### MIDROUND:
 * 1) Someone usees the notify verb, it adds their discord ID to the list.
 * 2) On fire, it will write that to the disk, as long as conditions above are correct
 *
 * ### END ROUND:
 * 1) The file is force-saved, incase it hasn't fired at end round
 *
 * This is an absolute clusterfuck, but its my clusterfuck -aa07
 */
/**
 * Given a ckey, look up the discord user id attached to the user, if any
 *
 * This gets the most recent entry from the discord link table that is associated with the given ckey
 *
 * Arguments:
 * * lookup_ckey A string representing the ckey to search on
 */
/**
 * Given a discord id as a string, look up the ckey attached to that account, if any
 *
 * This gets the most recent entry from the discord_link table that is associated with this discord id snowflake
 *
 * Arguments:
 * * lookup_id The discord id as a string
 */
/**
 * Generate a timebound token for discord verification
 *
 * This uses the common word list to generate a six word random token, this token can then be fed to a discord bot that has access
 * to the same database, and it can use it to link a ckey to a discord id, with minimal user effort
 *
 * It returns the token to the calling proc, after inserting an entry into the discord_link table of the following form
 *
 * ```
 * (unique_id, ckey, null, the current time, the one time token generated)
 * the null value will be filled out with the discord id by the integrated discord bot when a user verifies
 * ```
 *
 * Notes:
 * * The token is guaranteed to unique during it's validity period
 * * The validity period is currently set at 4 hours
 * * a token may not be unique outside it's validity window (to reduce conflicts)
 *
 * Arguments:
 * * ckey_for a string representing the ckey this token is for
 *
 * Returns a string representing the one time token
 */
/**
 * Find discord link entry by the passed in user token
 *
 * This will look into the discord link table and return the *first* entry that matches the given one time token
 *
 * Remember, multiple entries can exist, as they are only guaranteed to be unique for their validity period
 *
 * Arguments:
 * * one_time_token the string of words representing the one time token
 * * timebound A boolean flag, that specifies if it should only look for entries within the last 4 hours, off by default
 *
 * Returns a [/datum/discord_link_record]
 */
/**
 * Find discord link entry by the passed in user ckey
 *
 * This will look into the discord link table and return the *first* entry that matches the given ckey
 *
 * Remember, multiple entries can exist
 *
 * Arguments:
 * * ckey the users ckey as a string
 * * timebound should we search only in the last 4 hours
 *
 * Returns a [/datum/discord_link_record]
 */
/**
 * Find discord link entry by the passed in user ckey
 *
 * This will look into the discord link table and return the *first* entry that matches the given ckey
 *
 * Remember, multiple entries can exist
 *
 * Arguments:
 * * discord_id The users discord id (string)
 * * timebound should we search only in the last 4 hours
 *
 * Returns a [/datum/discord_link_record]
 */
/**
 * Delete NULL discord IDs in the database
 *
 * This will look for rows where discord_id is NULL and delete them.
 *
 * Hopefully will help fix the errors where people verify but are unable to enter the game
 *
 */
/**
 * Check if an account is linked for login
 *
 * This will look for a valid discord link for the new player's ckey. Defaults to TRUE if the server isn't configured for discord verification
 *
 * It better be called with ?. in case the subsystem is still Initializing
 *
 * Arguments:
 * * player: the new player to check
 *
 * Returns TRUE or FALSE
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\redbot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\ticker.dm. ----------------------
//Everyone who wanted to be an observer gets made one now
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\processing\quirks.dm. ----------------------
// Add incompatible quirks.
// Inspired from LeDrascol's code. Thank you.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\controllers\subsystem\processing\station.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\ai_laws.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\bark.dm. ----------------------
// Main code edits
// Own stuff
//Undertale
//Don't starve
//Goon
// The Mayhem Special
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\dna.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mind.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\shuttles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\status_effects.dm. ----------------------
//New click delay system to support new mega
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\world_topic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\chasm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\dullahan.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\genital_equipment.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\nanites.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\organ_inflation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\pregnancy.dm. ----------------------
//not how genetics work but okay
//drop kicked
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\pregnancy_inert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\size_normalized.dm. ----------------------
//Set up the linked clothing
//Normalize the mob on add in case it's necessary
//Denormalize the mob when the component is destroyed (if needed)
//Make sure the size stays normalized while worn and add the change to the recorded size
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\crafting\recipes\recipes_misc.dm. ----------------------
//Milking machines
//Bouquets
//Manly anvil
//to do: put carpentry in it's own crafting tab
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\crafting\recipes\recipes_primal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\crafting\recipes\recipes_robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\components\storage\concrete\pockets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\crawl_under.dm. ----------------------
//ATTENTION: only handles the crawling-under action and layers.
//you need to manually set CanPass() to allow PASSCRAWL for the object you're applying it to.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\flavor_text.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\mob_holder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\smalltalk.dm. ----------------------
//For small players and such
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\spooky.dm. ----------------------
//A spooky element, this can be added to pretty much anything, take your pick. It is effectively harmless however.
//target.AddElement(/datum/element/spooky) for example.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\elements\wuv.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\genitals\genitals_interface.dm. ----------------------
/// Attempts to open the tgui menu
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\cuddling.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\rope.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\lewd\lewd_datums.dm. ----------------------
//Sandstorm edits
//Own stuff
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// 									U N H O L Y										   /////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\lewd\lewd_definitions.dm. ----------------------
/**
  * Returns a lust value depending if the genital has a lust modifier.
  *
  * Arguments:
  * * amount: Amount of lust given.
  * * genital: Genital to check for any lust modifiers.
  * TODO - TURN THE TRAITS INTO COMPONENTS
*/
/**
  * Returns the fluid modifier if the genital has one.
  *
  * Arguments:
  * * amount: Amount of fluid to be released.
  * * genital: Genital to check for any fluid modifiers.
*/
/**
  * Acts properly if the given genital has orgasm modifiers
  *
  * Arguments:
  * * genital: Genital to check for any orgasm modifiers.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\lewd\lewd_interactions.dm. ----------------------
//help
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\interactions\lewd\_lewd.dm. ----------------------
// Interaction Procs
/*

/mob/living/proc/remove_equipment(mob/living/carbon/target)
	var/obj/item/organ/genital/holder = pick_receiving_organ(target, HAS_EQUIPMENT, "Remove equipment", "What genital?")
	if(!holder)
		to_chat(src, "<span class='warning'> You need exposed genitals!</b>")
		return
	if(!LAZYLEN(holder.equipment))
		to_chat(src, span_warning("You'll have to put something in it first, since it seems to be clean"))
		return

	var/obj/item/gimme = input(src, "What do you want to remove?", "Remove equipment", null) as null|anything in holder.equipment
	if(gimme)
		holder.remove_equipment(src, gimme)

*/
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// 									U N H O L Y										   /////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\dominant_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\drug_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\generic_negative_events.dm. ----------------------
// Matches drinking synth blood (drankblood_synth)
// Matches drinking shared exotic blood
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\generic_positive_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\mood_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\needs_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mood_events\preg_events.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\mutations\telekenisis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\ruins\lavaland.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\ruins\space.dm. ----------------------
//Main code edits
//Own stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\ruins\station.dm. ----------------------
// Boxstation
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\status_effects\pregnancy.dm. ----------------------
/**
 * Who is the liar but he who denies that Jesus is the Christ? This is the antichrist, he who denies the Father and the Son.
 * - John 2:22
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\traits\defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\traits\good.dm. ----------------------
//Main code edits
//Own stuff
/* --FALLBACK SYSTEM INCASE THE TRAIT FAILS TO WORK. Do NOT enable this without editing ash_storm.dm to deal stamina damage with ash immunity.
/datum/quirk/ashresistance/add()
	quirk_holder.weather_immunities |= "ash"

/datum/quirk/ashresistance/remove()
	if(!quirk_holder)
		return
	quirk_holder.weather_immunities -= "ash"
*/
// Quirk examine text.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\traits\negative.dm. ----------------------
//Main code edits
//Own stuff
// masked_mook moved to neutral
//well-trained moved to neutral
// Small issue with this. If the quirk holder has NO_HUNGER or NO_THIRST, this trait can still be taken and they will still get the benefits of it.
// It's unlikely that someone will be both, especially at round start, but vampirism makes me wary of having these separate.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\traits\neutral.dm. ----------------------
// HYPERSTATION TRAITS
// Quirk examine text
//You are a CIA agent.
//well-trained moved to neutral to stop the awkward situation of a dom snapping and the 30 trait powergamers fall to the floor.
//hydra code below
//Own traits
//succubus and incubus below
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\datums\traits\trait_actions.dm. ----------------------
//
// Quirk: Hypnotic Gaze
//
//
// Quirk: Hydra Heads
//
//
// Quirk: Bloodsucker Fledgling / Vampire
//
// Basic action preset
// Basic can-use check
// Action: Bite
// Action: Revive
//
// Quirk: Werewolf
//
//
// Quirk: Gargoyle
//
//Quirk: Cosmetic Glow
//Copy and pasted. Cry about it.
//
// Quirk: Rad Fiend
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\atoms.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\atoms_movable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\data_huds.dm. ----------------------
/***********************************************
 Mob's target prefs
************************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\centcom.dm. ----------------------
//Slave trader
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\commons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\holodeck.dm. ----------------------
// Replacement for holodeck plasma module
// Replacement for holodeck carp module
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\layenia.dm. ----------------------
//Yeah, I hate this as well
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\maintenance.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\mining.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\shuttles.dm. ----------------------
////////////////////////////Slave Trader Shuttle////////////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\station_areas.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\ruins\lavaland.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\area\areas\ruins\space.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\gamemodes\objectives.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\chem_alert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\cryopod.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\deployable.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\limbgrower.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\research_table.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\computer\slavery.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\doors\brigdoors.dm. ----------------------
//MAX_TIMER 45 MINUTES
//PRESET_SHORT 5 MINUTES
//PRESET_MEDIUM 10 MINUTES
//PRESET_LONG 15 MINUTES
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\doors\poddoor.dm. ----------------------
//Multi-tile poddoors don't turn invisible automatically, so we change the opacity of the turfs below instead one by one.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\doors\shutters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\machinery\porta_turret\portable_turret.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\mecha\combat\gygax.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\effects\landmarks.dm. ----------------------
//Landmark that creates destinations for the navigate verb to path to
//Command
//Departments
//Common areas
//Service
//Shuttle docks
//Maint
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\effects\decals\turfdecal\markings.dm. ----------------------
// Replaces the SS13 plaque
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\effects\effect_system\effects_smoke.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\effects\spawners\lootdrop.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\AI_modules.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\armor_kits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\cards_ids.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\cosmetics.dm. ----------------------
// Hyper stuff
//Lipstick
//Nail polish
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\granters.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\holy_weapons.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\manuals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\mesmetron.dm. ----------------------
//Hyper's mesmetron
//Hypnotize someone
//If there's a subject, open the suggestion interface
//Toggle open/close
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\milking_machine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\miscellaneous.dm. ----------------------
//This'll be used for gun permits, such as for heads of staff, crew, and bartenders. Sec and the Captain do not require these
//Hyper stuff
// Bouquets
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\oviposition.dm. ----------------------
//Oviposition egg, logic is at the pregnancy component
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\plaguedoc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\plushes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\pregnancy_tester.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\RCD.dm. ----------------------
// Also pretty much rcd_create but named differently. I'm shameless, fuck you.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\RTL.dm. ----------------------
/// triggered on wield of two handed item
/// triggered on unwield of two handed item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\toys.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\weaponry.dm. ----------------------
//Hyper stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\carvingstones\carvingstones.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\circuitboards\computer_circuitboards.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\circuitboards\machine_circuitboards.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\circuitboards\miner_circuitboards.dm. ----------------------
// Legitimately putting this here because I want people to be able to build gas miners
// Pretty neat, right?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\devices\PDA\PDA.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\devices\PDA\radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\devices\radio\electropack.dm. ----------------------
// Don't let user change frequency.
// Once equipped, do not let anyone take it off
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\devices\radio\headset.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implantcase.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_aphropumps.dm. ----------------------
// - Crocin -
//
// - Hexacrocin -
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_disrobe.dm. ----------------------
// Implant flavor text
// Only allow use on "human" targets
// Runs on toggling the implant
/*
 * Action datums
*/
// Action for rapid wardrobe removal
/*
 * Implant items
*/
// Implanter item
// Implant case item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_gfluid.dm. ----------------------
// Implant flavor text
// Only allow use on "human" targets
// Runs on toggling the implant
// Unlock with an emag
/*
 * Action datum
*/
// Action for updating genital fluids
/*
 * Implant items
*/
// Implanter item
// Implanter item, emagged
// Implant case item
// Implant case item, emagged
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_hide_backpack.dm. ----------------------
// Implant flavor text
// Only allow use on "human" targets
/*
 * Action datum
*/
// Action for toggling backpack
// Runs on gaining the ability
// Runs on losing the ability
// Function to update trait
// Runs on toggling the ability
/*
 * Implant items
*/
// Implanter item
// Implant case item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_slave.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\implant_slaver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\implants\radio_implant.dm. ----------------------
//Yes, the radio implant already exists as part of the base code. It needs a cased version, so it can be printed from an autolathe.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\leash.dm. ----------------------
//Jay Sparrow
//TODO
/*
Icons, maybe?
*/
/////STATUS EFFECTS/////
//These are mostly used as flags for the states each member can be in
//This lets the pet resist their leash
///// OBJECT /////
//The leash object itself
//The component variables are used for hooks, used later.
//Called when someone is clicked with the leash
//Called when the leash is used in hand
//Tugs the pet closer
//The proc below in question is the one causing all the errors apparently
/*/datum/crafting_recipe/leash
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\lewd.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\rope.dm. ----------------------
// Handles initial rope checks and then calls process_knot
// Handles deciding objects in ROPE_STATE_DECIDING_OBJECT state
// If rope is attached to an object calls finish_knot_object
// Handles the initial knot on the target (timeout and messages)
// > If target doesn't have a rope tied, calls after_process_knot
// > If target does have a rope tied, calls strengthen_rope
// > Using normal rope, calls finish_knot_normal
// > Using object rope, handles the handcuffed effect (unless instant self apply is disabled) and sets state to ROPE_STATE_DECIDING_OBJECT
// Strengthens target's rope and deletes itself
// Sets state to ROPE_STATE_TIED, applies handcuffed effect and disappears rope
// Sets state to ROPE_STATE_TIED, applies handcuffed effect (if needed) and disappears rope
// Handles a number of edge cases, if something goes wrong resets the rope state and returns false
// Restores the rope into the initial state
// Handles whenever roped master moves, tugging their tied mob to them (isn't called whenever roped master is roped mob!)
// Handles whenever roped object moves, tugging their tied mob to it
// Handles whenever roped mob moves, tugging them to their master, their object to them or them to their object
// Taken from handcuffs code
// Taken from handcuffs code
// Handles differing breakout times and cuffbreak (hands free removes rope faster, wirecutters even better)
// Handles changing between different rope targets
// Returns true, if roped mob can tug their object behind them
// Handles changing slowdown based on roped object
// For the Shibari Bola
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\shibola.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\strapon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\util.dm. ----------------------
// TODO: improve this for bigger distances, where it's easy to hide behind something and break the tugging
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\vibrator.dm. ----------------------
//Hyperstation 13 vibrator
//For all them subs/bottoms out there, that wanna give someone the power to make them cum remotely.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\chastity_hypno\chastity_hypnosis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\chastity_hypno\chastity_hypno_magazine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\chastity_hypno\chastity_hypno_watch.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\condom.dm. ----------------------
//Made by quotefox
//Really needs some work, mainly because condoms should be a container for semen, but I dont know how that works yet. Feel free to improve upon.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\genital_equipment.dm. ----------------------
/// Item-specific checks to run before inserting in a genital
/// Runs after the item has been inserted in a genital
/// Item-specific checks to run before removing from a genital
/// Runs after the item has been removed from a genital
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\sounding.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\chastity\chastity_belt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\chastity\chastity_boxes.dm. ----------------------
//---------Standard Chastity Cage Box--------//
//-------------------------------------------//
//----------Metal Chastity Cage Box----------//
//-------------------------------------------//
//-------------Chastity Belt Box-------------//
//-------------------------------------------//
//----------E-Stim Chastity Cage Box----------//
//-------------------------------------------//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\chastity\chastity_cage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\chastity\estim_chastity_cage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\lewd_items\genital_equipment\chastity\metal_chastity_cage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\robot\robot_items.dm. ----------------------
/// Cargo Borg Items ///
// Package Wrapping Synthesizer
/// End Cargo Borg Items ///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\robot\robot_upgrades.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\stacks\sheets\sheet_types.dm. ----------------------
/*
 * Shadow Wood
 */
//obj/item/stack/sheet/silk/Initialize(mapload, new_amount, merge = TRUE)
//	recipes = GLOB.silk_recipes
//	return ..()
// Hijack recipe loading to add new entries
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\stacks\tiles\tile_reskinning.dm. ----------------------
// The TRUE fix for cyborgs dropping their shit
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\stacks\tiles\tile_types.dm. ----------------------
//Mushroom
//Shadown Wood
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\backpack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\bags.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\belt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\boxes.dm. ----------------------
// Kinkmate listing for the rapid disrobe implant
// Shipment box for Plushmium
// Plushmium box's note
// Kinkmate listing for condom box
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\firstaid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\secure.dm. ----------------------
// Sec Officer Boxes
//Blueshield melee options
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\storage\wallets.dm. ----------------------
// Bluespace wallet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\weaponry\armyknife.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\items\weaponry\melee.dm. ----------------------
// Prova, cause I can
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\barricades.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\bathroom.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\dresser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\false_walls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\fence.dm. ----------------------
//HANDRAIL - Ported from Dymouth Gulch
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\flora.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\ghost_role_spawners.dm. ----------------------
//Portable dangerous-environment sleepers: Spawns in exposed to ash storms shelter.
//Characters in this role could have been conscious for a long time, surviving on the planet. They may also know Draconic language by contacting with ashwalkers.
//Splurt-Specific Space Hotel Staff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\ladder.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\micro_bricks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\pole.dm. ----------------------
//hyperstation 13 stripper pole! about time?
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\signs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\stairs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\statues.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\tables_racks.dm. ----------------------
//Main code edits
//Own stuff
// Rope hooks
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\table_frames.dm. ----------------------
/*
 * Mushroom Frames
 */
/*
 * Shadow Wood Frames
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\watercloset.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\bed_chairs\beds.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\bed_chairs\chairs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\bed_chairs\sofa.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\cannons\cannon.dm. ----------------------
///how much projectile damage is lost when using a bad fuel
///extra chance it explodes upon firing
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\cannons\cannonballs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\crates.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\closets\fitness.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\closets\slaver.dm. ----------------------
//Copy of above in crate version
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\closets\secure\psychology.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\closets\secure\security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\objects\structures\crates_lockers\crates\wooden.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\open.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\open\floor\plating\lavaland_jungle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\chasm.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\floor\fancy_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\floor\mineral_floor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\floor\plating\asteroid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\wall\mineral_walls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\game\turfs\simulated\wall\misc_walls.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\centcom_communications.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\chat_commands.dm. ----------------------
//Idk why cit never added this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\JobBan.dm. ----------------------
// Stuff that helps the TGUI player panel jobban section to work
// notbannedlist is just a list of strings of the job titles you want to ban.
// notbannedlist is just a list of strings of the job titles you want to unban.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\Kick.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\NewBan.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\playtimes.dm. ----------------------
//Most of this data is now unused except for the flags
/*
/client/proc/cmd_player_playtimes()
	set category = "Admin"
	set name = "Player Playtimes"

	if(!check_rights(R_ADMIN))
		return

	if(!CONFIG_GET(flag/use_exp_tracking))
		to_chat(usr, span_warning("Tracking is disabled in the server configuration file."))
		return

	if(!playtime_menu)
		playtime_menu = new()
	playtime_menu.ui_interact(usr)

/datum/player_playtime/ui_interact(mob/user, datum/tgui/ui)
	ui = SStgui.try_update_ui(user, src, ui)
	if(!ui)
		ui = new(user, src, "PlayerPlaytimes", "Player Playtimes")
		ui.open()

/datum/player_playtime/ui_state(mob/user)
	return GLOB.admin_state

/datum/player_playtime/ui_data(mob/user)
	var/list/data = list()

	var/list/clients = list()
	for(var/client/C in GLOB.clients)
		var/list/client = list()

		client["ckey"] = C.ckey
		client["playtime"] = C.get_exp_living(TRUE)
		client["playtime_hours"] = C.get_exp_living()
		client["flags"] = check_flags(C)

		var/name = C.ckey
		var/mob/M = C.mob
		if (istype(M))
			if (isobserver(M))
				client["observer"] = TRUE

			if(M.real_name)
				client["ingame"] = TRUE
				name += (" (" + M.real_name + ")")
		client["name"] = name

		clients += list(client)

	clients = sortList(clients, /proc/cmp_playtime)
	data["clients"] = clients
	return data
*/
/*
/datum/player_playtime/ui_act(action, params)
	if(..())
		return

	switch(action)
		if ("observe")
			if(!isobserver(usr) && !check_rights(R_ADMIN))
				return

			var/atom/movable/target = get_mob_by_key(params["ckey"])
			if(!target)
				to_chat(usr, span_notice("This player cannot be observed."))
				return

			var/client/C = usr.client
			if(!isobserver(usr) && !C.admin_ghost())
				return
			var/mob/dead/observer/A = C.mob
			A.ManualFollow(target)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\Transform.dm. ----------------------
// Stuff that helps the TGUI player panel transform section to work
// M: Mob to change
// newType: Path of new type e.g: /mob/living/carbon/alien/humanoid/drone
// newTypeName (optional): Name of the new type (used in logging): e.g: "Drone"
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\adminhelp.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\discordbunker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\discord_subsystem.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\one_click_antag.dm. ----------------------
//Slave stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\pray.dm. ----------------------
// Save this message to be shown on the TGUI command messages panel (centcom_communications.dm)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\randomverbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\admin\verbs\vpnbunker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\bloodsucker\datum_bloodsucker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\bloodsucker\levelup.dm. ----------------------
/* PROC TO MANAGE LEVELLING UP THIS WAY */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\brainwashing\brainwashing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\ert_cleanup\ert_cleanup.dm. ----------------------
//This file contains everything to spawn ERT for cleaning up a nuclear reactor meltdown, if those things could actually explode
//ERT
//Antag mind & team (for objectives on what to do)
//Outfit
//Clothes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\qareen\qareen.dm. ----------------------
//qareens: based off of revenant from TG
//"Ghosts" that are invisible and move like ghosts, cannot take damage while invisible
//Can hear deadchat, but are NOT normal ghosts and do NOT have x-ray vision
//Admin-spawn or random event
// TODO
// new ability - manifest - gives visible simplemob form untill de-activated (can still use abilities) (add after spriting)
//Life, Stat, Hud Updates, and Say
//Immunities
//damage, gibbing, and dying
//reveal, stun, icon updates, cast checks, and essence changing
//reforming
//Use this for effects you want to happen when a qareen throws stuff, check the TRAIT_SPOOKY_THROW if you want to know if its still being thrown
//objectives
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\qareen\qareen_abilities.dm. ----------------------
//Harvest; activated ly clicking the target, will try to drain their essence.
//Toggle night vision: lets the qareen toggle its night vision
//Transmit: the revemant's only direct way to communicate. Sends a single message silently to a single mob
//Overload Light: Breaks a light that's online and sends out lightning bolts to all nearby people.
//Defile: Corrupts nearby stuff, unblesses floor tiles.
//Malfunction: Makes bad stuff happen to robots and machines.
//A note to future coders: do not replace this with an EMP because it will wreck malf AIs and everyone will hate you.
//Bliss: Infects nearby humans and in general messes living stuff up.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\qareen\qareen_antag.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\qareen\qareen_bliss.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\qareen\qareen_spawn_event.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\slaver\slaver.dm. ----------------------
/// Price table for when trying to set slave prices automatically
// Lose antag status
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\slaver\equipment\orderable_gear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\slaver\equipment\slaver_items.dm. ----------------------
// Buyable gear kits at the slaver console
// A chameleon kit that anybody can use, with a generic name.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\slaver\equipment\slaver_outfits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\datums_hud.dm. ----------------------
/*
Holds things like antag datums, game modes, abilities, and everything
related to the antag that could be a datum
*/
//ANTAGONIST
//HUD
//Contents: Intentions, Hands, Dropping/Throwing/Pulling, Inventory Equip
//		Health + Souls on the bottom of screen
//TODO: Health doll, Soul counter (not devil)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\forest\structures\soul_storage.dm. ----------------------
//This is a big WIP. I don't even want it having the name "soul storage" but it'll do for now
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\defines_init.dm. ----------------------
//The mob itself
/*
/mob/living/carbon/wendigo/update_move_intent_slowdown()
	var/mod = 0
	if(m_intent == MOVE_INTENT_WALK)
		mod = (CONFIG_GET(number/movedelay/walk_delay) / 2)		//complete copy besides this part
	else
		mod = 1.30
	if(!isnum(mod))
		mod = 1
	add_movespeed_modifier(MOVESPEED_ID_MOB_WALK_RUN_CONFIG_SPEED, TRUE, 100, override = TRUE, multiplicative_slowdown = mod)
*/
/*
/mob/living/carbon/wendigo/update_movespeed(resort=TRUE)
	return (..() * physiology.speed_mod)
*/
/* So they can be pulled.
/mob/living/carbon/wendigo/can_be_pulled()
	return FALSE
*/
//
//ORGANS
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\examine.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\genitals.dm. ----------------------
/*
	Probably the most snowflakey part for this mobs
	If someone can make this mob in any better way, you're completely free to do so (please do I beg you).
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\metabolization.dm. ----------------------
//Snowflake metabolization with naughty organ manipulation
/*
	switch(nutrition)
		if(NUTRITION_LEVEL_FULL to INFINITY)
			throw_alert("nutrition", /obj/screen/alert/fat)
		if(NUTRITION_LEVEL_HUNGRY to NUTRITION_LEVEL_FULL)
			clear_alert("nutrition")
		if(NUTRITION_LEVEL_HUNGRY to NUTRITION_LEVEL_STARVING)
			throw_alert("nutrition", /obj/screen/alert/hungry)
		if(0 to NUTRITION_LEVEL_STARVING)
			throw_alert("nutrition", /obj/screen/alert/starving)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\mob_defense.dm. ----------------------
/*
/mob/living/carbon/wendigo/do_after_coefficent()
	. = ..()
	. *= physiology.do_after_speed
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\mob_equip.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\organs_bodyparts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\update_icons.dm. ----------------------
//GLASSES
//EARS
//BELT
//BACK
//NECK
//HANDS
//HEAD
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\wendigo_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wendigo\mob\_on_click.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\wizard\equipment\spellbook.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\antagonists\_common\antag_spawner.dm. ----------------------
//////SLAVER BORG
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\arousal.dm. ----------------------
//handles impregnation, also prefs
//arousal hud display
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\genitals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\genitals_sprite_accessories.dm. ----------------------
//Butt (main code edit)
//Vaginas
//Testicles
//Penises
//Bellies
//there literally shouldn't be any other ass types besides one because that'd be weird, this is just here to keep things consistent for the genital system.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\anus.dm. ----------------------
// TEH DONUT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\belly.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\breasts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\butt.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\penis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\testicles.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\organs\womb.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\arousal\toys\dildos.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\atmospherics\auxgm\gas_types.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\atmospherics\machinery\components\unary_devices\outlet_injector.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\atmospherics\machinery\components\unary_devices\vent_pump.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\atmospherics\machinery\components\unary_devices\vent_scrubber.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\atmospherics\machinery\other\miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\awaymissions\mission_code\academy.dm. ----------------------
//Academy Items
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\supplypod.dm. ----------------------
//type used for one drop spawning items. doesn't have a style as style is set by the helper that creates this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\blackmarket\clothing.dm. ----------------------
//normal
//syndis
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\blackmarket\misc.dm. ----------------------
//Normal
//Syndi
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\blackmarket\weapons.dm. ----------------------
//Standard
// Sydi items
//pistols
//Revolvers
//SMGs
//rifles
//shotguns
// /datum/blackmarket_item/weapon/cycler //Commiting out till I can fix
//	name = "cycler shotgun"
//	desc = "An advanced shotgun with two separate magazine tubes, allowing you to quickly toggle between ammo types."
//	item = /obj/item/gun/ballistic/shotgun/automatic/dual_tube
//	price_min = 800000
//	price_max = 900000
//	stock_min = 1
//	stock_max = 3
//	availability_prob = 35
//Heavy weapons
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\bounties\assistant.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\bounties\lewd.dm. ----------------------
//Jay Sparrow
//The base for this datum is found in reagent.dm
/* //Just not getting this to work.
//Freeform sales
/datum/export/lewd/reagent_container
	cost = 0 //Base cost of canister. We only care about what's inside.
	unit_name = "Fluid Container"
	export_types = list(/obj/item/reagent_containers/)
/datum/export/lewd/reagent_containers/get_cost(obj/O)
	var/obj/item/reagent_containers/C = O
	var/worth = 0
	var/fluids = C.reagents.reagent_list

	worth += fluids[/datum/reagent/consumable/semen]*2
	worth += fluids[/datum/reagent/consumable/milk]*2
	worth += fluids[/datum/reagent/consumable/semen/femcum]*5
	return worth
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\exports\gear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\exports\lewd.dm. ----------------------
//Condom
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\exports\sheets.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\exports\sweatshop.dm. ----------------------
// Prices above are temporary buffs until more carpentry is added
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\armory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\costumes_toys.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\emergency.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\goodies.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\organic.dm. ----------------------
//Main code edits
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\science.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\packs\vending.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\sweatshop\metal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\sweatshop\sweatshop.dm. ----------------------
//THE TOOLS
//BASIC RECIPES - To do, add sound. As well as refactor everything in a more smart way so we can add the possibility of multiple wood types in the future.
//saw a plank into two platforms
//saw a platform into four blocks
//sand a block into a peg
//cut heated metal into nails
//Covered in glue
//cover a wooden block in glue
//cover a wooden peg in glue
//Seats
//bore a platform into a seat
//Stools - Further crafting
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\cargo\sweatshop\wooden.dm. ----------------------
//WOODEN COMPONENTS. honestly i need to move some shit around to allow for easier material swapping, but that's for a later date.
//glue
//seat
//Stool steps. There's probably an easier way to do this, but I cannot be assed rn, I'll refine after PR
//The finished product
//Let's make it soft and more expensive
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\client_procs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\preferences.dm. ----------------------
/* CITADEL EDIT - We're using top menu instead
			button_name = pixel_size
			dat += "<b>Pixel Scaling:</b> <a href='?_src_=prefs;preference=pixel_size'>[(button_name) ? "Pixel Perfect [button_name]x" : "Stretch to fit"]</a><br>"

			switch(scaling_method)
				if(SCALING_METHOD_NORMAL)
					button_name = "Nearest Neighbor"
				if(SCALING_METHOD_DISTORT)
					button_name = "Point Sampling"
				if(SCALING_METHOD_BLUR)
					button_name = "Bilinear"
			dat += "<b>Scaling Method:</b> <a href='?_src_=prefs;preference=scaling_method'>[button_name]</a><br>"
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\preferences_savefile.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\accessory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\backpack.dm. ----------------------
// Hyper stuff
//Lipstick
//Nail polish
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\boxers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\glasses.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\gloves.dm. ----------------------
//Hyper stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\hands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\head.dm. ----------------------
// removes resricted role for D.A.B. helmets. RIP N.E.E.T. gear as exclusive for assistants (2019-2021).
// Updates restrictions to accomodate new jobs (mostly trekkie stuff)
// Polychrome GWTB
//Adds bowler hats
//Adds medical beret
//Adds the three basic flowers that can be pinned into the hair
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\neck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\shirts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\shoes.dm. ----------------------
//Hyper stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\socks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\suit.dm. ----------------------
// removes resricted role for D.A.B. suits. RIP N.E.E.T. gear as exclusive for assistants (2019-2021).
// Suggestion #148
// Suggestion #183
// Suggestion #3279
// Fixes "Fed (Modern) uniform, White" being in general suit loadout section.
// Updates restrictions to accomodate new jobs (mostly trekkie stuff)
// Polychrome GWTB
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\uniform.dm. ----------------------
// Suggestion #151
// Suggestion #3278
// Updates restrictions to accomodate new jobs (mostly trekkie stuff)
// Polychrome GWTB
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\wrists.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\donator\first_tier.dm. ----------------------
//Misc
//Suits
//Head
//Backpack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\donator\second_tier.dm. ----------------------
//Uniform
//Backpack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\donator\third_tier.dm. ----------------------
//Backpack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\loadout\donator\__donator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\verbs\character_directory.dm. ----------------------
// This is a global singleton. Keep in mind that all operations should occur on usr, not src.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\verbs\looc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\client\verbs\ooc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\back.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\clothing.dm. ----------------------
//Cloth eaters get some nutrients. A Jumpsuit will roughly give back 50 Nutrition. IF eaten fully.
//A call on attemp_forcefeed() without async to properly know if it worked or not. In theory this shouldn't cause any issues as only a small part of the population should ever run this.VS normal eating.
//As a bonus for having the Cloth Eater trait. You gain extra mood from eatin clothes, but damage them at the same time.
// Set the clothing's integrity back to 100%, remove all damage to bodyparts, and generally fix it up
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\gloves.dm. ----------------------
// research nods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\kinkyclothes.dm. ----------------------
//From Hyper
//the classic click clack
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\refactor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\sizeaccessories.dm. ----------------------
//GLOVE SLOT ITEMS...
//SynTech ring
//For glove slots
//SynTech Wristband
//NECK SLOT ITEMS...
//Syntech Pendant
//For neck items
//Syntech Choker
//Syntech Collar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\glasses\hud.dm. ----------------------
// Blueshield HUDs
// Med HUDs
// Sec HUDs
// Diag HUDs
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\glasses\_glasses.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\gloves\_gloves.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\hardhat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\helmet.dm. ----------------------
// GWTB-inspired stuff wooo
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\jobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\misc.dm. ----------------------
// This icon fixes blue-ish tint on the helmet
//CBRN/MOPP helmets
// research nods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\misc_special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\head\_head.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\collar\kink_collars.dm. ----------------------
/////////////////////////
///MIND CONTROL COLLAR///
/////////////////////////
//Ok, first - it's not mind control. Just forcing someone to do emotes that user added to remote thingy. Just a funny illegal ERP toy.
//Controller stuff
//Collar stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\eyes\hypnogoggles.dm. ----------------------
//create radial menu
//to update model lol
//to change model
//to check if we can change kinkphones's model
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\foot\lewd_shoes.dm. ----------------------
//heels
//it takes time to put them off, do not touch
/////////////////
///Latex socks///
/////////////////
//start processing
//////////////////
///Domina heels///
//////////////////
//it takes time to put them off, do not touch
//to make sound when we walking in this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\gloves\lewd_gloves.dm. ----------------------
//latex gloves
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\head\deprivation_helmet.dm. ----------------------
//Credit goes to the Skyrat codebase https://github.com/Skyrat-SS13/Skyrat-tg
//Declare action types
//Vision switcher
//Hearing switcher
//Speech switcher
//Helmet switcher
//create radial menu
//to change model
//to check if we can change helmet's model
//updating both and icon in hands and icon worn
//Code for applying the deprivation aspects upon equip
//Here goes code that heals the wearer after unequipping helmet
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\head\hats.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\lewd_clothing\uniform\latex_catsuit.dm. ----------------------
//some gender identification magic
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\masks\boxing.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\masks\gasmask.dm. ----------------------
// GWTB-inspired thing wooo
// Cosmetic gas mask for Bane Syndrome (masked_mook)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\masks\hailer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\masks\miscellaneous.dm. ----------------------
//Main code edits
//Own stuff
/* I'm sorry nuke but cit added their own
/obj/item/clothing/mask/rat/kitsune
	name = "kitsune mask"
	desc = "A mask made of soft vinyl and latex, representing the head of a mythical kitsune."
	icon = 'modular_splurt/icons/obj/clothing/masks.dmi'
	icon_state = "kitsune"
	item_state = "kitsune"
*/
//broken huds for loot
//research nods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\masks\_mask.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\neck\_neck.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\outfits\ert.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\shoes\magboots.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\shoes\miscellaneous.dm. ----------------------
//research nods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\shoes\_shoes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\spacesuits\hardsuit.dm. ----------------------
//Main code edits
//Own stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\armor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\cloaks.dm. ----------------------
// Boatcloaks
/* //doesn't work
/obj/item/clothing/neck/cloak/binary/equipped(mob/user, slot)
	if(slot != ITEM_SLOT_NECK || !isdullahan(user))
		icon_state = "binarycloak"
		return ..()

	icon_state = "binarycloak_dull"

	. = ..()
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\heavy.dm. ----------------------
//CBRN gear
//MOPP gear and Advance MOPP gear
//CBRN/MOPP tanks
//research nods
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\jobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\miscellaneous.dm. ----------------------
//Main code edits
//Own stuff
/* Already exists
/obj/item/clothing/under/wedding_dress
	name = "wedding dress"
	desc = "A luxurious gown for once-in-a-lifetime occasions."
	icon = 'modular_splurt/icons/obj/clothing/uniforms.dmi'
	icon_state = "wedding_dress"
	body_parts_covered = CHEST|GROIN|LEGS
	flags_cover = HIDESHOES
	mutantrace_variation = NONE
	can_adjust = FALSE
*/
/*
 * Posshim's Corpus atire
 */
// GWTB-inspired stuff wooo
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\utility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\suits\vest.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\accessories.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\miscellaneous.dm. ----------------------
// GWTB-inspired stuff wooo
// Prison Jumpsuit/Jumpskirt override to allow reskins
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\shorts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\_under.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\command.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\security.dm. ----------------------
/*
 * Contains:
 *		Security
 *		Detective
 *		Navy uniforms
 */
/*
 * Security
 */
/*
 * Head of Security
 */
/*
 * Warden
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\civilian\civilian.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\civilian\clown_mime.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\under\jobs\civilian\suits.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\underwear\boxers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\underwear\shirts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\underwear\socks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\clothing\underwear\_underwear.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\custom_loadout\first_tier.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\discord\accountlink.dm. ----------------------
// IF you have linked your account, this will trigger a verify of the user
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\discord\discord_link_record.dm. ----------------------
/// Represents a record from the discord link table in a nicer format
/**
 * Generate a discord link datum from the values
 *
 * This is only used by SSdiscord wrapper functions for now, so you can reference the fields
 * slightly easier
 *
 * Arguments:
 * * ckey Ckey as a string
 * * discord_id Discord id as a string
 * * one_time_token as a string
 * * timestamp as a string
 * * valid as a number of 0 or 1
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\discord\tgs_commands.dm. ----------------------
// Notify
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\discord\toggle_notify.dm. ----------------------
// Verb to toggle restart notifications
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\events\bruh_moment.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\events\crystalline_reentry.dm. ----------------------
//Crystalline Tendrils, which spawn crystalline monsters
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\drinks\drinks\bottle.dm. ----------------------
// ~( Ported from TG )~
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\drinks\drinks\sizeitems.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks_burgers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks_other.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks_pastry.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks_sushi.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\food\snacks_vend.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\recipes\drink_recipes.dm. ----------------------
//SPLURT drinks
// ~( Ported from TG )~
//Milkshakes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\recipes\tablecraft\recipes_burger.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\recipes\tablecraft\recipes_donut.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\food_and_drinks\recipes\tablecraft\recipes_seafood.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\holiday\holidays.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\holodeck\holo_effect.dm. ----------------------
// Holodeck mob: Funclaw
// Holodeck mob: Friendly Bee
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\hydroponics\botany_flora.dm. ----------------------
//Lavaland-like structural flora EXCEPT it bases off a seed and simulates most of the genes and more
/*
/obj/structure/flora/botany/test_stuff
	can_agitate = TRUE
	agitate_range = 2
	seedtype = /obj/item/seeds/test
	low_hanging = TRUE
	regrowth_time_low = 1 MINUTES
	regrowth_time_high = 2 MINUTES
/obj/structure/flora/botany/test_stuff/init_seed()
	var/datum/plant_gene/trait/glow/amber/T = new
	myseed.genes += T
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\hydroponics\plant_genes.dm. ----------------------
/* Messes with slippery and other quirky stuff
/datum/plant_gene/trait/thorns
	// Adds glass-like caltrops to a plant
	name = "Thorny"
/datum/plant_gene/trait/thorns/on_new(obj/item/reagent_containers/food/snacks/grown/G, newloc)
	. = ..()
	// min dmg 3, max dmg 6, prob(70)
	G.AddComponent(/datum/component/caltrop, 3, 6, 70)
*/
/*
/datum/plant_gene/trait/spore_emission/on_flora_grow(obj/structure/flora/botany/BF)
	var/turf/T = get_turf(BF)
	var/obj/item/seeds/S = BF.myseed
	if(S && T)
		do_emission(S, T)
*/
//Jungle glows down below
/****Some extra modifiers to already existing traits****/
/**** moved from core code ****/
//Testing stuff
/*
/obj/item/seeds/test
	name = "pack of test seeds"
	desc = "These seeds grow into poppies."
	icon_state = "seed-poppy"
	species = "poppy"
	plantname = "Poppy Plants"
	product = /obj/item/reagent_containers/food/snacks/grown/poppy
	endurance = 100
	maturation = 1
	production = 1
	yield = 10
	potency = 50
	growthstages = 3
	growing_icon = 'icons/obj/hydroponics/growing_flowers.dmi'
	icon_grow = "poppy-grow"
	icon_dead = "poppy-dead"
	mutatelist = list(/obj/item/seeds/poppy/geranium, /obj/item/seeds/poppy/lily)
	reagents_add = list(/datum/reagent/drug/aphrodisiacplus = 0.2, /datum/reagent/drug/space_drugs = 0.05)
	genes = list(/datum/plant_gene/trait/plant_type/weed_hardy, /datum/plant_gene/trait/fragile, /datum/plant_gene/trait/foam, /datum/plant_gene/trait/squash, /datum/plant_gene/trait/spore_emission, /datum/plant_gene/trait/slip, /datum/plant_gene/trait/cell_charge, /datum/plant_gene/trait/territorial)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\hydroponics\seeds.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\hydroponics\grown\towercap.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\atmospheric_technician.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\blueshield.dm. ----------------------
///Subtype of CQC. Only used for the Blueshit.
///Prevents use if the Blueshit  is not on the bridge or the captain'soffice .
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\bridgeofficer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\brigdoc.dm. ----------------------
//	auto_deadmin_role_flags = DEADMIN_POSITION_SECURITY
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\captain.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\chief_engineer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\chief_medical_officer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\clown.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\command.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\head_of_personnel.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\head_of_security.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\peacekeeper.dm. ----------------------
/*
Peacekeeper Hypospray
*/
/* End Peacekeeper Hypo
*/
// Peacekeeper Bags
// Baton Beacon
// Peacekeeper Locker
// Station things
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\prisoner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\psychologist.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\quartermaster.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\research_director.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\security_officer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\service.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\station_engineer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\stowaway.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\jobs\job_types\_job_alt_titles.dm. ----------------------
// Command
// Engineering
// Service
// No additions for janitor
// Science
// Medical
// Security
// Cargo
// Prisoner
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\keybindings\keybind\communication.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\keybindings\keybind\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\keybindings\keybind\movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\language\signlanguage.dm. ----------------------
// Simply changes the icon to a proper one instead of it using the EAL's (which confuses people).
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\language\xenocommon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mapping\lavaland_jungle_gen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mapping\mapping_helpers\baseturf.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mentor\mentor_mouse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mentor\mentor_verbs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mining\equipment\kinetic_crusher.dm. ----------------------
//THIS FILE IS FOR THE CRUSHER!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mining\equipment\machine_vending.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mining\lavaland\necropolis_chests.dm. ----------------------
// Potion of flight
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\femclaw.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\inventory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\mob.dm. ----------------------
//pixelshift overrides
//Makes the protolocks able to be disabled
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\mob_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\mob_helpers.dm. ----------------------
// Modular-friendly way of adding new quirk-based inspect text
// Hijacks the function used for abductor examine
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\mob_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\say_vr.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\crew_manifest.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\dead.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\new_player.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\body_markings.dm. ----------------------
/******************************************
************ Furry Markings ***************
*******************************************/
// These are all color matrixed and applied per-limb by default. you MUST comply with this if you want to have your markings work --Pooj
// use the HumanScissors tool to break your sprite up into the zones easier.
// Although Byond supposedly doesn't have an icon limit anymore of 512 states after 512.1478, just be careful about too many additions.
//S.P.L.U.R.T Body Markings
/******************************************
************* Insect Markings *************
*******************************************/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\ears.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\frills.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\hair_head.dm. ----------------------
//Podpeople hair
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\horns.dm. ----------------------
//ripped from skyrat
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\legs_and_taurs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\snouts.dm. ----------------------
//mam snouts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\synthliz.dm. ----------------------
//Snouts
//antennae
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\tails.dm. ----------------------
//Mam tails
//Lizard tails
//Human tails
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\new_player\sprite_accesories\wings.dm. ----------------------
//decorative wings
//insect wings
// Dragon wings but using WINGCOLOR instead
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\dead\observer\observer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\emotes.dm. ----------------------
//Main code edits
// Living variant
// Check if audio emote can run
// Run audio emote
// SPLURT emotes
// At the moment of adding it I just realized there's Tesh test-merge going on, so I've added numeral in case if that gets merged in the long run.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\living.dm. ----------------------
/// Gender Change
// Intended only for silicons/robots (incl. pAI) and simple_animal code so far. This proc was made to somewhat ease up duplicated verb code.
// There's probably better way to do this but I am terrible at it --Nopeman
/// Toggle admin frozen
/// Toggle admin sleeping
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\living_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\living_mobility.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\living_movement.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\living_signals.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\login.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\logout.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\navigation.dm. ----------------------
/**
 * Finds nearest ladder or staircase either up or down.
 *
 * Arguments:
 * * direction - UP or DOWN.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\say.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\brain\brain_item.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\carbon.dm. ----------------------
// Liquid Panty Dropper effect
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\carbon_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\emote.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\human.dm. ----------------------
// This HUD is set based on client data. The above proc is often called before the mob has a client and therefore won't work. Login is thus the better option, correct me if this is a bad idea. - Casper
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\human_defense.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\human_defines.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\inventory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\physiology.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\update_icons.dm. ----------------------
// Function for updating back sprites
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\arachnid.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\ashwalker.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\ipc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\podpeople.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\shadekin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\spectrebot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\vampire.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\carbon\human\species_types\zombies2.dm. ----------------------
/* //striked out for now because I dont know what the fuck was planned here but this is breaking blood regain.
/mob/living/carbon/human/handle_blood()
	if(iszombie(src)) //We're basically pudding pops.
		return
	..()

/mob/living/carbon/get_status_tab_items()
	. = ..()
	var/obj/item/organ/heart/decayed_heart/decaying = getorgan(/obj/item/organ/heart/decayed_heart)
	if(decaying)
		. += "Current blood level: [blood_volume]/[BLOOD_VOLUME_MAXIMUM]."
		*/
// takes 30% more damage but doesn't crit
// Lighter than other zombies. Spaceproofed
// heavy and lumbering. 20%less brute/33%less burn. Slow and weak to the cold
//
//	to_chat(owner, span_alertalien("You are now a zombie! You claw and bite, turning your fellow crewmembers into friends that help spread the plague."))
//	to_chat(owner, span_alertwarning("You are a zombie. Please act like one. Letting the crew remove the tumor inside your brain is a dick move to whoever infected you. Please do not do it."))
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\silicon.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\pai\pai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\robot\dogborg_equipment.dm. ----------------------
/*
DOG BORG EQUIPMENT HERE
SLEEPER CODE IS IN game/objects/items/devices/dogborg_sleeper.dm !
*/
//Boop
//Delivery
//Tongue stuff
//Dogfood
//Defibs
// Pounce stuff for K-9
//pleasuremaw stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\robot\inventory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\robot\robot.dm. ----------------------
//Main code edits
/// Allows "cyborg" players to change gender at will - Modularised here
// FUNCTION MOVED TO living.dm AS PROC
// Slaver medical borg
// Slaver generic borg
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\silicon\robot\robot_modules.dm. ----------------------
/// Cargo Borgs! ///
/// End Cargo Borg ///
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\simple_animal.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\bot\medbot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\friendly\mouse.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\gremlin\gremlin.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\carrion.dm. ----------------------
//mob based off the game Carrion.
//replica sprite made by quotefox
//Move the sprite into position, cant use Pixel_X and Y, causes issues with the tenticle sprite!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\clockwork.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\clockworkmechanic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\clockworkranged.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\clockworktank.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\crazysci.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\cultleader.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\cultmelee.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\cultranged.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\dancer.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\deth.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\heavymaniac.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\spiderassault.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\deathclaw\deathclaw.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\deathclaw\funclaw.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\megafauna\blood_drunk_miner.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\megafauna\king_of_goats.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\megafauna\penguinhiero.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\mob\living\simple_animal\hostile\megafauna\sand.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\paperwork\pen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\photography\photos\album.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\photography\photos\photo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\power\cell.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\power\reactor\fluffed.dm. ----------------------
/*
This is a pre-destroyed nuclear reactor for the sake of mapping special fluff stuff.
Not actually a reactor, just uses the icon and irradiates the surrounding area a bit.
Nowhere else to really put this.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\power\reactor\rbmk.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\modpins.dm. ----------------------
// This checks that the user isn't on the station Z-level.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\ammunition\ballistic\pistol.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\ammunition\ballistic\smg.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\boxes_magazines\ammo_boxes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\boxes_magazines\external\automatic.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\boxes_magazines\external\pistol.dm. ----------------------
// Pistol Magazines
// Pistol Magazines for the Sec Tecfab, yes its just easier to put it here for my own Sanity - Radar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\boxes_magazines\internal\revolver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\boxes_magazines\internal\shotgun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\ballistic\automatic.dm. ----------------------
// PLEASE BE CAREFUL WITH THIS!!! -Radar
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\ballistic\pistol.dm. ----------------------
//gun parts
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\ballistic\revolver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\ballistic\shotgun.dm. ----------------------
// Rifles
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\energy\lasers.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\energy\special.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\guns\misc\grenade_launcher.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\projectile\bullets\cannonball.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\projectile\bullets\rifle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\projectile\bullets\shotgun.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\projectile\bullets\smg.dm. ----------------------
//I am an idiot, fucking coding oversights. If one ever makes a child of a object, MAKE SURE TO ADD IN VALUES TO ADJUST FROM PARENT 	stamina = 30 will be a reminder to that.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\projectiles\projectile\energy\laser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\machinery\chem_dispenser.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\alcohol_reagents.dm. ----------------------
//SPLURT drinks
// Liquid Panty Dropper drink effect
//This drink gives the combined benefits of Stimulants, Regenerative Jelly, and Commander and Chief, and a mood buff similar to Copium; at least to an extent.
// ~( Ported from TG )~
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\cit_reagents.dm. ----------------------
// The Cum Chalice
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\drink_reagents.dm. ----------------------
//Edits of main code
//Own
// ~( Ported from TG )~
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\drug_reagents.dm. ----------------------
// Hexacrocin
// Hexacamphor
//Own stuff
// Variant of Copium created by genital fluids
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\enlargement.dm. ----------------------
//Main code edits
//Own stuff
//Belly inflator yes
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\food_reagents.dm. ----------------------
// ~( Ported from TG )~
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\reagents\other_reagents.dm. ----------------------
//incubus and succubus additions below
// This is used by 'alternative food' quirks
// It should not be used for any other purpose
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\recipes\drugs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\chemistry\recipes\lewd.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\borghydro.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\bottle.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\hypospray.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\hypovial.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\pill.dm. ----------------------
//Main code edits
//Own stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\reagents\reagent_containers\spray.dm. ----------------------
// Custom interaction to prevent wasting the item
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\AI_module_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\autoylathe_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\biogenerator_designs.dm. ----------------------
//Idk who jessie is
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\bluespace_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\limbgrower_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\mecha_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\mechfabricator_designs.dm. ----------------------
//Savannah-Ivanov
/////////////////////
/////Synth Organs////
/////////////////////
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\medical_designs.dm. ----------------------
//Cybernetic organs
// Derivative of glow eyes
//Cybernetic implants
//Prosthetics
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\misc_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\power_designs.dm. ----------------------
//Jessie Added this
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\stock_parts_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\tool_designs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\autolathe_desings\autolathe_designs_sec_and_hacked.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\designs\machine_designs\machine_designs_all_misc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\biotech_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\bluespace_nodes.dm. ----------------------
//Jessie Added this
// Bags of holding node
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\janitor_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\mecha_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\medical_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\nanites_nodes.dm. ----------------------
// Harmful nanites node
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\techweb\nodes\robotic_nodes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\artifact.dm. ----------------------
//
//
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\artifact_list.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\strange_rock.dm. ----------------------
//
/* this is for when we have multiz lavaland. Replace the walls with these.
/turf/closed/mineral/random/volcanic/strangerock
	mineralSpawnChanceList = list(
		/turf/closed/mineral/uranium/volcanic = 3, /turf/closed/mineral/diamond/volcanic = 1, /turf/closed/mineral/gold/volcanic = 8, /turf/closed/mineral/titanium/volcanic = 8,
		/turf/closed/mineral/silver/volcanic = 20, /turf/closed/mineral/plasma/volcanic = 30, /turf/closed/mineral/bscrystal/volcanic = 1, /turf/closed/mineral/gibtonite/volcanic = 2,
		/turf/closed/mineral/iron/volcanic = 95, /turf/closed/mineral/strange = 15)
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\tools.dm. ----------------------
//
//
// Eventually, make it work on afterattack(atom/target, mob/user , proximity)
// I dont want to take more time currently though.
// Would have to create a list and then check if the item is in the list.
// Storage: Belt and Locker and Bag
//
//
//Research WEB
//Research DESIGNS
// Designs for tools
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\amari.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\gelthi.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\jurlmah.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\nofruit.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\shand.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\surik.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\telriis.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\thaadra.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\vale.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\research\xenoarch\xenobotany\grown\vaporsac.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\resize\smallsprite_action.dm. ----------------------
//Technically the same as /datum/action/small_sprite but for our macro players (I'm one of them)
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\ruins\objects_and_mobs\ash_walker_den.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\ruins\objects_and_mobs\radio.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\ruins\spaceruin_code\hilbertshotel.dm. ----------------------
// Better SPLURT version of hilbert's
// Empty room - different due to the dimensions of the updated map
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\shuttle\slaver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\smithing\anvil.dm. ----------------------
//Manly anvil stuff
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\smithing\finished_items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\smithing\smithed_items.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\spell\spell_types\conjure.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\bodyparts\_bodyparts.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\augments_arms.dm. ----------------------
//Hyper stuff
// Synth power cord interaction override
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\augments_eyes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\ears.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\eyes.dm. ----------------------
// On add organ
// On remove organ
// Organ examine text
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\liver.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\lungs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\stomach.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\surgery\organs\tongue.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\tgs\chat_commands.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\toys\cards.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\uplink\uplink_items\uplink_devices.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\uplink\uplink_items\uplink_reactor.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\mecha_construction_paths.dm. ----------------------
//SAVANNAH-IVANOV
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\mecha_parts.dm. ----------------------
////////// Phazon
// Savannah-Ivanov
///////// Circuitboards
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\mecha_wreckage.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\mech_fabricator.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\_mecha.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vehicles\mecha\combat\savannah_ivanov.dm. ----------------------
///how much time between charge_level going up by 1
///enough charge level to take off, basically done charging
///how much time you're in the air
/**
 * ## Savannah-Ivanov!
 *
 * A two person mecha that delegates moving to the driver and shooting to the pilot.
 * ...Hilarious, right?
 */
///Savannah Skyfall
/**
 * ## skyfall_charge_loop
 *
 * The actual skyfall loop itself. Repeatedly calls itself after a do_after, so any interruptions will call abort_skyfall and end the loop
 * the other way the loop ends is if charge level (var it's ticking up) gets to SKYFALL_CHARGELEVEL_LAUNCH, in which case it ends the loop and does the ability.
 */
/**
 * ## begin_landing
 *
 * Called by skyfall_charge_loop after some time if it reaches full charge level.
 * it's just the animations of the mecha coming down + another timer for the final landing effect
 */
/**
 * ## land
 *
 * Called by skyfall_charge_loop after some time if it reaches full charge level.
 * it's just the animations of the mecha coming down + another timer for the final landing effect
 */
/**
 * ## abort_skyfall
 *
 * Called by skyfall_charge_loop if the charging is interrupted.
 * Applies cooldown and resets charge level
 */
/**
 * ## reset_button_icon
 *
 * called after an addtimer when the cooldown is finished with the skyfall, resets the icon
 */
/**
 * ## reset_button_icon
 *
 * called after an addtimer when the cooldown is finished with the ivanov strike, resets the icon
 */
/**
 * ## start_missile_targeting
 *
 * Called by the ivanov strike datum action, hooks signals into clicking to call drop_missile
 * Plus other flavor like the overlay
 */
/**
 * ## end_missile_targeting
 *
 * Called by the ivanov strike datum action or other actions that would end targetting
 * Unhooks signals into clicking to call drop_missile plus other flavor like the overlay
 */
///signal called from clicking with no equipment
///signal called from clicking with equipment
/**
 * ## drop_missile
 *
 * Called via intercepted clicks when the missile ability is active
 * Spawns a droppod and starts the cooldown of the missile strike ability
 * arguments:
 * * target_turf: turf of the atom that was clicked on
 */
//misc effects
///a simple indicator of where the skyfall is going to land.
///called when the mecha moves
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\autodrobe.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\barkbox.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\boozeomat.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\clothesmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\engineering.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\kinkmate.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\modularpc.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\security.dm. ----------------------
//do not map these in anywhere but if you do, Central command only!!! These are for Admin spawn only!!!!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\snack.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\modules\vending\wardrobes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\tgui.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\character_directory.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\global_lewd.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\mapping.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\mobs.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\pregnancy.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_globalvars\lists\wendigo.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\observer.dm. ----------------------
// I'm copy/pasting this functionality so I can override shit without it being a major pain
// I'm putting this here because honestly i'm too lazy to find the thing i need
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\alien.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\alien_larva.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\hud.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\human.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\new_player.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\pai.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\qareenhud.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\robot.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_onclick\hud\screen_objects.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\_rendering\fullscreen\fullscreen.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\icons.dm. ----------------------
/*
 * Creates animation that turns current icon into result appearance from top down.
 *
 * result_appearance - End result appearance/atom/image
 * time - Animation duration
 * transform_overlay - Appearance/atom/image of effect that moves along the animation - should be horizonatally centered
 * reset_after - If FALSE, filters won't be reset and helper vis_objects will not be removed after animation duration expires. Cleanup must be handled by the caller!
 */
/*
 * Resets filters and removes transformation animations helper objects from vis contents.
*/
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\reagents.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\spawns.dm. ----------------------
/**
 * One proc for easy spawning of pods in the code to drop off items before whizzling (please don't proc call this in game, it will destroy you)
 *
 * Arguments:
 * * specifications: special mods to the pod, see non var edit specifications for details on what you should fill this with
 * Non var edit specifications:
 * * target = where you want the pod to drop
 * * path = a special specific pod path if you want, this can save you a lot of var edits
 * * style = style of the pod, defaults to the normal pod
 * * spawn = spawned path or a list of the paths spawned, what you're sending basically
 * Returns the pod spawned, in case you want to spawn items yourself and modify them before putting them in.
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\text.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\unsorted.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\_cit_helpers.dm. ----------------------
//Genitals and arousals lists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\modular_splurt\code\__HELPERS\_lists.dm. ----------------------
// Please tell me if there already is a macro for that
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\tools\HubMigrator\HubMigrator.dm. ----------------------
//Misc Medal hub IDs
//Boss medals
// Medal hub IDs for boss medals (Pre-fixes)
// Medal hub IDs for boss-kill scores
//Migration script generation
//Replace hub information and fire to generate hub_migration.sql script to use.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\tools\Redirector\Configurations.dm. ----------------------
/*
	Written by contributor Doohl for the /tg/station Open Source project, hosted on Google Code.
	(2012)
 */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\tools\Redirector\Redirector.dm. ----------------------
/*
	Written by contributor Doohl for the /tg/station Open Source project, hosted on Google Code.
	(2012)
 */
/* TODO: work on server selection for detected admins */
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\tools\Redirector\textprocs.dm. ----------------------
/*
 * Written by contributor Doohl for the /tg/station Open Source project, hosted on Google Code.
 *	(2012)
 *
 *	NOTE: The below functions are part of BYOND user Deadron's "TextHandling" library.
 *		[ http://www.byond.com/developer/Deadron/TextHandling ]
 */
/// Reading files
/// Replacing text
///Prefix checking
///Suffix checking
/// Turning text into lists
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\tools\SS13SmoothingCutter\Cutter.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\boxedinstation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\boxstation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\cogstation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\deltastation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\festivestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\kilostation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\lambdastation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\layeniastation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\metastation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\multiz_debug.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\omegastation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\pubbystation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\runtimestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\smexistation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\smolstation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\snaxi.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\spookystation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\syndicatestation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\taustation.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\_basemap.dm. ----------------------
//#define LOWMEMORYMODE //uncomment this to load centcom and runtime station and thats it.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\CogStation\job_changes.dm. ----------------------
//Medical
//Science
//Civilian
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\FestiveBall\doorButtonOrganizer.dm. ----------------------
// This will let me avoid having to edit all of these variables in every instance, while also avoiding var-editing.
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\OmegaStation\job_changes.dm. ----------------------
//custom access for some jobs. pasted together from ministation.
//Command
//Security
//Medbay
//Engineering
//Science
//Cargo
//Service
//Civilian
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\PubbyStation\job_changes.dm. ----------------------
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\SpookyStation\halloweenPersiWork.dm. ----------------------
//Halloween Fluff Papers!
//Dorm Buttons
//Dorm Doors
//Luxury Dorm Shutters
//This is just so I don't have to mass varedit!
-- FILE: C:\Users\Nicholas\Desktop\Nick\Development\BYOND\Fungus\_maps\map_files\SpookyStation\job_changes.dm. ----------------------
